<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Moving</title>
  
  <subtitle>Follow ur heart</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ZQ-jhon.github.io/"/>
  <updated>2020-11-25T04:41:54.553Z</updated>
  <id>https://ZQ-jhon.github.io/</id>
  
  <author>
    <name>ZQ-jhon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好久不见</title>
    <link href="https://ZQ-jhon.github.io/2020/11/22/%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/"/>
    <id>https://ZQ-jhon.github.io/2020/11/22/好久不见/</id>
    <published>2020-11-22T00:31:27.000Z</published>
    <updated>2020-11-25T04:41:54.553Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>很久没有打理博客了，都生灰了。。。<br>今天登录上来，才发现原来的 Valine 评论系统不好使了，白嫖的开发版由于 1 个月没有活跃度，都被 archive 了，惨~<br>遂修好之，希望以后能经常保持输出的频率。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;很久没有打理博客了，都生灰了。。。&lt;br&gt;今天登录上来，才发现原来的 Valine 评论系统不好使了，白嫖的开
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安装 VMWare for MacOS 并使用 随航(Sidecar) 功能</title>
    <link href="https://ZQ-jhon.github.io/2020/03/29/Sidecar/"/>
    <id>https://ZQ-jhon.github.io/2020/03/29/Sidecar/</id>
    <published>2020-03-29T19:03:00.000Z</published>
    <updated>2020-11-25T04:41:54.525Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文记录了在 VMWare 下的 MacOS 使用 Sidecar 的种种踩坑记录，希望能对你有所帮助。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol><li>科学上网环境</li><li>一个可以用来 随航 的硬件设备(iPad/iPhone)</li></ol><h2 id="安装-VMWare-for-MacOS-并使用-随航-Sidecar-功能"><a href="#安装-VMWare-for-MacOS-并使用-随航-Sidecar-功能" class="headerlink" title="安装 VMWare for MacOS 并使用 随航(Sidecar) 功能"></a>安装 VMWare for MacOS 并使用 随航(Sidecar) 功能</h2><h3 id="VMWare安装教程"><a href="#VMWare安装教程" class="headerlink" title="VMWare安装教程"></a>VMWare安装教程</h3><p>这个 up 主讲的比较细，跟着一步一步做就好了 <a href="https://www.bilibili.com/video/BV1a7411e7Pq" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1a7411e7Pq</a></p><h3 id="镜像地址"><a href="#镜像地址" class="headerlink" title="镜像地址"></a>镜像地址</h3><p>MacOS 10.15 镜像：<a href="https://www.mediafire.com/file/7wm2251an4c2n64/macOS_Catalina_ISO_By_Techbland.iso/file" target="_blank" rel="noopener">https://www.mediafire.com/file/7wm2251an4c2n64/macOS_Catalina_ISO_By_Techbland.iso/file</a><br>由于 google drive 上下载镜像比较蛋疼，所以我又找了一个比较 nice 的镜像，可以用迅雷下载（迅雷中打开代理，设置 sockts5 科学代理）速度杠杠的:</p><img src="/2020/03/29/Sidecar/xunlei.png"><h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><h3 id="VMWare-设置"><a href="#VMWare-设置" class="headerlink" title="VMWare 设置"></a>VMWare 设置</h3><p>随航 其实支持两种连入方式：</p><ol><li>同一 wifi</li><li>lightning / type-c 连接</li></ol><p>由于 VMWare 中，设置的虚拟机网络为继承主机网络，因此，这里采用方式 2</p><p>首先，硬件设置中，usb 接口调整为 2.0：</p><img src="/2020/03/29/Sidecar/1.png"><p>插入 usb, 看 macOS 能否识别/读取 iPad/iPhone。<br>在插入外部设备的时候，VMWare 会弹出提示，这里要选择连接到虚拟机：<br><img src="/2020/03/29/Sidecar/4.png"><br>如果不能，在 windows 上下载 iTnues 并登陆 iCloud，信任设备，毕竟 VMWare 中的虚拟机也是享用的宿主机的端口，宿主机倘若无法识别，那虚拟机自然也识别不了。<br>如果一切就绪，那么 Mac 上应该显示如下:<br><img src="/2020/03/29/Sidecar/2.png"><br><img src="/2020/03/29/Sidecar/3.png"></p><h2 id="Sidecar-故障排查"><a href="#Sidecar-故障排查" class="headerlink" title="Sidecar 故障排查"></a>Sidecar 故障排查</h2><p>可以正常识别后，发现 iPad 只显示控制栏，主要的显示区域是黑的:<br><img src="/2020/03/29/Sidecar/6.jpg"></p><p>于是，google 关键词：“vmware cannot use sidecar”</p><p>得到如下结果：<br><a href="https://forums.macrumors.com/threads/sidecar-has-anyone-got-it-working.2184104/page-11?post=27807001#post-27807001" target="_blank" rel="noopener">https://forums.macrumors.com/threads/sidecar-has-anyone-got-it-working.2184104/page-11?post=27807001#post-27807001</a></p><p>大致意思就是，首先需要关闭苹果的系统完整性保护（SIP）具体的关闭步骤，请看<br><a href="https://www.cnblogs.com/FashionDoo/p/10536756.html" target="_blank" rel="noopener">在 VMWare 中启用恢复模式</a><br>找到 Recvoer 开头的 EFI 文件，回车即可：<br><img src="/2020/03/29/Sidecar/recovery.png"><br><img src="/2020/03/29/Sidecar/efi.png"></p><p>在 Recover 的命令行中输入:<br><code>csrutil disable</code> 如果出现下图，那就是 OK 了<br><img src="/2020/03/29/Sidecar/8.png"></p><p>得到成功的 stout 后，继续输入 reboot 重启。<br>（备注：如果你不能 <code>sudo mount -uw</code> 那么请先 <code>su sudo</code>）</p><p>关闭以后，发现 System/Library/PrivateFrameworks/SideCarCore.framework/Versions/A/ 不具备写入权限，你 download 下来的 SidecarCore 无法写入到该目录，也无法通过拖拽等方式移入 chown 也不管用，一番 google 后，来到了这里：<br><a href="https://github.com/pookjw/SidecarPatcher#how-to-patch" target="_blank" rel="noopener">https://github.com/pookjw/SidecarPatcher#how-to-patch</a></p><p>跟着 How To Patch 一步一步做，结果一大堆报错：<a href="11.png">!11</a><br>来到 issue 区，发现不止我有这个问题，开发者说了，应该这么去排查 ‘Failed to load module’ 的问题：<br><a href="https://github.com/pookjw/SidecarPatcher/issues/49#issuecomment-604580909" target="_blank" rel="noopener">https://github.com/pookjw/SidecarPatcher/issues/49#issuecomment-604580909</a></p><p>安装 XCODE 时，提示无法安装：<br><img src="/2020/03/29/Sidecar/9.png"><br>系统必须是 10.15.2 以上（这个跟 VMWare 安装的镜像版本相关，如果有 10.15.2 以上的镜像，就别用这个<a href="#镜像地址">镜像</a>了）</p><p>到了这一步，有两种处理方式：</p><ol><li>（推荐）直接更新系统, 但确保你的安装盘总空间在 70 G 以上，否则会出现存储空间不足的提示，毕竟一个 update package 得 17 G 左右。<br>更新后的系统：<img src="/2020/03/29/Sidecar/newest.png"> 这时，打开 AppStore 就可以正常的下载 Xcode 了</li><li>（不推荐）注册海外 apple id，去 <a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">https://developer.apple.com/download/more/</a> 下载 xcode 历史版本</li></ol><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>根据你自己的 Sidecar 设备没选择好对应的 SidecarCore 即可，Apple 是根据 blacklist 来屏蔽一些老设备的，具体请看：</p><p><a href="https://github.com/ben-z/free-sidecar" target="_blank" rel="noopener">https://github.com/ben-z/free-sidecar</a><br><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文记录了在 VMWare 下的 MacOS 使用 Sidecar 的种种踩坑记录，希望能对你有所帮助。&lt;/p
      
    
    </summary>
    
    
      <category term="vmware" scheme="https://ZQ-jhon.github.io/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>cvm-debug</title>
    <link href="https://ZQ-jhon.github.io/2020/02/11/cvm-debug/"/>
    <id>https://ZQ-jhon.github.io/2020/02/11/cvm-debug/</id>
    <published>2020-02-11T17:52:27.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><h2 id="ssh-public-key"><a href="#ssh-public-key" class="headerlink" title="ssh public key"></a>ssh public key</h2><p>当重新 build 了 id_rsa.pub 为什么<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> xxxx@github.git</span><br></pre></td></tr></table></figure><p></p><p>还是会报 permission denied 或者 Please make sure you have the correct access rights and the repository exists 呢？</p><p>于是，经过尝试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>发现还是不对。</p><h2 id="build-的姿势不对"><a href="#build-的姿势不对" class="headerlink" title="build 的姿势不对"></a>build 的姿势不对</h2><p>首先，在执行 git 相关的命令时，最好不要使用 sudo, github 官方也给出了指导<br><a href="https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey" target="_blank" rel="noopener">官方建议</a><br>so, 在 linux 环境下，最好的方式就是直接以 root 的身份来操作目录和 cli：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo passwd</span><br><span class="line">$ su root</span><br></pre></td></tr></table></figure><p>这样，每次执行任何命令的时候，都不需要烦人的 sudo 了</p><p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 &lt;a href=&quot;https://zq-jhon.g
      
    
    </summary>
    
    
      <category term="ubuntu" scheme="https://ZQ-jhon.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Base64 encode decode image</title>
    <link href="https://ZQ-jhon.github.io/2019/09/06/base64-encode-decode/"/>
    <id>https://ZQ-jhon.github.io/2019/09/06/base64-encode-decode/</id>
    <published>2019-09-06T17:33:01.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文章原始创作地址：<a href="https://blog.csdn.net/qq_20264891/article/details/100583761" target="_blank" rel="noopener">https://blog.csdn.net/qq_20264891/article/details/100583761</a></p><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近在修福报，深深觉得，一个程序员或者成年人，最大的敌人就是时间，没有时间，就会陷入焦虑的怪圈，一直出不来。</p><h4 id="What-is-Base64"><a href="#What-is-Base64" class="headerlink" title="What is Base64"></a>What is Base64</h4><p>Base64 是一组相似的二进制到文本（binary-to-text）的编码规则，使得二进制数据在解释成 radix-64 的表现形式后能够用 ASCII 字符串的格式表示出来。Base64 这个词出自一种 MIME 数据传输编码。 —– from <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding" target="_blank" rel="noopener">mdn</a></p><p>对于前端而言，Base64 使用范围广泛，可以对 ASCII 码进行编码，也是作为 雪碧图 的一种备选方案，即增加运行时的体积，但是减少了静态资源的请求数。对图片的 Base64 编码见 <a href="#Advanced">Advanced</a></p><h4 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h4><p>浏览器 API</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> encodedData = <span class="built_in">window</span>.btoa(<span class="string">"Hello, world"</span>);  <span class="comment">// 此时 encodedData = 'SGVsbG8sIHdvcmxk'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decodedData = <span class="built_in">window</span>.atob(encodedData);    <span class="comment">// 此时 decodedData = ‘Hello, world’</span></span><br></pre></td></tr></table></figure><h4 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h4><p>对于常见的 ASCII 可以解析，那么对于图片，自然有另外的方法：</p><p><strong>法一： 通过 fetch 图片的 response.arrayBuffer() 来获取二进制缓冲流来进行编码。</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> image = <span class="string">`https://www.xxxxx.xxxx/abc.png`</span>;</span><br><span class="line"></span><br><span class="line">fetch(image).then(<span class="function"><span class="params">response</span> =&gt;</span> response.buffer())</span><br><span class="line"></span><br><span class="line">            .then(<span class="function"><span class="params">buffer</span> =&gt;</span> buffer.toString(<span class="string">"base64"</span>));</span><br></pre></td></tr></table></figure><p>目前 NPM 上最活跃的 imageToBase64 中, 是这么写的： <a href="https://github.com/renanbastos93/image-to-base64/blob/master/image-to-base64.js#L43" target="_blank" rel="noopener">imageToBase64</a></p><p><strong>法二：通过 Canvas</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 大致思路:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'webgl'</span>).canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><p>第一种，通过图片 url 来获取 base64</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlBase64</span>(<span class="params">url, ext, callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> Image;</span><br><span class="line"></span><br><span class="line">    img.crossOrigin = <span class="string">'Anonymous'</span>;</span><br><span class="line"></span><br><span class="line">    img.src = url;</span><br><span class="line"></span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        canvas.height = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">        canvas.width = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">        ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">85</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dataURL = canvas.toDataURL(<span class="string">"image/"</span> + ext);</span><br><span class="line"></span><br><span class="line">        callback.call(<span class="keyword">this</span>, dataURL);</span><br><span class="line"></span><br><span class="line">        canvas = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种，parameter 直接是 image</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImageBase64</span>(<span class="params">img, ext</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);   <span class="comment">//创建canvas DOM元素，并设置其宽高和图片一样</span></span><br><span class="line"></span><br><span class="line">    canvas.width = img.width;</span><br><span class="line"></span><br><span class="line">    canvas.height = img.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height); <span class="comment">//使用画布画图</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dataURL = canvas.toDataURL(<span class="string">"image/"</span> + ext);  <span class="comment">//返回的是一串Base64编码的URL并指定格式</span></span><br><span class="line"></span><br><span class="line">    canvas = <span class="literal">null</span>; <span class="comment">//释放</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dataURL;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文章原始创作地址：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/ar
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://ZQ-jhon.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>正则复习</title>
    <link href="https://ZQ-jhon.github.io/2019/06/20/regExp/"/>
    <id>https://ZQ-jhon.github.io/2019/06/20/regExp/</id>
    <published>2019-06-20T19:56:27.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文章原始创作地址：<a href="https://blog.csdn.net/qq_20264891/article/details/92743420" target="_blank" rel="noopener">https://blog.csdn.net/qq_20264891/article/details/92743420</a></p><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直发现我是个野路子，在学完 TS 和 Express 后，才回过头来想巩固一下 正则 的知识，不过话说回来，有了 TS 一些可选参数，以及 后端框架的路由匹配机制后，其实对于正则的理解是有一定作用的。类比这些概念时，发现有太多太多的相似之处，下面将会例举。<br>所以说，贴近标准，跟随标准（世界大厂）是最最最重要的，像小程序这样反 URL 透明可见的精神的产物，站在非商业的角度来看，确实没有任何价值。扯远了。。。<br>下面开始用自己的话来进行盘点：</p><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>我们在匹配字符串中某个 子段 时，需要有足够的数量去进行限制，这样才能保证匹配到的结果足够准确。<br>常见的量词有：</p><ol><li><strong>?</strong> =&gt; 意思为：可选 0 或者 1 ，跟 ts 函数的可选参数一样</li><li><strong>+</strong> =&gt; 意思为： 1个或者多个</li><li><strong>*</strong> =&gt; 意思为：通配符，0个或者任意个</li></ol><h3 id="Range-区间"><a href="#Range-区间" class="headerlink" title="Range 区间"></a>Range 区间</h3><p>例如，我想匹配 1~5 个 ‘a’ ， 用 【量词】中的哪个都不合适，这时候就应该有一个区间的概念来进行约束：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/^a&#123;1,5&#125;/i</span>;</span><br><span class="line"><span class="string">'a'</span>.match(reg);  <span class="comment">// 匹配 1 个 a , ["a", index: 0, input: "a", groups: undefined]</span></span><br><span class="line">...</span><br><span class="line">reg.test(<span class="string">'aaaaa'</span>); <span class="comment">// 匹配 5 个 ,["aaaaa", index: 0, input: "aaaaa", groups: undefined]</span></span><br><span class="line">reg.test(<span class="string">'aaaaaa'</span>); <span class="comment">// 只能匹配到 5 个 ["aaaaa", index: 0, input: "aaaaaaaaa", groups: undefined]</span></span><br></pre></td></tr></table></figure><p></p><p>可见，{ } 中的边界，是数学定义上的 <strong>左右闭合区间。</strong></p><p>另外，还有一种区间，先看下实例：<br>[a-z] 代表匹配 a-z 的小写字母，[A-Z] 匹配 A 的大写字母。这些用 “-” 来表示的字符集，都是通过 <strong>ASCII 码</strong> 来进行排序的。<br>举个 🌰：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/([a-z][A-Z])&#123;1,2&#125;/</span>;</span><br><span class="line">reg.test(<span class="string">'aZ'</span>); <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'aBcccadsadsad'</span>) <span class="comment">// true 匹配到了一个</span></span><br></pre></td></tr></table></figure><p></p><h3 id="反向字符集"><a href="#反向字符集" class="headerlink" title="反向字符集"></a>反向字符集</h3><p>例如 <code>[a-z]</code> 是匹配 a-z 的字母， 那么 <code>[^a-z]</code> 相当于不匹配小写字母。<br>举个例子：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`abcdef`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/[abcde]/</span>;   =&gt; 匹配 <span class="string">`abcde`</span>， 没 <span class="string">`f`</span></span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/[abcde]/</span>   =&gt; 只匹配 <span class="string">`f`</span></span><br></pre></td></tr></table></figure><p></p><h3 id="内置特殊匹配器"><a href="#内置特殊匹配器" class="headerlink" title="内置特殊匹配器"></a>内置特殊匹配器</h3><p>为了不让广大开发者写出太过于雷人的代码，也是内置了许多匹配器：</p><ol><li>\b 匹配单词边界 \B 匹配非单词边界</li><li>\w 匹配字母 \W 匹配非字母</li><li>\d 匹配数字 \D 匹配非数字</li><li>其他制表符和换行符等,例如 \r, \t ,\v 等</li></ol><h3 id="贪婪和非贪婪匹配"><a href="#贪婪和非贪婪匹配" class="headerlink" title="贪婪和非贪婪匹配"></a>贪婪和非贪婪匹配</h3><p>贪婪顾名思义，就是尽可能多的匹配。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不贪婪</span></span><br><span class="line"><span class="keyword">const</span> exampleStr = <span class="string">`RegExp is very interesting!`</span>;</span><br><span class="line">/[a-zA-Z]+?<span class="regexp">/  =&gt; 只匹配 'R'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 缺省则为贪婪模式</span></span><br><span class="line"><span class="regexp">/</span>[a-zA-Z]+<span class="regexp">/ =&gt; 匹配 'RegExp'</span></span><br></pre></td></tr></table></figure><p></p><h3 id="四个-flag"><a href="#四个-flag" class="headerlink" title="四个 flag"></a>四个 flag</h3><ol><li>g 全局</li><li>m 多行</li><li>i 不分大小写</li><li>y 粘性(sticky)</li></ol><p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文章原始创作地址：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/ar
      
    
    </summary>
    
    
      <category term="正则" scheme="https://ZQ-jhon.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>ES7 decorator 深入探析</title>
    <link href="https://ZQ-jhon.github.io/2019/06/13/ES7%20decorator%20%E6%B7%B1%E5%85%A5%E6%8E%A2%E6%9E%90/"/>
    <id>https://ZQ-jhon.github.io/2019/06/13/ES7 decorator 深入探析/</id>
    <published>2019-06-13T22:23:00.000Z</published>
    <updated>2020-11-25T04:41:54.521Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文章原始创作地址：<a href="https://blog.csdn.net/qq_20264891/article/details/91357985" target="_blank" rel="noopener">https://blog.csdn.net/qq_20264891/article/details/91357985</a></p><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>一直享受着 Anuglar 和 Nest 的红利，上来就是 <code>@Component(...)</code> 或者 <code>@Controller(...)</code>，自己却没有实际的探究过背后的原理。于是今天想好好总结一下，沉淀沉淀。</p><h3 id="前置条件（es5-原理）"><a href="#前置条件（es5-原理）" class="headerlink" title="前置条件（es5 原理）"></a>前置条件（es5 原理）</h3><p>之前看过红宝书，第六章提到过，js 对象的属性有几个特性：</p><ol><li>[[configurable]] 是否可配置</li><li>[[enumerable]] 是否可枚举</li><li>[[writeble]] 是否可修改值</li><li>[[value]] 写入的值是啥</li></ol><p><em>四个配置项都为 boolean 类型。</em><br>这四个配置联合起来有一个名字，叫做<strong>对象属性的描述符(descriptor)</strong><br>其中，writeble 和 value 还有另外一个名字， <code>setter</code> 和 <code>getter</code> 访问器）。<br>上代码：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'a'</span>, &#123;</span><br><span class="line">value: <span class="number">1</span>,</span><br><span class="line">writeble: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 1</span></span><br><span class="line">obj.a = <span class="number">3</span>; <span class="comment">// 修改 a 属性的值</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**====================另一种写法====================*/</span></span><br><span class="line"><span class="keyword">const</span> d = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(d , <span class="string">'name'</span> &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="number">1</span>&#125;,</span><br><span class="line">set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// &#123;&#125; 注意！！！！这里跟 writeble 和 value 不太一样，这里打印出来的对象，是没有显示 name 属性的！！！但是访问可以访问出来</span></span><br><span class="line">d.name; <span class="comment">// 1</span></span><br><span class="line">d.name = <span class="number">3</span>; <span class="comment">// 尝试修改 name 属性 </span></span><br><span class="line">d.name; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p></p><p>我们发现，配置了可写入项为 false 时，我们就无法去修改对象属性的值了，有点像冻结的意思。刚好，JS 有个 <code>Object.freeze()</code>， 来看一下<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = &#123;<span class="attr">name</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.freeze(c);</span><br><span class="line">c.name = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>发现和我们自己去配置 <code>writeble: false</code> 效果相同。不信？来验证一下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(c);</span><br><span class="line"><span class="comment">// 返回： </span></span><br><span class="line">&#123;</span><br><span class="line"> name: &#123;</span><br><span class="line"> configurable: <span class="literal">false</span></span><br><span class="line"> enumerable: <span class="literal">true</span></span><br><span class="line"> value: <span class="number">1</span></span><br><span class="line"> writable: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="ES6-还要这么写吗？"><a href="#ES6-还要这么写吗？" class="headerlink" title="ES6 还要这么写吗？"></a>ES6 还要这么写吗？</h3><p>不用。直接用<code>装饰器 decorator</code>来写。</p><h4 id="第一种，直接装饰-class，"><a href="#第一种，直接装饰-class，" class="headerlink" title="第一种，直接装饰 class，"></a>第一种，直接装饰 class，</h4><p>作用： 给类增加动态属性，该动态属性并不会被继承，只能作为 <strong>被装饰类</strong> 的 静态属性。<br>注意： 给类添加静态属性的这种行为，是在 <strong>编译时</strong> 发生的！所以说：<br><strong>装饰器的本质就是编译时运行的函数</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFlag</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">object.flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@addFlag</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>()</span>&#123;&#125;</span><br><span class="line">Foo.flag <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 来个实例</span></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="keyword">new</span> Foo();</span><br><span class="line">f1.flag <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p></p><h4 id="第二种，装饰属性"><a href="#第二种，装饰属性" class="headerlink" title="第二种，装饰属性"></a>第二种，装饰属性</h4><p>装饰器会在 <code>Object.defineProperty</code> 之前执行，也就是拦截默认的访问修饰符。<br>举个例子:<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSDN markdown 编辑器 为什么不支持 typescript 高亮？无语...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameEqual3</span>(<span class="params">object, key, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">    descriptor.value = <span class="number">3</span>;</span><br><span class="line">    descriptor.writable = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @nameEqual3</span><br><span class="line">    name() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p></p><p>可见其效果。<br>也支持传参，如下代码所示，请仔细阅读注释：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰器函数 (用闭包来封装一下)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sign</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, name, descriptor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  这里的 value 在我看来，更像是一个 getter, 所以可以直接被赋值成一个函数</span></span><br><span class="line"><span class="comment">     *  类似于：</span></span><br><span class="line"><span class="comment">     *  descriptor = &#123;</span></span><br><span class="line"><span class="comment">     *     get: function()&#123; return this.value &#125; </span></span><br><span class="line"><span class="comment">     *  &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> oldValue = descriptor.value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里的 args 实际上就是装饰器在运行时，挂载的函数的入参，下面的 log 日志会证明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`args =&gt;`</span>, args);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`标记 <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span> oldValue.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  @sign(<span class="number">1</span>)</span><br><span class="line">  method(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化和调用</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.method(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"> args =&gt; [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"> 标记 <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><h4 id="第三种，装饰器的高级用法（链式调用-combine-以及-mixin"><a href="#第三种，装饰器的高级用法（链式调用-combine-以及-mixin" class="headerlink" title="第三种，装饰器的高级用法（链式调用, combine 以及 mixin)"></a>第三种，装饰器的高级用法（链式调用, combine 以及 mixin)</h4><h5 id="1-链式（连续）"><a href="#1-链式（连续）" class="headerlink" title="1.链式（连续）"></a>1.链式（连续）</h5><p>首先来看链式（连续）调用，这次多加一个装饰器，并且继续通过打印的方式来查看下调用的顺序：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 装饰器函数 再 封装一层</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mark</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 真正的装饰器函数以闭包形式返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj, target, descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不破坏原 getter 函数</span></span><br><span class="line">    <span class="keyword">const</span> old = descriptor.value;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">    <span class="keyword">return</span> descriptor.value = <span class="function"><span class="params">()</span> =&gt;</span> old.apply(<span class="keyword">this</span>, id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  @mark(<span class="number">1</span>)</span><br><span class="line">  @mark(<span class="number">2</span>)</span><br><span class="line">  method() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">p1.method();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>咦？明明 <code>@mark(1)</code> 在 <code>@mark(2)</code> 之前调用的啊，为什么 2 比 1 先执行了呢？<br>让我们打开 如下地址，跟着我一起分析：<br><a href="http://www.typescriptlang.org/play/#src=%0D%0A%2F%2F%20%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%20%E5%86%8D%20%E5%B0%81%E8%A3%85%E4%B8%80%E5%B1%82%0D%0Afunction%20mark(id" target="_blank" rel="noopener">Type Script - Play ground</a>%20%7B%0D%0A%20%20%2F%2F%20%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%E4%BB%A5%E9%97%AD%E5%8C%85%E5%BD%A2%E5%BC%8F%E8%BF%94%E5%9B%9E%0D%0A%20%20return%20(obj%2C%20target%2C%20descriptor)%20%3D%3E%20%7B%0D%0A%20%20%20%20%2F%2F%20%E4%B8%8D%E7%A0%B4%E5%9D%8F%E5%8E%9F%20getter%20%E5%87%BD%E6%95%B0%0D%0A%20%20%20%20const%20old%20%3D%20descriptor.value%3B%0D%0A%20%20%20%20console.log(id)%3B%0D%0A%20%20%20%20return%20descriptor.value%20%3D%20()%20%3D%3E%20old.apply(this%2C%20id)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0A%0D%0Aclass%20Person%20%7B%0D%0A%0D%0A%20%20%40mark(1)%0D%0A%20%20%40mark(2)%0D%0A%20%20method()%20%7B%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0Aconst%20p1%20%3D%20new%20Person()%3B%0D%0A%0D%0Ap1.method()%3B%0D%0A%0D%0A%2F%2F%20%E8%BE%93%E5%87%BA%EF%BC%9A%0D%0A2%20%0D%0A1)<br>来看右边编译后的 javascript 代码，只看 var decorator 被编译成了啥，下面的不用看，跟源码差不多。<strong>请仔细阅读注释</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __decorate = (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__decorate) || <span class="function"><span class="keyword">function</span> (<span class="params">decorators, target, key, desc</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 判断函数真正的入参，如果小于 3 个，r = target 否则 继续判断 ，在该 对象 的属性（被装饰的属性）上原本的 descriptor 是不是 null ？ 如果是，则 desc 等于 当前对象被装饰属性的 descriptor ，否则 r = 当前对象被装饰属性的 descriptor</span></span><br><span class="line"><span class="comment">// 这里的 d 用于缓存 下面遍历时 的 状态</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">arguments</span>.length, r = c &lt; <span class="number">3</span> ? target : desc === <span class="literal">null</span> ? desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key) : desc, d;</span><br><span class="line">    <span class="comment">// 这里的 Reflect 是 window 下的 全局对象，我们也知道， Reflect 对象根本没有 decorate 方法，所以， turthy 的分支并不会执行，而是走 falsy 分支.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Reflect</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Reflect</span>.decorate === <span class="string">"function"</span>) r = <span class="built_in">Reflect</span>.decorate(decorators, target, key, desc);</span><br><span class="line">    <span class="comment">/**********关键步骤************/</span></span><br><span class="line">    <span class="comment">// 这里遍历的是入参的装饰器数组，并且，从右倒叙遍历（起始下标为 decorators.length - 1）</span></span><br><span class="line">    <span class="comment">// d 是每次遍历的 装饰器返回的 descriptor, 通过 判断入参个数，来决定 r 的类型，以及是否通过 d(r) 来装饰某个对象。如果 入参 &lt; 3 个，即 r 为 一个对象，执行 d(r) ； 否则如果 入参 &gt; 3 个，即运行时传入了第四个参数 desc(descriptor) ， 此时的 r 其实就是 desc ，d(target, key, r) 意思是：用 入参的 desc 装饰对象 target 的 key 属性；否则 c &lt; 4 ， 此时的 r  为 object 对象，d(target, key)；</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">var</span> i = decorators.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="keyword">if</span> (d = decorators[i]) r = (c &lt; <span class="number">3</span> ? d(r) : c &gt; <span class="number">3</span> ? d(target, key, r) : d(target, key)) || r;</span><br><span class="line">    <span class="keyword">return</span> c &gt; <span class="number">3</span> &amp;&amp; r &amp;&amp; <span class="built_in">Object</span>.defineProperty(target, key, r), r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************下面这些先不用看***********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器函数 再 封装一层</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mark</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 真正的装饰器函数以闭包形式返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj, target, descriptor</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 不破坏原 getter 函数</span></span><br><span class="line">        <span class="keyword">var</span> old = descriptor.value;</span><br><span class="line">        <span class="built_in">console</span>.log(id);</span><br><span class="line">        <span class="keyword">return</span> descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> old.apply(_this, id); &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Person = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    __decorate([</span><br><span class="line">        mark(<span class="number">1</span>),</span><br><span class="line">        mark(<span class="number">2</span>)</span><br><span class="line">    ], Person.prototype, <span class="string">"method"</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.method();</span><br></pre></td></tr></table></figure><p></p><p>上面啰里啰唆的注释是啥意思呢？<br>翻译成人话： 装饰器的执行顺序是个 栈， 后进先出。像极了… 爱情？不，像极了 <strong>洋葱模型</strong>。</p><h5 id="2-combine-合并"><a href="#2-combine-合并" class="headerlink" title="2. combine (合并)"></a>2. combine (合并)</h5><p>合并指的是装饰器装饰某个类的属性的时候，同时应用多个装饰器的模式。（要跟下面的 <code>@mixin</code>）区分<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eatApple</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> old = descriptor.value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`吃了 <span class="subst">$&#123;count&#125;</span> 个 苹果`</span>);</span><br><span class="line">    <span class="keyword">return</span> old.apply(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runMeter</span>(<span class="params">long</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> old = descriptor.value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`跑了 <span class="subst">$&#123;long&#125;</span> 米`</span>);</span><br><span class="line">    <span class="keyword">return</span> old.apply(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">...descriptors</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj, target, descriptor</span>) =&gt;</span> descriptors.forEach(<span class="function"><span class="params">d</span> =&gt;</span> d.apply(<span class="keyword">this</span>, [obj, target, descriptor]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  @combine(eatApple(<span class="number">1</span>), runMeter(<span class="number">9</span>))</span><br><span class="line">  method() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">p1.method();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">吃了一个苹果</span><br><span class="line">跑了 <span class="number">9</span> 米</span><br></pre></td></tr></table></figure><p></p><p>可见，在 <code>@combine()</code> 中传入的参数顺序，竟然跟最终的顺序 是一样的，咦？不是洋葱吗？这压根不是栈啊！<br>脑子里回想一下刚才解析源码的过程，我再次望向了这次的源码：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Person.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    __decorate([</span><br><span class="line">        combine(eatApple(<span class="number">1</span>), runMeter(<span class="number">9</span>))</span><br><span class="line">    ], Person.prototype, <span class="string">"method"</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> Person;</span><br></pre></td></tr></table></figure><p></p><p>显而易见，这两个函数，直接是作为结果被传进去的，相当于栈里面只有 <code>mixin</code> 一个函数，无所谓是栈或者队列了，反正两个函数都在我内部执行，我让他怎么执行就怎么执行，为所欲为。所以这里的输出结果是同步的，完全就是因为栈里只有一个 member。<br>不信验证一下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eatApple</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> old = descriptor.value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`吃了 <span class="subst">$&#123;count&#125;</span> 个 苹果`</span>);</span><br><span class="line">    <span class="keyword">return</span> old.apply(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runMeter</span>(<span class="params">long</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> old = descriptor.value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`跑了 <span class="subst">$&#123;long&#125;</span> 米`</span>);</span><br><span class="line">    <span class="keyword">return</span> old.apply(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">...descriptors</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj, target, descriptor</span>) =&gt;</span> descriptors.forEach(<span class="function"><span class="params">d</span> =&gt;</span> d.apply(<span class="keyword">this</span>, [obj, target, descriptor]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  @combine(eatApple(<span class="number">1</span>), runMeter(<span class="number">9</span>))</span><br><span class="line">  @combine(eatApple(<span class="number">5</span>),runMeter(<span class="number">100</span>))</span><br><span class="line">  method() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">p1.method();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">吃了 <span class="number">5</span> 个 苹果</span><br><span class="line">跑了 <span class="number">100</span> 米</span><br><span class="line">吃了 <span class="number">1</span> 个 苹果</span><br><span class="line">跑了 <span class="number">9</span> 米</span><br></pre></td></tr></table></figure><p></p><h5 id="3-mixin-混合"><a href="#3-mixin-混合" class="headerlink" title="3. mixin (混合)"></a>3. mixin (混合)</h5><p>mixin 意为在一个对象之中混入另外一个对象的方法。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixins</span>(<span class="params">...list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Object.assign 可用于对象，即 编译后的 es3 runtime 指向 class.prototype</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(target.prototype, ...list);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  foo() &#123; <span class="built_in">console</span>.log(<span class="string">'foo'</span>) &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@mixins(Foo)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> MyClass();</span><br><span class="line">obj.foo() <span class="comment">// "foo"</span></span><br></pre></td></tr></table></figure><p></p><p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文章原始创作地址：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/ar
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://ZQ-jhon.github.io/tags/javascript/"/>
    
      <category term="decorator" scheme="https://ZQ-jhon.github.io/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>hello-sql</title>
    <link href="https://ZQ-jhon.github.io/2019/06/11/hello-sql/"/>
    <id>https://ZQ-jhon.github.io/2019/06/11/hello-sql/</id>
    <published>2019-06-11T14:58:10.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文章原始创作地址：<a href="https://blog.csdn.net/qq_20264891/article/details/91437256" target="_blank" rel="noopener">https://blog.csdn.net/qq_20264891/article/details/91437256</a></p><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol><li><a href="https://www.liaoxuefeng.com/wiki/1177760294764384" target="_blank" rel="noopener">廖雪峰 sql 教程</a></li><li><a href="https://github.com/agershun/alasql" target="_blank" rel="noopener">alasql github</a></li><li>新建一个项目 <code>$ npm i alasql</code><h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2>根据示例 <a href="https://github.com/agershun/alasql" target="_blank" rel="noopener">https://github.com/agershun/alasql</a> 学习基本语法<h4 id="1-建表-CREATE-TABLE"><a href="#1-建表-CREATE-TABLE" class="headerlink" title="1.建表( CREATE TABLE)"></a>1.建表( CREATE TABLE)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alasql(`</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (age <span class="built_in">number</span>, <span class="keyword">name</span> <span class="keyword">string</span>, money <span class="built_in">number</span>);</span><br><span class="line">`);</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-插入数据-INSERT-INTO-table"><a href="#2-插入数据-INSERT-INTO-table" class="headerlink" title="2. 插入数据(INSERT INTO {table})"></a>2. 插入数据(INSERT INTO {table})</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alasql(`</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> <span class="keyword">VALUES</span> (<span class="number">25</span>,<span class="string">'张三'</span>, <span class="number">100</span>);</span><br><span class="line">`):</span><br></pre></td></tr></table></figure><p>然后确认一下数据是否真的写入了<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SELECT *FROM users;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mysql); <span class="comment">// [ &#123; age: 25, name: '张三', money: 100 &#125; ]</span></span><br></pre></td></tr></table></figure><p></p><p>于是写个遍历，插入更多数据，以供后面操作。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`INSERT INTO users VALUES (<span class="subst">$&#123;i&#125;</span>, '张<span class="subst">$&#123;i&#125;</span>', <span class="subst">$&#123;i&#125;</span>)`</span>;</span><br><span class="line">    alasql(sql);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">'</span></span><br><span class="line"><span class="string">SELECT * FROM users;</span></span><br><span class="line"><span class="string">'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">money</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'张0'</span>, <span class="attr">money</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'张2'</span>, <span class="attr">money</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'张3'</span>, <span class="attr">money</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'张4'</span>, <span class="attr">money</span>: <span class="number">4</span> &#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"> &#123; <span class="attr">age</span>: <span class="number">99</span>, <span class="attr">name</span>: <span class="string">'张99'</span>, <span class="attr">money</span>: <span class="number">99</span> &#125;,</span><br></pre></td></tr></table></figure><p></p><h4 id="3-SELECT-语句"><a href="#3-SELECT-语句" class="headerlink" title="3. SELECT 语句"></a>3. SELECT 语句</h4><p>望文生义， SELECT 就是选中，命中。选中的对象是啥呢？其实就是表的 “列” column。<br>举例：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 选中 users 表中所有的列</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line">// 只选中 name 这一列</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line">// 选中 name, age 两列</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">name</span>,age <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><p></p><p>如果希望返回的结果集可以自定义列名（column） ，这种操作称之为 <strong>“投影”</strong>， 可以使用语法 :<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span> 别名<span class="number">1</span>, 列<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><p></p><p>举个 🌰:<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 原 column 名为 name</span><br><span class="line">...</span><br><span class="line">[name]</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王麻子</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="string">'姓名'</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line">// 输出</span><br><span class="line">...</span><br><span class="line">[姓名]</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line">王麻子</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><h4 id="4-WHERE-语句"><a href="#4-WHERE-语句" class="headerlink" title="4. WHERE 语句"></a>4. WHERE 语句</h4><p>现在，从表中筛选出 age &gt; 90 的：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users WHERE age&gt;90;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">91</span>, <span class="attr">name</span>: <span class="string">'张91'</span>, <span class="attr">money</span>: <span class="number">91</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">92</span>, <span class="attr">name</span>: <span class="string">'张92'</span>, <span class="attr">money</span>: <span class="number">92</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">93</span>, <span class="attr">name</span>: <span class="string">'张93'</span>, <span class="attr">money</span>: <span class="number">93</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">94</span>, <span class="attr">name</span>: <span class="string">'张94'</span>, <span class="attr">money</span>: <span class="number">94</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">95</span>, <span class="attr">name</span>: <span class="string">'张95'</span>, <span class="attr">money</span>: <span class="number">95</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">96</span>, <span class="attr">name</span>: <span class="string">'张96'</span>, <span class="attr">money</span>: <span class="number">96</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">97</span>, <span class="attr">name</span>: <span class="string">'张97'</span>, <span class="attr">money</span>: <span class="number">97</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">98</span>, <span class="attr">name</span>: <span class="string">'张98'</span>, <span class="attr">money</span>: <span class="number">98</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">99</span>, <span class="attr">name</span>: <span class="string">'张99'</span>, <span class="attr">money</span>: <span class="number">99</span> &#125; ]</span><br></pre></td></tr></table></figure><p></p><h4 id="5-联合条件"><a href="#5-联合条件" class="headerlink" title="5. 联合条件"></a>5. 联合条件</h4><p>联合条件，即多条件叠加。是为了提高命中数据的准确度，达到准确查找想要数据的目的。</p><h5 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users WHERE age=60 AND money=60;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">60</span>, <span class="attr">name</span>: <span class="string">'张60'</span>, <span class="attr">money</span>: <span class="number">60</span> &#125; ]</span><br></pre></td></tr></table></figure><h5 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users WHERE age=60 OR money=61;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"> [ </span><br><span class="line"> &#123; <span class="attr">age</span>: <span class="number">60</span>, <span class="attr">name</span>: <span class="string">'张60'</span>, <span class="attr">money</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">61</span>, <span class="attr">name</span>: <span class="string">'张61'</span>, <span class="attr">money</span>: <span class="number">61</span> &#125; </span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h5 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h5><p>查询 !(age&gt;=10)<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users WHERE NOT age&gt;=10;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'张0'</span>, <span class="attr">money</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'张2'</span>, <span class="attr">money</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'张3'</span>, <span class="attr">money</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'张4'</span>, <span class="attr">money</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'张5'</span>, <span class="attr">money</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'张6'</span>, <span class="attr">money</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'张7'</span>, <span class="attr">money</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'张8'</span>, <span class="attr">money</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'张9'</span>, <span class="attr">money</span>: <span class="number">9</span> &#125; ]</span><br></pre></td></tr></table></figure><p></p><p>另一种，不等于的写法：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 又要大，又要小。又想马儿跑，又不想给马吃草</span></span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users WHERE  age&lt;&gt;20;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"> ...</span><br><span class="line"> [</span><br><span class="line">  &#123;<span class="attr">age</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'张0'</span>&#125;,</span><br><span class="line">   ...</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">'张18'</span>, <span class="attr">money</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">name</span>: <span class="string">'张19'</span>, <span class="attr">money</span>: <span class="number">19</span> &#125;,</span><br><span class="line">  <span class="comment">// 注意，这里 age=20 的数据被 where 语句命中了，因此没有出现在结果集</span></span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">21</span>, <span class="attr">name</span>: <span class="string">'张21'</span>, <span class="attr">money</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  ... </span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">99</span>, <span class="attr">name</span>: <span class="string">'张99'</span>, <span class="attr">money</span>: <span class="number">99</span> &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p></p><h4 id="6-模糊查询-field-LIKE"><a href="#6-模糊查询-field-LIKE" class="headerlink" title="6.模糊查询({field} LIKE)"></a>6.模糊查询({field} LIKE)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询名字中以 `张7` 开头的数据，% 代表任意字符。</span></span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users WHERE  name LIKE '张7%';`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'张7'</span>, <span class="attr">money</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">70</span>, <span class="attr">name</span>: <span class="string">'张70'</span>, <span class="attr">money</span>: <span class="number">70</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">71</span>, <span class="attr">name</span>: <span class="string">'张71'</span>, <span class="attr">money</span>: <span class="number">71</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">72</span>, <span class="attr">name</span>: <span class="string">'张72'</span>, <span class="attr">money</span>: <span class="number">72</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">73</span>, <span class="attr">name</span>: <span class="string">'张73'</span>, <span class="attr">money</span>: <span class="number">73</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">74</span>, <span class="attr">name</span>: <span class="string">'张74'</span>, <span class="attr">money</span>: <span class="number">74</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">75</span>, <span class="attr">name</span>: <span class="string">'张75'</span>, <span class="attr">money</span>: <span class="number">75</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">76</span>, <span class="attr">name</span>: <span class="string">'张76'</span>, <span class="attr">money</span>: <span class="number">76</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">77</span>, <span class="attr">name</span>: <span class="string">'张77'</span>, <span class="attr">money</span>: <span class="number">77</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">78</span>, <span class="attr">name</span>: <span class="string">'张78'</span>, <span class="attr">money</span>: <span class="number">78</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">79</span>, <span class="attr">name</span>: <span class="string">'张79'</span>, <span class="attr">money</span>: <span class="number">79</span> &#125; ]</span><br></pre></td></tr></table></figure><h4 id="7-排序方式-ORDER-BY-field-DESC-ASC"><a href="#7-排序方式-ORDER-BY-field-DESC-ASC" class="headerlink" title="7. 排序方式(ORDER BY {field} DESC/ASC)"></a>7. 排序方式(ORDER BY {field} DESC/ASC)</h4><p>细心的你肯定发现了，前面的数据都是按照顺序（ASC 从小到大）来排序的，那如果我希望 age 或者 money 字段按照倒序（DESC 从大到小）来排布，该怎么操作呢？<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT name '姓名' FROM users ORDER BY age DESC;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line">[ &#123; <span class="string">'\'姓名\''</span>: <span class="string">'张99'</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'\'姓名\''</span>: <span class="string">'张98'</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'\'姓名\''</span>: <span class="string">'张97'</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'\'姓名\''</span>: <span class="string">'张96'</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'\'姓名\''</span>: <span class="string">'张95'</span> &#125;,</span><br><span class="line">  ...</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure><p></p><p>这里我按照 age 的 DESC 来排序，结果符合预期。</p><h4 id="8-分页查询-LIMIT-OFFSET"><a href="#8-分页查询-LIMIT-OFFSET" class="headerlink" title="8.分页查询( LIMIT, OFFSET)"></a>8.分页查询( LIMIT, OFFSET)</h4><p>之前做后台管理的时候，我还纳闷，为什么接口总是定义 offset=0;limit=10;orderBy=’name’ 这样的接口，现在看到这里，应该都豁然开朗了。<br>在上述的例子里，每次返回的结果集都太大，然而这个表只有 100 条数据而已，随着表的规模越来越大，分页查询势在必行。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 返回的结果集极限大小为 10 条数据，且从 index=0 的位置向后偏移 4 个</span></span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT name FROM users LIMIT 10 OFFSET 4;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[ &#123; <span class="attr">name</span>: <span class="string">'张4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张5'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张6'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张7'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张8'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张9'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张10'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张11'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张12'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'张13'</span> &#125; ]</span><br></pre></td></tr></table></figure><p></p><p>假表中设有无穷多的数据，需要查询第 N 页的数据，默认 LIMIT = 10，问 OFFSET = ？<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OFFSET = LIMIT(N<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p></p><p>偏移量总是等于 = （要查询的页数 - 1）* limit</p><h4 id="9-聚合查询（SELECT-COUNT-FROM-table-）"><a href="#9-聚合查询（SELECT-COUNT-FROM-table-）" class="headerlink" title="9.聚合查询（SELECT COUNT(*) FROM {table}）"></a>9.聚合查询（SELECT COUNT(*) FROM {table}）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT COUNT(*) FROM users;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出 ['COUNT(*)': 100]</span></span><br></pre></td></tr></table></figure><p>同样可以取别名<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT COUNT(*) total FROM users;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出： [ &#123; total: 100 &#125; ]</span></span><br></pre></td></tr></table></figure><p></p><p>另外，除了 <code>COUNT</code> 还有几个内置函数：<br>MAX, MIN, AVG, SUM,FLOOR,CELING 等<br>对应最大，最小，平均，总和。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT MAX(money) max FROM users;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出  [ &#123; max: 99 &#125; ]</span></span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT SUM(money) totalMoney FROM users;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// [ &#123; totalMoney: 4950 &#125; ]</span></span><br></pre></td></tr></table></figure><p></p><h4 id="10-分组查询（SELECT-FROM-table-GROUP-BY-field-）"><a href="#10-分组查询（SELECT-FROM-table-GROUP-BY-field-）" class="headerlink" title="10.分组查询（SELECT FROM {table} GROUP BY {field};）"></a>10.分组查询（SELECT FROM {table} GROUP BY {field};）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alasql = <span class="built_in">require</span>(<span class="string">'alasql'</span>);</span><br><span class="line"></span><br><span class="line">alasql(<span class="string">`CREATE TABLE users (age number, name string, money number)`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// build random number as 1~10</span></span><br><span class="line">    <span class="keyword">const</span> number = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`INSERT INTO users VALUES (<span class="subst">$&#123;i&#125;</span>, '张<span class="subst">$&#123;i&#125;</span>', <span class="subst">$&#123;number&#125;</span>)`</span>;</span><br><span class="line">    alasql(sql);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users GROUP BY money ;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">money</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">money</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">money</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">money</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">money</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">money</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">money</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">money</span>: <span class="number">10</span> &#125; ]</span><br></pre></td></tr></table></figure><h4 id="11-连接查询-INNER-JOIN-…-ON…"><a href="#11-连接查询-INNER-JOIN-…-ON…" class="headerlink" title="11. 连接查询(INNER JOIN … ON…)"></a>11. 连接查询(INNER JOIN … ON…)</h4><p>顾名思义，即多个表连接到一起，统一查询。<br>现在，假设每个 user 需要添加一个 company 字段，代表所处公司。而这个 company 是随时会变动的，因此需要建立一个新表进行单独的维护：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alasql(`</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> companies (<span class="keyword">id</span> numnber, <span class="keyword">name</span> <span class="keyword">string</span>);</span><br><span class="line">`);</span><br></pre></td></tr></table></figure><p></p><p><code>companies</code> 表很简单，只有一个字段。<br>如果现在每个 user 的字段都要对应到 companies 的一个成员，即 users 长度 = companies 长度，该如何做映射呢？<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alasql = <span class="built_in">require</span>(<span class="string">'alasql'</span>);</span><br><span class="line"><span class="comment">// 创建两个表，user 表中， company 为数字，对应着 companies 表中的索引 id</span></span><br><span class="line">alasql(<span class="string">`CREATE TABLE users (age number, name string, money number, company number)`</span>);</span><br><span class="line">alasql(<span class="string">`CREATE TABLE companies (id number, name string)`</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// build random number as 1~10</span></span><br><span class="line">    <span class="keyword">const</span> number = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`INSERT INTO users VALUES (<span class="subst">$&#123;i&#125;</span>, '张<span class="subst">$&#123;i&#125;</span>', <span class="subst">$&#123;number&#125;</span>, <span class="subst">$&#123;number&#125;</span>)`</span>;</span><br><span class="line">    alasql(sql);</span><br><span class="line">    <span class="comment">// 这里每个 company 的 id 应该与 user 表中的 company 字段 依次 相同</span></span><br><span class="line">    alasql(<span class="string">`INSERT INTO companies VALUES (<span class="subst">$&#123;number&#125;</span>, '公司' + <span class="subst">$&#123;number&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询时，多加一个 companies 表中的 name 列</span></span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`</span></span><br><span class="line"><span class="string">    SELECT u.age, u.name, u.money, c.name company_name</span></span><br><span class="line"><span class="string">    FROM users u </span></span><br><span class="line"><span class="string">    INNER JOIN companies c </span></span><br><span class="line"><span class="string">    ON u.company=c.id</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'张0'</span>, <span class="attr">money</span>: <span class="number">1</span>, <span class="attr">company_name</span>: <span class="string">'公司1'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'张2'</span>, <span class="attr">money</span>: <span class="number">7</span>, <span class="attr">company_name</span>: <span class="string">'公司7'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'张2'</span>, <span class="attr">money</span>: <span class="number">7</span>, <span class="attr">company_name</span>: <span class="string">'公司7'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'张3'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'张3'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'张3'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'张4'</span>, <span class="attr">money</span>: <span class="number">7</span>, <span class="attr">company_name</span>: <span class="string">'公司7'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'张4'</span>, <span class="attr">money</span>: <span class="number">7</span>, <span class="attr">company_name</span>: <span class="string">'公司7'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'张5'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'张5'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'张5'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'张5'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'张6'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'张6'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'张6'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'张7'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'张7'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'张7'</span>, <span class="attr">money</span>: <span class="number">4</span>, <span class="attr">company_name</span>: <span class="string">'公司4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'张8'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'张8'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'张8'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'张8'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'张9'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'张9'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'张9'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'张9'</span>, <span class="attr">money</span>: <span class="number">2</span>, <span class="attr">company_name</span>: <span class="string">'公司2'</span> &#125; ]</span><br></pre></td></tr></table></figure><p></p><p>总结一下，这种多表联合查询，就是在 SELECT 阶段选择两个表中的字段，然后通过 INNER JOIN {表名} ON {条件} 来完成的。<br>另外还有 LEFT OUTER JOIN ， RIGHT OUTER JOIN 等，详见廖雪峰大神总结的图示：<br><img src="/2019/06/11/hello-sql/sql.png"></p><h3 id="二、CRUD-BOY-的基本素养"><a href="#二、CRUD-BOY-的基本素养" class="headerlink" title="二、CRUD BOY 的基本素养"></a>二、CRUD BOY 的基本素养</h3><h4 id="1-增"><a href="#1-增" class="headerlink" title="1. 增"></a>1. 增</h4><p>语法：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span> (<span class="keyword">field</span>) <span class="keyword">VALUES</span> (value1, value2...);</span><br></pre></td></tr></table></figure><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alasql = <span class="built_in">require</span>(<span class="string">'alasql'</span>);</span><br><span class="line"><span class="comment">// 建表时可以注明类型</span></span><br><span class="line">alasql(<span class="string">`CREATE TABLE users (age number, name string, money number)`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`INSERT INTO users VALUES (<span class="subst">$&#123;i&#125;</span>, '张<span class="subst">$&#123;i&#125;</span>', <span class="subst">$&#123;i&#125;</span>)`</span>;</span><br><span class="line">    alasql(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入时不需要标注 field type</span></span><br><span class="line">alasql(<span class="string">`INSERT INTO users (age, name, money) VALUES (1 , '大牛' , 100)`</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'张0'</span>, <span class="attr">money</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'张2'</span>, <span class="attr">money</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'张3'</span>, <span class="attr">money</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'张4'</span>, <span class="attr">money</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'张5'</span>, <span class="attr">money</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'张6'</span>, <span class="attr">money</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'张7'</span>, <span class="attr">money</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'张8'</span>, <span class="attr">money</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'张9'</span>, <span class="attr">money</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'大牛'</span>, <span class="attr">money</span>: <span class="number">100</span> &#125; ]</span><br></pre></td></tr></table></figure><h4 id="2-改"><a href="#2-改" class="headerlink" title="2. 改"></a>2. 改</h4><p>语法：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表名&gt; <span class="keyword">SET</span> 字段<span class="number">1</span>=值<span class="number">1</span>, 字段<span class="number">2</span>=值<span class="number">2</span>, ... <span class="keyword">WHERE</span> ...;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 更新 age=1 的这条数据</span></span><br><span class="line">alasql(<span class="string">`UPDATE users  SET age=100000, money=200000 WHERE age=1`</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'张0'</span>, <span class="attr">money</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">100000</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">200000</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'张2'</span>, <span class="attr">money</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'张3'</span>, <span class="attr">money</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'张4'</span>, <span class="attr">money</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'张5'</span>, <span class="attr">money</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'张6'</span>, <span class="attr">money</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'张7'</span>, <span class="attr">money</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'张8'</span>, <span class="attr">money</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'张9'</span>, <span class="attr">money</span>: <span class="number">9</span> &#125; ]</span><br></pre></td></tr></table></figure><h4 id="3-DELETE"><a href="#3-DELETE" class="headerlink" title="3. DELETE"></a>3. DELETE</h4><p>语法：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> ...;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alasql(<span class="string">`DELETE FROM users WHERE age&gt;5`</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = alasql(<span class="string">`SELECT * FROM users;`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mysql);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">[ &#123; <span class="attr">age</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'张0'</span>, <span class="attr">money</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张1'</span>, <span class="attr">money</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'张2'</span>, <span class="attr">money</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'张3'</span>, <span class="attr">money</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'张4'</span>, <span class="attr">money</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'张5'</span>, <span class="attr">money</span>: <span class="number">5</span> &#125; ]</span><br></pre></td></tr></table></figure><h4 id="4-Retrieve"><a href="#4-Retrieve" class="headerlink" title="4. Retrieve"></a>4. Retrieve</h4><p>语法：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> colume <span class="keyword">FROM</span> <span class="keyword">table</span> （<span class="keyword">WHERE</span>） ...</span><br></pre></td></tr></table></figure><p></p><p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文章原始创作地址：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/ar
      
    
    </summary>
    
    
      <category term="sql" scheme="https://ZQ-jhon.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>http 发展进程 与 编码方式的发展 进程</title>
    <link href="https://ZQ-jhon.github.io/2019/06/01/http-history/"/>
    <id>https://ZQ-jhon.github.io/2019/06/01/http-history/</id>
    <published>2019-06-01T22:14:12.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文章原始创作地址：<a href="https://blog.csdn.net/qq_20264891/article/details/90734157.html" target="_blank" rel="noopener">https://blog.csdn.net/qq_20264891/article/details/90734157</a></p><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><h2 id="广义上我们口中的-http"><a href="#广义上我们口中的-http" class="headerlink" title="广义上我们口中的 http"></a>广义上我们口中的 http</h2><p>我们口中常说的 http 应该是指 http 1.1<br>http0.9中，每次通信完成后，都会断开tcp连接，造成资源浪费。<br>http1.0可以在header中加入keep alive来确保长连接，但还是有点麻烦。<br>于是，http1.1 默认可以 keep alive，并且引入管道机制(pipeline)，客户端可以发送多个请求，但是服务端按照顺序来一一回复。这也是HTTP1.1的设计缺点，多个请求过来时，队列容易被大型缓慢得请求堵塞，尽管前端可以优化请求数量，例如雪碧图，合并脚本和样式表等。</p><p>后来，谷歌开发出一种新的通信协议，并在Chrome试水成功，名为：spdy(撕破腚眼)，后来大多数 feature 都在 http2 中得到继承，例如 head 头中的元数据信息不再限制为仅支持 ASCII 编码的字符集，并且还支持二进制编码，以便于将来高级应用的解析。并且，每次通信的过程中，不会再有队列堵塞的情况发生，一个请求太大，执行多少就先返回多少，在执行下一个任务，等下一个执行完，接着处理上一个。另外，可以中途取消某个通信帧，还可以给每个请求标注 level 让服务器按照 level优先级处理。还有服务器和客户端都会维护一张表，将重复的头部元数据都塞到表里，每次通信，发送表的索引，提升通信效率。</p><p>除此以外，服务端可以强推送，例如，客户端请求某个 html，服务器可以显而易见的知道里面有很多图片及脚本文件，不用浏览器请求，就会自动推送给浏览器。</p><p>前面也说到字符集的编码标准。下面来捋一下:</p><ol><li>计算机开始普及时，为了让大多数的信息都可以被计算机识别，人们建立了一套 “阿拉伯数字 + 英语 + 常用符号” 的编码标准来映射对应的字符，从而让计算机更好的识别，处理这些字符。这个字符集定义了 从 a-z A-z 0-9 , . ? / [ ] 等常用的字符。该标准成为： ASCII 编码。</li><li>后来，使用计算机的人越来越多，比如中国，但是 ASCII 码没有定义中文字符，于是，中国有了一套 gb2312 字符编码标准，同理，大多数国家都应该有一套自己的文字编码标准，后来被统一为 unicode 编码。 unicode 编码定义了绝大多数的文字、符号等。</li><li>utf-8, utf-16 的诞生，是为了提升编码的效率，避免浪费位存。</li></ol><p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文章原始创作地址：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/ar
      
    
    </summary>
    
    
      <category term="http" scheme="https://ZQ-jhon.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>koa-2</title>
    <link href="https://ZQ-jhon.github.io/2019/05/16/koa-2/"/>
    <id>https://ZQ-jhon.github.io/2019/05/16/koa-2/</id>
    <published>2019-05-16T23:38:20.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文章原始创作地址：<a href="https://blog.csdn.net/qq_20264891/article/details/90274428" target="_blank" rel="noopener">https://blog.csdn.net/qq_20264891/article/details/90274428</a></p><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><h2 id="MVC-分层"><a href="#MVC-分层" class="headerlink" title="MVC 分层"></a>MVC 分层</h2><p>代码地址： <a href="https://github.com/ZQ-jhon/koa-starter" target="_blank" rel="noopener">https://github.com/ZQ-jhon/koa-starter</a><br>MVC 是个老生常谈的概念了。<br>M = Model， V = View , C = Controller ， angularjs 就是典型的 MVC 框架。<br>在 <code>Angular</code> （指Angular 2+， 下同） 中，C 被拆分成 ViewModel ，因此称之为 MVVM 框架：<br>M = model 数据，驱动渲染的能源<br>V = View 视图层，指代用户可以看到的前端界面<br>ViewModel = 处理数据和视图之间的关系</p><p>那么，在 KOA 中， MVC 指代的又是什么呢?</p><h3 id="C，Controller-层"><a href="#C，Controller-层" class="headerlink" title="C，Controller 层"></a>C，Controller 层</h3><p>先不急着回答，把上一次的代码捋一捋，进一步优化一下。<br>由于之前所有的对于请求参数和数据的处理都放在 APP.js ，随着需求的增加，导致难以维护，先让我们给代码分层：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/** app.js 中新增 `router.js`，专门用来处理路由相关的东西 </span></span><br><span class="line"><span class="comment"> *   router.js</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">    app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        ctx.body = <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;form action="/submit" method="post"&gt;</span></span><br><span class="line"><span class="string">            &lt;input name="account" type="text"&gt; 账号</span></span><br><span class="line"><span class="string">            &lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;input name="password" type="password"&gt; 密码</span></span><br><span class="line"><span class="string">            &lt;br/&gt;</span></span><br><span class="line"><span class="string">            &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;/form&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;);</span><br><span class="line">    app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (ctx.request.url === <span class="string">'/submit'</span>) &#123;</span><br><span class="line">            ctx.response.type = <span class="string">'application/json'</span>;</span><br><span class="line">            ctx.response.body = ctx.request.body;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add router middleware:</span></span><br><span class="line">    app.use(router.routes())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>整个 <code>router</code> 也被编写并导出为一个函数，接受 koa 的实例 app，来进行中间件的使用。</p><p>还不够完美，router 中仍然存在大量的与路由无关的代码，我们进一步分层:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 新建 index.controller.js</span></span><br><span class="line"><span class="comment">* index.controller.js 的职责就是：一旦收到命令，就渲染并返回表单页面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports =  <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.type = <span class="string">'text/html'</span>;</span><br><span class="line">  ctx.body = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;form action="/submit" method="post"&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="account" type="text"&gt; 账号</span></span><br><span class="line"><span class="string">        &lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="password" type="password"&gt; 密码</span></span><br><span class="line"><span class="string">        &lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 同理，新建 post.controller.js</span></span><br><span class="line"><span class="comment">* post.controller.js 的职责是：收到命令，就解析 body 中传来的数据，并渲染返回给前端</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.response.type = <span class="string">'application/json'</span>;</span><br><span class="line">    ctx.response.body = ctx.request.body;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的文件结构应该如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|--node_modules</span><br><span class="line">|--package.json</span><br><span class="line">|--app.js</span><br><span class="line">|--index.controller.js</span><br><span class="line">|--post.controller.js</span><br><span class="line">|--router.controller.js</span><br></pre></td></tr></table></figure><p></p><p><em>（如果读者嫌乱，可以增加 controllers 文件夹 和 routers 文件夹，将对应后缀的文件丢到对应的目录，并更新文件的引用路径。）</em></p><p>我们现在更新目录：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|--node_modules</span><br><span class="line">|--package.json</span><br><span class="line">|--app.js</span><br><span class="line">|--contollers</span><br><span class="line">    |--index.controller.js</span><br><span class="line">    |--post.controller.js</span><br><span class="line">|--routers</span><br><span class="line">    |--routers.controller.js</span><br></pre></td></tr></table></figure><p></p><p>VSCODE 提示更新引用，NICE。<br><img src="/2019/05/16/koa-2/vscode.png" title="vscode vscode vscode"></p><p>通过上面的代码可以看到，两个新建的 controller 文件，都是在处理自己的业务职责，即渲染并返回对应的数据，他们不关心路由是不是命中了自己，做到了职责单一。</p><p>我们现在在 CMD 中输入 <code>node app.js</code> 发现程序还是按照预期来执行，这里就不贴图了。</p><p>现在，按照 MVC 框架的思想来理解，业务处理的部分就是 C =&gt; controller ，我们已经完成了。</p><p>下面来看 View 层是啥？<br>假设我们现在有 100 个不同的路由来处理请求，并且每个路由要返回不同的页面，我们肯定不希望手写 100 个 html ，代码量太大了。<br>为了解放生产力，我们不得不使用模板引擎，例如 ejs , jade，nunjucks 等等，由于 <a href="https://mozilla.github.io/nunjucks/" target="_blank" rel="noopener">nunjucks </a>是 mozilla 开发的，就用它吧！（官方文档支持中文：<a href="https://mozilla.github.io/nunjucks/cn/api.html" target="_blank" rel="noopener">官方文档</a>）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 安装 及 使用</span><br><span class="line">// 随便在哪新建一个 js 文件</span><br><span class="line">const nunjucks = require(&apos;nunjucks&apos;);</span><br><span class="line">const result = nunjucks.renderString(`hello, $&#123;name&#125;`, &#123;name: 123&#125;);</span><br><span class="line">// fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p></p><p>// 通过 node.js 执行<br><img src="/2019/05/16/koa-2/result.png" title="result result result"></p><p><strong>如果你写过 Angular，Nunjucks 的东西简直是跟 Angular 的模板语法一毛一样</strong><br>支持管道，双花括号取值 ,逻辑判断，循环，继承，还有：<br><strong>防止 XSS 攻击，支持可配置的转义 消毒(sanitizer)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nunjucks = <span class="built_in">require</span>(<span class="string">'nunjucks'</span>);</span><br><span class="line">nunjucks.configure(<span class="string">'./'</span>, &#123;<span class="attr">autoescape</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment">// 默认对当前文件夹下的文件进行转义过滤，消毒处理</span></span><br></pre></td></tr></table></figure><p>脏活都被 nunjucks 干完了。</p><h3 id="使用-nunjucks"><a href="#使用-nunjucks" class="headerlink" title="使用 nunjucks"></a>使用 nunjucks</h3><p>下面，我们将 默认 路由下，返回 post 页面的代码，用 nunjucks 来进行重构</p><p>在 controller 层同级下，新建 views 目录，然后<br>新建 from.html 模板文件<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>form<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意，这里使用了 name 变量，看看待会怎么使用它！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> // fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;fuck&#123;  name  &#125;fuck&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/submit"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"account"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span> 账号</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span> 密码</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>接着在 renderers 下新建 renderForm.js<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nunjucks = <span class="built_in">require</span>(<span class="string">'nunjucks'</span>);</span><br><span class="line">nunjucks.configure(<span class="string">'views'</span>, &#123; <span class="attr">autoescape</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> htmlRenderFn = <span class="function">(<span class="params">object</span>) =&gt;</span> nunjucks.render(<span class="string">`form.html`</span>, object);</span><br><span class="line"><span class="built_in">module</span>.exports = htmlRenderFn;</span><br></pre></td></tr></table></figure><p></p><p>接着，修改原本在 index.controller.js 中渲染的函数<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderForm = <span class="built_in">require</span>(<span class="string">'../views/renderForm'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports =  <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.type = <span class="string">'text/html'</span>;</span><br><span class="line">  ctx.body = renderForm(&#123;<span class="attr">name</span>: <span class="string">'Hello, nunjucks'</span>&#125;);</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>回到第二个标题抛出的问题，我的理解是，KOA 中的 MVC ：<br>M = 泛指整个通信过程中所有的数据，包括但不限于 http 请求中传递的数据或者路由参数、query 参数、post body 体，甚至 view 层 中 nunjucks 渲染的数据来源。<br>V = view，返回给前端的视图<br>C = controller 控制器</p><p>未完待续…</p><p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文章原始创作地址：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/ar
      
    
    </summary>
    
    
      <category term="koa" scheme="https://ZQ-jhon.github.io/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>koa-1</title>
    <link href="https://ZQ-jhon.github.io/2019/05/14/koa-1/"/>
    <id>https://ZQ-jhon.github.io/2019/05/14/koa-1/</id>
    <published>2019-05-14T22:35:20.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文章原始创作地址：<a href="https://blog.csdn.net/qq_20264891/article/details/90216585" target="_blank" rel="noopener">https://blog.csdn.net/qq_20264891/article/details/90216585</a></p><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><h2 id="为什么要学-Koa，不学-Express-？"><a href="#为什么要学-Koa，不学-Express-？" class="headerlink" title="为什么要学 Koa，不学 Express ？"></a>为什么要学 <code>Koa</code>，不学 <code>Express</code> ？</h2><p>因为不想写回调，日常开发习惯 <code>async await</code> 处理异步流程，因此选择 <code>Koa 2</code>。(以下简称 Koa)</p><h2 id="Koa2-核心概念"><a href="#Koa2-核心概念" class="headerlink" title="Koa2 核心概念"></a>Koa2 核心概念</h2><p>洋葱模型 其实就是 <code>async await</code> 执行流程，在 <code>koa</code> 每次调用中间件时，回调函数中 <code>next</code> 会吧执行权递交给下一个回调函数。按笔者通俗的解释为：洋葱先从外侧切到内侧，再从内测切到另一边的外侧。其实也就是回调函数被 <code>async await</code> 化了而已。<br><code>ctx(context)</code> 上下文，<code>request</code>, <code>response</code> 都被合并封装到 <code>ctx</code> 中，方便每个中间件进行操作，调用。<br><img src="/2019/05/14/koa-1/context.png" title="context context context"></p><p>打印一下 <code>ctx</code>，可见，<code>ctx</code> 描述的是，每个完整的 <code>http</code> 所包含的信息，包括但不限于 请求方法(<code>method</code>)，url(<code>request url</code>)，响应码(<code>status</code>), 响应信息 <code>message</code>, <code>header</code> 等。</p><p>路由 路由的处理也是包含在中间件中的。路由的概念并不陌生，<code>Angular</code> 中除了基本的 Router 路由器让你处理跳转路由之外，还有 <code>Activeted</code> 路由，来处理不同的 <code>Url</code> 和接受 <code>query</code> 等。 在我看来，这里 <code>Koa</code> 的路由，其实跟 <code>Angular Activeted</code> 的概念很像。代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根路由</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.request.path === <span class="string">"/"</span>) &#123;</span><br><span class="line">    ctx.response.body = <span class="string">"&lt;h1&gt;index Router&lt;/h1&gt;"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 路由</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.request.path === <span class="string">"/todo"</span>) &#123;</span><br><span class="line">    ctx.response.body = <span class="string">"&lt;h1&gt;Todo Router&lt;/h1&gt;"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完事。 Demo:<br><img src="/2019/05/14/koa-1/demo.gif"><br>但官方已经有更好的中间件了：<code>koa-router</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根路由</span></span><br><span class="line">router.get(<span class="string">"/"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.body = <span class="string">"&lt;h1&gt;index Router&lt;/h1&gt;"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 路由</span></span><br><span class="line">router.get(<span class="string">"/todo"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.body = <span class="string">"&lt;h1&gt;Todo Router&lt;/h1&gt;"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(router.routes());</span><br></pre></td></tr></table></figure><p>具名路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给路由起个名字，便于复用</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"user"</span>, <span class="string">"users/:id"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.body = <span class="string">`你要访问的是 ： <span class="subst">$&#123;ctx.response.path&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>query param 以及 param 对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// params</span></span><br><span class="line">router.get(<span class="string">'/home/:id'</span>, <span class="keyword">async</span> (ctx,next) =&gt; &#123;</span><br><span class="line">ctx.response.type = <span class="string">'application/json'</span>;</span><br><span class="line">ctx.response.body = ctx.params;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// query-params</span></span><br><span class="line">router.get(<span class="string">'/home'</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">ctx.response.type = <span class="string">'application/json'</span>;</span><br><span class="line">ctx.response.body = <span class="string">`<span class="subst">$&#123;ctx.request.query&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>params:-object:<br><img src="/2019/05/14/koa-1/params-object.png" title="params-object params-object params-object"><br>query-params:<br><img src="/2019/05/14/koa-1/query-params.png" title="query-params query-params query-params"><br>拿 <code>Angular</code> 中的路由做一下类比：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形如 /home/:id</span></span><br><span class="line"><span class="keyword">this</span>.activitedRoute.paramMap.subscribe(<span class="function"><span class="params">param</span> =&gt;</span> <span class="built_in">console</span>.log(param)); <span class="comment">// &#123;"id": "4"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 形如 /home?a=1&amp;b=2</span></span><br><span class="line"><span class="keyword">this</span>.route.queryParamMap.subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res)); <span class="comment">// map&lt;string,number&gt; = new Map(&#123;a: 1, b:2&#125;);</span></span><br></pre></td></tr></table></figure><p>都是根据浏览器的 <code>urlParamsMap</code> 来实现的。</p><h2 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h2><p>上述的所有请求， 都是基于 <code>GET</code> 请求的，那么如果客户端发来 <code>post</code> 请求，怎么解析 send 过来的数据呢？通过路由吗？做不到啊！所以还是得借助 ctx 上挂着的的对象来进行解析，因为 post 请求接受 <code>form Data</code> 也是异步的，所以要给 <code>ctx.request</code> 绑定监听：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>)();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用路由，直接给出 form 表单，诱导进一步的 post 操作</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;form action="/submit" method="post"&gt;</span></span><br><span class="line"><span class="string">      &lt;input name="account" type="text"&gt; 账号</span></span><br><span class="line"><span class="string">      &lt;br/&gt;</span></span><br><span class="line"><span class="string">      &lt;input name="password" type="password"&gt; 密码</span></span><br><span class="line"><span class="string">      &lt;br/&gt;</span></span><br><span class="line"><span class="string">      &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行 post 操作时的 middleware</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.request.url === <span class="string">"/submit"</span>) &#123;</span><br><span class="line">    <span class="comment">// ctx.response.type = 'application/json';</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> parseData(ctx);</span><br><span class="line">    ctx.response.body = data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收上下文，通过 事件监听 和 promise 来达到解析数据的目的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseData</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> str = <span class="string">""</span>;</span><br><span class="line">      ctx.req.on(<span class="string">"data"</span>, data =&gt; &#123;</span><br><span class="line">        str += data;</span><br><span class="line">      &#125;);</span><br><span class="line">      ctx.req.addListener(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">        resolve(str);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add router middleware:</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"server is running at http://localhost:3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Demo: <img src="/2019/05/14/koa-1/post.gif" title="post post post"></p><p>But， 不用这么麻烦，有对应的轮子了: <code>koa-bodyparser</code> 该中间件，会将 post 的数据，全部解析进 <code>ctx.request.body</code> 中<br>核心代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">"koa-bodyparser"</span>);</span><br><span class="line"><span class="comment">// 直接使用中间件</span></span><br><span class="line">app.use(bodyparser());</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;form action="/submit" method="post"&gt;</span></span><br><span class="line"><span class="string">      &lt;input name="account" type="text"&gt; 账号</span></span><br><span class="line"><span class="string">      &lt;br/&gt;</span></span><br><span class="line"><span class="string">      &lt;input name="password" type="password"&gt; 密码</span></span><br><span class="line"><span class="string">      &lt;br/&gt;</span></span><br><span class="line"><span class="string">      &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.request.url === <span class="string">"/submit"</span>) &#123;</span><br><span class="line">    <span class="comment">// ctx.response.type = 'application/json';</span></span><br><span class="line"></span><br><span class="line">    ctx.response.body = ctx.request.body;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>来试试效果吧！<br><img src="/2019/05/14/koa-1/body-parser.gif" title="body-parser body-parser body-parser"><br>搞定了。</p><p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文章原始创作地址：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/ar
      
    
    </summary>
    
    
      <category term="koa" scheme="https://ZQ-jhon.github.io/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>公告</title>
    <link href="https://ZQ-jhon.github.io/2019/04/11/Notice/"/>
    <id>https://ZQ-jhon.github.io/2019/04/11/Notice/</id>
    <published>2019-04-11T16:34:00.000Z</published>
    <updated>2020-11-25T04:41:54.525Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href="https://zq-jhon.github.io/about/">https://zq-jhon.github.io/about/</a> 中添加我的微信</p><figure class="image-box"><img src="notice.png" alt="notice" title="notice"><p>notice</p></figure><p>今天打开 learnClound 发现，我的博客其实还是有人看的，还有人反映很多图片挂掉：</p><figure class="image-box"><img src="comment.png" alt="comment" title="comment"><p>comment</p></figure><p>之前的图片都是在 CSDN 上写完以后，直接 Copy 过来的， CSDN 不允许外链，因此挂了。</p><p>于是直接上了 hexo 的文章图片同步构建功能，直接使用文件名，就可以引用图片了，我只能说，GIHUB，等着扩容吧，哈哈，真香！</p><p><b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 &lt;a href=&quot;https://zq-jhon.g
      
    
    </summary>
    
    
      <category term="notice" scheme="https://ZQ-jhon.github.io/tags/notice/"/>
    
  </entry>
  
  <entry>
    <title>FreeCodeCamp JavaScript 基础算法练习</title>
    <link href="https://ZQ-jhon.github.io/2019/04/06/FreeCodeCamp%20JavaScript%20%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
    <id>https://ZQ-jhon.github.io/2019/04/06/FreeCodeCamp JavaScript 基础算法练习/</id>
    <published>2019-04-06T00:09:11.000Z</published>
    <updated>2020-11-25T04:41:54.525Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><h2 id="起由"><a href="#起由" class="headerlink" title="起由"></a>起由</h2><p>最近由于 996.icu 事件，才知道 GitHub 排行前十的 repo 中有这样一个项目。于是就刷起来了</p><h2 id="题-amp-解"><a href="#题-amp-解" class="headerlink" title="题 &amp; 解"></a>题 &amp; 解</h2><p><strong>1. 找出最长单词 在句子中找出最长的单词，并返回它的长度。函数的返回值应该是一个数字。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例 (test case): </span></span><br><span class="line">findLongestWord(<span class="string">"The quick brown fox jumped over the lazy dog"</span>) 应该返回一个数字</span><br><span class="line">findLongestWord(<span class="string">"The quick brown fox jumped over the lazy dog"</span>) 应该返回 <span class="number">6.</span></span><br><span class="line">findLongestWord(<span class="string">"May the force be with you"</span>) 应该返回 <span class="number">5.</span></span><br><span class="line">findLongestWord(<span class="string">"Google do a barrel roll"</span>) 应该返回 <span class="number">6.</span></span><br><span class="line">findLongestWord(<span class="string">"What is the average airspeed velocity of an unladen swallow"</span>) 应该返回 <span class="number">8.</span></span><br><span class="line">findLongestWord(<span class="string">"What if we try a super-long word such as otorhinolaryngology"</span>) 应该返回 <span class="number">19.</span></span><br></pre></td></tr></table></figure><p>解答：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 直接根据空格分割, 映射成 word 的长度，再使用 Math API 选出最大的</span></span><br><span class="line">  <span class="keyword">const</span> arr = str.split(<span class="string">' '</span>).map(<span class="function"><span class="params">word</span> =&gt;</span> word.length);</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">Math</span>.max(...arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 句中单词首字母大写 确保字符串的每个单词首字母都大写，其余部分小写。像’the’和’of’这样的连接符同理。</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例 (test case): </span></span><br><span class="line">titleCase(<span class="string">"I'm a little tea pot"</span>) 应该返回一个字符串</span><br><span class="line">titleCase(<span class="string">"I'm a little tea pot"</span>) 应该返回 <span class="string">"I'm A Little Tea Pot"</span>.</span><br><span class="line">titleCase(<span class="string">"sHoRt AnD sToUt"</span>) 应该返回 <span class="string">"Short And Stout"</span>.</span><br><span class="line">titleCase(<span class="string">"HERE IS MY HANDLE HERE IS MY SPOUT"</span>) 应该返回 <span class="string">"Here Is My Handle Here Is My Spout"</span>.</span><br></pre></td></tr></table></figure><p></p><p>解答：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 字符串处理的步骤和顺序至关重要</span></span><br><span class="line">  <span class="keyword">return</span>  str.toLowerCase().split(<span class="string">' '</span>).map(<span class="function"><span class="params">word</span> =&gt;</span> word.replace(word[<span class="number">0</span>], word[<span class="number">0</span>].toUpperCase())).join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 找出多个数组中的最大数 右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。</strong><br><em>提示：你可以用for循环来迭代数组，并通过arr[i]的方式来访问数组的每个元素。</em><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例 (test case): </span></span><br><span class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]) 应该返回一个数组</span><br><span class="line">largestOfFour([[<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]) 应该返回 [<span class="number">27</span>,<span class="number">5</span>,<span class="number">39</span>,<span class="number">1001</span>].</span><br><span class="line">largestOfFour([[<span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">35</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">97</span>, <span class="number">39</span>], [<span class="number">1000000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]) 应该返回 [<span class="number">9</span>, <span class="number">35</span>, <span class="number">97</span>, <span class="number">1000000</span>].</span><br></pre></td></tr></table></figure><p></p><p>解答：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">child</span> =&gt;</span> result.push(<span class="built_in">Math</span>.max.call(...child)));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你以为对了吗？？？？<br>呵呵</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举个例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array= [<span class="number">1000000</span>,<span class="number">1001</span>];</span><br><span class="line"><span class="built_in">Math</span>.max.call(...array);</span><br><span class="line"><span class="comment">// output is 1001</span></span><br><span class="line"></span><br><span class="line">所以，解答的结果中为： [<span class="number">9</span>, <span class="number">35</span>, <span class="number">97</span>, <span class="number">1001</span>]，与预期  [<span class="number">9</span>, <span class="number">35</span>, <span class="number">97</span>, <span class="number">1000000</span>] 不符</span><br><span class="line"></span><br><span class="line"><span class="comment">// WTF! WHY?</span></span><br><span class="line"><span class="comment">// 因为，在调用  `Math.max.call() ` 时，第一个参数传递 This 指针，实际上传入的却是一个数字，因此，该函数的运行时应该是这样的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>, <span class="number">1001</span>) 等价于 <span class="built_in">Math</span>.max(<span class="number">1001</span>) </span><br><span class="line"><span class="comment">// 实际上，参数只进去一个，自己跟自己没啥好比的。因此，当数组只有两个参数时，实际的输出结果完全取决于第二个参数是啥。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确解法一：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">child</span> =&gt;</span> result.push(<span class="built_in">Math</span>.max(...child)));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确解法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(child.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">     result.push(<span class="built_in">Math</span>.max(...child))</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">if</span>(child.length === <span class="number">1</span>) &#123;</span><br><span class="line">    result.push(child);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">if</span>(result.length === <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="comment">// 入参的时候应该不会传空数组，但还是防一手</span></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 检查字符串结尾 判断一个字符串(str)是否以指定的字符串(target)结尾。 如果是，返回true;如果不是，返回false。</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例 (test case): </span></span><br><span class="line">confirmEnding(<span class="string">"Bastian"</span>, <span class="string">"n"</span>) 应该返回 <span class="literal">true</span>.</span><br><span class="line">confirmEnding(<span class="string">"Connor"</span>, <span class="string">"n"</span>) 应该返回 <span class="literal">false</span>.</span><br><span class="line">confirmEnding(<span class="string">"Walking on water and developing software from a specification are easy if both are frozen"</span>, <span class="string">"specification"</span>) 应该返回 <span class="literal">false</span>.</span><br><span class="line">confirmEnding(<span class="string">"He has to give me a new name"</span>, <span class="string">"name"</span>) 应该返回 <span class="literal">true</span>.</span><br><span class="line">confirmEnding(<span class="string">"He has to give me a new name"</span>, <span class="string">"me"</span>) 应该返回 <span class="literal">true</span>.</span><br><span class="line">confirmEnding(<span class="string">"He has to give me a new name"</span>, <span class="string">"na"</span>) 应该返回 <span class="literal">false</span>.</span><br><span class="line">confirmEnding(<span class="string">"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing"</span>, <span class="string">"mountain"</span>) 应该返回 <span class="literal">false</span>.</span><br></pre></td></tr></table></figure><p></p><p>解答：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(target.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str[str.length<span class="number">-1</span>] === target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 分割母字符串</span></span><br><span class="line">  <span class="keyword">const</span> arr = str.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">return</span> (arr[arr.length<span class="number">-1</span>].indexOf(target) &gt; <span class="number">0</span>) || arr[arr.length<span class="number">-1</span>] === target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>5. 重复输出字符串 （重要的事情说3遍）重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例 (test case): </span></span><br><span class="line">repeat(<span class="string">"*"</span>, <span class="number">3</span>) 应该返回 <span class="string">"***"</span>.</span><br><span class="line">repeat(<span class="string">"abc"</span>, <span class="number">3</span>) 应该返回 <span class="string">"abcabcabc"</span>.</span><br><span class="line">repeat(<span class="string">"abc"</span>, <span class="number">4</span>) 应该返回 <span class="string">"abcabcabcabc"</span>.</span><br><span class="line">repeat(<span class="string">"abc"</span>, <span class="number">1</span>) 应该返回 <span class="string">"abc"</span>.</span><br><span class="line">repeat(<span class="string">"*"</span>, <span class="number">8</span>) 应该返回 <span class="string">"********"</span>.</span><br><span class="line">repeat(<span class="string">"abc"</span>, <span class="number">-2</span>) 应该返回 <span class="string">""</span>.</span><br></pre></td></tr></table></figure><p></p><p>解答：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">return</span> num &gt; <span class="number">0</span> ? str.repeat(num) : <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; num;i++) &#123;</span><br><span class="line">  result += str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">''</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>6. 截断字符串 （用瑞兹来截断对面的退路） 如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。 切记，插入到字符串尾部的三个点号也会计入字符串的长度。<br><em>但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</em></strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例 (test case): </span></span><br><span class="line">truncate(<span class="string">"A-tisket a-tasket A green and yellow basket"</span>, <span class="number">11</span>) 应该返回 <span class="string">"A-tisket..."</span>.</span><br><span class="line">truncate(<span class="string">"Peter Piper picked a peck of pickled peppers"</span>, <span class="number">14</span>) 应该返回 <span class="string">"Peter Piper..."</span>.</span><br><span class="line">truncate(<span class="string">"A-tisket a-tasket A green and yellow basket"</span>, <span class="string">"A-tisket a-tasket A green and yellow basket"</span>.length) 应该返回 <span class="string">"A-tisket a-tasket A green and yellow basket"</span>.</span><br><span class="line">truncate(<span class="string">"A-tisket a-tasket A green and yellow basket"</span>, <span class="string">"A-tisket a-tasket A green and yellow basket"</span>.length + <span class="number">2</span>) 应该返回 <span class="string">"A-tisket a-tasket A green and yellow basket"</span>.</span><br><span class="line">truncate(<span class="string">"A-"</span>, <span class="number">1</span>) 应该返回 <span class="string">"A..."</span>.</span><br><span class="line">truncate(<span class="string">"Absolutely Longer"</span>, <span class="number">2</span>) 应该返回 <span class="string">"Ab..."</span>.</span><br></pre></td></tr></table></figure><p></p><p>解答：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(str.length &gt; num) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.substr(<span class="number">0</span>,num<span class="number">-3</span>) + <span class="string">`...`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.substr(<span class="number">0</span>,num) + <span class="string">'...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>7. 猴子吃香蕉, 分割数组 （猴子吃香蕉可是掰成好几段来吃哦） 把一个数组arr按照指定的数组大小size分割成若干个数组块<br>例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];<br>chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例 (test case): </span></span><br><span class="line">chunk([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], <span class="number">2</span>) 应该返回 [[<span class="string">"a"</span>, <span class="string">"b"</span>], [<span class="string">"c"</span>, <span class="string">"d"</span>]].</span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>) 应该返回 [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]].</span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>) 应该返回 [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].</span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">4</span>) 应该返回 [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].</span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="number">3</span>) 应该返回 [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>]].</span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">4</span>) 应该返回 [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>]].</span><br></pre></td></tr></table></figure><p></p><p>解答<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arr.length &lt; size) &#123;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt; arr.length;i=i+size) &#123;</span><br><span class="line">   result.push(arr.slice(i,i+size))</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这道题一时半会我也没有思路，网上搜索的答案。<br>针对该类问题，大概的思路就是: <strong>通过迭代不断简化问题的复杂度，在每次迭代中处理细化后的小 case</strong><br>take a case:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> size = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 第一次迭代时: </span></span><br><span class="line">i = <span class="number">0</span>;  i + size = <span class="number">0</span> + <span class="number">2</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 因此 ( slice 操作是半闭半开区间 )</span></span><br><span class="line">arr.slice(<span class="number">0</span>,<span class="number">2</span>) =&gt; [<span class="number">1</span>,<span class="number">2</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次迭代时：</span></span><br><span class="line">i = 之前循环末尾语句的计算结果</span><br><span class="line">i = <span class="number">2</span>; i + size = <span class="number">2</span> + <span class="number">2</span> = <span class="number">4</span>;</span><br><span class="line">arr.slice(<span class="number">2</span>,<span class="number">4</span>) =&gt; [<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三次迭代时， i = 4, 已经无法通过循环条件 i &lt; arr.length( 4 &gt; 3 )，退出循环体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时， result 的结果为 [[1,2],[3]]</span></span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p><strong>8. 截断数组 返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test case: </span></span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>) 应该返回 [<span class="number">3</span>].</span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>) 应该返回 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].</span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">9</span>) 应该返回 [].</span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>) 应该返回 [].</span><br><span class="line">slasher([<span class="string">"burgers"</span>, <span class="string">"fries"</span>, <span class="string">"shake"</span>], <span class="number">1</span>) 应该返回 [<span class="string">"fries"</span>, <span class="string">"shake"</span>].</span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="string">"chicken"</span>, <span class="number">3</span>, <span class="string">"potatoes"</span>, <span class="string">"cheese"</span>, <span class="number">4</span>], <span class="number">5</span>) 应该返回 [<span class="string">"cheese"</span>, <span class="number">4</span>].</span><br></pre></td></tr></table></figure><p></p><p>解答：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slasher</span>(<span class="params">arr, howMany</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length &lt; howMany) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  arr.splice(<span class="number">0</span>, howMany);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没啥好说的，splice 不是一个 pure function, 每次经过 splice 操作，都会改变原始数组</span></span><br><span class="line"><span class="comment">// 另外，数组的非纯方法还有:</span></span><br><span class="line"></span><br><span class="line"> - <span class="built_in">Array</span>.prototype.push()</span><br><span class="line"> - <span class="built_in">Array</span>.prototype.unshift()</span><br><span class="line"> - <span class="built_in">Array</span>.prototype.pop()</span><br><span class="line"> - <span class="built_in">Array</span>.prototype.shift()</span><br><span class="line"> - <span class="built_in">Array</span>.prototype.sort()</span><br></pre></td></tr></table></figure><p><strong>9. 比较字符串 （蛤蟆可以吃队友，也可以吃对手）如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br>举例，[“hello”, “Hello”]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。<br>[“hello”, “hey”]应该返回false，因为字符串”hello”并不包含字符”y”。<br>[“Alien”, “line”]应该返回true，因为”line”中所有字符都可以在”Alien”找到。</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test case</span></span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"hey"</span>]) 应该返回 <span class="literal">false</span>.</span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"Hello"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"zyxwvutsrqponmlkjihgfedcba"</span>, <span class="string">"qrstu"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"Mary"</span>, <span class="string">"Army"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"Mary"</span>, <span class="string">"Aarmy"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"Alien"</span>, <span class="string">"line"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"floor"</span>, <span class="string">"for"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"neo"</span>]) 应该返回 <span class="literal">false</span>.</span><br></pre></td></tr></table></figure><p></p><p><strong>10. 比较字符串<br>（蛤蟆可以吃队友，也可以吃对手）<br>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br>举例，[“hello”, “Hello”]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。<br>[“hello”, “hey”]应该返回false，因为字符串”hello”并不包含字符”y”。<br>[“Alien”, “line”]应该返回true，因为”line”中所有字符都可以在”Alien”找到。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test case</span></span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"hey"</span>]) 应该返回 <span class="literal">false</span>.</span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"Hello"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"zyxwvutsrqponmlkjihgfedcba"</span>, <span class="string">"qrstu"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"Mary"</span>, <span class="string">"Army"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"Mary"</span>, <span class="string">"Aarmy"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"Alien"</span>, <span class="string">"line"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"floor"</span>, <span class="string">"for"</span>]) 应该返回 <span class="literal">true</span>.</span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"neo"</span>]) 应该返回 <span class="literal">false</span>.</span><br></pre></td></tr></table></figure><p>解答：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 啰里啰唆的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutation</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prev = arr[<span class="number">0</span>].toLowerCase().split(<span class="string">''</span>).sort().join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">const</span> next = arr[<span class="number">1</span>].toLowerCase().split(<span class="string">''</span>).sort().join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> result =  <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;next.length;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!prev.includes(next[i])) &#123;</span><br><span class="line">      result = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 装逼写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutation</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> accumulator = <span class="function">(<span class="params">acc, prev, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果只有一个成员，或者遍历不到下一个成员</span></span><br><span class="line">    <span class="keyword">if</span> (arr[index + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="comment">// 相比较的两个成员都进行转为小写操作</span></span><br><span class="line">      prev = prev.toLowerCase();</span><br><span class="line">      <span class="keyword">const</span> next = arr[index + <span class="number">1</span>].toLowerCase();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; next.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 找不到后面字符串中的某个字符时，直接 return</span></span><br><span class="line">        <span class="keyword">if</span>(!prev.includes(next[i])) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        acc = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr.reduce(accumulator, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>11. 过滤数组假值 （真假美猴王）删除数组中的所有假值。<br>在JavaScript中，假值有false、null、0、””、undefined 和 NaN。</strong><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test case</span></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">"ate"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">9</span>]) 应该返回 [<span class="number">7</span>, <span class="string">"ate"</span>, <span class="number">9</span>].</span><br><span class="line">bouncer([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]) 应该返回 [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].</span><br><span class="line">bouncer([<span class="literal">false</span>, <span class="literal">null</span>, <span class="number">0</span>, <span class="literal">NaN</span>, <span class="literal">undefined</span>, <span class="string">""</span>]) 应该返回 [].</span><br><span class="line">bouncer([<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">NaN</span>, <span class="number">2</span>, <span class="literal">undefined</span>]) 应该返回 [<span class="number">1</span>, <span class="number">2</span>].</span><br></pre></td></tr></table></figure><p></p><p>解答：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">member</span> =&gt;</span> <span class="built_in">Boolean</span>(member));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// API 背的熟练， Easy</span></span><br></pre></td></tr></table></figure><p></p><ol start="12"><li>摧毁数组 金克斯的迫击炮！实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 垃圾 撸啊撸，还金克斯，垃圾游戏，抄袭我 Dota</span></span><br><span class="line"><span class="comment">// test case</span></span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>) 应该返回 [<span class="number">1</span>, <span class="number">1</span>].</span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>) 应该返回 [<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>].</span><br><span class="line">destroyer([<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>) 应该返回 [<span class="number">1</span>].</span><br><span class="line">destroyer([<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>) 应该返回 [].</span><br><span class="line">destroyer([<span class="string">"tree"</span>, <span class="string">"hamburger"</span>, <span class="number">53</span>], <span class="string">"tree"</span>, <span class="number">53</span>) 应该返回 [<span class="string">"hamburger"</span>].</span><br></pre></td></tr></table></figure></li></ol><p>解答：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr, ...rest</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">const</span> params = <span class="built_in">Array</span>.from(rest);</span><br><span class="line">  params.map(<span class="function"><span class="params">member</span> =&gt;</span> &#123;</span><br><span class="line">   arr = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== member);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原文中， destoryer 函数只接受一个参数，想要考察 arguments, 可改造如下：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destoryer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 深拷贝一下</span></span><br><span class="line"><span class="keyword">const</span> brr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringfy(arr));</span><br><span class="line"><span class="comment">// 把默认的数组过滤掉</span></span><br><span class="line">brr.shift();</span><br><span class="line"><span class="keyword">const</span> params = <span class="built_in">Array</span>.from(brr);</span><br><span class="line">  params.map(<span class="function"><span class="params">member</span> =&gt;</span> &#123;</span><br><span class="line">   arr = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== member);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>13. 数组排序并找出元素索引<br>我身在何处？<br>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。<br>举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。<br>同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test case</span></span><br><span class="line">where([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], <span class="number">35</span>) 应该返回 <span class="number">3.</span></span><br><span class="line">where([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>], <span class="number">30</span>) 应该返回 <span class="number">2.</span></span><br><span class="line">where([<span class="number">40</span>, <span class="number">60</span>], <span class="number">50</span>) 应该返回 <span class="number">1.</span></span><br><span class="line">where([<span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>], <span class="number">3</span>) 应该返回 <span class="number">0.</span></span><br><span class="line">where([<span class="number">5</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">3</span>], <span class="number">5</span>) 应该返回 <span class="number">2.</span></span><br><span class="line">where([<span class="number">2</span>, <span class="number">20</span>, <span class="number">10</span>], <span class="number">19</span>) 应该返回 <span class="number">2.</span></span><br><span class="line">where([<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>], <span class="number">15</span>) 应该返回 <span class="number">3.</span></span><br></pre></td></tr></table></figure><p>解答<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 为什么不适用默认的 sort 参数呢？可以测试一下 [1,100,1000,1001,10000,10001 ].sort() 的结果</span></span><br><span class="line">  <span class="comment">// 进行非纯排序</span></span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// let 个变量，用于缓存最终插入的下标</span></span><br><span class="line">  <span class="keyword">let</span> insetIndex = <span class="number">0</span> ;</span><br><span class="line">  <span class="comment">// 当所有成员都小于等于给定值，那么插入的位置为最后一个</span></span><br><span class="line">  <span class="keyword">if</span>(arr.every(<span class="function"><span class="params">member</span> =&gt;</span> member &lt;= num)) &#123;</span><br><span class="line">    insetIndex = arr.length;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 当所有成员都大于等于给定值，那么插入位置为第一个</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(arr.every(<span class="function"><span class="params">member</span> =&gt;</span> member &gt;= num)) &#123;</span><br><span class="line">    insetIndex = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果都不是，那么，找到比他大的那个数的下标，将此下标作为最终的插入下标</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    insetIndex = arr.findIndex(<span class="function"><span class="params">member</span> =&gt;</span> member &gt;= num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> insetIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** PS： 在 </span></span><br><span class="line"><span class="comment">else &#123;  </span></span><br><span class="line"><span class="comment">insetIndex = arr.findIndex(member =&gt; member &gt;= num); </span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">逻辑中，我本来判断的是 </span></span><br><span class="line"><span class="comment">member =&gt; member &lt;= num </span></span><br><span class="line"><span class="comment">这样是不对的，因为可能有多个数比他小，返回第一个比他小的数，位置不准确</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p></p><p><strong>14. 凯撒密码 （让上帝的归上帝，凯撒的归凯撒）下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。<br>移位密码也就是密码中的字母会按照指定的数量来做移位。 一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。<br>写一个ROT13函数，实现输入加密字符串，输出解密字符串。</strong></p><p>什么是凯撒密码？一张图说明：<br>下图搬运自：<br><a href="https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" target="_blank" rel="noopener">https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a><br></p><figure class="image-box"><img src="https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="图片搬运自https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><p>图片搬运自https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</p></figure><br>我的理解： 简单来说，凯撒密码的规则就是，加密和揭秘双方以一个数字作为密钥，来约定每个字母的位移顺序。例如，密钥为3时，A =&gt; D, B=&gt; E … X =&gt; A (因为X的 charCodeAt +3 已经超过了 Z，不符合规则，因此需要 先减去一个 循环的周期 26，再按照密钥+3)<br>不 BB 了， show you code<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`X`</span>.charCodeAt(<span class="number">0</span>) = <span class="number">88</span>;</span><br><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">88</span>+<span class="number">3</span>); <span class="comment">// '[' 不符合凯撒加密规则，因此需要先往回撤回一个密码表周期, 即 26 ，再按照密钥位移 +3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">88</span><span class="number">-26</span>+<span class="number">3</span>); <span class="comment">// 'A' this is right!</span></span><br></pre></td></tr></table></figure><p></p><p>解答：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将一段话，转换为可以被处理的二维数组 eg: `hello, my wolrd!` =&gt; [`hello,`,`my` ,`world`];</span></span><br><span class="line">    <span class="keyword">const</span> stringArrays = str.split(<span class="string">' '</span>).filter(<span class="function"><span class="params">member</span> =&gt;</span> !!member);</span><br><span class="line">    <span class="comment">// 再分别处理每一个 "单词"</span></span><br><span class="line">    <span class="keyword">const</span> parseResult = stringArrays.map(<span class="function"><span class="params">word</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 将每个单词转换为数组，对每个字符进行处理</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.from(word).map(<span class="function"><span class="params">charator</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// A 对应的 ASCII =&gt; 65 , N 对应的 ASCII =&gt; 78</span></span><br><span class="line">            <span class="keyword">const</span> ZCode =  <span class="string">'Z'</span>.charCodeAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">let</span> current = charator.charCodeAt(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 非字母的处理方法</span></span><br><span class="line">            <span class="keyword">if</span>(current &lt; <span class="number">65</span> || current &gt; ZCode) &#123;</span><br><span class="line">                <span class="keyword">return</span> charator;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> dest = (charator.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>) &gt; ZCode ? (charator.charCodeAt(<span class="number">0</span>) <span class="number">-26</span> + <span class="number">13</span>): charator.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>;</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(dest); </span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;).join(<span class="string">''</span>); <span class="comment">//单词中的每个字母拼接，不用空格</span></span><br><span class="line">      </span><br><span class="line">    &#125;).join(<span class="string">' '</span>); <span class="comment">//多个单词拼接，需要空格</span></span><br><span class="line">    <span class="keyword">return</span> parseResult;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 另外，这里的 </span></span><br><span class="line"> <span class="keyword">if</span>(current &lt; <span class="number">65</span> || current &gt; ZCode) &#123;</span><br><span class="line">                <span class="keyword">return</span> charator;</span><br><span class="line">            &#125;</span><br><span class="line"> 可以使用 <span class="built_in">String</span>.match(<span class="regexp">/\w/g</span>) 来命中为数组，从而过滤掉非字母的标点符号</span><br></pre></td></tr></table></figure><p></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些算法都是最最最最最基本的算法，然而在解决这些问题中，还是出现了卡壳的地方。<br>算法还是得多练，人脑的逻辑思维，就得靠大量算法来优化和调教~<br>keep moving !</p><p><b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;起由&quot;&gt;&lt;a href=&quot;#起由&quot; class=&quot;headerlink&quot; title=&quot;起由&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="算法" scheme="https://ZQ-jhon.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Css位移属性导致像素模糊问题解决办法</title>
    <link href="https://ZQ-jhon.github.io/2019/02/22/Css%E4%BD%8D%E7%A7%BB%E5%B1%9E%E6%80%A7%E5%AF%BC%E8%87%B4%E5%83%8F%E7%B4%A0%E6%A8%A1%E7%B3%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://ZQ-jhon.github.io/2019/02/22/Css位移属性导致像素模糊问题解决办法/</id>
    <published>2019-02-22T10:53:11.000Z</published>
    <updated>2020-11-25T04:41:54.521Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><h2 id="一、抛出问题"><a href="#一、抛出问题" class="headerlink" title="一、抛出问题"></a>一、抛出问题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modal-container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translat</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码，是做一个模态框，该模态框使用 Hack 方法来垂直竖直两个方向居中，但是在实际操作中，会发现，整个模态框的边缘，会出现模糊的现象，仿佛打了马赛克一样。</p><p>马赛克版：<br><img src="https://img-blog.csdnimg.cn/20190222103114976.png" alt="马赛克"></p><p>高清版:<br><img src="https://img-blog.csdnimg.cn/20190222103150331.png" alt="高清版"></p><p>可能上传的图片质量不高，但在我的电脑上差异非常明显</p><h2 id="二、分析原因"><a href="#二、分析原因" class="headerlink" title="二、分析原因"></a>二、分析原因</h2><p>经过查阅资料和一通分析，发现是CSS 的 transform： translate 属性在作元素位移时，极有可能发生像素点无法对其的情况，从而导致显示模糊的问题，画个灵魂示例图：<br><img src="https://img-blog.csdnimg.cn/20190222104705597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx,size_16,color_FFFFFF,t_70" alt="灵魂示意图"></p><p>如图，正常情况下，元素的边缘应该和像素点对齐，但是经过 CSS translate 后，计算的结果并非整数的像素点，导致本来一个像素能渲染的内容，没有完全归纳在其像素点内，导致出现模糊的情况。</p><p>翻译成人话： css transform:translate(-50%,-50%) 计算后的结果很可能是 transform: translate( 100.5px, 100.5px)，就因为 0.5 所以模糊</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>方式有二</p><p>第一种： 在 transfrom 时，使用 calc 函数 加上0.5 px ，具体代码 :<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="comment">/** 这 0.5px加或者减都可以 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translat</span>(calc(-50% + 0.5 px), <span class="built_in">calc</span>(-50% + 0.5 px));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>第二种，别 transform 了，直接父元素弄成 Flex 布局，两条轴都设置居中，也能达到效果。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;一、抛出问题&quot;&gt;&lt;a href=&quot;#一、抛出问题&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="css" scheme="https://ZQ-jhon.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Electron设置-webkit-app-region 后无法响应鼠标点击事件的解决方式</title>
    <link href="https://ZQ-jhon.github.io/2019/02/19/Electron%E8%AE%BE%E7%BD%AE-webkit-app-region%20%E5%90%8E%E6%97%A0%E6%B3%95%E5%93%8D%E5%BA%94%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
    <id>https://ZQ-jhon.github.io/2019/02/19/Electron设置-webkit-app-region 后无法响应鼠标点击事件的解决方式/</id>
    <published>2019-02-19T17:46:11.000Z</published>
    <updated>2020-11-25T04:41:54.521Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><h2 id="一、抛出问题"><a href="#一、抛出问题" class="headerlink" title="一、抛出问题"></a>一、抛出问题</h2><p>在开发 Electron 应用的过程中，想要使得窗口在普通大小可以拖动，于是设置给 title-bar css 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title-bar</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">-webkit-app-region</span>: drag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是设置了这个属性后，发现在 title-bar 上双击全屏和 restore size 的功能又废了，现象如图：<br><img src="https://img-blog.csdnimg.cn/20190219173642306.gif" alt="现象"></p><p>怎么办呢？</p><h2 id="二、网上现有的方案"><a href="#二、网上现有的方案" class="headerlink" title="二、网上现有的方案"></a>二、网上现有的方案</h2><p>通过搜索不难发现，有如下方案：</p><ol><li><p>拖动不要用 -webkit-app-region 了，自己监听 mouseDown 和 mouseUp 来实现吧</p></li><li><p>父元素设置 -webkit-app-region： drag, 子元素 -webkit-app-region： no-drag 即可</p></li></ol><p>但是，本项目在实际开发过程中有点特殊，即：要实现拖拽和双击放大/缩小的所著元素为同一个 DOM</p><h2 id="三、最终解决方案"><a href="#三、最终解决方案" class="headerlink" title="三、最终解决方案"></a>三、最终解决方案</h2><p>在宿主 Dom 中嵌套一个等宽，等高，但设置了-webkit-app-region： no-drag 属性的 div 即可，上代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拖拽使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;'title-bar__drag': !isMax&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"-webkit-app-region: no-drag; width: 100%;height: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，一切都正常啦！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;一、抛出问题&quot;&gt;&lt;a href=&quot;#一、抛出问题&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="css" scheme="https://ZQ-jhon.github.io/tags/css/"/>
    
      <category term="electron" scheme="https://ZQ-jhon.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>rx.js将二维数据拍扁(平)</title>
    <link href="https://ZQ-jhon.github.io/2018/09/26/rx.js%E5%B0%86%E4%BA%8C%E7%BB%B4%E6%95%B0%E6%8D%AE%E6%8B%8D%E6%89%81(%E5%B9%B3)/"/>
    <id>https://ZQ-jhon.github.io/2018/09/26/rx.js将二维数据拍扁(平)/</id>
    <published>2018-09-26T20:00:00.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文初始编辑地址，源自我的CSDN博客：<a href="https://blog.csdn.net/qq_20264891/article/details/82858004" target="_blank" rel="noopener">我的CSDN博客</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 从后台返回如下格式数据 </span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 期望数据结构： [...&#123; index:'', name: '', age: '' &#125;]  该数据类型的长度为 9 (所有数据拆开的总长度)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">const</span> response = &#123;</span><br><span class="line">            content: [</span><br><span class="line">                [&#123; <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'aa1'</span>, <span class="attr">age</span>: <span class="number">11</span> &#125;, &#123; <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'aa2'</span>, <span class="attr">age</span>: <span class="number">11</span> &#125;, &#123; <span class="attr">index</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'aa3'</span>, <span class="attr">age</span>: <span class="number">11</span> &#125;],</span><br><span class="line">                [&#123; <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'bb1'</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;, &#123; <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'bb2'</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;, &#123; <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'bb3'</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;],</span><br><span class="line">                [&#123; <span class="attr">index</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'cc1'</span>, <span class="attr">age</span>: <span class="number">13</span> &#125;, &#123; <span class="attr">index</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'cc2'</span>, <span class="attr">age</span>: <span class="number">13</span> &#125;, &#123; <span class="attr">index</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'cc3'</span>, <span class="attr">age</span>: <span class="number">13</span> &#125;]</span><br><span class="line"> </span><br><span class="line">            ],</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用 Rx.js</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">of</span>(response).pipe(</span><br><span class="line">            map(<span class="function"><span class="params">res</span> =&gt;</span> res.content),</span><br><span class="line">            mergeMap(<span class="function"><span class="params">arr</span> =&gt;</span> <span class="keyword">from</span>(arr)),</span><br><span class="line">            mergeMap(<span class="function"><span class="params">arr</span> =&gt;</span> <span class="keyword">from</span>(arr)),</span><br><span class="line">            toArray(),</span><br><span class="line">        ).subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br></pre></td></tr></table></figure><p>最终结果：</p><p><img src="https://img-blog.csdn.net/20180926193747185?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>说明：无论嵌套多复杂，嵌套几层，都能用 opreator 给拍平，这就是纯函数强大的地方，指责单一，功能明确，代码量小。</p><p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文初始编辑地址，源自我的CSDN博客：&lt;a href=&quot;https://blog.csdn.net/qq_2
      
    
    </summary>
    
    
      <category term="rxjs" scheme="https://ZQ-jhon.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis-CI 持续集成部署 HEXO 博客项目</title>
    <link href="https://ZQ-jhon.github.io/2018/08/29/%E4%BD%BF%E7%94%A8%20Travis-CI%20%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2%20HEXO%20%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"/>
    <id>https://ZQ-jhon.github.io/2018/08/29/使用 Travis-CI 持续集成部署 HEXO 博客项目/</id>
    <published>2018-08-29T15:21:08.000Z</published>
    <updated>2020-11-25T04:41:54.549Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --><p>本文初始编辑地址，源自我的CSDN博客：<a href="https://blog.csdn.net/qq_20264891/article/details/82183614" target="_blank" rel="noopener">我的CSDN博客</a></p><h2 id="持续集成的概念"><a href="#持续集成的概念" class="headerlink" title="持续集成的概念"></a>持续集成的概念</h2><p>现在前端项目都是模块化开发，需要大量的 npm install ,编译等环节，除去在开发环节中使用诸如 webpack 这样的自动化工具，在部署的时候，也可以使用 Travis 来提升部署效率。<br>持续集成，相当于将环境搭建在云端，每次只需提交代码到对应的分支，就会触发 CI 自动构建，其中构建过程中的指令都可以指定。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p><strong>已经有 HEXO 搭建的博客，并且源码存放在 HEXO 项目的分支上(分支名字随便起，不是 master 就行)。</strong><br>如图：<br><img src="https://img-blog.csdn.net/20180829150457739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="部署"></p></li><li><p><strong>熟悉 HEXO 的用法及基本指令，例如</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g // 构建</span><br><span class="line">$ hexo clean // 清除已构建的资源</span><br><span class="line">$ hexo s // 起服务</span><br></pre></td></tr></table></figure><h2 id="持续集成部署"><a href="#持续集成部署" class="headerlink" title="持续集成部署"></a>持续集成部署</h2><ul><li><p>登录<a href="https://travis-ci.org/" target="_blank" rel="noopener">https://travis-ci.org/</a>，使用github账号登录。</p></li><li><p>找到自己的 HEXO 项目：<br><img src="https://img-blog.csdn.net/20180829150920443?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="HEXO项目"></p></li><li>设置选项</li></ul><p>在github添加Access Token，在右上角账号的settings-&gt;Personal access tokens.点击generate new token来生成新token<br>选择仓库权限就可以。<br></p><figure class="image-box"><img src="https://img-blog.csdn.net/20180829151058290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="get token"><p>get token</p></figure><p></p><p>除了 “删库”。其他权限都给上：<br></p><figure class="image-box"><img src="https://img-blog.csdn.net/20180829151158858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="权限分配"><p>权限分配</p></figure><p></p><p><em>(生成之后一定要保存好，因为只会出现一次，丢失了就只能再重新生成了。)</em></p><ul><li>回到Travis官网，在设置中填入刚复制的token，取一个名字，这个名字需要写到下面的配置文件中<figure class="image-box"><img src="https://img-blog.csdn.net/20180829151351186?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="添加 token"><p>添加 token</p></figure></li><li>在你的hexo项目的 <strong>分支中</strong> 添加配置文件.travis.yml，并且<strong>放在 HEXO 源码分支的根目录下</strong>如下：</li></ul><p><img src="https://img-blog.csdn.net/20180829153110581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=".travis.yml"><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line"></span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name &quot;ZQ-jhon&quot;</span><br><span class="line">  - git config user.email &quot;350037310@qq.com&quot;</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;Update docs with TRAVIS-CI.&quot;</span><br><span class="line">  - `git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master`</span><br><span class="line">  </span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - hexo</span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: github.com/ZQ-jhon/ZQ-jhon.github.io.git</span><br></pre></td></tr></table></figure><p></p><p>你需要修改的是 user.name，user.email，以及在 GH_REF 中填写你自己的仓库中该项目的地址( 浏览器 url 自己找规律 )。<br>要使用https协议的仓库地址，使用ssh仓库地址会失败。<br>注意这一行<code>git push --force --quiet &quot;https://${githubblog}@${GH_REF}&quot;</code> 中的githubblog就是你刚在token那里取的 Token 字段，key 要对应上。</p><p>配置完成后推送到仓库中，我们就能看到网站中在部署了。</p><ul><li><p>展示：<br>我push了一个新文件，触发了自动构建，这里可以看到构建过程，其实跟我们本地跑 npm install … 那些流程是一样的：<br><img src="https://img-blog.csdn.net/20180829152604244?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="构建过程"></p><figure class="image-box"><img src="https://img-blog.csdn.net/20180829151945335?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="部署成功"><p>部署成功</p></figure></li><li><p>参考：<br><a href="https://www.jianshu.com/p/5691815b81b6" target="_blank" rel="noopener">https://www.jianshu.com/p/5691815b81b6</a><br>[<a href="https://blog.csdn.net/woblog/article/details/51319364]" target="_blank" rel="noopener">https://blog.csdn.net/woblog/article/details/51319364]</a>(<a href="https://blog.csdn.net/woblog/article/details" target="_blank" rel="noopener">https://blog.csdn.net/woblog/article/details</a><br><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 25 2020 04:42:33 GMT+0000 (Coordinated Universal Time) --&gt;&lt;p&gt;本文初始编辑地址，源自我的CSDN博客：&lt;a href=&quot;https://blog.csdn.net/qq_2
      
    
    </summary>
    
    
      <category term="Travis-CI" scheme="https://ZQ-jhon.github.io/tags/Travis-CI/"/>
    
      <category term="Hexo" scheme="https://ZQ-jhon.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session、Token</title>
    <link href="https://ZQ-jhon.github.io/2018/08/26/cookie,session,token/"/>
    <id>https://ZQ-jhon.github.io/2018/08/26/cookie,session,token/</id>
    <published>2018-08-26T23:57:08.000Z</published>
    <updated>2020-11-21T17:29:51.419Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 22 2020 01:29:51 GMT+0800 (GMT+08:00) --><p>本文初始编辑地址，源自我的CSDN博客：<a href="https://mp.csdn.net/postedit/82085958" target="_blank" rel="noopener">我的CSDN博客</a></p><p>Cookie 是比较早的服务端和客户端验证身份的方法。<br>因为 http 是无状态的，因此，每次 http 请求，服务端不知道是谁在来访，因此，对于每次来访，回传字段中会设置 set-cookie 字段，浏览器会将 cookie 保存在本地，等下次 http 请求，再发送给这个域名的服务器。</p><p>Cookie 可以由服务端来设置生命周期。</p><p>Cookie 存储在客户端本地 。</p><p>Cookie 挂载在 Document 对象下，可以用 js 修改，因此有安全风险，所以后面又引入 Session 来补全不足。</p><p>一般情况， cookie 直接写入请求头。</p><p>For eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 首次访问</span></span><br><span class="line"></span><br><span class="line">client =&gt; 访问 www.example.com</span><br><span class="line"></span><br><span class="line">server =&gt; 收到来访，在回传字段中，包含 set-cookie 字段：</span><br><span class="line"></span><br><span class="line">&#123; set-cookie: username=uuidtest123;Domail=.example.com ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次访问</span></span><br><span class="line"></span><br><span class="line">client =&gt; 判断访问的域名，检查是否存在该域名的 cookie, 有的话就带上一起请求</span><br><span class="line"></span><br><span class="line">server =&gt; 收到来访，并含有 cookie ，回传不用再加新 cookie 了。</span><br></pre></td></tr></table></figure><p>Session 一般通过 set-cookie 一起传过来，配合 cookie 保存会话信息。</p><p>Session 的出现是为了保持用户的连接状态而做出的努力。</p><p>比如有一个场景，用户登录了 a.com ，如果登陆 a.com/profile ，查看一下个人资料，难道还要用户重新登陆吗?不合适吧？</p><p>用户判断 Cookie 所在的客户端是否还“在线”，每次客户端进行请求(动作)，都会刷新 Session 的时间值。</p><p>For eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 首次访问</span></span><br><span class="line"></span><br><span class="line">client =&gt; 访问 www.example.com</span><br><span class="line"></span><br><span class="line">server =&gt; 收到来访，在回传字段中，包含 set-cookie 字段：</span><br><span class="line"></span><br><span class="line">&#123; set-cookie: username=uuidtest123;Domail=.example.com;sessionId=xxx;sessionFresh=<span class="number">30</span>min;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次访问</span></span><br><span class="line"></span><br><span class="line">client =&gt; 访问 www.example.com ，并自动携带 session</span><br><span class="line"></span><br><span class="line">server =&gt; 收到来访，刷新 session 的新鲜值，并通过 set-cookie 回传给客户端。</span><br><span class="line"></span><br><span class="line">如果在限定的时间内（此处是<span class="number">30</span>分钟）， session 新鲜值没有被刷新，就会被销毁。</span><br></pre></td></tr></table></figure><p>其中 cookie 的作用就是为了解决HTTP协议无状态的现状所作出的努力。至于 session 机制则是又一种在客户端与服务器之间保持状态的解决方案。</p><p>简而言之， cookie 是辨别来访者，session 是看该来访者是否保持连接</p><p>​​​​​<br>token 和 session 很像，也是为了保持状态，一般是登陆以后，后端会返回 sessinId ,其实就是 token=&gt; 用户唯一标识，通过 Cookie 来传给后台。</p><p>token 在前端传给后端时，直接写入请求体，当做普通参数缀在后面即可。</p><p>参考： <a href="https://zhuanlan.zhihu.com/p/27736893" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27736893</a></p><p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 22 2020 01:29:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文初始编辑地址，源自我的CSDN博客：&lt;a href=&quot;https://mp.csdn.net/postedit/82085958&quot; targ
      
    
    </summary>
    
    
      <category term="http" scheme="https://ZQ-jhon.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程与响应式编程之己见</title>
    <link href="https://ZQ-jhon.github.io/2018/07/22/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B7%B1%E8%A7%81/"/>
    <id>https://ZQ-jhon.github.io/2018/07/22/函数式编程与响应式编程之己见/</id>
    <published>2018-07-22T21:00:08.000Z</published>
    <updated>2020-03-30T12:00:21.021Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat May 02 2020 21:51:39 GMT+0800 (GMT+08:00) --><p>本文初始编辑地址，源自我的CSDN博客：<a href="https://blog.csdn.net/qq_20264891/article/details/81157232" target="_blank" rel="noopener">我的CSDN博客</a></p><h2 id="1-what-is-函数式编程？"><a href="#1-what-is-函数式编程？" class="headerlink" title="1. what is 函数式编程？"></a>1. what is 函数式编程？</h2><p>函数，在编程中，通常体现为： 输入 =&gt; 执行 =&gt; 结果。他不是命令式的，而是对一段操作进行逻辑封装，拿到输入，就能产出结果。通常来说，满足函数式编程的特性的“函数”应该有如下特点:</p><p>函数必须有入参，并且函数的产出会根据入参的不同而变化。<br>函数执行的整个流程中，不会对全局变量、外部属性等产生影响。<br>函数式编程代码量小，干净。<br>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOne</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        array[i] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addOne(arr); <span class="comment">// 2,3,4,5,6</span></span><br></pre></td></tr></table></figure><p>写了一个方法，接受一个数组，产出数组每个成员+1，但这段代码的不足之处在于：</p><p>难以复用，如果需求提出 addTwo,addThree方法，需要不断修改函数名和内部逻辑。<br>内部的代码很啰嗦， for 循环很low。<br>·函数式编程改进版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.map(<span class="function"><span class="params">item</span>=&gt;</span> item+<span class="number">1</span>); <span class="comment">// 3,4,5,6,7</span></span><br></pre></td></tr></table></figure><p>这里，改进使用了原生的 Array.prototype.map 方法，代码量缩小了很多不说，而且复用性进一步提升。整个函数做的事情现在非常直观，入参 =&gt; 每项参数 + 1 =&gt; 返回新数组，由此，可以说，map()方法是一个纯函数(pure function)。</p><h2 id="2-响应式编程"><a href="#2-响应式编程" class="headerlink" title="2. 响应式编程"></a>2. 响应式编程</h2><p>前端中也有一个概念叫响应式，bootstrap 。这里当然说的不是这个，对于响应式编程的概念，我想提及Vue或者 angular的双向绑定来阐述：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// template: </span></span><br><span class="line"></span><br><span class="line">i<span class="string">'am &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// js:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">name = '</span>jhon<span class="string">';</span></span><br></pre></td></tr></table></figure><p></p><p>在前端MVVM的框架中，都有一个数据双向绑定的概念，这里的模版中的变量，实时反映了数据中的 name 变量的 value，而且，如果此时我修改了 name 的值，那么模版中对应的值也会跟着修改。数据 &lt;=&gt; 视图 是同时发生，同时改变的，因为模版就是对数据的一个映射。</p><p>再举个例子：</p><p>c的值，是通过 a + b 来赋值的，如果ab不是固定的，而是变化的值，那么 c 的值也不会固定为3。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = a + b; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p></p><p>不难看出，响应式编程特点：</p><p>同步发生，结果会随着修改参数而实时、动态地变化。<br>存在固定的映射关系。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat May 02 2020 21:51:39 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文初始编辑地址，源自我的CSDN博客：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/article/d
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://ZQ-jhon.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>NodeBB搭建过程（windows+Redis）+ 科学上网方法</title>
    <link href="https://ZQ-jhon.github.io/2018/06/22/NodeBB%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%EF%BC%88windows+Redis%EF%BC%89+%20%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%96%B9%E6%B3%95/"/>
    <id>https://ZQ-jhon.github.io/2018/06/22/NodeBB搭建过程（windows+Redis）+ 科学上网方法/</id>
    <published>2018-06-22T10:04:36.000Z</published>
    <updated>2020-11-21T17:29:51.416Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Nov 22 2020 01:29:51 GMT+0800 (GMT+08:00) --><p>本文初始编辑地址，源自我的CSDN博客：<a href="https://blog.csdn.net/qq_20264891/article/details/80769624" target="_blank" rel="noopener">我的CSDN博客</a></p><h2 id="1-首先去-github-把项目-clone-下来："><a href="#1-首先去-github-把项目-clone-下来：" class="headerlink" title="1.首先去 github 把项目 clone 下来："></a>1.首先去 github 把项目 clone 下来：</h2><p><a href="https://github.com/NodeBB/NodeBB" target="_blank" rel="noopener">https://github.com/NodeBB/NodeBB</a></p><p>然后cd到nodebb，安装依赖 cnpm i</p><p>依赖在安装的时候，由于没有 package.json ，会自动 clone ，整个以来安装完成后，应该是这样：<br></p><figure class="image-box"><img src="https://img-blog.csdn.net/20180622095626833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="install"><p>install</p></figure><p></p><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2.环境配置"></a>2.环境配置</h2><p>附上中文文档：<a href="https://docs.nodebb-cn.org/" target="_blank" rel="noopener">https://docs.nodebb-cn.org/</a></p><p>1.Chocolatey 可以下载<strong>离线包</strong>，之后通过 Chocolatey 安装一些环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install -y imagemagick github python2 nodejs-lts git</span><br></pre></td></tr></table></figure><p>这里的 github , nodejs ，git 可以选择不安装，跳过。<br>2.数据库（database）选择 Redis<br>Redis 可以在菜鸟教程上面找到安装教程：<br><a href="http://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-install.html</a></p><p>安装完成以后，WINDOWS + R 打开 services.msc ，找到 Redis 服务，启动之：<br></p><figure class="image-box"><img src="https://img-blog.csdn.net/20180622095820272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Redis"><p>Redis</p></figure><p></p><h2 id="3-Hello-World-Running"><a href="#3-Hello-World-Running" class="headerlink" title="3.Hello World Running"></a>3.Hello World Running</h2><p>首先，使用命令 ./nodebb build 构建静态资源，构建完如下：<br></p><figure class="image-box"><img src="https://img-blog.csdn.net/2018062210001911?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="helloworld"><p>helloworld</p></figure><p></p><p>此时打开监听的 127.0.0.1:4567 (默认配置的端口)，如图所示：<br></p><figure class="image-box"><img src="https://img-blog.csdn.net/20180622100114522?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="installer"><p>installer</p></figure><p></p><p>上面的直接填写，下面的数据库配置如下：<br></p><figure class="image-box"><img src="https://img-blog.csdn.net/20180622100206278?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="database"><p>database</p></figure><br>点击最下面的 install NodeBB 后，整个项目总算 Running 了：<br><figure class="image-box"><img src="https://img-blog.csdn.net/20180622100409227?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="running"><p>running</p></figure><p></p><h2 id="4-use-LANTERN-to-cross-wall-使用lantern-科学上网"><a href="#4-use-LANTERN-to-cross-wall-使用lantern-科学上网" class="headerlink" title="4 . use LANTERN to cross wall (使用lantern 科学上网)"></a>4 . use LANTERN to cross wall (使用lantern 科学上网)</h2><p>下载lantern安装包 =&gt; 一路next安装，并启动 =&gt; 右下角图标右键 ，连接 =&gt; OK<br>依赖环境 .net FrameWork 4.0 +<br>我都打包好了 :<br>链接：<a href="https://pan.baidu.com/s/1-aMsEznQ76Tjd5vrfEwrow" target="_blank" rel="noopener">https://pan.baidu.com/s/1-aMsEznQ76Tjd5vrfEwrow</a> 密码：yyfg</p><p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Nov 22 2020 01:29:51 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文初始编辑地址，源自我的CSDN博客：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/article/d
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://ZQ-jhon.github.io/tags/javascript/"/>
    
      <category term="node" scheme="https://ZQ-jhon.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈来北京后的工作节奏以及对前端的看法</title>
    <link href="https://ZQ-jhon.github.io/2018/05/23/%E8%B0%88%E4%B8%80%E8%B0%88%E6%9D%A5%E5%8C%97%E4%BA%AC%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%8A%82%E5%A5%8F%E4%BB%A5%E5%8F%8A%E5%AF%B9%E5%89%8D%E7%AB%AF%E7%9A%84%E7%9C%8B%E6%B3%95/"/>
    <id>https://ZQ-jhon.github.io/2018/05/23/谈一谈来北京的工作节奏以及对前端的看法/</id>
    <published>2018-05-23T22:12:52.000Z</published>
    <updated>2020-05-01T09:27:44.459Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat May 02 2020 21:51:39 GMT+0800 (GMT+08:00) --><p>本文初始编辑地址，源自我的CSDN博客：<a href="https://blog.csdn.net/qq_20264891/article/details/80427169" target="_blank" rel="noopener">我的CSDN博客</a></p><h2 id="为什么来北京"><a href="#为什么来北京" class="headerlink" title="为什么来北京"></a>为什么来北京</h2><p>这个问题放在几个月之前，我肯定会踌躇满志的说：因为渴望技术，因为热爱coding（其实是因为贫穷）。<br>那时候一味的认为北京物价高，对应工资高是理所应当的。结果直到我住到沙河，才明白，北京的物价没有我想像的那么夸张，工作也没有我在兰州那样简单和无趣。粗略的一算，来北京已经将近三个月了，除了发际线有点不受控制，其他方面可以说一直在走上坡路。<br>下面，总结一下这三个月以来，关于工作，关于前端，关于生活方面的感悟和理解。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>因为之前毕竟接到过腾讯和电信的面试邀请（但是因为太菜，挂了），所以信心满满，觉得自己也是前端界的人了。来北京找工作其实还是碰壁了很多次的，连续十几天，寄宿在我哥的出租屋里，每天早出晚归，一天面三家公司，无一例外都被发好人卡。几近心灰意冷的时候，才出现了转机。虽然现在在一个小公司里，但是也好歹算是稳定下来了。美中不足的是，误打误撞的进入了外包公司，每天基本上被业务填满，再加上住在沙河，明天上下班耗费我4个小时，晚上回家基本上学习一两个小时就要睡觉，没有大片空余的时间能够让我挥霍。<br>虽然进入外包公司，但是收入方面让我挺满意的，相比于在兰州，基本上翻了3，4番，而且加班还有加班工资（外包界清流）。所以大多数时候，我会在双休日主动加班。为了整取加班工资，我已经丧心病狂，用我的发际线去交换货币，或是满足自己的虚荣心，或是为了快速成长，或者两种心理皆存。<br>想了一想，自从大学遇见女朋友以后，我的工作一直在走上坡路，虽然在兰州的时候干的活简单，但是自己并没有松懈。现在拿的这个工资，勉强对得起自己去年一年的努力，但是还有不尽人意的地方。以后我得更加努力。</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>别看我博客里面写了很多看似高端的东西，其实很多并没有在实际的生产环节使用过。我的女朋友经常教导我，不要眼高手低，你虽然理论知识丰富，但是实际上手啥也不会，多做点项目，比啥都强。确实如此，在公司近乎两月的时间里，虽然没有在工程化方向迈进一步，但是好歹jQuery现在API用的十分熟练，也对一些比较常用的前端知识进行了实践。<br>其实我这种学渣，学历不够光鲜，脑子不够灵活，唯一支撑我信念的是不甘平庸的心。<br>两个月的时间里，虽然没有在深度方面前进，但是对于【前端工程师】的一些基本技能算是都过了一遍，这些技能包括但不限于：</p><ul><li>熟练地使用F12控制台去分析页面性能、请求结果、静态资源加载、调试等。</li><li>对于前后端分离的项目进行实践，包括表单上传/文件上传，普通ajax请求，字段命名/接口约定等。</li><li>对于一些团队协作工具上手操作，例如:GIT、SVN、GITLAB、石墨文档、WORKTITLE等等</li><li>对于页面中一些常见Bug能快速定位，找到解决方案。例如：没有阻止冒泡导致事件重复执行、封装方法功能/逻辑解耦、重复数据过滤，HTTPS协议的页面请求HTTP协议的资源等等。</li><li>能够快速上手一些简单的类库，例如layUi,ElementsUi,还有TRS系统，WCM系统等。<br>其实，前端领域确实很杂，我也非常的懊悔，这么晚才来北京，如果早点来，我可能比现在更加专业，更符合【工程师】这个头衔。我给自己顶下的目标是3年内进一线大厂。我明白自己已经不再年轻了，脑力比不过刚毕业的小鲜肉，体力尚可，但看着腰上的肥肉，又担心自己的身体日渐衰退。<br>其实我也蛮担心的，当时迫于生计，急需钱，没有思虑再三，进入外包公司，听说很多互联网企业一听外包的工作经验，都不愿意搭理。可能我更有体会吧，我做东西很愿意把时间花在细节上，但是做出来的产品就像在给别人家养娃，不是自己的，这或许就是我不愿意去外包公司的一个理由吧。每天被充实的业务需求填满，没有时间去思考如何做一个小而美的产品。<br>但是话又说回来了，企业是要生存的。产品是有生命周期的，不会像自己心爱的积木一样，可以翻来覆去每天把玩，每天都搭不同样式的摩天大楼。所以希望自己以后能够有点大局观，站在产品的角度去看待整个项目。<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2>来北京，确实感觉交通压力很大，每天出行就像打仗一样，用尽浑身解数才能上的了地铁。刚住沙河，上班的第一天，在沙河站等地铁，过去了4趟，硬是没有上去。。。后来学到了，反向坐到高教园比较容易上车（我真是太机智了）。<br>在工作之余，我会自己做做饭，打扫打扫房间，毕竟房子是租来的，生活是自己的。有的时候手很痒，很想弹弹琴，但是又告诉自己，年纪不小了，该攒钱了，没钱啥也干不了。<br>女朋友最近也抱怨，来北京，陪她聊天的时间越来越少，因为每天下班晚不说，回来我还得学习，或者有时候洗衣服，陪她的时间少之又少。突然很理解程序员为什么都没老婆了。。。<br>最近晚上在看Vue和js基础，北京这边公司要求VUE的比较多，对于ng，似乎只在电信才用。<br>总的来说，目前在北京，也算是勉强站住脚了，但是对于自己工作，还有一些需要改进的地方。对于程序员来说，时间和效率是最珍贵的财富，我目前甄需提高的就是自己的开发速度/效率，一方面需要自己不断的熟练技能，另一方面，需要去实际使用一些提升开发效率的工具，比如：WEBPACK、SASS，TypeScript等等，不能让这些学过的东西永远没有上手的机会。另外，对于工作中遇到的问题，一定要自己想方设法去解决（在不影响项目进度的前提下），实在搞不懂再开口问。<br>很久没有写东西，思路比较乱，想到哪写到哪。</li></ul><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat May 02 2020 21:51:39 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文初始编辑地址，源自我的CSDN博客：&lt;a href=&quot;https://blog.csdn.net/qq_20264891/article/d
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://ZQ-jhon.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
