{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/projects/proxy.properties","path":"projects/proxy.properties","modified":0,"renderable":0},{"_id":"themes/hexo-theme-mellow-master/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/method.js","path":"js/method.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/alipay.png","path":"img/alipay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/refresh.png","path":"img/refresh.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/brand.png","path":"img/brand.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/origin/LUICO.psd","path":"origin/LUICO.psd","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/origin/LUICO.png","path":"origin/LUICO.png","modified":0,"renderable":1},{"_id":"source/daily-news/assets/crowdin-report.png","path":"daily-news/assets/crowdin-report.png","modified":0,"renderable":0},{"_id":"source/daily-news/assets/crowdin-with-pxt.png","path":"daily-news/assets/crowdin-with-pxt.png","modified":0,"renderable":0},{"_id":"source/daily-news/assets/fontawesome.png","path":"daily-news/assets/fontawesome.png","modified":0,"renderable":0},{"_id":"source/daily-news/assets/wsl-plugin-demo.png","path":"daily-news/assets/wsl-plugin-demo.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-mellow-master/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"source/daily-news/assets/ip原理.png","path":"daily-news/assets/ip原理.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-mellow-master/source/css/third-party/gitment.less","path":"css/third-party/gitment.less","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/fastclick.js","path":"js/plugins/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/gitment.js","path":"js/plugins/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/leancloud_visitors.js","path":"js/plugins/leancloud_visitors.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/local_search.js","path":"js/plugins/local_search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/valine.js","path":"js/plugins/valine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/3.jpg","path":"img/thumb/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/1.jpg","path":"img/thumb/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/7.jpg","path":"img/thumb/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/8.jpg","path":"img/thumb/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/6.jpg","path":"img/thumb/6.jpg","modified":0,"renderable":1},{"_id":"source/daily-news/assets/wsl-remote-wsl.png","path":"daily-news/assets/wsl-remote-wsl.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/bluehost/Bluehost-Bold.woff","path":"css/fonts/bluehost/Bluehost-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/bluehost/Bluehost-Regular.woff","path":"css/fonts/bluehost/Bluehost-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/gitment.browser.js","path":"js/plugins/gitment.browser.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/gitmint.browser.js","path":"js/plugins/gitmint.browser.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/banner.png","path":"img/banner.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/4.jpg","path":"img/thumb/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/9.jpg","path":"img/thumb/9.jpg","modified":0,"renderable":1},{"_id":"source/about/resume.pdf","path":"about/resume.pdf","modified":0,"renderable":0},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/10.jpg","path":"img/thumb/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/2.jpg","path":"img/thumb/2.jpg","modified":0,"renderable":1},{"_id":"source/daily-news/assets/race.gif","path":"daily-news/assets/race.gif","modified":0,"renderable":0},{"_id":"source/daily-news/assets/ipv4-news.png","path":"daily-news/assets/ipv4-news.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-mellow-master/source/origin/lu2.psd","path":"origin/lu2.psd","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/5.jpg","path":"img/thumb/5.jpg","modified":0,"renderable":1},{"_id":"source/about/app.apk","path":"about/app.apk","modified":0,"renderable":0}],"Cache":[{"_id":"source/resume.md","hash":"c313060f53ab5eb004627934eb5d241338bbe18d","modified":1557844228716},{"_id":"source/文章模板.md","hash":"aaf17dd9cdf2c3bc9155a7de2deaad1b4628e6ff","modified":1576240422230},{"_id":"themes/hexo-theme-mellow-master/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1557844228716},{"_id":"themes/hexo-theme-mellow-master/_config.yml","hash":"be5aa1d4bcacb1700d3bded0539775c4e4a9ace1","modified":1581414517347},{"_id":"themes/hexo-theme-mellow-master/README.md","hash":"3293199fc433cac0989f649b2f70db019eb360b4","modified":1557844228871},{"_id":"themes/hexo-theme-mellow-master/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1557844228864},{"_id":"themes/hexo-theme-mellow-master/package.json","hash":"4de887e2588a16a9105607f1b8ba080872045623","modified":1557844228870},{"_id":"source/_drafts/zhangqiang.md","hash":"e729d4f0f6e6415098fd57dcdf2804360f58e5a0","modified":1557844228601},{"_id":"source/_posts/Ajax初探.md","hash":"167cb3181f2df70255cd937939a8915536108c48","modified":1557844228628},{"_id":"source/_posts/2018年1月23日腾讯SNG-IMWeb前端工程师 电话远程面试记录.md","hash":"fa7b7c098934557850291db00cc72ce3144d2b4c","modified":1557844228623},{"_id":"source/_posts/Angular1-4-6-Bootstrap3-3-7搭建后台人员管理系统-1-0-0.md","hash":"b498a52721866e50d40cc08d1b2d7a6bca44c772","modified":1557844228638},{"_id":"source/_posts/Angular搭建后台人员管理系统-1-1-0.md","hash":"c35ff141c455c8bf4b6de16c7d72f8c993fdc589","modified":1557844228628},{"_id":"source/_posts/AngularJS学习笔记3.md","hash":"1fa2fdfe5a4bccf68536085015a2fb11a8a43c2c","modified":1557844228636},{"_id":"source/_posts/Css位移属性导致像素模糊问题解决办法.md","hash":"34f48df89d2b103c1c7ded18c09b4dc23a7e5593","modified":1557844228632},{"_id":"source/_posts/Electron设置-webkit-app-region 后无法响应鼠标点击事件的解决方式.md","hash":"22af95fbc07972de73dae75059556225cb8d5989","modified":1557844228650},{"_id":"source/_posts/ES7 decorator 深入探析.md","hash":"4e1fc9a28b1568404587c85d2107f385c1d06f1f","modified":1560521438484},{"_id":"source/_posts/Express快速构建应用.md","hash":"b1c232cf3cd6f03f538a7430a8e753d7cfab6d4a","modified":1557844228638},{"_id":"source/_posts/Git与GitHub之本地仓库.md","hash":"2bb8e5782ca68a2101fee67e0fc0acb3f269bfa6","modified":1557844228647},{"_id":"source/_posts/FreeCodeCamp JavaScript 基础算法练习.md","hash":"e3ae3dddd25b51d2fe2d00628dbc42b1041888cf","modified":1557844228644},{"_id":"source/_posts/Git与GitHub之远程仓库.md","hash":"f08f22e55630b28f6e0eb7c8caaf8df157fa5615","modified":1557844228648},{"_id":"source/_posts/Html5回顾总结.md","hash":"92d6ac5edc4ff2547f1cac64791edea57b94dd81","modified":1557844228659},{"_id":"source/_posts/IONIC3 打包安卓apk详细过程（大量图文）.md","hash":"87c62688ca2d6aab78b1e31c8614275cbe44fc26","modified":1557844228657},{"_id":"source/_posts/JavaScript开心消消乐中的迭代算法.md","hash":"c8158504d6096048a793f3ce7e8c8026c061c934","modified":1557844228655},{"_id":"source/_posts/NodeBB搭建过程（windows+Redis）+ 科学上网方法.md","hash":"e5fb4a11d6355df9534f612e6e817198c2ec663c","modified":1557844228660},{"_id":"source/_posts/NodeJs基础配置、核心概念与学习路线回顾.md","hash":"b5fd51d4533641da56326e3d9f5cfd758d516ef6","modified":1557844228667},{"_id":"source/_posts/Notice.md","hash":"f6af6449fae9588c965b1fe40c95bedef454d5cb","modified":1557844237758},{"_id":"source/_posts/PHP初体验.md","hash":"c4393c5644aa725abe5a207bc68292233d1a3e53","modified":1557844228671},{"_id":"source/_posts/Webpack打包工具学习笔记.md","hash":"6a4e9463caeb248ba40da8067c552762fa40dc07","modified":1557844228671},{"_id":"source/_posts/ajax回顾.md","hash":"31f32834232cd9662274ed23a0576fe50f372b35","modified":1557844228624},{"_id":"source/_posts/base64-encode-decode.md","hash":"1c9fe2f1e5a9a327777483d00df05c9d8f5779ab","modified":1576240422231},{"_id":"source/_posts/cookie,session,token.md","hash":"b06d2f8786ca9905eb53b343fd4414237463ddbb","modified":1557844228622},{"_id":"source/_posts/css3原理，结合jquery复习.md","hash":"b51073248cc855db2278c1f043c0460d314351e1","modified":1557844228629},{"_id":"source/_posts/http-history.md","hash":"f74cd8d71d9d83811c1b09524d510d94f0b11009","modified":1559398710045},{"_id":"source/_posts/hello-sql.md","hash":"2cf5492c756c517846e190a9a788c9b6b17403a1","modified":1560436542338},{"_id":"source/_posts/javascript Dom拖动 插件 putThere.js.md","hash":"29bcc40ba1f4bd02c5c995267b54108c90ecf2ac","modified":1557844228661},{"_id":"source/_posts/koa-1.md","hash":"445b6e163c66db8dd1b4de66cae290f98ecf0470","modified":1558021164070},{"_id":"source/_posts/koa-2.md","hash":"741e3dea84687abaed3589344e92844ba7ff489d","modified":1558021162480},{"_id":"source/_posts/ng英雄列表学习笔记(一) 概念、文件结构、指令、事件、单双向绑定、组件通讯.md","hash":"c5ba6fc594a9009ac912125f7ecedf4a78383d27","modified":1557844228661},{"_id":"source/_posts/regExp.md","hash":"fc2ad04df3488b4e8dd1f1aeeb4535e42916a251","modified":1576240422232},{"_id":"source/_posts/rx.js将二维数据拍扁(平).md","hash":"0441eaa6e4f6e2b32448e641691e177e12f7ab82","modified":1557844228662},{"_id":"source/_posts/typescript学习笔记.md","hash":"41694bdaf9a4da18418ad0574c5930dbf3909a68","modified":1557844228674},{"_id":"source/_posts/使用 Travis-CI 持续集成部署 HEXO 博客项目.md","hash":"0a9c5b434b26c5ece7e85204c614492a8b6d43ef","modified":1576240422231},{"_id":"source/_posts/关于CSS3呼吸效果的探究.md","hash":"5e4d40548a37be44fe67451bf2862d18b143c847","modified":1557844228686},{"_id":"source/_posts/关于jQuery中scrollTop中的一些兼容问题.md","hash":"d91e532088143f99c24e1ba7f44e7c22ab4ed12a","modified":1557844228683},{"_id":"source/_posts/关于百度集成API-bd-share的一些窥探.md","hash":"e0172f8868e9b365829f2df457c99360331991cc","modified":1557844228690},{"_id":"source/_posts/函数式编程与响应式编程之己见.md","hash":"fa7e0cd83576320e1060dff9e14e5464872c3f4e","modified":1557844228686},{"_id":"source/_posts/基于bootstrap特殊分辨率页面的实现思路.md","hash":"30927dc464f19c681f753dcaf69fc3419abfd5ae","modified":1557844228697},{"_id":"source/_posts/基于HEXO的个人博客图文搭建详尽过程，看不懂算我输.md","hash":"788a3d1c8684f9e64e4d63adb73a71ce2724147d","modified":1557844228690},{"_id":"source/_posts/基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 上.md","hash":"659537585ea3a207b24760507042d54db8ea89f3","modified":1557844237780},{"_id":"source/_posts/基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 下.md","hash":"6813feda9e2339076a13d67aed0c2b70316e13bb","modified":1557844237774},{"_id":"source/_posts/用原生js制作一个动态简历(多动症简历)及在线预览部署过程.md","hash":"888e70dd0c679b2b29d8d7c7130dc882f75e01c4","modified":1557844228696},{"_id":"source/_posts/谈一谈来北京的工作节奏以及对前端的看法.md","hash":"fdfdd0b420ad6a70b6fe3a0854728ecf8d11263e","modified":1557844228698},{"_id":"source/about/index.md","hash":"adeb02a60900cb440340069b53e97f0cb863127e","modified":1557844237767},{"_id":"source/categories/index.md","hash":"90370f69c44bb432bb9aef8f28d3c98c35ca8c95","modified":1557844228712},{"_id":"source/daily-news/index.md","hash":"a6003cd9dabb62749b7ccc783c312cb97a15e73e","modified":1581414517346},{"_id":"source/projects/index.md","hash":"8188db749d00fffeaa8825b7894d718b7060b14d","modified":1561036347878},{"_id":"source/_posts/cvm-debug.md","hash":"16c6a45e2c75907cef2cf1f346ca9bdf574096de","modified":1581415174792},{"_id":"source/projects/proxy.properties","hash":"0ec77baf443520db12846148859c0434fb8f3ab1","modified":1557844228709},{"_id":"themes/hexo-theme-mellow-master/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1557844228720},{"_id":"themes/hexo-theme-mellow-master/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1557844228726},{"_id":"themes/hexo-theme-mellow-master/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1557844228726},{"_id":"themes/hexo-theme-mellow-master/layout/archive.ejs","hash":"47399518f0ba5d74d5d00c7189ba37b381c249f2","modified":1557844228854},{"_id":"themes/hexo-theme-mellow-master/layout/categories.ejs","hash":"939d3db86c08f3af9771c7352daf1d989e8b969e","modified":1557844228872},{"_id":"themes/hexo-theme-mellow-master/layout/category.ejs","hash":"67545ba2799eb2dc550954fadc1d1c265a56937e","modified":1557844228846},{"_id":"themes/hexo-theme-mellow-master/layout/index.ejs","hash":"f99df772f07c0852d4f4b4ea544060398a5d4587","modified":1557844228864},{"_id":"themes/hexo-theme-mellow-master/layout/layout.ejs","hash":"255fe7897591f1f92c2f23e20855e475c0cda054","modified":1557844228859},{"_id":"themes/hexo-theme-mellow-master/layout/page.ejs","hash":"db2f4ac06efd223bee81a932266c3d88a1349741","modified":1557844228900},{"_id":"themes/hexo-theme-mellow-master/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1557844228854},{"_id":"themes/hexo-theme-mellow-master/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1557844228868},{"_id":"themes/hexo-theme-mellow-master/layout/tags.ejs","hash":"d0a211a5d50c5afec063f7852553fe1544db5ee4","modified":1557844228886},{"_id":"themes/hexo-theme-mellow-master/scripts/plugins.js","hash":"0c200aa56bae9cc131368f2bcb5c344522404b98","modified":1557844228881},{"_id":"themes/hexo-theme-mellow-master/layout/_custom/body.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557844228722},{"_id":"themes/hexo-theme-mellow-master/layout/_custom/head.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557844228724},{"_id":"themes/hexo-theme-mellow-master/layout/_custom/script.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557844228724},{"_id":"source/_posts/Notice/notice.png","hash":"b1edfedfe80424ff027c97f4a7136e50c4b87059","modified":1557844237756},{"_id":"source/_posts/koa-1/body-parser.gif","hash":"3465729c291c6bf00dfdf84c2326b55b2b0491e8","modified":1557844854226},{"_id":"source/_posts/koa-1/named-router.png","hash":"4adb80acf7360fd312f582fb79359a1ddbfc73bc","modified":1557844824123},{"_id":"source/_posts/koa-1/params-object.png","hash":"a780c73cf4105e0be7dd1e0e37b2d8acab0169b8","modified":1557844824145},{"_id":"source/_posts/koa-1/context.png","hash":"c29b835984df9fdfe508744afb94ab77e6e60cbe","modified":1557844649562},{"_id":"source/_posts/koa-1/post.gif","hash":"3465729c291c6bf00dfdf84c2326b55b2b0491e8","modified":1557845026381},{"_id":"source/_posts/koa-2/result.png","hash":"a90bfed02ea026ee813f72ac4e71a2c1245cb3a9","modified":1558020766349},{"_id":"source/_posts/koa-1/query-params.png","hash":"828b22931b4cdf6954c3c196f237990244bb3138","modified":1557844824152},{"_id":"source/_posts/koa-2/vscode.png","hash":"8ce77ea91b00ab1ee1f109ed6cd7adc94ea633e7","modified":1558020766357},{"_id":"source/daily-news/2019/code.2019-12-02.md","hash":"cd53354efac90c229c561e9dad552abbb9afbf90","modified":1581414517314},{"_id":"source/daily-news/2019/icon.2019-12-23.md","hash":"93b4856226dcc8e63f7011e3145aa6dcebec7d17","modified":1581414517314},{"_id":"source/daily-news/2019/ipv4.2019-11-27.md","hash":"5d2d4d2c449ba592a8a7e41de8c0ba4faaaca36e","modified":1581414517315},{"_id":"source/daily-news/2019/fa.2019-12-20.md","hash":"3237da27c193113897a641b79557d916d2ecc717","modified":1581414517314},{"_id":"source/daily-news/2019/test.2019-12-25.md","hash":"16b6255a548206d8e3486f929229a120a502e415","modified":1581414517316},{"_id":"source/daily-news/2019/race.2019-11-21.md","hash":"2ea1677baf6001491f45a21606fcb8fdb0f7f37a","modified":1581414517315},{"_id":"source/daily-news/2019/wsl.2019-12-18.md","hash":"49261202cd7d9f4197acc0fafc6b0cfcd3d41027","modified":1581414517317},{"_id":"source/daily-news/2019/yaml.2019-12-14.md","hash":"f004477e998b5375470930632476ca4e2cf54caa","modified":1581414517317},{"_id":"source/daily-news/2020/crowdin.2020-01-14.md","hash":"846f2563822d9bd743b691f77bd853c9ef486832","modified":1581414517318},{"_id":"source/daily-news/2020/quick-link.2020-01-16.md","hash":"302e1ecce236bd88e1775406de3a7b0d595e6e1a","modified":1581414517318},{"_id":"source/daily-news/assets/typescript-scanner.js","hash":"6509962e0a64dcacdf448ad73f96373842cc1499","modified":1581414517343},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/after-footer.ejs","hash":"cd335bf5823d2fbb03bb1485041503853971a380","modified":1557844228766},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/footer.ejs","hash":"37dccdcd26a90e0ebe883690ec4bd3cafc27195a","modified":1581414517348},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/archive.ejs","hash":"fbb35d4b58b644c156d37564ce884f0311ea2bcc","modified":1557844228774},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/header.ejs","hash":"742ce99ccef10891d5c4d7556ad212490ff35b9d","modified":1557844228789},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/head.ejs","hash":"5db6222446bc519ae02e53d93cf0762a4115df8c","modified":1557844228796},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/index-item.ejs","hash":"1b288daf173c2d8103b73b6217982f6641fbd84f","modified":1557844228814},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1557844228769},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/menu.ejs","hash":"b2d4ad0227360db413df1d140508c68adf015384","modified":1557844228812},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1557844228779},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/script.ejs","hash":"ec7bf06c7af83aefc7b13a0e9d5d25ec3fe9fe15","modified":1557844228886},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post.ejs","hash":"b04d313c0b194b979b5ff07d7c77d047615c104d","modified":1557844228803},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/tags-bar.ejs","hash":"8e9a493abbb60bcd68f27f1ff6535a2a97287628","modified":1557844228852},{"_id":"themes/hexo-theme-mellow-master/source/css/style.less","hash":"50e88403265f8ff418394952d85a2c5d885497d7","modified":1557844228946},{"_id":"themes/hexo-theme-mellow-master/source/js/_config.yml","hash":"ac7d67462e3b401bec0229c460655618a3b01931","modified":1557844228987},{"_id":"themes/hexo-theme-mellow-master/source/js/blog.js","hash":"22ae7a3c963c0815bdf0eaf196d093fb89781128","modified":1557844228996},{"_id":"themes/hexo-theme-mellow-master/source/js/method.js","hash":"f290c258d15e46d335067c1a68503daf34b22164","modified":1557844228999},{"_id":"themes/hexo-theme-mellow-master/source/img/alipay.png","hash":"cc934395585b647219bd233d49787ec71eea7663","modified":1557844228942},{"_id":"themes/hexo-theme-mellow-master/source/img/github.png","hash":"f277cda817d07b79fa7dbebbbbdf980436d80808","modified":1557844228953},{"_id":"themes/hexo-theme-mellow-master/source/img/img-err.png","hash":"762288999d47566a20ced25c7377bf2f3ebc7c4f","modified":1557844228958},{"_id":"themes/hexo-theme-mellow-master/source/img/img-loading.png","hash":"f832f5a523efb5d680b66ab0ea54379a176291e7","modified":1557844228960},{"_id":"themes/hexo-theme-mellow-master/source/img/refresh.png","hash":"02e01daa167e5baa3cfe16720f0307779e271618","modified":1557844228965},{"_id":"themes/hexo-theme-mellow-master/source/img/favicon.png","hash":"5c0c682dc272e8db9eca93ecd0d3ee9c0f0ffa6a","modified":1557844228951},{"_id":"themes/hexo-theme-mellow-master/source/img/brand.png","hash":"bf034073e834234cc6183242c7f26c031d98306a","modified":1557844228947},{"_id":"themes/hexo-theme-mellow-master/source/img/wechat.png","hash":"9b1e23852ace142a7cd8aae36c683cf761e478dd","modified":1557844228974},{"_id":"themes/hexo-theme-mellow-master/source/origin/LUICO.psd","hash":"89ee660a03ed14ec70963085069293b1ec64e149","modified":1557844229009},{"_id":"source/_posts/Notice/comment.png","hash":"09191e786a754bc1177b1bb28f20e9e327bf3c22","modified":1557844237767},{"_id":"themes/hexo-theme-mellow-master/source/origin/LUICO.png","hash":"e4cdefaca47bb58e9b99a82ed75e61bdd6d0e1aa","modified":1557844229001},{"_id":"source/_posts/hello-sql/sql.png","hash":"5024a12575abafdb6e8ed710c8bc95caa08c69f4","modified":1560436542336},{"_id":"source/_posts/koa-1/demo.gif","hash":"dde721b32a79ad18e8c55ce58df632fb86b2e06a","modified":1557844766229},{"_id":"source/daily-news/assets/crowdin-report.png","hash":"94c8a896d80c48bd239b6b7388ec24452ddfdde2","modified":1581414517319},{"_id":"source/daily-news/assets/crowdin-with-pxt.png","hash":"9ca26fcd0520091d9a28a80054d9ee303eefb3f0","modified":1581414517321},{"_id":"source/daily-news/assets/fontawesome.png","hash":"94ee6fb1a9cb859db9744a357cb4b27ddeba4be0","modified":1581414517323},{"_id":"source/daily-news/assets/wsl-plugin-demo.png","hash":"f1ec3806b5d83ee75fd6f2652dbdf185884b1e37","modified":1581414517344},{"_id":"themes/hexo-theme-mellow-master/source/img/_avatar.png","hash":"25df816f6fd8692ca749f0c8d269938521635b76","modified":1557844228952},{"_id":"themes/hexo-theme-mellow-master/source/img/_alipay.jpg","hash":"01d963c04cab39e14603456e1a8067971b4649c7","modified":1557844228953},{"_id":"themes/hexo-theme-mellow-master/source/img/avatar.png","hash":"25df816f6fd8692ca749f0c8d269938521635b76","modified":1557844228947},{"_id":"source/daily-news/assets/ip原理.png","hash":"9edf7655f6ba65095bee1c2e22e7bb59f0d0ba75","modified":1581414517335},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_plugins/blogroll.ejs","hash":"63d66cb49747fdfe327674e889e275855cdd6008","modified":1557844228744},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_plugins/valine.ejs","hash":"cf3633fe1f105ba5ed7a2733521d4916b7dd6257","modified":1557844228736},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_plugins/gitment.ejs","hash":"c39461991e0c811ca47dc8f2115b90aabc0f3850","modified":1557844228736},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_plugins/site-visitor.ejs","hash":"28081ac5bee26d2ec4777d2c53eb6560a148cefe","modified":1557844228744},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_third-party/baidu_tongji.ejs","hash":"b8cee3b4cc2daba89f41ed6bff7121075641b587","modified":1557844228760},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_third-party/dynamic_title.ejs","hash":"1b6dc09947c6b39cfc2abd5ef087d12f89331150","modified":1557844228748},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_third-party/github_repo.ejs","hash":"841441db80aa2d0170b3f4481b1176c0a53e5a3b","modified":1557844228747},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_third-party/gitment.ejs","hash":"a53b28cf018f73a44361aaf9ab7604276cdaa720","modified":1557844228744},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_third-party/leancloud_visitors.ejs","hash":"81cd97d76bcc19d711df5a113db935717304e6f4","modified":1557844228744},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_third-party/local_search.ejs","hash":"9c77ea96055ddeb0ed61f6afab3a54920e3970e7","modified":1557844228752},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_third-party/valine.ejs","hash":"bda46f0dca3bc01c7ab459cb21f90fe421641aaf","modified":1557844228754},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/_third-party/mathjax.ejs","hash":"f213b937586cc5d6adad9530b3fb7de1e67668b7","modified":1557844228766},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1557844228792},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/comment-count.ejs","hash":"4e5c0c265b34739a54927566d1255928dcac11be","modified":1557844228796},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/copyright.ejs","hash":"28c1839ae035c1cd0dc89593d0e885da40b2e528","modified":1557844228794},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/comment.ejs","hash":"c5ea435f288d3e0871d3aa64585e6a346cfbc739","modified":1557844228796},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1557844228809},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1557844228792},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/music.ejs","hash":"4c5dcee38b3a6311e651cb3668f940ec8c75ac47","modified":1557844228803},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/repo-icon.ejs","hash":"2d2a7f96f1f520bb8ad95e594c21e0b766f286b2","modified":1557844228814},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/nav.ejs","hash":"98936485f6929b5beeeb8efbe2fc6aa6c14a185e","modified":1557844228818},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/repo.ejs","hash":"dfdcc95b008077ee3221047011642cba0c814d7d","modified":1557844228818},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/reward-btn.ejs","hash":"5847ca92a1675a35be254a54b09a3d0a78a447f8","modified":1557844228829},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/reward.ejs","hash":"c288344665250924c3a643347e4ba13427dc446d","modified":1557844228827},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/share-fab.ejs","hash":"41ee96ff9b8f0ee395009e321670c20073329554","modified":1557844228821},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1557844228833},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/share.ejs","hash":"2df4bd3c29222ebd0ba2d62c53bb001e63919120","modified":1557844228864},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/thumb.ejs","hash":"933a71162f70c91ed1de871b151988c3f569a62e","modified":1557844228829},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/title.ejs","hash":"109a1b5950db165f3f2dea5733129655e052b57d","modified":1557844228833},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/top.ejs","hash":"6348e0cbb7b0d3a7100e7d3f4bbc0be4652d8b3f","modified":1557844228833},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/toc.ejs","hash":"903f61c70b444dcbdc44c88ed911bb0072f2e905","modified":1557844228836},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/visitor.ejs","hash":"824cbdf692077328abf90bd362c19a8b33018e3f","modified":1557844228841},{"_id":"themes/hexo-theme-mellow-master/layout/_partial/post/updated.ejs","hash":"80fc5f754a1aa029156efb5a0bdbdd1064cc4487","modified":1557844228829},{"_id":"themes/hexo-theme-mellow-master/source/css/_custom/custom.less","hash":"dd87c07c04660b002f9a137677263e8dc1f5c754","modified":1557844228883},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/archives.less","hash":"078d14e3c058c99b48929b4ad9cb307e9a3bbbf1","modified":1557844228892},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/article.less","hash":"426a35402308f77a858517162e9e9506ffa78e21","modified":1557844228897},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/bluehost.less","hash":"8140a695d575d8004ba5ae75e802f17028cb448d","modified":1557844228894},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/gotop.less","hash":"61c5a5595888bb21584adf4afe540747a651a823","modified":1557844228897},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/header.less","hash":"1e873663d8703030544190e666e5ed16b1c9409c","modified":1557844228899},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/highlight.less","hash":"204ebbbda17694d82b22454a8f98cb0aed601d3e","modified":1557844228894},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/imagebox.less","hash":"98843f937c2b58aa843e9c2258ec0a10c6acb838","modified":1557844228899},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/layout.less","hash":"81d0b65b9c7991d37a92ff4eacce2413d149957f","modified":1557844228910},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/page.less","hash":"7a1c49943dbe9bfaae9463b8ef2bdfccd51d0a4c","modified":1557844228919},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/loading.less","hash":"15c932a870f0481549fce45956765db566cc8cb9","modified":1557844228904},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/plugins.less","hash":"dfc28840c72510d64ccbf426f610f023dccc8420","modified":1557844228912},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/postlist.less","hash":"7cf6d0d1ddb3491836f53a95c688c3c1f26a9949","modified":1557844228927},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/repo.less","hash":"544258d61fd815f39c9ee7028c5d4144254e85c1","modified":1557844228915},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/reward.less","hash":"52abe8c36d8e0472df164325c7aa6b3fb7b2e9df","modified":1557844228914},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/share.less","hash":"0e758a1a20f03d80e8f49e3223df0293b507050b","modified":1557844228925},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/search.less","hash":"4fa047d684131ba38f4bc9964f078acf521a3b84","modified":1557844228927},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/tags.less","hash":"b6c1c74e6c640d56b5430551f882dbefeb33b3f0","modified":1557844228927},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/variable.less","hash":"849eb93e79e2f8b690224438ca88c7021247a095","modified":1557844228927},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/waves.less","hash":"332553d6330df00b45f9c1850fcf8750c949a0e6","modified":1557844228926},{"_id":"themes/hexo-theme-mellow-master/source/css/third-party/gitment.less","hash":"4eed862257e31399d4f093f48200c91c796e2c8a","modified":1557844228947},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/fastclick.js","hash":"2267d1ee08bc04edfd7efbf6c62a361bd371f4ef","modified":1557844229006},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/gitment.js","hash":"3ba2d6bdebf5a8b89061842310d83fe4c9e43748","modified":1557844229008},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/leancloud_visitors.js","hash":"80245560c7992bedb83f27efe73be4ba22b4f51d","modified":1557844229009},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/local_search.js","hash":"a92ec4cb83b200a67a2004c66cf9eadc219a449b","modified":1557844229009},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/valine.js","hash":"f31d7a6bcab34e8a1ece993f53e5209ee588243e","modified":1557844229002},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/3.jpg","hash":"b8b5b3e326aad1b2e85ef7c192d5d67532f9cf02","modified":1557844228970},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/1.jpg","hash":"fc06372f11612f8636b41cf19d16249d2867637e","modified":1557844228967},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/7.jpg","hash":"3c34514405e097bd0a1fbfa33d6e6c0a771f82fe","modified":1557844228980},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/8.jpg","hash":"dec3142dae0f8ee75dda4a9c6b7ec5ab4646f626","modified":1557844228983},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/6.jpg","hash":"ac2da275f8be2c0d00eb2076a70fcda510363df6","modified":1557844228983},{"_id":"source/daily-news/assets/wsl-remote-wsl.png","hash":"71f5a3080f9cfecc19a93ae932d465298cff862b","modified":1581414517345},{"_id":"themes/hexo-theme-mellow-master/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1557844228902},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/bluehost/Bluehost-Bold.woff","hash":"83d8e77fb78d396118155cfbb1c99ff9c430d864","modified":1557844228928},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/bluehost/Bluehost-Regular.woff","hash":"bfde0e4648eb3ee39c77044ddab4c4fad175cb38","modified":1557844228928},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1557844229024},{"_id":"themes/hexo-theme-mellow-master/source/js/plugins/gitmint.browser.js","hash":"f05fd16366cbc16466f8f92f286082dfd5e44fa5","modified":1557844229026},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557844228942},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557844228943},{"_id":"themes/hexo-theme-mellow-master/source/img/banner.png","hash":"063628a9326b0b0ad5cf4ab54ef6bc185d85cd5a","modified":1557844228953},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/4.jpg","hash":"7e77df16248c696202230a16da8a57c16be6f246","modified":1557844228979},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/9.jpg","hash":"a1ddd14c3eb63454d0ebebb35aa2ea1685815e0e","modified":1557844228983},{"_id":"source/about/resume.pdf","hash":"dc76c080b1b066489dbd3866c6a6f7cf81a1407b","modified":1560657919925},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1557844228948},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557844228933},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/10.jpg","hash":"0fa7a3ece29aa4363be21e16cfd8f8a3e2c9a879","modified":1557844228969},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1557844228936},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/2.jpg","hash":"6e4aab3d27009889f980171f034517236f1cc689","modified":1557844228978},{"_id":"source/daily-news/assets/race.gif","hash":"772da7edd0f12b4344834a23ebc0cbc18f615c3d","modified":1581414517342},{"_id":"source/daily-news/assets/ipv4-news.png","hash":"d2bea9b1f703de7609f4f00ca8ae71203b332071","modified":1581414517333},{"_id":"themes/hexo-theme-mellow-master/source/origin/lu2.psd","hash":"39ebf3cb8b2b62382da3a2c629bf934a29ad391e","modified":1557844229009},{"_id":"themes/hexo-theme-mellow-master/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"c5aa7f2fe1cecbbe92e6c57d7414a4dbc731012e","modified":1557844228946},{"_id":"themes/hexo-theme-mellow-master/source/img/thumb/5.jpg","hash":"d6c69e0b30b2fb7825135d574eb00781bde5e993","modified":1557844228982},{"_id":"source/about/app.apk","hash":"3e57820375e3cb4502982390a7e7d06e9f7c6441","modified":1560662588975},{"_id":"public/atom.xml","hash":"bcbcf2d15f7a5da8b6a184ea9b769927d8746482","modified":1581415213689},{"_id":"public/search.xml","hash":"439d469f34d2660ed928db46f9e3e5cced8cfcc8","modified":1581415214071},{"_id":"public/daily-news/assets/typescript-scanner.js","hash":"0a64f1ed60b4c01303b300ae88908835e19e088b","modified":1581415214079},{"_id":"public/categories/index.html","hash":"f41fac391fdfc5c64b895e32e2351547eed8d791","modified":1581415215254},{"_id":"public/about/index.html","hash":"03d392004596d8c3c7af4b972c801b820c0c1a66","modified":1581415216120},{"_id":"public/daily-news/index.html","hash":"99f363425a1a5c7b30ebb18825eb4082c0340372","modified":1581415216135},{"_id":"public/daily-news/2019/test.2019-12-25.html","hash":"faf1b09d453c7a104b8d1770926ab4db3caab792","modified":1581415216135},{"_id":"public/daily-news/2019/race.2019-11-21.html","hash":"0c046a545dff7995d2f5a351a95a8b9ef17a3cff","modified":1581415216135},{"_id":"public/daily-news/2019/fa.2019-12-20.html","hash":"4b517b02a7d879656cda960efcf3ea85d5d068d1","modified":1581415216135},{"_id":"public/daily-news/2019/wsl.2019-12-18.html","hash":"c94e25e43cf6ecac00388ba899259c8223cad807","modified":1581415216135},{"_id":"public/文章模板.html","hash":"5ee527c3bfc09635104f756d22e4c373144e4b3c","modified":1581415216135},{"_id":"public/resume.html","hash":"a209c627e198866530bbfa03b9d6e2cce470b833","modified":1581415216136},{"_id":"public/projects/index.html","hash":"83429cf1b96e3a59e8a32cc86c78d737c5d11618","modified":1581415216136},{"_id":"public/daily-news/2019/icon.2019-12-23.html","hash":"654f11021f321adc48474b8f60f25f6a0f8c9e3d","modified":1581415216136},{"_id":"public/daily-news/2019/ipv4.2019-11-27.html","hash":"12a3b7fa91af407bf501abca9c9957234e03edf1","modified":1581415216136},{"_id":"public/daily-news/2019/code.2019-12-02.html","hash":"b96e8454c2408cea04241d4fb5274342b01ed8f8","modified":1581415216136},{"_id":"public/daily-news/2019/yaml.2019-12-14.html","hash":"fc8f7a097a58b569f964eb909cb466d47852a7d3","modified":1581415216136},{"_id":"public/daily-news/2020/crowdin.2020-01-14.html","hash":"301c2c4bd158fa04cf8d11bf4809922f338bf1ae","modified":1581415216136},{"_id":"public/daily-news/2020/quick-link.2020-01-16.html","hash":"4610e785c1e30b017a1ecc6b1c6649265bc6c1a0","modified":1581415216136},{"_id":"public/2020/02/11/cvm-debug/index.html","hash":"abb5e9410673e77995363b5a521b6bfa9f454591","modified":1581415216136},{"_id":"public/2019/12/13/base64-encode-decode/index.html","hash":"c23e4457ce3440e256a7ab046ea2208a6897550a","modified":1581415216136},{"_id":"public/2019/06/20/regExp/index.html","hash":"7e1f8d3897a128eee573923b3cbcfee8e8687a02","modified":1581415216136},{"_id":"public/2019/06/13/ES7 decorator 深入探析/index.html","hash":"4f5a8ed1fe356ffbe4e927e4d139c412a764d06d","modified":1581415216136},{"_id":"public/2019/06/11/hello-sql/index.html","hash":"d7fe7de3ad701c6b0c54cfb065b2f6204f079225","modified":1581415216136},{"_id":"public/2019/06/01/http-history/index.html","hash":"186f866389eee4f781aa12c54bfa4e34dc9431f2","modified":1581415216137},{"_id":"public/2019/05/16/koa-2/index.html","hash":"91f3d5b7cd0adcd54968279ac0be1b23f0f94350","modified":1581415216137},{"_id":"public/2019/05/14/koa-1/index.html","hash":"9456bf5a88925517e16f5804f09377bfccff126a","modified":1581415216137},{"_id":"public/2019/04/06/FreeCodeCamp JavaScript 基础算法练习/index.html","hash":"96bf4c81c7885d39e7d5cc6f66369d17d786de2d","modified":1581415216137},{"_id":"public/2019/04/11/Notice/index.html","hash":"a79d6186a4f4eadc033968b2d35021c15506b6b3","modified":1581415216137},{"_id":"public/2019/02/22/Css位移属性导致像素模糊问题解决办法/index.html","hash":"2c3d08a3085d480701ccbfed5e7eab17b69be7e2","modified":1581415216137},{"_id":"public/2019/02/19/Electron设置-webkit-app-region 后无法响应鼠标点击事件的解决方式/index.html","hash":"1ae41a63c721103c48ecbf5d3f113d867aa9a30f","modified":1581415216137},{"_id":"public/2018/09/26/rx.js将二维数据拍扁(平)/index.html","hash":"c43351b3582ed8abf12a3097a3ced7e858a9aa9b","modified":1581415216137},{"_id":"public/2018/08/29/使用 Travis-CI 持续集成部署 HEXO 博客项目/index.html","hash":"ae1e35c1c696f57fea83443d10afe13d2e89735b","modified":1581415216137},{"_id":"public/2018/07/22/函数式编程与响应式编程之己见/index.html","hash":"4e3fce1e37093604b476e6e20ead95e0b0f1bf9b","modified":1581415216137},{"_id":"public/2018/08/26/cookie,session,token/index.html","hash":"365f28aff0d4785686e7723453f32e3cd6400e76","modified":1581415216137},{"_id":"public/2018/06/22/NodeBB搭建过程（windows+Redis）+ 科学上网方法/index.html","hash":"546ab7b605caa252083a1d0586da89bd2d2629c6","modified":1581415216137},{"_id":"public/2018/05/23/谈一谈来北京的工作节奏以及对前端的看法/index.html","hash":"29309efcbbfb6db4d9975196e61824f96d8b9442","modified":1581415216137},{"_id":"public/2018/03/25/ng英雄列表学习笔记(一) 概念、文件结构、指令、事件、单双向绑定、组件通讯/index.html","hash":"15b83ba2b8175fa25b2e5b0794eb91ea52ef0d64","modified":1581415216137},{"_id":"public/2018/04/14/基于bootstrap特殊分辨率页面的实现思路/index.html","hash":"6c39b08969103a13324416caec51b4a93b1cfdfc","modified":1581415216137},{"_id":"public/2018/03/11/typescript学习笔记/index.html","hash":"6f81e39c1a22d0b0ba7b5d7dbeec211b3a62336c","modified":1581415216137},{"_id":"public/2018/03/06/IONIC3 打包安卓apk详细过程（大量图文）/index.html","hash":"c24614df94b8b95d48556264b0cdd1a9380fa1b8","modified":1581415216137},{"_id":"public/2018/02/01/基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 下/index.html","hash":"cbd1dd139ad50289244b0e6c2a0f055a56c81c4e","modified":1581415216138},{"_id":"public/archives/page/5/index.html","hash":"9e77dea7ec2d1bf3bdda303ce9f89d427fe086d9","modified":1581415216152},{"_id":"public/archives/2017/page/2/index.html","hash":"f614c64711c2bf84f5e101a3cf47d40800743e1a","modified":1581415216152},{"_id":"public/archives/2017/10/index.html","hash":"17889d0b38f8065a6d3c61d82e8cd955e8d801f7","modified":1581415216152},{"_id":"public/archives/2017/11/index.html","hash":"f0238aa6daa6312e06e95b51107ecc7cdf88e3e8","modified":1581415216152},{"_id":"public/archives/2018/page/3/index.html","hash":"5ace623759612283f9b54c0198985b0bc65f0a83","modified":1581415216152},{"_id":"public/archives/2018/02/index.html","hash":"c3108514a130473d2c93afac526ecb90feb23067","modified":1581415216152},{"_id":"public/archives/2018/03/index.html","hash":"16fa73a8b0e7382b8cc272be9d43b305ec7ef7eb","modified":1581415216152},{"_id":"public/archives/2018/04/index.html","hash":"4242b4e13035cf8a3fa3cffc1c7d000ab149a097","modified":1581415216152},{"_id":"public/archives/2018/06/index.html","hash":"1244267f7c1e9e93c371175ae4aef234a79cbb20","modified":1581415216152},{"_id":"public/archives/2018/05/index.html","hash":"006e1cecabfa94dabc7f8dce76183a8f75d61c08","modified":1581415216152},{"_id":"public/archives/2018/07/index.html","hash":"df5ef05bd4d4b8986b05a9d08a59f231a7669838","modified":1581415216152},{"_id":"public/archives/2018/08/index.html","hash":"435338990f65d5874665cadf75f31b4eea908f05","modified":1581415216152},{"_id":"public/archives/2018/09/index.html","hash":"98963c5fb3dc29abe45069bdda2889f3a1be2d97","modified":1581415216152},{"_id":"public/archives/2019/page/2/index.html","hash":"7cbc80cd2aa7cfbda370c467c962247359631088","modified":1581415216152},{"_id":"public/archives/2019/02/index.html","hash":"57be10e9b6f7dad30d6fe5cf60f35ccc9ae41927","modified":1581415216152},{"_id":"public/archives/2019/04/index.html","hash":"4fed27f1edbad814194afc06975e9e82380e599c","modified":1581415216152},{"_id":"public/archives/2019/06/index.html","hash":"2752ccca0ac5445e25b3665c41a8f7e7d95bc1d2","modified":1581415216152},{"_id":"public/archives/2019/05/index.html","hash":"1d837fbca0a1c6145f563eb53e2dbfdfe03e451f","modified":1581415216153},{"_id":"public/archives/2020/index.html","hash":"1e5a7452221502e71b62b73ca62e0fbf7c23e022","modified":1581415216153},{"_id":"public/archives/2019/12/index.html","hash":"568e53a1af998c4bb4c456c40eb4a56b7e08f6d7","modified":1581415216153},{"_id":"public/archives/2020/02/index.html","hash":"412bb96d715cf80890d2a815084d5349d2ae6e73","modified":1581415216153},{"_id":"public/2018/01/31/基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 上/index.html","hash":"eeda619c7490878e5c4330ac0c5065de17b9b50c","modified":1581415216153},{"_id":"public/2018/03/06/javascript Dom拖动 插件 putThere.js/index.html","hash":"cf4fac4eee863570a40b14132eefa586fbc905c2","modified":1581415216153},{"_id":"public/2018/01/29/用原生js制作一个动态简历(多动症简历)及在线预览部署过程/index.html","hash":"5109cc9935dbe7b56793b5a99516fc057ab7ffd1","modified":1581415216153},{"_id":"public/2018/01/25/2018年1月23日腾讯SNG-IMWeb前端工程师 电话远程面试记录/index.html","hash":"1dfdcc24ccb7eb7df04e27bf6225475cc02740eb","modified":1581415216153},{"_id":"public/2018/01/18/基于HEXO的个人博客图文搭建详尽过程，看不懂算我输/index.html","hash":"2944ee8defefa82626ad76385078f37db21b5d22","modified":1581415216153},{"_id":"public/2018/01/17/css3原理，结合jquery复习/index.html","hash":"550964b2df09910f910b88b763fd825e94c628e5","modified":1581415216153},{"_id":"public/2018/01/17/Angular搭建后台人员管理系统-1-1-0/index.html","hash":"7bc8b1fce255b6ceb3f05f275b89c2ffe2768dcf","modified":1581415216153},{"_id":"public/2018/01/17/关于CSS3呼吸效果的探究/index.html","hash":"fe02d5aa29155cb45337c64643b4e34debd4ec78","modified":1581415216153},{"_id":"public/2018/01/17/Webpack打包工具学习笔记/index.html","hash":"e194c7e4d6b87c5ca2b47fc0adaefbd6e66b13a3","modified":1581415216153},{"_id":"public/2018/01/12/Html5回顾总结/index.html","hash":"2973eaa862f42972bfc527f9d1d05494134dfeb6","modified":1581415216153},{"_id":"public/2017/12/25/Express快速构建应用/index.html","hash":"df2ed76a324772e0715084585655c13437b6cf7a","modified":1581415216153},{"_id":"public/2017/12/19/Angular1-4-6-Bootstrap3-3-7搭建后台人员管理系统-1-0-0/index.html","hash":"50e6ec849f92badf30fb4d8e7ff4a0b813f203c3","modified":1581415216153},{"_id":"public/2017/12/13/关于jQuery中scrollTop中的一些兼容问题/index.html","hash":"48a099af717e0077388d17a8f955d6cd59f7aa25","modified":1581415216153},{"_id":"public/2017/12/12/ajax回顾/index.html","hash":"977ace5bc01a0aaed909c26c78b1e33f964d9f1a","modified":1581415216153},{"_id":"public/2017/12/12/NodeJs基础配置、核心概念与学习路线回顾/index.html","hash":"ed27935eb00b23f77ac39c05710ca7ef4dc00999","modified":1581415216153},{"_id":"public/2017/12/11/Git与GitHub之远程仓库/index.html","hash":"c688a323ed2a43045d536e3d5798d170767bc64c","modified":1581415216153},{"_id":"public/2017/12/11/Git与GitHub之本地仓库/index.html","hash":"83bbe19cf58506096741632c227bc303e83ae8e1","modified":1581415216153},{"_id":"public/2017/12/09/PHP初体验/index.html","hash":"6aaa57cba4b2c21fc436ecd22419cd7fe3ec6af9","modified":1581415216153},{"_id":"public/2017/11/06/Ajax初探/index.html","hash":"b6643d742de59199c28c772cf30fc94c101d55f3","modified":1581415216153},{"_id":"public/2017/12/05/AngularJS学习笔记3/index.html","hash":"76285ba982225b10a66d4df472e8324317d04981","modified":1581415216153},{"_id":"public/2017/10/22/JavaScript开心消消乐中的迭代算法/index.html","hash":"c36e427bf66cb94c0fabe9865996831b6dca7ca0","modified":1581415216153},{"_id":"public/2017/11/03/关于百度集成API-bd-share的一些窥探/index.html","hash":"d1da4feb79d98ce458dd130921461d8edb585a37","modified":1581415216153},{"_id":"public/archives/index.html","hash":"07dc52218e77be7899641611ddbd12292557d0ce","modified":1581415216153},{"_id":"public/archives/page/2/index.html","hash":"f6b81b4910129f18866f2ba62eedcb7dc78a40c0","modified":1581415216154},{"_id":"public/archives/page/3/index.html","hash":"389772f850fd3fece1f2a07bb1f378f243ae138e","modified":1581415216154},{"_id":"public/archives/2017/index.html","hash":"2a93bc7a7575dcfc91efcbde3b1ab49991cfec60","modified":1581415216154},{"_id":"public/archives/page/4/index.html","hash":"12564929047b2c9d54454efd4bd2360abe60635f","modified":1581415216154},{"_id":"public/archives/2017/12/index.html","hash":"ef913a800000b7aab3f1995ac1f106577672fcb3","modified":1581415216154},{"_id":"public/archives/2018/index.html","hash":"d08a3b34649ab8e8d5ca9067c1c7cca26510f9fe","modified":1581415216154},{"_id":"public/archives/2018/page/2/index.html","hash":"8795fc224b41840fde6103a2b318c558aaea1b07","modified":1581415216154},{"_id":"public/archives/2018/01/index.html","hash":"b501b3089f6fe030addccdb38b4b69749ea9f6cb","modified":1581415216154},{"_id":"public/archives/2019/index.html","hash":"b4ebe8d3b6b471cf967f907099bab33516f7b386","modified":1581415216154},{"_id":"public/index.html","hash":"7449928bb241d76d619a76d706d76cb9dc1f0344","modified":1581415216154},{"_id":"public/page/2/index.html","hash":"307c71300e09f0a3cc84e9e87ba4e312d5b846a4","modified":1581415216154},{"_id":"public/page/3/index.html","hash":"f27f16d84b1aa5e191fc862b8312418bd19fdf23","modified":1581415216154},{"_id":"public/page/4/index.html","hash":"4454dc16dfd9bdc169055a5e1e408e4cc51d5b49","modified":1581415216154},{"_id":"public/page/5/index.html","hash":"35553fbc30adc43cf103a23ba59cde1e9092c612","modified":1581415216154},{"_id":"public/page/6/index.html","hash":"61594dc3782e3876ddb5474bf5bd79f0f3a67fda","modified":1581415216154},{"_id":"public/page/7/index.html","hash":"b4793504b21a7a51f15764c0c7607527ac6dbdaa","modified":1581415216154},{"_id":"public/page/8/index.html","hash":"71e62b276398bc0f4c7382339bda2e570927eb8c","modified":1581415216154},{"_id":"public/page/9/index.html","hash":"4a22849d899ce58b06e21d7468277095f2414e5c","modified":1581415216154},{"_id":"public/tags/angularjs/index.html","hash":"47b1744174ae660d74fb17b1957380b7793b16db","modified":1581415216154},{"_id":"public/tags/css/index.html","hash":"bb2759ab0fe9bd440aed689f7b06f385c3105247","modified":1581415216154},{"_id":"public/tags/ajax/index.html","hash":"8b51a99d54af796f5b05bd142b8adfc9ed606036","modified":1581415216154},{"_id":"public/tags/electron/index.html","hash":"a6c364934d7e7d3572741a1fdd6e01e738169701","modified":1581415216154},{"_id":"public/tags/Express/index.html","hash":"dd470f1b30c040d638a2de716df409ed0433223b","modified":1581415216154},{"_id":"public/tags/git/index.html","hash":"796286f8542a655fc6eedca43e239212f74841a1","modified":1581415216154},{"_id":"public/tags/html5/index.html","hash":"cbccb9477b632cfe63dc936dc5d67abd5aece5db","modified":1581415216155},{"_id":"public/tags/node/index.html","hash":"e138f1c0fb75bc876a4bb8e621cc95e123cabb39","modified":1581415216156},{"_id":"public/tags/javascript/index.html","hash":"0ccd5246c59f7364dc2b96178e9b518193babb65","modified":1581415216156},{"_id":"public/tags/算法/index.html","hash":"3973271622212c838dfa880e041a7414dab7a879","modified":1581415216156},{"_id":"public/tags/notice/index.html","hash":"2426134fd59d023d7a80bb909bea8b8b56e41c30","modified":1581415216156},{"_id":"public/tags/nodejs/index.html","hash":"69ad2b9fe35eb04cfeef18aa5a126e2565740f0e","modified":1581415216156},{"_id":"public/tags/php/index.html","hash":"d329ea3766c5a99a770d21dc75bdfb4d8fee196d","modified":1581415216156},{"_id":"public/tags/http/index.html","hash":"3338a0f17d13bf61307a34a814b7909c3b45db19","modified":1581415216156},{"_id":"public/tags/plug-in/index.html","hash":"e1b499db7e5e059a06fce577306a4184a8ee5f85","modified":1581415216156},{"_id":"public/tags/koa/index.html","hash":"f531674622d3edc0db1da8fc4b29206d24398be1","modified":1581415216156},{"_id":"public/tags/angular/index.html","hash":"724382a843d3122d6099bae54ceb2f3dea08bd52","modified":1581415216156},{"_id":"public/tags/rxjs/index.html","hash":"138cbc83ccad476fc9da5228e37389f24f5b4757","modified":1581415216156},{"_id":"public/tags/正则/index.html","hash":"8be2e1e14793384ddda44bbd92c33b734e4f6eb3","modified":1581415216156},{"_id":"public/tags/Travis-CI/index.html","hash":"09b283bcc5a36eb4b35f795b2b2366036967993c","modified":1581415216156},{"_id":"public/tags/Hexo/index.html","hash":"f2abd690ec865cfbd63a2107f17e71fb59e966cf","modified":1581415216156},{"_id":"public/tags/bootstrap/index.html","hash":"80bc9503000a5d48d394953a9251ecb232d76399","modified":1581415216156},{"_id":"public/tags/jquery/index.html","hash":"0bec3c879edc446b71a266dc4c3e6c11f9e860f9","modified":1581415216156},{"_id":"public/tags/css3/index.html","hash":"792deed98a3b37244330353452c0b0eb37d018a0","modified":1581415216156},{"_id":"public/tags/HEXO/index.html","hash":"8b77c4f12c52b60d4a83fe747dab48b3a3eb1e27","modified":1581415216156},{"_id":"public/tags/动态部署/index.html","hash":"c1cc82e12949afb1a6c017dbbabaccbef15556fe","modified":1581415216156},{"_id":"public/tags/动态简历/index.html","hash":"eedf8ede7aa7c224d3ce1b6bf90ac4d2639aa73c","modified":1581415216156},{"_id":"public/tags/Github部署/index.html","hash":"07d38313da339de33f0969f029bb6fd7c2e41dc3","modified":1581415216157},{"_id":"public/tags/杂谈/index.html","hash":"2df361694873c7474312a099ba249b392b7bfa47","modified":1581415216157},{"_id":"public/tags/ubuntu/index.html","hash":"d999ed3b262d05647126399617603e601981cb53","modified":1581415216157},{"_id":"public/tags/腾讯SNG-IMWeb面试/index.html","hash":"8b9be2797e92a2cef93fdd5fd5ef81aaa680bf85","modified":1581415216157},{"_id":"public/tags/android/index.html","hash":"236eb3ff0f99226eb7bdc92c73c5a43bf7f35886","modified":1581415216157},{"_id":"public/tags/decorator/index.html","hash":"a7cf972b0f6186b5c7104a0d09479c8729410573","modified":1581415216157},{"_id":"public/tags/SDK/index.html","hash":"d900eda7aba1b5efa5bfe618983fb69ac88bbc4e","modified":1581415216157},{"_id":"public/tags/JDK/index.html","hash":"0505efa06508f569371d8703fbb480c0ede22ad2","modified":1581415216157},{"_id":"public/tags/APP/index.html","hash":"f37fa8997c42e2b5b5163c8fcd03515ccc15e69a","modified":1581415216157},{"_id":"public/tags/gradle/index.html","hash":"9b2443a4c958d8176f0e4d7b680c4e2de8e86df7","modified":1581415216157},{"_id":"public/tags/IONIC/index.html","hash":"b0249a82c50d99036da2d0680a4b9aef62853b10","modified":1581415216157},{"_id":"public/tags/Webpack/index.html","hash":"e3075435c399ae5610a2fb27cf8337417bbe54a8","modified":1581415216157},{"_id":"public/tags/sql/index.html","hash":"6b341f06bf3c234bc13925da4ebc8abe930f6652","modified":1581415216157},{"_id":"public/tags/typescript/index.html","hash":"549af1789021946ab379928f07670da11d4e8115","modified":1581415216157},{"_id":"public/tags/编译/index.html","hash":"13e479555144e63a57873ac3c9e00893c12ce9c1","modified":1581415216157},{"_id":"public/tags/工具/index.html","hash":"a4ac4fbcbf6a628c2a63b8eddd9a2af6572eb945","modified":1581415216157},{"_id":"public/tags/百度share/index.html","hash":"f6fa2304df0d5ec5b5d588126f35fe8f3c6766ac","modified":1581415216158},{"_id":"public/tags/腾讯/index.html","hash":"088d36ce6106d52b7eaa0b74c94e6edbc6f16869","modified":1581415216158},{"_id":"public/tags/原理/index.html","hash":"2649cfaebf720a8ebf738acbbddc66dc21ec9ea7","modified":1581415216158},{"_id":"public/tags/面试/index.html","hash":"985398075dc1c4f1a06759a58ad2d8b9d3052685","modified":1581415216158},{"_id":"public/tags/浏览器兼容/index.html","hash":"1d333a8d4526d02c9086dc04b918899dcac43d4f","modified":1581415216158},{"_id":"public/tags/重绘/index.html","hash":"321b7d1f725f5a5567948f004d3cab94df43bb95","modified":1581415216158},{"_id":"public/tags/冲排/index.html","hash":"b38cfde8ceb3ed3ea9a3fcd399b1e0a4a07f652f","modified":1581415216158},{"_id":"public/tags/腾讯面试/index.html","hash":"aee3a1f81e6a487fd795cc0b1237bbabad052140","modified":1581415216158},{"_id":"public/img/alipay.png","hash":"cc934395585b647219bd233d49787ec71eea7663","modified":1581415216158},{"_id":"public/projects/proxy.properties","hash":"0ec77baf443520db12846148859c0434fb8f3ab1","modified":1581415216158},{"_id":"public/img/github.png","hash":"f277cda817d07b79fa7dbebbbbdf980436d80808","modified":1581415216158},{"_id":"public/img/img-loading.png","hash":"f832f5a523efb5d680b66ab0ea54379a176291e7","modified":1581415216158},{"_id":"public/img/img-err.png","hash":"762288999d47566a20ced25c7377bf2f3ebc7c4f","modified":1581415216158},{"_id":"public/img/refresh.png","hash":"02e01daa167e5baa3cfe16720f0307779e271618","modified":1581415216158},{"_id":"public/img/favicon.png","hash":"5c0c682dc272e8db9eca93ecd0d3ee9c0f0ffa6a","modified":1581415216158},{"_id":"public/img/wechat.png","hash":"9b1e23852ace142a7cd8aae36c683cf761e478dd","modified":1581415216158},{"_id":"public/img/brand.png","hash":"bf034073e834234cc6183242c7f26c031d98306a","modified":1581415216158},{"_id":"public/origin/LUICO.psd","hash":"89ee660a03ed14ec70963085069293b1ec64e149","modified":1581415216158},{"_id":"public/origin/LUICO.png","hash":"e4cdefaca47bb58e9b99a82ed75e61bdd6d0e1aa","modified":1581415216158},{"_id":"public/img/thumb/3.jpg","hash":"b8b5b3e326aad1b2e85ef7c192d5d67532f9cf02","modified":1581415216159},{"_id":"public/img/thumb/1.jpg","hash":"fc06372f11612f8636b41cf19d16249d2867637e","modified":1581415216159},{"_id":"public/img/thumb/7.jpg","hash":"3c34514405e097bd0a1fbfa33d6e6c0a771f82fe","modified":1581415216159},{"_id":"public/img/thumb/8.jpg","hash":"dec3142dae0f8ee75dda4a9c6b7ec5ab4646f626","modified":1581415216159},{"_id":"public/css/fonts/bluehost/Bluehost-Regular.woff","hash":"bfde0e4648eb3ee39c77044ddab4c4fad175cb38","modified":1581415216159},{"_id":"public/css/fonts/bluehost/Bluehost-Bold.woff","hash":"83d8e77fb78d396118155cfbb1c99ff9c430d864","modified":1581415216159},{"_id":"public/2019/04/11/Notice/notice.png","hash":"b1edfedfe80424ff027c97f4a7136e50c4b87059","modified":1581415216159},{"_id":"public/2019/05/16/koa-2/result.png","hash":"a90bfed02ea026ee813f72ac4e71a2c1245cb3a9","modified":1581415216159},{"_id":"public/2019/05/16/koa-2/vscode.png","hash":"8ce77ea91b00ab1ee1f109ed6cd7adc94ea633e7","modified":1581415216159},{"_id":"public/2019/05/14/koa-1/body-parser.gif","hash":"3465729c291c6bf00dfdf84c2326b55b2b0491e8","modified":1581415216159},{"_id":"public/2019/05/14/koa-1/context.png","hash":"c29b835984df9fdfe508744afb94ab77e6e60cbe","modified":1581415216159},{"_id":"public/2019/05/14/koa-1/post.gif","hash":"3465729c291c6bf00dfdf84c2326b55b2b0491e8","modified":1581415216159},{"_id":"public/2019/05/14/koa-1/params-object.png","hash":"a780c73cf4105e0be7dd1e0e37b2d8acab0169b8","modified":1581415216159},{"_id":"public/2019/05/14/koa-1/named-router.png","hash":"4adb80acf7360fd312f582fb79359a1ddbfc73bc","modified":1581415216159},{"_id":"public/2019/05/14/koa-1/query-params.png","hash":"828b22931b4cdf6954c3c196f237990244bb3138","modified":1581415216159},{"_id":"public/daily-news/assets/crowdin-report.png","hash":"94c8a896d80c48bd239b6b7388ec24452ddfdde2","modified":1581415216180},{"_id":"public/daily-news/assets/crowdin-with-pxt.png","hash":"9ca26fcd0520091d9a28a80054d9ee303eefb3f0","modified":1581415216181},{"_id":"public/daily-news/assets/fontawesome.png","hash":"94ee6fb1a9cb859db9744a357cb4b27ddeba4be0","modified":1581415216181},{"_id":"public/daily-news/assets/wsl-plugin-demo.png","hash":"f1ec3806b5d83ee75fd6f2652dbdf185884b1e37","modified":1581415216181},{"_id":"public/img/avatar.png","hash":"25df816f6fd8692ca749f0c8d269938521635b76","modified":1581415216181},{"_id":"public/img/thumb/6.jpg","hash":"ac2da275f8be2c0d00eb2076a70fcda510363df6","modified":1581415216181},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1581415216181},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1581415216181},{"_id":"public/2019/04/11/Notice/comment.png","hash":"09191e786a754bc1177b1bb28f20e9e327bf3c22","modified":1581415216181},{"_id":"public/2019/05/14/koa-1/demo.gif","hash":"dde721b32a79ad18e8c55ce58df632fb86b2e06a","modified":1581415216181},{"_id":"public/2019/06/11/hello-sql/sql.png","hash":"5024a12575abafdb6e8ed710c8bc95caa08c69f4","modified":1581415216181},{"_id":"public/js/blog.js","hash":"21c6b6d4650a1088e426a8eb6d86132aee7a35ec","modified":1581415216184},{"_id":"public/js/plugins/leancloud_visitors.js","hash":"79da9d528dbf1abc6e2e3e8a5df7a6088c6308b9","modified":1581415216185},{"_id":"public/js/plugins/gitment.js","hash":"7306370f4c9699ef772877efc4fd30b5cd48fa08","modified":1581415216185},{"_id":"public/js/plugins/valine.js","hash":"dae4adaee5f5f672320d878532f1fa976af6dbfe","modified":1581415216185},{"_id":"public/daily-news/assets/ip原理.png","hash":"9edf7655f6ba65095bee1c2e22e7bb59f0d0ba75","modified":1581415216185},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1581415216185},{"_id":"public/img/thumb/9.jpg","hash":"a1ddd14c3eb63454d0ebebb35aa2ea1685815e0e","modified":1581415216185},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1581415216185},{"_id":"public/js/method.js","hash":"6ee803b09a36c428a0d4b6b278cf0f59bda1e5db","modified":1581415216225},{"_id":"public/js/plugins/local_search.js","hash":"46485dff1f7616a3e9ebdfd04e97f75aae9253eb","modified":1581415216225},{"_id":"public/daily-news/assets/wsl-remote-wsl.png","hash":"71f5a3080f9cfecc19a93ae932d465298cff862b","modified":1581415216226},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1581415216226},{"_id":"public/img/thumb/4.jpg","hash":"7e77df16248c696202230a16da8a57c16be6f246","modified":1581415216234},{"_id":"public/js/plugins/fastclick.js","hash":"b48481265d9713f64872b6597db620be9cd8f9b3","modified":1581415216237},{"_id":"public/img/banner.png","hash":"063628a9326b0b0ad5cf4ab54ef6bc185d85cd5a","modified":1581415216237},{"_id":"public/img/thumb/10.jpg","hash":"0fa7a3ece29aa4363be21e16cfd8f8a3e2c9a879","modified":1581415216237},{"_id":"public/img/thumb/2.jpg","hash":"6e4aab3d27009889f980171f034517236f1cc689","modified":1581415216279},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"c5aa7f2fe1cecbbe92e6c57d7414a4dbc731012e","modified":1581415216324},{"_id":"public/about/resume.pdf","hash":"dc76c080b1b066489dbd3866c6a6f7cf81a1407b","modified":1581415216614},{"_id":"public/origin/lu2.psd","hash":"39ebf3cb8b2b62382da3a2c629bf934a29ad391e","modified":1581415216614},{"_id":"public/daily-news/assets/race.gif","hash":"772da7edd0f12b4344834a23ebc0cbc18f615c3d","modified":1581415217526},{"_id":"public/css/third-party/gitment.css","hash":"6d26ed45dd808f25d9c1a1f91a859b6c389f48c7","modified":1581415217529},{"_id":"public/img/thumb/5.jpg","hash":"d6c69e0b30b2fb7825135d574eb00781bde5e993","modified":1581415217561},{"_id":"public/daily-news/assets/ipv4-news.png","hash":"d2bea9b1f703de7609f4f00ca8ae71203b332071","modified":1581415217811},{"_id":"public/css/style.css","hash":"7ac460df28c3a5da086d8f8754d4cd4eab86dcd1","modified":1581415218296},{"_id":"public/js/plugins/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1581415218297},{"_id":"public/js/plugins/gitmint.browser.js","hash":"3e3ad9e9ff9a6368aa272fd647b3db904e98a5b9","modified":1581415218306},{"_id":"public/about/app.apk","hash":"3e57820375e3cb4502982390a7e7d06e9f7c6441","modified":1581415218317}],"Category":[],"Data":[],"Page":[{"title":"About Me","date":"2018-01-19T01:01:21.000Z","tag":["about"],"reward":false,"comment":false,"share":true,"_content":"﻿张强  \n==\n[GitHub博客](https://ZQ-jhon.github.io)\n<br/>\n[CSDN博客](http://blog.csdn.net/qq_20264891)\n - 24岁\n - 通信工程(本科)  \n - 擅长写作\n - 热爱音乐\n \n## 在校经验 ##\n - 2012年下半年，任职学校贴吧大吧主，负责与百度贴吧官方申请活动物资，负责策划线下活动，负责向校方申请活动场地，拉赞助等。有良好的组织和策划能力，曾经发起向大凉山贫困地区募捐活动，筹集善款1600+元，衣物/书籍 20+ 编织袋。\n 链接:[贴吧大凉山活动募捐总结](http://tieba.baidu.com/p/2067459311?see_lz=1)\n - 2014年，在青岛绿城房地产有限公司实习渠道专员。\n\n\n## 工作经验 ##\n     \n -  2016年7月毕业，任职青岛某艺术培训学校吉他老师，负责日常微信公众号运营、小孩吉他教学。\n\n - 2017年初，入职中国兰州网，担任前端开发，负责专题设计、JS逻辑层交互代码、北方网后台模版渲染对接、老旧网页响应式改造重构。\n \n - 2018年，怀着憧憬来到北京，就职于 《光辉城市》科技有限公司，任职前端开发( Angular 6.0 + )，负责官网后台组件开发/重构，对接 API，前沿知识学习并利用到项目中，混合应用（Ionic + Electron）\n \n##  我的优势 ##\n -  良好抗压能力：有压力会使我成长的更快。\n - 极强的书面表达能力：从小就爱写作。\n - 良好的自驱能力：每天都保持写博客，看技术文章学习提升，有开源精神。\n - 良好的学习与沟通能力：有弄不懂的我一定会问。\n\n\n## 技能与项目 ##\n\n\n**1.技能**\n\n - 掌握HTML语义化标签、CSS常见属性与布局(Flex,Grid)及CSS3新特性\n - 掌握Bootstrap，能够快速搭建响应式页面\n - 掌握JS常用API，以及闭包、原型链、面向对象和继承(ES5)，熟练使用 TS,例如枚举，解构，泛型，接口等\n - 常逛github，熟悉git,svn等版本控制工具，会使用 commitlint 来语义化的 commit\n - 熟悉Nodejs，对Webpack、AngularJs、Express进行过一定的实践\n - 熟悉Ajax异步流程，包括JQuery和Angular封装的Ajax\n - 熟悉前端优化的方法和手段\n \n**2.项目/实践**\n <br/>\n2.0专题汇总\n\n2.1中国兰州网美食频道 (尚未开源)\nhttp://food.lanzhou.cn/ <br/> \n【主导整个页面框架设计，滚动页面的逻辑。】\n<br/>\n<br/>\n<br/>\n2.2中国兰州网新闻页面框架重构改造(尚未开源)   <br/>             \n旧  新闻框架（2015）：<br/>\n[旧新闻框架](http://lz.lanzhou.cn/system/2018/01/27/011502940.shtml)\n<br/>\n新 响应式新闻框架（2017.8）：<br/>\n[响应式新闻框架](http://news.lanzhou.cn/system/2018/01/11/011492028.shtml)\n<br/>\n旧：图片新闻框架（2015）:<br/>\n[图片新闻框架](http://news.lanzhou.cn/system/2018/01/25/011501122.shtml)\n<br/>\n新：响应式图片框架（2017.8）<br/>\n[响应式图片框架](http://news.lanzhou.cn/system/2017/12/13/011475652.shtml)\n<br/>\n【整个项目的技术选型、代码编写、兼容测试、灰度发布、部署上线都是我自己主动向Leader请缨完成的。其中也踩了不少的坑，主要的用了一个Bootstrap的UI框架和jQuery（前者的依赖）。】\n<br/>\n<br/>\n<br/>\n2.3 Angular和Bootstrap搭建后台管理系统 1.0.0版本<br/>\n\n预览: https://zq-jhon.github.io/angular-demo/<br/>\n源码:https://github.com/ZQ-jhon/angular-demo<br/>\n博客记录：<br/>\n[博客记录1](http://blog.csdn.net/qq_20264891/article/details/78842927)\n[博客记录2](http://blog.csdn.net/qq_20264891/article/details/78842927)<br/>\n【这是刚开始接触Angular的时候做的，了解到它的双向数据绑定非常厉害，结合之前的Bootstrap做了一个实践项目。】\n<br/>\n<br/>\n<br/>\n2.4 基于HEXO和GIT的个人博客<br/>\n预览:https://ZQ-jhon.github.io<br/>\n源码:https://github.com/ZQ-jhon/ZQ-jhon.github.io<br/>\n博客记录: [基于HEXO和GIT的个人博客详细搭建及部署过程](http://blog.csdn.net/qq_20264891/article/details/79096846)<br/>\n【以前面试连博客都没有，后来就像把Demo部署到线上，让面试官一眼就能看见，所以花了一两天时间找了个漂亮的HEXO主题，进行部分样式修改，结合GITHUB的知识，顺利部署上线。期间也有很多不懂的地方，也咨询了HEXO主题的作者】\n<br/>\n<br/>\n<br/>\n2.5 原生js的插件----putThere.js 拖动DOM元素<br/>\n\n预览:https://zq-jhon.github.io/putThere.js/<br/>\n源码:https://github.com/ZQ-jhon/putThere.js<br/>\n博客记录:[putThere.js造小轮子记录博客](http://blog.csdn.net/qq_20264891/article/details/79172246)<br/>\n【之前对360浏览器的首页缩略图书签拖动感兴趣，我立马造了这个小轮子】\n<br/>\n<br/>\n<br/>\n2.6 多动症简历\n预览:https://zq-jhon.github.io/resume/<br/>\n源码:https://github.com/ZQ-jhon/resume<br/>\n博客记录: [多动症简历详细记录](http://blog.csdn.net/qq_20264891/article/details/79197651)<br/>\n【因为看到网上一个国外前端做了这样一份简历([http://strml.net/](http://strml.net/))，于是我自己根据JS知识，也进行了实践。】\n<br/>\n<br/>\n<br/>\n## 想说的话 ##\n<br/>\n\n - 期待的工作氛围：良好的技术氛围，能够多学东西，不限于前端。如果想培养我成为一名全栈工程师当然再好不过啦。\n - 期待的工作城市：北京、上海、广州、深圳、杭州。\n - 期待的发展：可以成为一名全栈开发人员。\n - 何时入职：本人目前在老家甘肃兰州，正月十五启程！\n - 写于2018年2月5日","source":"resume.md","raw":"---\ntitle: About Me \ndate: 2018-01-19 09:01:21\ntag: [about]\nreward: false\ncomment: false\nshare: true\n---\n﻿张强  \n==\n[GitHub博客](https://ZQ-jhon.github.io)\n<br/>\n[CSDN博客](http://blog.csdn.net/qq_20264891)\n - 24岁\n - 通信工程(本科)  \n - 擅长写作\n - 热爱音乐\n \n## 在校经验 ##\n - 2012年下半年，任职学校贴吧大吧主，负责与百度贴吧官方申请活动物资，负责策划线下活动，负责向校方申请活动场地，拉赞助等。有良好的组织和策划能力，曾经发起向大凉山贫困地区募捐活动，筹集善款1600+元，衣物/书籍 20+ 编织袋。\n 链接:[贴吧大凉山活动募捐总结](http://tieba.baidu.com/p/2067459311?see_lz=1)\n - 2014年，在青岛绿城房地产有限公司实习渠道专员。\n\n\n## 工作经验 ##\n     \n -  2016年7月毕业，任职青岛某艺术培训学校吉他老师，负责日常微信公众号运营、小孩吉他教学。\n\n - 2017年初，入职中国兰州网，担任前端开发，负责专题设计、JS逻辑层交互代码、北方网后台模版渲染对接、老旧网页响应式改造重构。\n \n - 2018年，怀着憧憬来到北京，就职于 《光辉城市》科技有限公司，任职前端开发( Angular 6.0 + )，负责官网后台组件开发/重构，对接 API，前沿知识学习并利用到项目中，混合应用（Ionic + Electron）\n \n##  我的优势 ##\n -  良好抗压能力：有压力会使我成长的更快。\n - 极强的书面表达能力：从小就爱写作。\n - 良好的自驱能力：每天都保持写博客，看技术文章学习提升，有开源精神。\n - 良好的学习与沟通能力：有弄不懂的我一定会问。\n\n\n## 技能与项目 ##\n\n\n**1.技能**\n\n - 掌握HTML语义化标签、CSS常见属性与布局(Flex,Grid)及CSS3新特性\n - 掌握Bootstrap，能够快速搭建响应式页面\n - 掌握JS常用API，以及闭包、原型链、面向对象和继承(ES5)，熟练使用 TS,例如枚举，解构，泛型，接口等\n - 常逛github，熟悉git,svn等版本控制工具，会使用 commitlint 来语义化的 commit\n - 熟悉Nodejs，对Webpack、AngularJs、Express进行过一定的实践\n - 熟悉Ajax异步流程，包括JQuery和Angular封装的Ajax\n - 熟悉前端优化的方法和手段\n \n**2.项目/实践**\n <br/>\n2.0专题汇总\n\n2.1中国兰州网美食频道 (尚未开源)\nhttp://food.lanzhou.cn/ <br/> \n【主导整个页面框架设计，滚动页面的逻辑。】\n<br/>\n<br/>\n<br/>\n2.2中国兰州网新闻页面框架重构改造(尚未开源)   <br/>             \n旧  新闻框架（2015）：<br/>\n[旧新闻框架](http://lz.lanzhou.cn/system/2018/01/27/011502940.shtml)\n<br/>\n新 响应式新闻框架（2017.8）：<br/>\n[响应式新闻框架](http://news.lanzhou.cn/system/2018/01/11/011492028.shtml)\n<br/>\n旧：图片新闻框架（2015）:<br/>\n[图片新闻框架](http://news.lanzhou.cn/system/2018/01/25/011501122.shtml)\n<br/>\n新：响应式图片框架（2017.8）<br/>\n[响应式图片框架](http://news.lanzhou.cn/system/2017/12/13/011475652.shtml)\n<br/>\n【整个项目的技术选型、代码编写、兼容测试、灰度发布、部署上线都是我自己主动向Leader请缨完成的。其中也踩了不少的坑，主要的用了一个Bootstrap的UI框架和jQuery（前者的依赖）。】\n<br/>\n<br/>\n<br/>\n2.3 Angular和Bootstrap搭建后台管理系统 1.0.0版本<br/>\n\n预览: https://zq-jhon.github.io/angular-demo/<br/>\n源码:https://github.com/ZQ-jhon/angular-demo<br/>\n博客记录：<br/>\n[博客记录1](http://blog.csdn.net/qq_20264891/article/details/78842927)\n[博客记录2](http://blog.csdn.net/qq_20264891/article/details/78842927)<br/>\n【这是刚开始接触Angular的时候做的，了解到它的双向数据绑定非常厉害，结合之前的Bootstrap做了一个实践项目。】\n<br/>\n<br/>\n<br/>\n2.4 基于HEXO和GIT的个人博客<br/>\n预览:https://ZQ-jhon.github.io<br/>\n源码:https://github.com/ZQ-jhon/ZQ-jhon.github.io<br/>\n博客记录: [基于HEXO和GIT的个人博客详细搭建及部署过程](http://blog.csdn.net/qq_20264891/article/details/79096846)<br/>\n【以前面试连博客都没有，后来就像把Demo部署到线上，让面试官一眼就能看见，所以花了一两天时间找了个漂亮的HEXO主题，进行部分样式修改，结合GITHUB的知识，顺利部署上线。期间也有很多不懂的地方，也咨询了HEXO主题的作者】\n<br/>\n<br/>\n<br/>\n2.5 原生js的插件----putThere.js 拖动DOM元素<br/>\n\n预览:https://zq-jhon.github.io/putThere.js/<br/>\n源码:https://github.com/ZQ-jhon/putThere.js<br/>\n博客记录:[putThere.js造小轮子记录博客](http://blog.csdn.net/qq_20264891/article/details/79172246)<br/>\n【之前对360浏览器的首页缩略图书签拖动感兴趣，我立马造了这个小轮子】\n<br/>\n<br/>\n<br/>\n2.6 多动症简历\n预览:https://zq-jhon.github.io/resume/<br/>\n源码:https://github.com/ZQ-jhon/resume<br/>\n博客记录: [多动症简历详细记录](http://blog.csdn.net/qq_20264891/article/details/79197651)<br/>\n【因为看到网上一个国外前端做了这样一份简历([http://strml.net/](http://strml.net/))，于是我自己根据JS知识，也进行了实践。】\n<br/>\n<br/>\n<br/>\n## 想说的话 ##\n<br/>\n\n - 期待的工作氛围：良好的技术氛围，能够多学东西，不限于前端。如果想培养我成为一名全栈工程师当然再好不过啦。\n - 期待的工作城市：北京、上海、广州、深圳、杭州。\n - 期待的发展：可以成为一名全栈开发人员。\n - 何时入职：本人目前在老家甘肃兰州，正月十五启程！\n - 写于2018年2月5日","updated":"2019-05-14T14:30:28.716Z","path":"resume.html","comments":1,"layout":"page","_id":"ck6hpsat90000ckuf2znzgt79","content":"<h1 id=\"张强\"><a href=\"#张强\" class=\"headerlink\" title=\"﻿张强  \"></a>﻿张强  </h1><p><a href=\"https://ZQ-jhon.github.io\" target=\"_blank\" rel=\"noopener\">GitHub博客</a><br><br><br><a href=\"http://blog.csdn.net/qq_20264891\" target=\"_blank\" rel=\"noopener\">CSDN博客</a></p>\n<ul>\n<li>24岁</li>\n<li>通信工程(本科)  </li>\n<li>擅长写作</li>\n<li>热爱音乐</li>\n</ul>\n<h2 id=\"在校经验\"><a href=\"#在校经验\" class=\"headerlink\" title=\"在校经验\"></a>在校经验</h2><ul>\n<li>2012年下半年，任职学校贴吧大吧主，负责与百度贴吧官方申请活动物资，负责策划线下活动，负责向校方申请活动场地，拉赞助等。有良好的组织和策划能力，曾经发起向大凉山贫困地区募捐活动，筹集善款1600+元，衣物/书籍 20+ 编织袋。<br>链接:<a href=\"http://tieba.baidu.com/p/2067459311?see_lz=1\" target=\"_blank\" rel=\"noopener\">贴吧大凉山活动募捐总结</a></li>\n<li>2014年，在青岛绿城房地产有限公司实习渠道专员。</li>\n</ul>\n<h2 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h2><ul>\n<li><p>2016年7月毕业，任职青岛某艺术培训学校吉他老师，负责日常微信公众号运营、小孩吉他教学。</p>\n</li>\n<li><p>2017年初，入职中国兰州网，担任前端开发，负责专题设计、JS逻辑层交互代码、北方网后台模版渲染对接、老旧网页响应式改造重构。</p>\n</li>\n<li><p>2018年，怀着憧憬来到北京，就职于 《光辉城市》科技有限公司，任职前端开发( Angular 6.0 + )，负责官网后台组件开发/重构，对接 API，前沿知识学习并利用到项目中，混合应用（Ionic + Electron）</p>\n</li>\n</ul>\n<h2 id=\"我的优势\"><a href=\"#我的优势\" class=\"headerlink\" title=\"我的优势\"></a>我的优势</h2><ul>\n<li>良好抗压能力：有压力会使我成长的更快。</li>\n<li>极强的书面表达能力：从小就爱写作。</li>\n<li>良好的自驱能力：每天都保持写博客，看技术文章学习提升，有开源精神。</li>\n<li>良好的学习与沟通能力：有弄不懂的我一定会问。</li>\n</ul>\n<h2 id=\"技能与项目\"><a href=\"#技能与项目\" class=\"headerlink\" title=\"技能与项目\"></a>技能与项目</h2><p><strong>1.技能</strong></p>\n<ul>\n<li>掌握HTML语义化标签、CSS常见属性与布局(Flex,Grid)及CSS3新特性</li>\n<li>掌握Bootstrap，能够快速搭建响应式页面</li>\n<li>掌握JS常用API，以及闭包、原型链、面向对象和继承(ES5)，熟练使用 TS,例如枚举，解构，泛型，接口等</li>\n<li>常逛github，熟悉git,svn等版本控制工具，会使用 commitlint 来语义化的 commit</li>\n<li>熟悉Nodejs，对Webpack、AngularJs、Express进行过一定的实践</li>\n<li>熟悉Ajax异步流程，包括JQuery和Angular封装的Ajax</li>\n<li>熟悉前端优化的方法和手段</li>\n</ul>\n<p><strong>2.项目/实践</strong><br> <br><br>2.0专题汇总</p>\n<p>2.1中国兰州网美食频道 (尚未开源)<br><a href=\"http://food.lanzhou.cn/\" target=\"_blank\" rel=\"noopener\">http://food.lanzhou.cn/</a> <br><br>【主导整个页面框架设计，滚动页面的逻辑。】<br><br><br><br><br><br><br>2.2中国兰州网新闻页面框架重构改造(尚未开源)   <br><br>旧  新闻框架（2015）：<br><br><a href=\"http://lz.lanzhou.cn/system/2018/01/27/011502940.shtml\" target=\"_blank\" rel=\"noopener\">旧新闻框架</a><br><br><br>新 响应式新闻框架（2017.8）：<br><br><a href=\"http://news.lanzhou.cn/system/2018/01/11/011492028.shtml\" target=\"_blank\" rel=\"noopener\">响应式新闻框架</a><br><br><br>旧：图片新闻框架（2015）:<br><br><a href=\"http://news.lanzhou.cn/system/2018/01/25/011501122.shtml\" target=\"_blank\" rel=\"noopener\">图片新闻框架</a><br><br><br>新：响应式图片框架（2017.8）<br><br><a href=\"http://news.lanzhou.cn/system/2017/12/13/011475652.shtml\" target=\"_blank\" rel=\"noopener\">响应式图片框架</a><br><br><br>【整个项目的技术选型、代码编写、兼容测试、灰度发布、部署上线都是我自己主动向Leader请缨完成的。其中也踩了不少的坑，主要的用了一个Bootstrap的UI框架和jQuery（前者的依赖）。】<br><br><br><br><br><br><br>2.3 Angular和Bootstrap搭建后台管理系统 1.0.0版本<br></p>\n<p>预览: <a href=\"https://zq-jhon.github.io/angular-demo/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/angular-demo/</a><br><br>源码:<a href=\"https://github.com/ZQ-jhon/angular-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/angular-demo</a><br><br>博客记录：<br><br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78842927\" target=\"_blank\" rel=\"noopener\">博客记录1</a><br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78842927\" target=\"_blank\" rel=\"noopener\">博客记录2</a><br><br>【这是刚开始接触Angular的时候做的，了解到它的双向数据绑定非常厉害，结合之前的Bootstrap做了一个实践项目。】<br><br><br><br><br><br><br>2.4 基于HEXO和GIT的个人博客<br><br>预览:<a href=\"https://ZQ-jhon.github.io\" target=\"_blank\" rel=\"noopener\">https://ZQ-jhon.github.io</a><br><br>源码:<a href=\"https://github.com/ZQ-jhon/ZQ-jhon.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/ZQ-jhon.github.io</a><br><br>博客记录: <a href=\"http://blog.csdn.net/qq_20264891/article/details/79096846\" target=\"_blank\" rel=\"noopener\">基于HEXO和GIT的个人博客详细搭建及部署过程</a><br><br>【以前面试连博客都没有，后来就像把Demo部署到线上，让面试官一眼就能看见，所以花了一两天时间找了个漂亮的HEXO主题，进行部分样式修改，结合GITHUB的知识，顺利部署上线。期间也有很多不懂的地方，也咨询了HEXO主题的作者】<br><br><br><br><br><br><br>2.5 原生js的插件—-putThere.js 拖动DOM元素<br></p>\n<p>预览:<a href=\"https://zq-jhon.github.io/putThere.js/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/putThere.js/</a><br><br>源码:<a href=\"https://github.com/ZQ-jhon/putThere.js\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/putThere.js</a><br><br>博客记录:<a href=\"http://blog.csdn.net/qq_20264891/article/details/79172246\" target=\"_blank\" rel=\"noopener\">putThere.js造小轮子记录博客</a><br><br>【之前对360浏览器的首页缩略图书签拖动感兴趣，我立马造了这个小轮子】<br><br><br><br><br><br><br>2.6 多动症简历<br>预览:<a href=\"https://zq-jhon.github.io/resume/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/resume/</a><br><br>源码:<a href=\"https://github.com/ZQ-jhon/resume\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/resume</a><br><br>博客记录: <a href=\"http://blog.csdn.net/qq_20264891/article/details/79197651\" target=\"_blank\" rel=\"noopener\">多动症简历详细记录</a><br><br>【因为看到网上一个国外前端做了这样一份简历(<a href=\"http://strml.net/\" target=\"_blank\" rel=\"noopener\">http://strml.net/</a>)，于是我自己根据JS知识，也进行了实践。】<br><br><br><br><br><br></p>\n<h2 id=\"想说的话\"><a href=\"#想说的话\" class=\"headerlink\" title=\"想说的话\"></a>想说的话</h2><p><br></p>\n<ul>\n<li>期待的工作氛围：良好的技术氛围，能够多学东西，不限于前端。如果想培养我成为一名全栈工程师当然再好不过啦。</li>\n<li>期待的工作城市：北京、上海、广州、深圳、杭州。</li>\n<li>期待的发展：可以成为一名全栈开发人员。</li>\n<li>何时入职：本人目前在老家甘肃兰州，正月十五启程！</li>\n<li>写于2018年2月5日</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"张强\"><a href=\"#张强\" class=\"headerlink\" title=\"﻿张强  \"></a>﻿张强  </h1><p><a href=\"https://ZQ-jhon.github.io\" target=\"_blank\" rel=\"noopener\">GitHub博客</a><br><br><br><a href=\"http://blog.csdn.net/qq_20264891\" target=\"_blank\" rel=\"noopener\">CSDN博客</a></p>\n<ul>\n<li>24岁</li>\n<li>通信工程(本科)  </li>\n<li>擅长写作</li>\n<li>热爱音乐</li>\n</ul>\n<h2 id=\"在校经验\"><a href=\"#在校经验\" class=\"headerlink\" title=\"在校经验\"></a>在校经验</h2><ul>\n<li>2012年下半年，任职学校贴吧大吧主，负责与百度贴吧官方申请活动物资，负责策划线下活动，负责向校方申请活动场地，拉赞助等。有良好的组织和策划能力，曾经发起向大凉山贫困地区募捐活动，筹集善款1600+元，衣物/书籍 20+ 编织袋。<br>链接:<a href=\"http://tieba.baidu.com/p/2067459311?see_lz=1\" target=\"_blank\" rel=\"noopener\">贴吧大凉山活动募捐总结</a></li>\n<li>2014年，在青岛绿城房地产有限公司实习渠道专员。</li>\n</ul>\n<h2 id=\"工作经验\"><a href=\"#工作经验\" class=\"headerlink\" title=\"工作经验\"></a>工作经验</h2><ul>\n<li><p>2016年7月毕业，任职青岛某艺术培训学校吉他老师，负责日常微信公众号运营、小孩吉他教学。</p>\n</li>\n<li><p>2017年初，入职中国兰州网，担任前端开发，负责专题设计、JS逻辑层交互代码、北方网后台模版渲染对接、老旧网页响应式改造重构。</p>\n</li>\n<li><p>2018年，怀着憧憬来到北京，就职于 《光辉城市》科技有限公司，任职前端开发( Angular 6.0 + )，负责官网后台组件开发/重构，对接 API，前沿知识学习并利用到项目中，混合应用（Ionic + Electron）</p>\n</li>\n</ul>\n<h2 id=\"我的优势\"><a href=\"#我的优势\" class=\"headerlink\" title=\"我的优势\"></a>我的优势</h2><ul>\n<li>良好抗压能力：有压力会使我成长的更快。</li>\n<li>极强的书面表达能力：从小就爱写作。</li>\n<li>良好的自驱能力：每天都保持写博客，看技术文章学习提升，有开源精神。</li>\n<li>良好的学习与沟通能力：有弄不懂的我一定会问。</li>\n</ul>\n<h2 id=\"技能与项目\"><a href=\"#技能与项目\" class=\"headerlink\" title=\"技能与项目\"></a>技能与项目</h2><p><strong>1.技能</strong></p>\n<ul>\n<li>掌握HTML语义化标签、CSS常见属性与布局(Flex,Grid)及CSS3新特性</li>\n<li>掌握Bootstrap，能够快速搭建响应式页面</li>\n<li>掌握JS常用API，以及闭包、原型链、面向对象和继承(ES5)，熟练使用 TS,例如枚举，解构，泛型，接口等</li>\n<li>常逛github，熟悉git,svn等版本控制工具，会使用 commitlint 来语义化的 commit</li>\n<li>熟悉Nodejs，对Webpack、AngularJs、Express进行过一定的实践</li>\n<li>熟悉Ajax异步流程，包括JQuery和Angular封装的Ajax</li>\n<li>熟悉前端优化的方法和手段</li>\n</ul>\n<p><strong>2.项目/实践</strong><br> <br><br>2.0专题汇总</p>\n<p>2.1中国兰州网美食频道 (尚未开源)<br><a href=\"http://food.lanzhou.cn/\" target=\"_blank\" rel=\"noopener\">http://food.lanzhou.cn/</a> <br><br>【主导整个页面框架设计，滚动页面的逻辑。】<br><br><br><br><br><br><br>2.2中国兰州网新闻页面框架重构改造(尚未开源)   <br><br>旧  新闻框架（2015）：<br><br><a href=\"http://lz.lanzhou.cn/system/2018/01/27/011502940.shtml\" target=\"_blank\" rel=\"noopener\">旧新闻框架</a><br><br><br>新 响应式新闻框架（2017.8）：<br><br><a href=\"http://news.lanzhou.cn/system/2018/01/11/011492028.shtml\" target=\"_blank\" rel=\"noopener\">响应式新闻框架</a><br><br><br>旧：图片新闻框架（2015）:<br><br><a href=\"http://news.lanzhou.cn/system/2018/01/25/011501122.shtml\" target=\"_blank\" rel=\"noopener\">图片新闻框架</a><br><br><br>新：响应式图片框架（2017.8）<br><br><a href=\"http://news.lanzhou.cn/system/2017/12/13/011475652.shtml\" target=\"_blank\" rel=\"noopener\">响应式图片框架</a><br><br><br>【整个项目的技术选型、代码编写、兼容测试、灰度发布、部署上线都是我自己主动向Leader请缨完成的。其中也踩了不少的坑，主要的用了一个Bootstrap的UI框架和jQuery（前者的依赖）。】<br><br><br><br><br><br><br>2.3 Angular和Bootstrap搭建后台管理系统 1.0.0版本<br></p>\n<p>预览: <a href=\"https://zq-jhon.github.io/angular-demo/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/angular-demo/</a><br><br>源码:<a href=\"https://github.com/ZQ-jhon/angular-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/angular-demo</a><br><br>博客记录：<br><br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78842927\" target=\"_blank\" rel=\"noopener\">博客记录1</a><br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78842927\" target=\"_blank\" rel=\"noopener\">博客记录2</a><br><br>【这是刚开始接触Angular的时候做的，了解到它的双向数据绑定非常厉害，结合之前的Bootstrap做了一个实践项目。】<br><br><br><br><br><br><br>2.4 基于HEXO和GIT的个人博客<br><br>预览:<a href=\"https://ZQ-jhon.github.io\" target=\"_blank\" rel=\"noopener\">https://ZQ-jhon.github.io</a><br><br>源码:<a href=\"https://github.com/ZQ-jhon/ZQ-jhon.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/ZQ-jhon.github.io</a><br><br>博客记录: <a href=\"http://blog.csdn.net/qq_20264891/article/details/79096846\" target=\"_blank\" rel=\"noopener\">基于HEXO和GIT的个人博客详细搭建及部署过程</a><br><br>【以前面试连博客都没有，后来就像把Demo部署到线上，让面试官一眼就能看见，所以花了一两天时间找了个漂亮的HEXO主题，进行部分样式修改，结合GITHUB的知识，顺利部署上线。期间也有很多不懂的地方，也咨询了HEXO主题的作者】<br><br><br><br><br><br><br>2.5 原生js的插件—-putThere.js 拖动DOM元素<br></p>\n<p>预览:<a href=\"https://zq-jhon.github.io/putThere.js/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/putThere.js/</a><br><br>源码:<a href=\"https://github.com/ZQ-jhon/putThere.js\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/putThere.js</a><br><br>博客记录:<a href=\"http://blog.csdn.net/qq_20264891/article/details/79172246\" target=\"_blank\" rel=\"noopener\">putThere.js造小轮子记录博客</a><br><br>【之前对360浏览器的首页缩略图书签拖动感兴趣，我立马造了这个小轮子】<br><br><br><br><br><br><br>2.6 多动症简历<br>预览:<a href=\"https://zq-jhon.github.io/resume/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/resume/</a><br><br>源码:<a href=\"https://github.com/ZQ-jhon/resume\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/resume</a><br><br>博客记录: <a href=\"http://blog.csdn.net/qq_20264891/article/details/79197651\" target=\"_blank\" rel=\"noopener\">多动症简历详细记录</a><br><br>【因为看到网上一个国外前端做了这样一份简历(<a href=\"http://strml.net/\" target=\"_blank\" rel=\"noopener\">http://strml.net/</a>)，于是我自己根据JS知识，也进行了实践。】<br><br><br><br><br><br></p>\n<h2 id=\"想说的话\"><a href=\"#想说的话\" class=\"headerlink\" title=\"想说的话\"></a>想说的话</h2><p><br></p>\n<ul>\n<li>期待的工作氛围：良好的技术氛围，能够多学东西，不限于前端。如果想培养我成为一名全栈工程师当然再好不过啦。</li>\n<li>期待的工作城市：北京、上海、广州、深圳、杭州。</li>\n<li>期待的发展：可以成为一名全栈开发人员。</li>\n<li>何时入职：本人目前在老家甘肃兰州，正月十五启程！</li>\n<li>写于2018年2月5日</li>\n</ul>\n"},{"title":"title","date":"2019-11-07T01:56:27.000Z","tags":["tag1","tag2"],"reward":true,"comment":true,"repo":"codefine | hexo-theme-mellow","_content":"本文章原始创作地址：[example](example)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n# 当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\n```bash\n@example\n\n$ hexo new articleTitle\n```\n{% asset_image result.png %}\n\n## 一、抛出问题\n\n## 二、分析原因\n\n## 三、解决方案\n\n# language useage\n\n```javascript\nconst a = 1;\nconsole.log(a);\n```\n\n```typescript\nclass {\n  public a: number = 1;\n  constructor() {\n    console.log(a);\n  }\n}\n```\n\n```css\n.a {\n  border: 1px solid #000;\n}\n```\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"文章模板.md","raw":"---\ntitle: title #标题\ndate: 2019-11-07 09:56:27 #创建时间\ntags: [tag1, tag2] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\nrepo: codefine | hexo-theme-mellow #用户名 | 仓库名\n# src: https://i.loli.net/2017/12/12/5a2fd18a74471.jpg #主页摘要缩略图(外链以及相对资源均可)\n---\n本文章原始创作地址：[example](example)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n# 当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\n```bash\n@example\n\n$ hexo new articleTitle\n```\n{% asset_image result.png %}\n\n## 一、抛出问题\n\n## 二、分析原因\n\n## 三、解决方案\n\n# language useage\n\n```javascript\nconst a = 1;\nconsole.log(a);\n```\n\n```typescript\nclass {\n  public a: number = 1;\n  constructor() {\n    console.log(a);\n  }\n}\n```\n\n```css\n.a {\n  border: 1px solid #000;\n}\n```\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","updated":"2019-12-13T12:33:42.230Z","path":"文章模板.html","comments":1,"layout":"page","_id":"ck6hpsatb0001ckufxsfjpq54","content":"<p>本文章原始创作地址：<a href=\"example\">example</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h1 id=\"当资源文件管理功能打开后，Hexo将会在你每一次通过-hexo-new-layout-命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个-markdown-文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\"><a href=\"#当资源文件管理功能打开后，Hexo将会在你每一次通过-hexo-new-layout-命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个-markdown-文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\" class=\"headerlink\" title=\"当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout]  命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\"></a>当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</title></h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@example</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new articleTitle</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一、抛出问题\"><a href=\"#一、抛出问题\" class=\"headerlink\" title=\"一、抛出问题\"></a>一、抛出问题</h2><h2 id=\"二、分析原因\"><a href=\"#二、分析原因\" class=\"headerlink\" title=\"二、分析原因\"></a>二、分析原因</h2><h2 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h2><h1 id=\"language-useage\"><a href=\"#language-useage\" class=\"headerlink\" title=\"language useage\"></a>language useage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> a: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文章原始创作地址：<a href=\"example\">example</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h1 id=\"当资源文件管理功能打开后，Hexo将会在你每一次通过-hexo-new-layout-命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个-markdown-文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\"><a href=\"#当资源文件管理功能打开后，Hexo将会在你每一次通过-hexo-new-layout-命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个-markdown-文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\" class=\"headerlink\" title=\"当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout]  命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\"></a>当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</title></h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@example</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new articleTitle</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一、抛出问题\"><a href=\"#一、抛出问题\" class=\"headerlink\" title=\"一、抛出问题\"></a>一、抛出问题</h2><h2 id=\"二、分析原因\"><a href=\"#二、分析原因\" class=\"headerlink\" title=\"二、分析原因\"></a>二、分析原因</h2><h2 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h2><h1 id=\"language-useage\"><a href=\"#language-useage\" class=\"headerlink\" title=\"language useage\"></a>language useage</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> a: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"挂在鹿角上的钟停了\n\n生活是一次机会\n\n仅仅一次\n\n谁校对时间\n\n谁就会突然老去\n\n北岛——《无题》","source":"categories/index.md","raw":"挂在鹿角上的钟停了\n\n生活是一次机会\n\n仅仅一次\n\n谁校对时间\n\n谁就会突然老去\n\n北岛——《无题》","date":"2019-05-14T14:30:28.712Z","updated":"2019-05-14T14:30:28.712Z","path":"categories/index.html","title":"","comments":1,"layout":"page","_id":"ck6hpsaum0003ckuf9kkk1cgf","content":"<p>挂在鹿角上的钟停了</p>\n<p>生活是一次机会</p>\n<p>仅仅一次</p>\n<p>谁校对时间</p>\n<p>谁就会突然老去</p>\n<p>北岛——《无题》</p>\n","site":{"data":{}},"excerpt":"","more":"<p>挂在鹿角上的钟停了</p>\n<p>生活是一次机会</p>\n<p>仅仅一次</p>\n<p>谁校对时间</p>\n<p>谁就会突然老去</p>\n<p>北岛——《无题》</p>\n"},{"_content":"<img src=\"https://raw.githubusercontent.com/ZQ-jhon/ZQ-jhon.github.io/master/img/wechat.png\" alt=\"扫一扫\" style=\"width: 200px;height:200px;\">\n  <p style=\"text-align: center;\">📸 _扫一扫嘛_ </p>\n<h1>\nView my GitHub : [https://github.com/ZQ-jhon](https://github.com/ZQ-jhon)\n</h1>\n","source":"about/index.md","raw":"<img src=\"https://raw.githubusercontent.com/ZQ-jhon/ZQ-jhon.github.io/master/img/wechat.png\" alt=\"扫一扫\" style=\"width: 200px;height:200px;\">\n  <p style=\"text-align: center;\">📸 _扫一扫嘛_ </p>\n<h1>\nView my GitHub : [https://github.com/ZQ-jhon](https://github.com/ZQ-jhon)\n</h1>\n","date":"2019-05-14T14:30:37.767Z","updated":"2019-05-14T14:30:37.767Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ck6hpsaur0005ckuf68d1h27k","content":"<p><img src=\"https://raw.githubusercontent.com/ZQ-jhon/ZQ-jhon.github.io/master/img/wechat.png\" alt=\"扫一扫\" style=\"width: 200px;height:200px;\"><br>  </p><p style=\"text-align: center;\">📸 <em>扫一扫嘛</em> </p><p></p>\n<h1><br>View my GitHub : <a href=\"https://github.com/ZQ-jhon\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon</a><br></h1>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/ZQ-jhon/ZQ-jhon.github.io/master/img/wechat.png\" alt=\"扫一扫\" style=\"width: 200px;height:200px;\"><br>  </p><p style=\"text-align: center;\">📸 <em>扫一扫嘛</em> </p><p></p>\n<h1><br>View my GitHub : <a href=\"https://github.com/ZQ-jhon\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon</a><br></h1>\n"},{"_content":"# 前言\n*日报是本博客新增的栏目，因为平时团队也有提交技术日报的习惯，所以，顺便就摘录一些放到自己的博客里。目的是为了鼓励自己要多去了解、多去深入思考*\n\n# 2019\n\n**11 月**\n0. [2019-11-21 race 赛马程序](./2019/race.2019-11-21.html)\n1. [2019-11-27 ipv4 耗尽](./2019/ipv4.2019-11-27.html)\n2. [2019-12-02 代码是如何执123行的](./2019/code.2019-12-02.html)\n3. [2019-12-14 为什么用 yaml 来做配置项](./2019/yaml.2019-12-14.html)\n4. [2019-12-18 WSL](./2019/wsl.2019-12-18.html)\n5. [2019-12-20 font-awesome 5](./2019/fa.2019-12-20.html)\n6. [2019-12-23 字体图标使用的进化史](./2019/icon.2019-12-23.html)\n7. [2019-12-25 探究更多的测试方式](./2019/test.2019-12-25.html)\n\n\n# 2020 \n\n**01 月**\n0. [2020-01-14 开源项目是如何做 i18n 的](./2020/crowdin.2020-01-14.html)\n1. [2020-01-16 Chrome-lib 快链接](./2020/quick-link.2020-01-16.html)\n\n**02 月**","source":"daily-news/index.md","raw":"# 前言\n*日报是本博客新增的栏目，因为平时团队也有提交技术日报的习惯，所以，顺便就摘录一些放到自己的博客里。目的是为了鼓励自己要多去了解、多去深入思考*\n\n# 2019\n\n**11 月**\n0. [2019-11-21 race 赛马程序](./2019/race.2019-11-21.html)\n1. [2019-11-27 ipv4 耗尽](./2019/ipv4.2019-11-27.html)\n2. [2019-12-02 代码是如何执123行的](./2019/code.2019-12-02.html)\n3. [2019-12-14 为什么用 yaml 来做配置项](./2019/yaml.2019-12-14.html)\n4. [2019-12-18 WSL](./2019/wsl.2019-12-18.html)\n5. [2019-12-20 font-awesome 5](./2019/fa.2019-12-20.html)\n6. [2019-12-23 字体图标使用的进化史](./2019/icon.2019-12-23.html)\n7. [2019-12-25 探究更多的测试方式](./2019/test.2019-12-25.html)\n\n\n# 2020 \n\n**01 月**\n0. [2020-01-14 开源项目是如何做 i18n 的](./2020/crowdin.2020-01-14.html)\n1. [2020-01-16 Chrome-lib 快链接](./2020/quick-link.2020-01-16.html)\n\n**02 月**","date":"2020-02-11T09:48:37.346Z","updated":"2020-02-11T09:48:37.346Z","path":"daily-news/index.html","title":"","comments":1,"layout":"page","_id":"ck6hpsaut0007ckufh3t4crh0","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>日报是本博客新增的栏目，因为平时团队也有提交技术日报的习惯，所以，顺便就摘录一些放到自己的博客里。目的是为了鼓励自己要多去了解、多去深入思考</em></p>\n<h1 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h1><p><strong>11 月</strong></p>\n<ol start=\"0\">\n<li><a href=\"./2019/race.2019-11-21.html\">2019-11-21 race 赛马程序</a></li>\n<li><a href=\"./2019/ipv4.2019-11-27.html\">2019-11-27 ipv4 耗尽</a></li>\n<li><a href=\"./2019/code.2019-12-02.html\">2019-12-02 代码是如何执123行的</a></li>\n<li><a href=\"./2019/yaml.2019-12-14.html\">2019-12-14 为什么用 yaml 来做配置项</a></li>\n<li><a href=\"./2019/wsl.2019-12-18.html\">2019-12-18 WSL</a></li>\n<li><a href=\"./2019/fa.2019-12-20.html\">2019-12-20 font-awesome 5</a></li>\n<li><a href=\"./2019/icon.2019-12-23.html\">2019-12-23 字体图标使用的进化史</a></li>\n<li><a href=\"./2019/test.2019-12-25.html\">2019-12-25 探究更多的测试方式</a></li>\n</ol>\n<h1 id=\"2020\"><a href=\"#2020\" class=\"headerlink\" title=\"2020\"></a>2020</h1><p><strong>01 月</strong></p>\n<ol start=\"0\">\n<li><a href=\"./2020/crowdin.2020-01-14.html\">2020-01-14 开源项目是如何做 i18n 的</a></li>\n<li><a href=\"./2020/quick-link.2020-01-16.html\">2020-01-16 Chrome-lib 快链接</a></li>\n</ol>\n<p><strong>02 月</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><em>日报是本博客新增的栏目，因为平时团队也有提交技术日报的习惯，所以，顺便就摘录一些放到自己的博客里。目的是为了鼓励自己要多去了解、多去深入思考</em></p>\n<h1 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h1><p><strong>11 月</strong></p>\n<ol start=\"0\">\n<li><a href=\"./2019/race.2019-11-21.html\">2019-11-21 race 赛马程序</a></li>\n<li><a href=\"./2019/ipv4.2019-11-27.html\">2019-11-27 ipv4 耗尽</a></li>\n<li><a href=\"./2019/code.2019-12-02.html\">2019-12-02 代码是如何执123行的</a></li>\n<li><a href=\"./2019/yaml.2019-12-14.html\">2019-12-14 为什么用 yaml 来做配置项</a></li>\n<li><a href=\"./2019/wsl.2019-12-18.html\">2019-12-18 WSL</a></li>\n<li><a href=\"./2019/fa.2019-12-20.html\">2019-12-20 font-awesome 5</a></li>\n<li><a href=\"./2019/icon.2019-12-23.html\">2019-12-23 字体图标使用的进化史</a></li>\n<li><a href=\"./2019/test.2019-12-25.html\">2019-12-25 探究更多的测试方式</a></li>\n</ol>\n<h1 id=\"2020\"><a href=\"#2020\" class=\"headerlink\" title=\"2020\"></a>2020</h1><p><strong>01 月</strong></p>\n<ol start=\"0\">\n<li><a href=\"./2020/crowdin.2020-01-14.html\">2020-01-14 开源项目是如何做 i18n 的</a></li>\n<li><a href=\"./2020/quick-link.2020-01-16.html\">2020-01-16 Chrome-lib 快链接</a></li>\n</ol>\n<p><strong>02 月</strong></p>\n"},{"title":"Projects","date":"2018-01-31T08:32:37.000Z","_content":"<h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"dora\"> 1.  电影 --- 绘制多啦A梦  点击在本页查看 >> </button>\ngithub:  [Fork this project online-resume on Github](https://github.com/ZQ-jhon/draw-a-dora-A-mon-online/blob/master/README.md)\n</h4>\n<h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"resume\"> 2.  多动症简历  点击在本页查看 >> </button>\ngithub:  [Fork this project dynamic-resume on Github](https://github.com/ZQ-jhon/draw-a-dora-A-mon-online/blob/master/README.md)\n</h4>\n<h4  style=\"text-align:left;\"> <button class=\"project-btn\" id=\"vTodo\"> 3.  Vue  --- TodoList  点击在本页查看 >> </button>\ngithub:  [Fork this project TodoList-by-Vue on Github](https://github.com/ZQ-jhon/TodoList-by-vue/tree/master)\n</h4>\n<h4  style=\"text-align:left;\"> <button class=\"project-btn\" id=\"ngTodo\"> 4.  ng6  --- TodoList  点击在本页查看 >> </button>\ngithub:  [Fork this project ng6-todolist on Github](https://github.com/ZQ-jhon/ng6-todolist)\n</h4>\n<h4  style=\"text-align:left;\"> <button class=\"project-btn\" id=\"reactTodo\"> 5.  react  --- TodoList  点击在本页查看 >> </button>\ngithub:  [Fork this project react-todolist on Github](https://github.com/ZQ-jhon/react-todolist)\n</h4>\n\n<style>\n.project-btn {\n    background: none;\n    outline: none;\n    border: none;\n    cursor: pointer;\n    text-decoration: underline;\n}\n</style>\n\n<iframe class=\"iframes\"  id=\"iframe\" src=\"https://zq-jhon.github.io/draw-a-dora-A-mon-online/\" width=\"1000\" height=\"700\"></iframe>\n\n<script type=\"text/javascript\">\nconst $ele = (ID) => document.getElementById(ID);\n\nconst iframe = $ele('iframe');\nconst dora = $ele('dora');\nconst resume = $ele('resume');\nconst vTodo = $ele('vTodo');\nconst ngTodo = $ele('ngTodo');\nconst reactTodo = $ele('reactTodo');\n\nconsole.log(iframe, dora,resume,vTodo,ngTodo,reactTodo)\n\nconst linkTo = (link) => iframe.setAttribute('src',link);\n\ndora.onclick = function() { linkTo('https://zq-jhon.github.io/draw-a-dora-A-mon-online/'); }\nresume.onclick = function() { linkTo('https://zq-jhon.github.io/resume/'); }\nvTodo.onclick = function() { linkTo('https://zq-jhon.github.io/TodoList-by-vue/'); }\nngTodo.onclick = function() { linkTo('https://zq-jhon.github.io/ng6-todolist/dist/ngTodolist/index.html'); }\nreactTodo.onclick = function() { linkTo('https://zq-jhon.github.io/react-todolist/build/index.html'); }\n\n</script>","source":"projects/index.md","raw":"---\ntitle: Projects \ndate: 2018-01-31 16:32:37\n---\n<h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"dora\"> 1.  电影 --- 绘制多啦A梦  点击在本页查看 >> </button>\ngithub:  [Fork this project online-resume on Github](https://github.com/ZQ-jhon/draw-a-dora-A-mon-online/blob/master/README.md)\n</h4>\n<h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"resume\"> 2.  多动症简历  点击在本页查看 >> </button>\ngithub:  [Fork this project dynamic-resume on Github](https://github.com/ZQ-jhon/draw-a-dora-A-mon-online/blob/master/README.md)\n</h4>\n<h4  style=\"text-align:left;\"> <button class=\"project-btn\" id=\"vTodo\"> 3.  Vue  --- TodoList  点击在本页查看 >> </button>\ngithub:  [Fork this project TodoList-by-Vue on Github](https://github.com/ZQ-jhon/TodoList-by-vue/tree/master)\n</h4>\n<h4  style=\"text-align:left;\"> <button class=\"project-btn\" id=\"ngTodo\"> 4.  ng6  --- TodoList  点击在本页查看 >> </button>\ngithub:  [Fork this project ng6-todolist on Github](https://github.com/ZQ-jhon/ng6-todolist)\n</h4>\n<h4  style=\"text-align:left;\"> <button class=\"project-btn\" id=\"reactTodo\"> 5.  react  --- TodoList  点击在本页查看 >> </button>\ngithub:  [Fork this project react-todolist on Github](https://github.com/ZQ-jhon/react-todolist)\n</h4>\n\n<style>\n.project-btn {\n    background: none;\n    outline: none;\n    border: none;\n    cursor: pointer;\n    text-decoration: underline;\n}\n</style>\n\n<iframe class=\"iframes\"  id=\"iframe\" src=\"https://zq-jhon.github.io/draw-a-dora-A-mon-online/\" width=\"1000\" height=\"700\"></iframe>\n\n<script type=\"text/javascript\">\nconst $ele = (ID) => document.getElementById(ID);\n\nconst iframe = $ele('iframe');\nconst dora = $ele('dora');\nconst resume = $ele('resume');\nconst vTodo = $ele('vTodo');\nconst ngTodo = $ele('ngTodo');\nconst reactTodo = $ele('reactTodo');\n\nconsole.log(iframe, dora,resume,vTodo,ngTodo,reactTodo)\n\nconst linkTo = (link) => iframe.setAttribute('src',link);\n\ndora.onclick = function() { linkTo('https://zq-jhon.github.io/draw-a-dora-A-mon-online/'); }\nresume.onclick = function() { linkTo('https://zq-jhon.github.io/resume/'); }\nvTodo.onclick = function() { linkTo('https://zq-jhon.github.io/TodoList-by-vue/'); }\nngTodo.onclick = function() { linkTo('https://zq-jhon.github.io/ng6-todolist/dist/ngTodolist/index.html'); }\nreactTodo.onclick = function() { linkTo('https://zq-jhon.github.io/react-todolist/build/index.html'); }\n\n</script>","updated":"2019-06-20T13:12:27.878Z","path":"projects/index.html","comments":1,"layout":"page","_id":"ck6hpsauz000ackufndbgfwsc","content":"<h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"dora\"> 1.  电影 — 绘制多啦A梦  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/draw-a-dora-A-mon-online/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">Fork this project online-resume on Github</a><br></h4><br><h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"resume\"> 2.  多动症简历  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/draw-a-dora-A-mon-online/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">Fork this project dynamic-resume on Github</a><br></h4><br><h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"vTodo\"> 3.  Vue  — TodoList  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/TodoList-by-vue/tree/master\" target=\"_blank\" rel=\"noopener\">Fork this project TodoList-by-Vue on Github</a><br></h4><br><h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"ngTodo\"> 4.  ng6  — TodoList  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/ng6-todolist\" target=\"_blank\" rel=\"noopener\">Fork this project ng6-todolist on Github</a><br></h4><br><h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"reactTodo\"> 5.  react  — TodoList  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/react-todolist\" target=\"_blank\" rel=\"noopener\">Fork this project react-todolist on Github</a><br></h4>\n\n<style>\n.project-btn {\n    background: none;\n    outline: none;\n    border: none;\n    cursor: pointer;\n    text-decoration: underline;\n}\n</style>\n\n<iframe class=\"iframes\" id=\"iframe\" src=\"https://zq-jhon.github.io/draw-a-dora-A-mon-online/\" width=\"1000\" height=\"700\"></iframe>\n\n<script type=\"text/javascript\">\nconst $ele = (ID) => document.getElementById(ID);\n\nconst iframe = $ele('iframe');\nconst dora = $ele('dora');\nconst resume = $ele('resume');\nconst vTodo = $ele('vTodo');\nconst ngTodo = $ele('ngTodo');\nconst reactTodo = $ele('reactTodo');\n\nconsole.log(iframe, dora,resume,vTodo,ngTodo,reactTodo)\n\nconst linkTo = (link) => iframe.setAttribute('src',link);\n\ndora.onclick = function() { linkTo('https://zq-jhon.github.io/draw-a-dora-A-mon-online/'); }\nresume.onclick = function() { linkTo('https://zq-jhon.github.io/resume/'); }\nvTodo.onclick = function() { linkTo('https://zq-jhon.github.io/TodoList-by-vue/'); }\nngTodo.onclick = function() { linkTo('https://zq-jhon.github.io/ng6-todolist/dist/ngTodolist/index.html'); }\nreactTodo.onclick = function() { linkTo('https://zq-jhon.github.io/react-todolist/build/index.html'); }\n\n</script>","site":{"data":{}},"excerpt":"","more":"<h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"dora\"> 1.  电影 — 绘制多啦A梦  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/draw-a-dora-A-mon-online/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">Fork this project online-resume on Github</a><br></h4><br><h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"resume\"> 2.  多动症简历  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/draw-a-dora-A-mon-online/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">Fork this project dynamic-resume on Github</a><br></h4><br><h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"vTodo\"> 3.  Vue  — TodoList  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/TodoList-by-vue/tree/master\" target=\"_blank\" rel=\"noopener\">Fork this project TodoList-by-Vue on Github</a><br></h4><br><h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"ngTodo\"> 4.  ng6  — TodoList  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/ng6-todolist\" target=\"_blank\" rel=\"noopener\">Fork this project ng6-todolist on Github</a><br></h4><br><h4 style=\"text-align:left;\"> <button class=\"project-btn\" id=\"reactTodo\"> 5.  react  — TodoList  点击在本页查看 &gt;&gt; </button><br>github:  <a href=\"https://github.com/ZQ-jhon/react-todolist\" target=\"_blank\" rel=\"noopener\">Fork this project react-todolist on Github</a><br></h4>\n\n<style>\n.project-btn {\n    background: none;\n    outline: none;\n    border: none;\n    cursor: pointer;\n    text-decoration: underline;\n}\n</style>\n\n<iframe class=\"iframes\" id=\"iframe\" src=\"https://zq-jhon.github.io/draw-a-dora-A-mon-online/\" width=\"1000\" height=\"700\"></iframe>\n\n<script type=\"text/javascript\">\nconst $ele = (ID) => document.getElementById(ID);\n\nconst iframe = $ele('iframe');\nconst dora = $ele('dora');\nconst resume = $ele('resume');\nconst vTodo = $ele('vTodo');\nconst ngTodo = $ele('ngTodo');\nconst reactTodo = $ele('reactTodo');\n\nconsole.log(iframe, dora,resume,vTodo,ngTodo,reactTodo)\n\nconst linkTo = (link) => iframe.setAttribute('src',link);\n\ndora.onclick = function() { linkTo('https://zq-jhon.github.io/draw-a-dora-A-mon-online/'); }\nresume.onclick = function() { linkTo('https://zq-jhon.github.io/resume/'); }\nvTodo.onclick = function() { linkTo('https://zq-jhon.github.io/TodoList-by-vue/'); }\nngTodo.onclick = function() { linkTo('https://zq-jhon.github.io/ng6-todolist/dist/ngTodolist/index.html'); }\nreactTodo.onclick = function() { linkTo('https://zq-jhon.github.io/react-todolist/build/index.html'); }\n\n</script>"},{"_content":"## BMS 之 ICON 进化史\n\n**过程**\n0. ICON 1.0 用一个图标,引入一个库(library)\n0. 使用一个 ICON 自己打包字体文件，再引入\n2. ICON 2.0 用一个图标,写一个 Svg 模板\n3. ICON 3.0 用 Nebular 注册图标\n\n**好处** \n\n- Nebular 负责将你传入的图标, 根据不同的 register font-icon pack, 来转换成对应的 SVG\n- Nebular 负责将你传入的图标进行统一的尺寸及样式管理 by its theme system\n\n**Example**\n\nBefore: \n\n```html\n<svg class=\"dashboard\">\n......\n<path fill=\"isCosmic ? '#000000' : '#ffffff'\"> </path>\n</svg>\n```\n\nAfter: \n\n```typescript\n// app.component.ts\n\n  this.iconLibraries.registerFontPack('@fortawesome/fontawesome-free', { packClass: 'fas', iconClassPrefix: 'fa' });\n  // 使用自定义的 SVG\n  this.iconLibraries.registerFontPack(PACKAGE_NAME);\n  this.iconLibraries.registerSvgPack(PACKAGE_NAME, ICONS);\n\n// icon-collection.ts\nexport const ICONS = {\n  dashboard: `\n    <!-- currentColor 是 nebular 自带的变量 -->\n    <svg class=\"eva\" fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n      viewBox=\"0 0 428.948 428.948\" style=\"enable-background:new 0 0 428.948 428.948;\" xml:space=\"preserve\">\n        <g>\n            <g>\n                <path d=\"M221.988,280.48c9.664,0,17.516-7.889,17.516-17.563c0-9.653-7.852-17.487-17.516-17.487\n          l-79.361-58.371l61.844,76.985C205.045,273.208,212.68,280.48,221.988,280.48z\"/>\n                <rect x=\"127.008\" y=\"332.197\" width=\"174.933\" height=\"41.513\"/>\n                <path d=\"M366.13,118.057c-40.51-40.509-94.369-62.818-151.656-62.818\n          c-57.288,0-111.148,22.309-151.657,62.818S0,212.425,0,269.713c0,36.99,9.319,72.539,26.816,103.997h40.086l29.319-16.929\n          l-12.948-22.428l-37.7,21.768c-13.319-25.932-20.843-55.307-20.843-86.408c0-5.504,0.25-10.951,0.711-16.338l44.952,7.926\n          l4.497-25.504l-45.481-8.019c8.127-35.883,26.451-67.937,51.755-92.948l30.815,36.725l19.839-16.646l-31.049-37.002\n          c28.471-21.379,63.128-34.938,100.757-37.485v49.117h25.896V80.422c37.629,2.549,72.286,16.107,100.758,37.486l-31.05,37.001\n          l19.838,16.646l30.816-36.726c25.303,25.012,43.627,57.066,51.754,92.948l-45.48,8.021l4.498,25.502l44.949-7.927\n          c0.461,5.388,0.711,10.834,0.711,16.338c0,31.103-7.521,60.479-20.842,86.409l-37.701-21.766l-12.947,22.427l29.318,16.927h40.088\n          c17.498-31.458,26.816-67.007,26.816-103.997C428.949,212.424,406.638,158.564,366.13,118.057z\"/>\n            </g>\n        </g>\n    </svg>\n  `,\n};\n\nexport const PACKAGE_NAME = 'custom-icons';\n\n```\n\nUse in MenuService: \n\n```typescript\nconst resourceCreatorMenu: NbMenuItem[] = [\n    {\n        title: '仪表盘',\n        icon: { pack: PACKAGE_NAME, icon: 'dashboard'},\n        link: '/dashboard',\n        home: true\n    };\n```\n\nUse in template:\n\n```html\n  <nb-icon icon=\"{{theme.icon}}\" pack=\"{{packName}}\"> </nb-icon>\n```\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"daily-news/2019/icon.2019-12-23.md","raw":"## BMS 之 ICON 进化史\n\n**过程**\n0. ICON 1.0 用一个图标,引入一个库(library)\n0. 使用一个 ICON 自己打包字体文件，再引入\n2. ICON 2.0 用一个图标,写一个 Svg 模板\n3. ICON 3.0 用 Nebular 注册图标\n\n**好处** \n\n- Nebular 负责将你传入的图标, 根据不同的 register font-icon pack, 来转换成对应的 SVG\n- Nebular 负责将你传入的图标进行统一的尺寸及样式管理 by its theme system\n\n**Example**\n\nBefore: \n\n```html\n<svg class=\"dashboard\">\n......\n<path fill=\"isCosmic ? '#000000' : '#ffffff'\"> </path>\n</svg>\n```\n\nAfter: \n\n```typescript\n// app.component.ts\n\n  this.iconLibraries.registerFontPack('@fortawesome/fontawesome-free', { packClass: 'fas', iconClassPrefix: 'fa' });\n  // 使用自定义的 SVG\n  this.iconLibraries.registerFontPack(PACKAGE_NAME);\n  this.iconLibraries.registerSvgPack(PACKAGE_NAME, ICONS);\n\n// icon-collection.ts\nexport const ICONS = {\n  dashboard: `\n    <!-- currentColor 是 nebular 自带的变量 -->\n    <svg class=\"eva\" fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n      viewBox=\"0 0 428.948 428.948\" style=\"enable-background:new 0 0 428.948 428.948;\" xml:space=\"preserve\">\n        <g>\n            <g>\n                <path d=\"M221.988,280.48c9.664,0,17.516-7.889,17.516-17.563c0-9.653-7.852-17.487-17.516-17.487\n          l-79.361-58.371l61.844,76.985C205.045,273.208,212.68,280.48,221.988,280.48z\"/>\n                <rect x=\"127.008\" y=\"332.197\" width=\"174.933\" height=\"41.513\"/>\n                <path d=\"M366.13,118.057c-40.51-40.509-94.369-62.818-151.656-62.818\n          c-57.288,0-111.148,22.309-151.657,62.818S0,212.425,0,269.713c0,36.99,9.319,72.539,26.816,103.997h40.086l29.319-16.929\n          l-12.948-22.428l-37.7,21.768c-13.319-25.932-20.843-55.307-20.843-86.408c0-5.504,0.25-10.951,0.711-16.338l44.952,7.926\n          l4.497-25.504l-45.481-8.019c8.127-35.883,26.451-67.937,51.755-92.948l30.815,36.725l19.839-16.646l-31.049-37.002\n          c28.471-21.379,63.128-34.938,100.757-37.485v49.117h25.896V80.422c37.629,2.549,72.286,16.107,100.758,37.486l-31.05,37.001\n          l19.838,16.646l30.816-36.726c25.303,25.012,43.627,57.066,51.754,92.948l-45.48,8.021l4.498,25.502l44.949-7.927\n          c0.461,5.388,0.711,10.834,0.711,16.338c0,31.103-7.521,60.479-20.842,86.409l-37.701-21.766l-12.947,22.427l29.318,16.927h40.088\n          c17.498-31.458,26.816-67.007,26.816-103.997C428.949,212.424,406.638,158.564,366.13,118.057z\"/>\n            </g>\n        </g>\n    </svg>\n  `,\n};\n\nexport const PACKAGE_NAME = 'custom-icons';\n\n```\n\nUse in MenuService: \n\n```typescript\nconst resourceCreatorMenu: NbMenuItem[] = [\n    {\n        title: '仪表盘',\n        icon: { pack: PACKAGE_NAME, icon: 'dashboard'},\n        link: '/dashboard',\n        home: true\n    };\n```\n\nUse in template:\n\n```html\n  <nb-icon icon=\"{{theme.icon}}\" pack=\"{{packName}}\"> </nb-icon>\n```\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","date":"2020-02-11T09:48:37.314Z","updated":"2020-02-11T09:48:37.314Z","path":"daily-news/2019/icon.2019-12-23.html","title":"","comments":1,"layout":"page","_id":"ck6hpsayo0051ckuffrbs87rf","content":"<h2 id=\"BMS-之-ICON-进化史\"><a href=\"#BMS-之-ICON-进化史\" class=\"headerlink\" title=\"BMS 之 ICON 进化史\"></a>BMS 之 ICON 进化史</h2><p><strong>过程</strong></p>\n<ol start=\"0\">\n<li>ICON 1.0 用一个图标,引入一个库(library)</li>\n<li>使用一个 ICON 自己打包字体文件，再引入</li>\n<li>ICON 2.0 用一个图标,写一个 Svg 模板</li>\n<li>ICON 3.0 用 Nebular 注册图标</li>\n</ol>\n<p><strong>好处</strong> </p>\n<ul>\n<li>Nebular 负责将你传入的图标, 根据不同的 register font-icon pack, 来转换成对应的 SVG</li>\n<li>Nebular 负责将你传入的图标进行统一的尺寸及样式管理 by its theme system</li>\n</ul>\n<p><strong>Example</strong></p>\n<p>Before: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dashboard\"</span>&gt;</span></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"isCosmic ? '#000000' : '#ffffff'\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>After: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.iconLibraries.registerFontPack(<span class=\"string\">'@fortawesome/fontawesome-free'</span>, &#123; packClass: <span class=\"string\">'fas'</span>, iconClassPrefix: <span class=\"string\">'fa'</span> &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 使用自定义的 SVG</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.iconLibraries.registerFontPack(PACKAGE_NAME);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.iconLibraries.registerSvgPack(PACKAGE_NAME, ICONS);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// icon-collection.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ICONS = &#123;</span><br><span class=\"line\">  dashboard: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;!-- currentColor 是 nebular 自带的变量 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;svg class=\"eva\" fill=\"currentColor\"</span></span><br><span class=\"line\"><span class=\"string\">        xmlns=\"http://www.w3.org/2000/svg\"</span></span><br><span class=\"line\"><span class=\"string\">        xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"</span></span><br><span class=\"line\"><span class=\"string\">      viewBox=\"0 0 428.948 428.948\" style=\"enable-background:new 0 0 428.948 428.948;\" xml:space=\"preserve\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;g&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;g&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;path d=\"M221.988,280.48c9.664,0,17.516-7.889,17.516-17.563c0-9.653-7.852-17.487-17.516-17.487</span></span><br><span class=\"line\"><span class=\"string\">          l-79.361-58.371l61.844,76.985C205.045,273.208,212.68,280.48,221.988,280.48z\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;rect x=\"127.008\" y=\"332.197\" width=\"174.933\" height=\"41.513\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;path d=\"M366.13,118.057c-40.51-40.509-94.369-62.818-151.656-62.818</span></span><br><span class=\"line\"><span class=\"string\">          c-57.288,0-111.148,22.309-151.657,62.818S0,212.425,0,269.713c0,36.99,9.319,72.539,26.816,103.997h40.086l29.319-16.929</span></span><br><span class=\"line\"><span class=\"string\">          l-12.948-22.428l-37.7,21.768c-13.319-25.932-20.843-55.307-20.843-86.408c0-5.504,0.25-10.951,0.711-16.338l44.952,7.926</span></span><br><span class=\"line\"><span class=\"string\">          l4.497-25.504l-45.481-8.019c8.127-35.883,26.451-67.937,51.755-92.948l30.815,36.725l19.839-16.646l-31.049-37.002</span></span><br><span class=\"line\"><span class=\"string\">          c28.471-21.379,63.128-34.938,100.757-37.485v49.117h25.896V80.422c37.629,2.549,72.286,16.107,100.758,37.486l-31.05,37.001</span></span><br><span class=\"line\"><span class=\"string\">          l19.838,16.646l30.816-36.726c25.303,25.012,43.627,57.066,51.754,92.948l-45.48,8.021l4.498,25.502l44.949-7.927</span></span><br><span class=\"line\"><span class=\"string\">          c0.461,5.388,0.711,10.834,0.711,16.338c0,31.103-7.521,60.479-20.842,86.409l-37.701-21.766l-12.947,22.427l29.318,16.927h40.088</span></span><br><span class=\"line\"><span class=\"string\">          c17.498-31.458,26.816-67.007,26.816-103.997C428.949,212.424,406.638,158.564,366.13,118.057z\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/g&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/g&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/svg&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> PACKAGE_NAME = <span class=\"string\">'custom-icons'</span>;</span><br></pre></td></tr></table></figure>\n<p>Use in MenuService: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resourceCreatorMenu: NbMenuItem[] = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'仪表盘'</span>,</span><br><span class=\"line\">        icon: &#123; pack: PACKAGE_NAME, icon: <span class=\"string\">'dashboard'</span>&#125;,</span><br><span class=\"line\">        link: <span class=\"string\">'/dashboard'</span>,</span><br><span class=\"line\">        home: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>Use in template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nb-icon</span> <span class=\"attr\">icon</span>=<span class=\"string\">\"&#123;&#123;theme.icon&#125;&#125;\"</span> <span class=\"attr\">pack</span>=<span class=\"string\">\"&#123;&#123;packName&#125;&#125;\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">nb-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"BMS-之-ICON-进化史\"><a href=\"#BMS-之-ICON-进化史\" class=\"headerlink\" title=\"BMS 之 ICON 进化史\"></a>BMS 之 ICON 进化史</h2><p><strong>过程</strong></p>\n<ol start=\"0\">\n<li>ICON 1.0 用一个图标,引入一个库(library)</li>\n<li>使用一个 ICON 自己打包字体文件，再引入</li>\n<li>ICON 2.0 用一个图标,写一个 Svg 模板</li>\n<li>ICON 3.0 用 Nebular 注册图标</li>\n</ol>\n<p><strong>好处</strong> </p>\n<ul>\n<li>Nebular 负责将你传入的图标, 根据不同的 register font-icon pack, 来转换成对应的 SVG</li>\n<li>Nebular 负责将你传入的图标进行统一的尺寸及样式管理 by its theme system</li>\n</ul>\n<p><strong>Example</strong></p>\n<p>Before: </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dashboard\"</span>&gt;</span></span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"isCosmic ? '#000000' : '#ffffff'\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>After: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.component.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.iconLibraries.registerFontPack(<span class=\"string\">'@fortawesome/fontawesome-free'</span>, &#123; packClass: <span class=\"string\">'fas'</span>, iconClassPrefix: <span class=\"string\">'fa'</span> &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 使用自定义的 SVG</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.iconLibraries.registerFontPack(PACKAGE_NAME);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.iconLibraries.registerSvgPack(PACKAGE_NAME, ICONS);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// icon-collection.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ICONS = &#123;</span><br><span class=\"line\">  dashboard: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;!-- currentColor 是 nebular 自带的变量 --&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;svg class=\"eva\" fill=\"currentColor\"</span></span><br><span class=\"line\"><span class=\"string\">        xmlns=\"http://www.w3.org/2000/svg\"</span></span><br><span class=\"line\"><span class=\"string\">        xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"</span></span><br><span class=\"line\"><span class=\"string\">      viewBox=\"0 0 428.948 428.948\" style=\"enable-background:new 0 0 428.948 428.948;\" xml:space=\"preserve\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;g&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;g&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;path d=\"M221.988,280.48c9.664,0,17.516-7.889,17.516-17.563c0-9.653-7.852-17.487-17.516-17.487</span></span><br><span class=\"line\"><span class=\"string\">          l-79.361-58.371l61.844,76.985C205.045,273.208,212.68,280.48,221.988,280.48z\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;rect x=\"127.008\" y=\"332.197\" width=\"174.933\" height=\"41.513\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;path d=\"M366.13,118.057c-40.51-40.509-94.369-62.818-151.656-62.818</span></span><br><span class=\"line\"><span class=\"string\">          c-57.288,0-111.148,22.309-151.657,62.818S0,212.425,0,269.713c0,36.99,9.319,72.539,26.816,103.997h40.086l29.319-16.929</span></span><br><span class=\"line\"><span class=\"string\">          l-12.948-22.428l-37.7,21.768c-13.319-25.932-20.843-55.307-20.843-86.408c0-5.504,0.25-10.951,0.711-16.338l44.952,7.926</span></span><br><span class=\"line\"><span class=\"string\">          l4.497-25.504l-45.481-8.019c8.127-35.883,26.451-67.937,51.755-92.948l30.815,36.725l19.839-16.646l-31.049-37.002</span></span><br><span class=\"line\"><span class=\"string\">          c28.471-21.379,63.128-34.938,100.757-37.485v49.117h25.896V80.422c37.629,2.549,72.286,16.107,100.758,37.486l-31.05,37.001</span></span><br><span class=\"line\"><span class=\"string\">          l19.838,16.646l30.816-36.726c25.303,25.012,43.627,57.066,51.754,92.948l-45.48,8.021l4.498,25.502l44.949-7.927</span></span><br><span class=\"line\"><span class=\"string\">          c0.461,5.388,0.711,10.834,0.711,16.338c0,31.103-7.521,60.479-20.842,86.409l-37.701-21.766l-12.947,22.427l29.318,16.927h40.088</span></span><br><span class=\"line\"><span class=\"string\">          c17.498-31.458,26.816-67.007,26.816-103.997C428.949,212.424,406.638,158.564,366.13,118.057z\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;/g&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/g&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/svg&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> PACKAGE_NAME = <span class=\"string\">'custom-icons'</span>;</span><br></pre></td></tr></table></figure>\n<p>Use in MenuService: </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resourceCreatorMenu: NbMenuItem[] = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: <span class=\"string\">'仪表盘'</span>,</span><br><span class=\"line\">        icon: &#123; pack: PACKAGE_NAME, icon: <span class=\"string\">'dashboard'</span>&#125;,</span><br><span class=\"line\">        link: <span class=\"string\">'/dashboard'</span>,</span><br><span class=\"line\">        home: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>Use in template:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nb-icon</span> <span class=\"attr\">icon</span>=<span class=\"string\">\"&#123;&#123;theme.icon&#125;&#125;\"</span> <span class=\"attr\">pack</span>=<span class=\"string\">\"&#123;&#123;packName&#125;&#125;\"</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">nb-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"## IPv4 地址耗尽\n\n![ipv4-news.png](../assets/ipv4-news.png)\n\n看到这则新闻，我思考了几个问题：\n\n**(1).为什么 IPv4 会耗尽？**\n\n因为 IPv4 采用 32 位 的十进制数字来表示。\n原理：\n![ip](../assets/ip原理.png)\n举个🌰：\n`172.165.22.1`\nto bit:\n`10101100.10100101.00010110.00000001`\n因此，上述的所有地址应为最大位数： 2 ** 32 = 4294967296 ≈ 32 亿，显然，在移动设备盛行的今天，必然是不够用的。\n\n**(2).为什么要使用 IPv6 来取代 IPv4 ?**\nIPv6 使用 128 位 十六进制数字来表示，常用冒分十六进制表示法：\n`2001:0db8:85a3:08d3:1319:8a2e:0370:7344`\n能容纳的数的总和为 16 ** 32 = 2 ** 4 ** 32  = 2 ** 128\n因此，这个庞大的数字基本可以满足当下互联网发展的 “地址标识符” 不足的现状。\n\n就像 **[轮子哥]** 说的：\n[ipv6可以给整个地球的每一个夸克都assign一个地址还能省下很多，走出银河系前毫无压力。](https://www.zhihu.com/question/357832973/answer/912007135)\n\n另外,IPv6 具备另外一些优势，详见 Read More\n\n[Read More](https://zhuanlan.zhihu.com/p/52698761)\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"daily-news/2019/ipv4.2019-11-27.md","raw":"## IPv4 地址耗尽\n\n![ipv4-news.png](../assets/ipv4-news.png)\n\n看到这则新闻，我思考了几个问题：\n\n**(1).为什么 IPv4 会耗尽？**\n\n因为 IPv4 采用 32 位 的十进制数字来表示。\n原理：\n![ip](../assets/ip原理.png)\n举个🌰：\n`172.165.22.1`\nto bit:\n`10101100.10100101.00010110.00000001`\n因此，上述的所有地址应为最大位数： 2 ** 32 = 4294967296 ≈ 32 亿，显然，在移动设备盛行的今天，必然是不够用的。\n\n**(2).为什么要使用 IPv6 来取代 IPv4 ?**\nIPv6 使用 128 位 十六进制数字来表示，常用冒分十六进制表示法：\n`2001:0db8:85a3:08d3:1319:8a2e:0370:7344`\n能容纳的数的总和为 16 ** 32 = 2 ** 4 ** 32  = 2 ** 128\n因此，这个庞大的数字基本可以满足当下互联网发展的 “地址标识符” 不足的现状。\n\n就像 **[轮子哥]** 说的：\n[ipv6可以给整个地球的每一个夸克都assign一个地址还能省下很多，走出银河系前毫无压力。](https://www.zhihu.com/question/357832973/answer/912007135)\n\n另外,IPv6 具备另外一些优势，详见 Read More\n\n[Read More](https://zhuanlan.zhihu.com/p/52698761)\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","date":"2020-02-11T09:48:37.315Z","updated":"2020-02-11T09:48:37.315Z","path":"daily-news/2019/ipv4.2019-11-27.html","title":"","comments":1,"layout":"page","_id":"ck6hpsayp0052ckufnib16x2k","content":"<h2 id=\"IPv4-地址耗尽\"><a href=\"#IPv4-地址耗尽\" class=\"headerlink\" title=\"IPv4 地址耗尽\"></a>IPv4 地址耗尽</h2><figure class=\"image-box\">\n                <img src=\"../assets/ipv4-news.png\" alt=\"ipv4-news.png\" title=\"\" class=\"\">\n                <p>ipv4-news.png</p>\n            </figure>\n<p>看到这则新闻，我思考了几个问题：</p>\n<p><strong>(1).为什么 IPv4 会耗尽？</strong></p>\n<p>因为 IPv4 采用 32 位 的十进制数字来表示。<br>原理：<br><figure class=\"image-box\">\n                <img src=\"../assets/ip原理.png\" alt=\"ip\" title=\"\" class=\"\">\n                <p>ip</p>\n            </figure><br>举个🌰：<br><code>172.165.22.1</code><br>to bit:<br><code>10101100.10100101.00010110.00000001</code><br>因此，上述的所有地址应为最大位数： 2 ** 32 = 4294967296 ≈ 32 亿，显然，在移动设备盛行的今天，必然是不够用的。</p>\n<p><strong>(2).为什么要使用 IPv6 来取代 IPv4 ?</strong><br>IPv6 使用 128 位 十六进制数字来表示，常用冒分十六进制表示法：<br><code>2001:0db8:85a3:08d3:1319:8a2e:0370:7344</code><br>能容纳的数的总和为 16 <strong> 32 = 2 </strong> 4 <strong> 32  = 2 </strong> 128<br>因此，这个庞大的数字基本可以满足当下互联网发展的 “地址标识符” 不足的现状。</p>\n<p>就像 <strong>[轮子哥]</strong> 说的：<br><a href=\"https://www.zhihu.com/question/357832973/answer/912007135\" target=\"_blank\" rel=\"noopener\">ipv6可以给整个地球的每一个夸克都assign一个地址还能省下很多，走出银河系前毫无压力。</a></p>\n<p>另外,IPv6 具备另外一些优势，详见 Read More</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/52698761\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"IPv4-地址耗尽\"><a href=\"#IPv4-地址耗尽\" class=\"headerlink\" title=\"IPv4 地址耗尽\"></a>IPv4 地址耗尽</h2><figure class=\"image-box\">\n                <img src=\"../assets/ipv4-news.png\" alt=\"ipv4-news.png\" title=\"\" class=\"\">\n                <p>ipv4-news.png</p>\n            </figure>\n<p>看到这则新闻，我思考了几个问题：</p>\n<p><strong>(1).为什么 IPv4 会耗尽？</strong></p>\n<p>因为 IPv4 采用 32 位 的十进制数字来表示。<br>原理：<br><figure class=\"image-box\">\n                <img src=\"../assets/ip原理.png\" alt=\"ip\" title=\"\" class=\"\">\n                <p>ip</p>\n            </figure><br>举个🌰：<br><code>172.165.22.1</code><br>to bit:<br><code>10101100.10100101.00010110.00000001</code><br>因此，上述的所有地址应为最大位数： 2 ** 32 = 4294967296 ≈ 32 亿，显然，在移动设备盛行的今天，必然是不够用的。</p>\n<p><strong>(2).为什么要使用 IPv6 来取代 IPv4 ?</strong><br>IPv6 使用 128 位 十六进制数字来表示，常用冒分十六进制表示法：<br><code>2001:0db8:85a3:08d3:1319:8a2e:0370:7344</code><br>能容纳的数的总和为 16 <strong> 32 = 2 </strong> 4 <strong> 32  = 2 </strong> 128<br>因此，这个庞大的数字基本可以满足当下互联网发展的 “地址标识符” 不足的现状。</p>\n<p>就像 <strong>[轮子哥]</strong> 说的：<br><a href=\"https://www.zhihu.com/question/357832973/answer/912007135\" target=\"_blank\" rel=\"noopener\">ipv6可以给整个地球的每一个夸克都assign一个地址还能省下很多，走出银河系前毫无压力。</a></p>\n<p>另外,IPv6 具备另外一些优势，详见 Read More</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/52698761\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"\n## 代码是如何执行的？\n按照我的理解，有三个步骤：\n\n1. scanner \n2. tokenize\n3. AST（abstract syntax tree）\n\n### 1. Scanner 扫描\n\ncompiler 会遍历扫描，对不同的字符（所有输入实际上都是 String）进行判断，这里包含了类型、value、code escape 等。\n\n我找到了大名鼎鼎的 TypeScript 官方的 `scanner` [TypeScript-Scanner](../assets/typescript-scanner.js)\n\n最终，第一步的制品 <sup>[1]</sup> 就是 Token stream. \n\nToken 流长啥样？\n\n```typescript\nVarKeyword 0 3\nIdentifier 3 7\nFirstAssignment 7 9\nFirstLiteralToken 9 13\nSemicolonToken 13 14\n```\n意思就是，通过扫描线，将大量的语法分析成对应的 Token，大概知道每个单词，每个符号是干什么的，并记录下其始末位置。\n\n### 2. Tokenlize\n如果你看到了上面官方 Scanner 的源码，不难想到，这一步的过程，应该是这样的： \n\n```typescript\nfunction tokenParser(tokenize: TokenStream): AST;\n```\n\nToken 流可以通过特定的解析规则 (parser) 生成 AST，AST 一定程度上描绘了 Code Path，可以看作一个庞大的 JSON.\n\n点击了解更多： [https://astexplorer.net/](https://astexplorer.net/)\n\n### 3. AST 供其他 renderer 或开发者使用\n 《略》\n\n参考文献：\n*[1] 意为制作出的产品，出处：阿里云效*\n*[2] [TypeScript Deep Dive] https://basarat.gitbooks.io/typescript/docs/compiler/parser-functions.html*\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"daily-news/2019/code.2019-12-02.md","raw":"\n## 代码是如何执行的？\n按照我的理解，有三个步骤：\n\n1. scanner \n2. tokenize\n3. AST（abstract syntax tree）\n\n### 1. Scanner 扫描\n\ncompiler 会遍历扫描，对不同的字符（所有输入实际上都是 String）进行判断，这里包含了类型、value、code escape 等。\n\n我找到了大名鼎鼎的 TypeScript 官方的 `scanner` [TypeScript-Scanner](../assets/typescript-scanner.js)\n\n最终，第一步的制品 <sup>[1]</sup> 就是 Token stream. \n\nToken 流长啥样？\n\n```typescript\nVarKeyword 0 3\nIdentifier 3 7\nFirstAssignment 7 9\nFirstLiteralToken 9 13\nSemicolonToken 13 14\n```\n意思就是，通过扫描线，将大量的语法分析成对应的 Token，大概知道每个单词，每个符号是干什么的，并记录下其始末位置。\n\n### 2. Tokenlize\n如果你看到了上面官方 Scanner 的源码，不难想到，这一步的过程，应该是这样的： \n\n```typescript\nfunction tokenParser(tokenize: TokenStream): AST;\n```\n\nToken 流可以通过特定的解析规则 (parser) 生成 AST，AST 一定程度上描绘了 Code Path，可以看作一个庞大的 JSON.\n\n点击了解更多： [https://astexplorer.net/](https://astexplorer.net/)\n\n### 3. AST 供其他 renderer 或开发者使用\n 《略》\n\n参考文献：\n*[1] 意为制作出的产品，出处：阿里云效*\n*[2] [TypeScript Deep Dive] https://basarat.gitbooks.io/typescript/docs/compiler/parser-functions.html*\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","date":"2020-02-11T09:48:37.314Z","updated":"2020-02-11T09:48:37.314Z","path":"daily-news/2019/code.2019-12-02.html","title":"","comments":1,"layout":"page","_id":"ck6hpsayq0054ckufk46f0p2j","content":"<h2 id=\"代码是如何执行的？\"><a href=\"#代码是如何执行的？\" class=\"headerlink\" title=\"代码是如何执行的？\"></a>代码是如何执行的？</h2><p>按照我的理解，有三个步骤：</p>\n<ol>\n<li>scanner </li>\n<li>tokenize</li>\n<li>AST（abstract syntax tree）</li>\n</ol>\n<h3 id=\"1-Scanner-扫描\"><a href=\"#1-Scanner-扫描\" class=\"headerlink\" title=\"1. Scanner 扫描\"></a>1. Scanner 扫描</h3><p>compiler 会遍历扫描，对不同的字符（所有输入实际上都是 String）进行判断，这里包含了类型、value、code escape 等。</p>\n<p>我找到了大名鼎鼎的 TypeScript 官方的 <code>scanner</code> <a href=\"../assets/typescript-scanner.js\">TypeScript-Scanner</a></p>\n<p>最终，第一步的制品 <sup>[1]</sup> 就是 Token stream. </p>\n<p>Token 流长啥样？</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VarKeyword <span class=\"number\">0</span> <span class=\"number\">3</span></span><br><span class=\"line\">Identifier <span class=\"number\">3</span> <span class=\"number\">7</span></span><br><span class=\"line\">FirstAssignment <span class=\"number\">7</span> <span class=\"number\">9</span></span><br><span class=\"line\">FirstLiteralToken <span class=\"number\">9</span> <span class=\"number\">13</span></span><br><span class=\"line\">SemicolonToken <span class=\"number\">13</span> <span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n<p>意思就是，通过扫描线，将大量的语法分析成对应的 Token，大概知道每个单词，每个符号是干什么的，并记录下其始末位置。</p>\n<h3 id=\"2-Tokenlize\"><a href=\"#2-Tokenlize\" class=\"headerlink\" title=\"2. Tokenlize\"></a>2. Tokenlize</h3><p>如果你看到了上面官方 Scanner 的源码，不难想到，这一步的过程，应该是这样的： </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tokenParser</span>(<span class=\"params\">tokenize: TokenStream</span>): <span class=\"title\">AST</span></span>;</span><br></pre></td></tr></table></figure>\n<p>Token 流可以通过特定的解析规则 (parser) 生成 AST，AST 一定程度上描绘了 Code Path，可以看作一个庞大的 JSON.</p>\n<p>点击了解更多： <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a></p>\n<h3 id=\"3-AST-供其他-renderer-或开发者使用\"><a href=\"#3-AST-供其他-renderer-或开发者使用\" class=\"headerlink\" title=\"3. AST 供其他 renderer 或开发者使用\"></a>3. AST 供其他 renderer 或开发者使用</h3><p> 《略》</p>\n<p>参考文献：<br><em>[1] 意为制作出的产品，出处：阿里云效</em><br><em>[2] [TypeScript Deep Dive] <a href=\"https://basarat.gitbooks.io/typescript/docs/compiler/parser-functions.html\" target=\"_blank\" rel=\"noopener\">https://basarat.gitbooks.io/typescript/docs/compiler/parser-functions.html</a></em></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码是如何执行的？\"><a href=\"#代码是如何执行的？\" class=\"headerlink\" title=\"代码是如何执行的？\"></a>代码是如何执行的？</h2><p>按照我的理解，有三个步骤：</p>\n<ol>\n<li>scanner </li>\n<li>tokenize</li>\n<li>AST（abstract syntax tree）</li>\n</ol>\n<h3 id=\"1-Scanner-扫描\"><a href=\"#1-Scanner-扫描\" class=\"headerlink\" title=\"1. Scanner 扫描\"></a>1. Scanner 扫描</h3><p>compiler 会遍历扫描，对不同的字符（所有输入实际上都是 String）进行判断，这里包含了类型、value、code escape 等。</p>\n<p>我找到了大名鼎鼎的 TypeScript 官方的 <code>scanner</code> <a href=\"../assets/typescript-scanner.js\">TypeScript-Scanner</a></p>\n<p>最终，第一步的制品 <sup>[1]</sup> 就是 Token stream. </p>\n<p>Token 流长啥样？</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VarKeyword <span class=\"number\">0</span> <span class=\"number\">3</span></span><br><span class=\"line\">Identifier <span class=\"number\">3</span> <span class=\"number\">7</span></span><br><span class=\"line\">FirstAssignment <span class=\"number\">7</span> <span class=\"number\">9</span></span><br><span class=\"line\">FirstLiteralToken <span class=\"number\">9</span> <span class=\"number\">13</span></span><br><span class=\"line\">SemicolonToken <span class=\"number\">13</span> <span class=\"number\">14</span></span><br></pre></td></tr></table></figure>\n<p>意思就是，通过扫描线，将大量的语法分析成对应的 Token，大概知道每个单词，每个符号是干什么的，并记录下其始末位置。</p>\n<h3 id=\"2-Tokenlize\"><a href=\"#2-Tokenlize\" class=\"headerlink\" title=\"2. Tokenlize\"></a>2. Tokenlize</h3><p>如果你看到了上面官方 Scanner 的源码，不难想到，这一步的过程，应该是这样的： </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tokenParser</span>(<span class=\"params\">tokenize: TokenStream</span>): <span class=\"title\">AST</span></span>;</span><br></pre></td></tr></table></figure>\n<p>Token 流可以通过特定的解析规则 (parser) 生成 AST，AST 一定程度上描绘了 Code Path，可以看作一个庞大的 JSON.</p>\n<p>点击了解更多： <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"noopener\">https://astexplorer.net/</a></p>\n<h3 id=\"3-AST-供其他-renderer-或开发者使用\"><a href=\"#3-AST-供其他-renderer-或开发者使用\" class=\"headerlink\" title=\"3. AST 供其他 renderer 或开发者使用\"></a>3. AST 供其他 renderer 或开发者使用</h3><p> 《略》</p>\n<p>参考文献：<br><em>[1] 意为制作出的产品，出处：阿里云效</em><br><em>[2] [TypeScript Deep Dive] <a href=\"https://basarat.gitbooks.io/typescript/docs/compiler/parser-functions.html\" target=\"_blank\" rel=\"noopener\">https://basarat.gitbooks.io/typescript/docs/compiler/parser-functions.html</a></em></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"## 一个有趣的赛马程序\n\n总共 n 个赛道，赛程划分为 4 个阶段，每个阶段随机为每个赛道的马配速:\n\n![race.png](../assets/race.gif)\n\nDemo: [CodePen](https://codepen.io/zq-jhon/pen/wvvOrEe)\n\n[Read More](https://github.com/75team/raffle)\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"daily-news/2019/race.2019-11-21.md","raw":"## 一个有趣的赛马程序\n\n总共 n 个赛道，赛程划分为 4 个阶段，每个阶段随机为每个赛道的马配速:\n\n![race.png](../assets/race.gif)\n\nDemo: [CodePen](https://codepen.io/zq-jhon/pen/wvvOrEe)\n\n[Read More](https://github.com/75team/raffle)\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","date":"2020-02-11T09:48:37.315Z","updated":"2020-02-11T09:48:37.315Z","path":"daily-news/2019/race.2019-11-21.html","title":"","comments":1,"layout":"page","_id":"ck6hpsayq0055ckufel0smuoa","content":"<h2 id=\"一个有趣的赛马程序\"><a href=\"#一个有趣的赛马程序\" class=\"headerlink\" title=\"一个有趣的赛马程序\"></a>一个有趣的赛马程序</h2><p>总共 n 个赛道，赛程划分为 4 个阶段，每个阶段随机为每个赛道的马配速:</p>\n<figure class=\"image-box\">\n                <img src=\"../assets/race.gif\" alt=\"race.png\" title=\"\" class=\"\">\n                <p>race.png</p>\n            </figure>\n<p>Demo: <a href=\"https://codepen.io/zq-jhon/pen/wvvOrEe\" target=\"_blank\" rel=\"noopener\">CodePen</a></p>\n<p><a href=\"https://github.com/75team/raffle\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一个有趣的赛马程序\"><a href=\"#一个有趣的赛马程序\" class=\"headerlink\" title=\"一个有趣的赛马程序\"></a>一个有趣的赛马程序</h2><p>总共 n 个赛道，赛程划分为 4 个阶段，每个阶段随机为每个赛道的马配速:</p>\n<figure class=\"image-box\">\n                <img src=\"../assets/race.gif\" alt=\"race.png\" title=\"\" class=\"\">\n                <p>race.png</p>\n            </figure>\n<p>Demo: <a href=\"https://codepen.io/zq-jhon/pen/wvvOrEe\" target=\"_blank\" rel=\"noopener\">CodePen</a></p>\n<p><a href=\"https://github.com/75team/raffle\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"## 探究更多的测试方式\n\n当我们在写测试时，我们在写什么？\n\n对于前端而言，test case 就是一个个页面上预期结果的断言。\n\n之前做 BMS E2E 时，果断选择了 cypress，因为它是 nx 指定的测试框架。\n\n但是最近，我发现有一些跟敏捷走的很近的测试框架，例如: \n\n[storybook](https://github.com/storybookjs/storybook) 根据用户故事来编写测试用例，目的更露骨，更直接。\n\n[x-state](https://github.com/davidkpiano/xstate) 既然前端都是数据驱动的 SPA，直接断言每个状态如何转换/变化，就完事了。\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"daily-news/2019/test.2019-12-25.md","raw":"## 探究更多的测试方式\n\n当我们在写测试时，我们在写什么？\n\n对于前端而言，test case 就是一个个页面上预期结果的断言。\n\n之前做 BMS E2E 时，果断选择了 cypress，因为它是 nx 指定的测试框架。\n\n但是最近，我发现有一些跟敏捷走的很近的测试框架，例如: \n\n[storybook](https://github.com/storybookjs/storybook) 根据用户故事来编写测试用例，目的更露骨，更直接。\n\n[x-state](https://github.com/davidkpiano/xstate) 既然前端都是数据驱动的 SPA，直接断言每个状态如何转换/变化，就完事了。\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","date":"2020-02-11T09:48:37.316Z","updated":"2020-02-11T09:48:37.316Z","path":"daily-news/2019/test.2019-12-25.html","title":"","comments":1,"layout":"page","_id":"ck6hpsayr0056ckufajwnqxa3","content":"<h2 id=\"探究更多的测试方式\"><a href=\"#探究更多的测试方式\" class=\"headerlink\" title=\"探究更多的测试方式\"></a>探究更多的测试方式</h2><p>当我们在写测试时，我们在写什么？</p>\n<p>对于前端而言，test case 就是一个个页面上预期结果的断言。</p>\n<p>之前做 BMS E2E 时，果断选择了 cypress，因为它是 nx 指定的测试框架。</p>\n<p>但是最近，我发现有一些跟敏捷走的很近的测试框架，例如: </p>\n<p><a href=\"https://github.com/storybookjs/storybook\" target=\"_blank\" rel=\"noopener\">storybook</a> 根据用户故事来编写测试用例，目的更露骨，更直接。</p>\n<p><a href=\"https://github.com/davidkpiano/xstate\" target=\"_blank\" rel=\"noopener\">x-state</a> 既然前端都是数据驱动的 SPA，直接断言每个状态如何转换/变化，就完事了。</p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"探究更多的测试方式\"><a href=\"#探究更多的测试方式\" class=\"headerlink\" title=\"探究更多的测试方式\"></a>探究更多的测试方式</h2><p>当我们在写测试时，我们在写什么？</p>\n<p>对于前端而言，test case 就是一个个页面上预期结果的断言。</p>\n<p>之前做 BMS E2E 时，果断选择了 cypress，因为它是 nx 指定的测试框架。</p>\n<p>但是最近，我发现有一些跟敏捷走的很近的测试框架，例如: </p>\n<p><a href=\"https://github.com/storybookjs/storybook\" target=\"_blank\" rel=\"noopener\">storybook</a> 根据用户故事来编写测试用例，目的更露骨，更直接。</p>\n<p><a href=\"https://github.com/davidkpiano/xstate\" target=\"_blank\" rel=\"noopener\">x-state</a> 既然前端都是数据驱动的 SPA，直接断言每个状态如何转换/变化，就完事了。</p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"## Font Awesome 5\n\n第一次使用这个图标库的时候，我还在操刀锋利的 jQuery，用手工操作 Dom 的方式反复的把玩过这些 Icon.\n\n一转眼，已经到 5.X 的版本了：\n\n![截图](../assets/fontawesome.png)\n\nFont Awesome 5.X 更新了许许多多的图标，包括 IoT、外星人、大厂图标等，并支持了多主题系统（Pro 专享），让图标们的颜色、样式更加统一。\n\n[Font Awesome 官网](https://fontawesome.com/)\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"daily-news/2019/fa.2019-12-20.md","raw":"## Font Awesome 5\n\n第一次使用这个图标库的时候，我还在操刀锋利的 jQuery，用手工操作 Dom 的方式反复的把玩过这些 Icon.\n\n一转眼，已经到 5.X 的版本了：\n\n![截图](../assets/fontawesome.png)\n\nFont Awesome 5.X 更新了许许多多的图标，包括 IoT、外星人、大厂图标等，并支持了多主题系统（Pro 专享），让图标们的颜色、样式更加统一。\n\n[Font Awesome 官网](https://fontawesome.com/)\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","date":"2020-02-11T09:48:37.314Z","updated":"2020-02-11T09:48:37.314Z","path":"daily-news/2019/fa.2019-12-20.html","title":"","comments":1,"layout":"page","_id":"ck6hpsayr0057ckufk7a9dmko","content":"<h2 id=\"Font-Awesome-5\"><a href=\"#Font-Awesome-5\" class=\"headerlink\" title=\"Font Awesome 5\"></a>Font Awesome 5</h2><p>第一次使用这个图标库的时候，我还在操刀锋利的 jQuery，用手工操作 Dom 的方式反复的把玩过这些 Icon.</p>\n<p>一转眼，已经到 5.X 的版本了：</p>\n<figure class=\"image-box\">\n                <img src=\"../assets/fontawesome.png\" alt=\"截图\" title=\"\" class=\"\">\n                <p>截图</p>\n            </figure>\n<p>Font Awesome 5.X 更新了许许多多的图标，包括 IoT、外星人、大厂图标等，并支持了多主题系统（Pro 专享），让图标们的颜色、样式更加统一。</p>\n<p><a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome 官网</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Font-Awesome-5\"><a href=\"#Font-Awesome-5\" class=\"headerlink\" title=\"Font Awesome 5\"></a>Font Awesome 5</h2><p>第一次使用这个图标库的时候，我还在操刀锋利的 jQuery，用手工操作 Dom 的方式反复的把玩过这些 Icon.</p>\n<p>一转眼，已经到 5.X 的版本了：</p>\n<figure class=\"image-box\">\n                <img src=\"../assets/fontawesome.png\" alt=\"截图\" title=\"\" class=\"\">\n                <p>截图</p>\n            </figure>\n<p>Font Awesome 5.X 更新了许许多多的图标，包括 IoT、外星人、大厂图标等，并支持了多主题系统（Pro 专享），让图标们的颜色、样式更加统一。</p>\n<p><a href=\"https://fontawesome.com/\" target=\"_blank\" rel=\"noopener\">Font Awesome 官网</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"## 为什么用 YAML 而不是 JSON 来管理配置项？\n\n考虑如下配置：\n\n```json\n{\n  \"name\": \"PSG\",\n  \"members\": 6,\n  \"repos\": [\"BMS\",\"Mars\",\"Official-Site\",\"Venus\"],\n  \"env\": \"prod\"\n}\n```\n同样的配置，用 Yaml 表示：\n\n```yaml\n# 名称\nname: PSG\n# 成员\nmembers: 6\n# 仓库\nrepos:\n- BMS\n- Mars\n- Official-Site\n- Venus\nenv: prod\ntoJSON: { \"name\": \"PSG\", \"members\": 6, \"repos\": [\"BMS\",\"Mars\",\"Official-Site\",\"Venus\"], \"env\": \"prod\" }\nenv: $(variable.prod)\n\n```\n可见，YAML 的优势体现在：\n1. 支持注释\n2. 支持外部传入参数，和 YAML 上下文中定义变量，具备可编程性\n3. 除了缩进，没有过多标点符号的严格限制，并且兼容 JSON 的写法\n\n可以参考 王老师 写的一份 Azure-pipeline.yaml 文件\n\n```yaml\nsteps:\n- pwsh: 'git config --local user.email azurebot@sheencity.com'\n  displayName: 'git config email'\n- pwsh: 'git config --local user.name Azurebot'\n  displayName: 'git config name'\n- pwsh: |\n    $current = git rev-parse HEAD\n    Write-Host \"Git Checkout Master\"\n    git checkout --progress --force master\n    git pull --ff-only\n    Write-Host \"Git Checkout ${current}\"\n    git checkout --progress --force $current\n  displayName: 'Git Checkout Master'\n- task: NodeTool@0\n  displayName: 'Use Node $(NodeVersion).x'\n  inputs:\n    versionSpec: '$(NodeVersion).x'\n    checkLatest: true\n- task: YarnInstaller@3\n  displayName: 'Use Yarn 1.x'\n  inputs:\n    versionSpec: 1.x\n    checkLatest: true\n- task: Yarn@3\n  displayName: 'Yarn Install Dependencies'\n  inputs:\n    arguments: 'install'\n    customRegistry: 'useFeed'\n    customFeed: '284e7aad-e1cd-4b8b-9882-b5bb4e0235f0'\n- task: Yarn@3\n  displayName: 'nx affected:build'\n  inputs:\n    arguments: 'nx affected:build'\n\n```\n\n[Azure-Pipeline 链接](http://dev.corp.sheencity.com/PSG/_git/psg?path=%2F.azure-pipelines%2Ftemplates%2Fbuild.yaml&version=GBdaily-news)\n\n还有一份关于 YAML 和 JSON 对比的参考资料：\n[Read More](https://markrichman.com/yaml-for-aws-cloudformation/)\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"daily-news/2019/yaml.2019-12-14.md","raw":"## 为什么用 YAML 而不是 JSON 来管理配置项？\n\n考虑如下配置：\n\n```json\n{\n  \"name\": \"PSG\",\n  \"members\": 6,\n  \"repos\": [\"BMS\",\"Mars\",\"Official-Site\",\"Venus\"],\n  \"env\": \"prod\"\n}\n```\n同样的配置，用 Yaml 表示：\n\n```yaml\n# 名称\nname: PSG\n# 成员\nmembers: 6\n# 仓库\nrepos:\n- BMS\n- Mars\n- Official-Site\n- Venus\nenv: prod\ntoJSON: { \"name\": \"PSG\", \"members\": 6, \"repos\": [\"BMS\",\"Mars\",\"Official-Site\",\"Venus\"], \"env\": \"prod\" }\nenv: $(variable.prod)\n\n```\n可见，YAML 的优势体现在：\n1. 支持注释\n2. 支持外部传入参数，和 YAML 上下文中定义变量，具备可编程性\n3. 除了缩进，没有过多标点符号的严格限制，并且兼容 JSON 的写法\n\n可以参考 王老师 写的一份 Azure-pipeline.yaml 文件\n\n```yaml\nsteps:\n- pwsh: 'git config --local user.email azurebot@sheencity.com'\n  displayName: 'git config email'\n- pwsh: 'git config --local user.name Azurebot'\n  displayName: 'git config name'\n- pwsh: |\n    $current = git rev-parse HEAD\n    Write-Host \"Git Checkout Master\"\n    git checkout --progress --force master\n    git pull --ff-only\n    Write-Host \"Git Checkout ${current}\"\n    git checkout --progress --force $current\n  displayName: 'Git Checkout Master'\n- task: NodeTool@0\n  displayName: 'Use Node $(NodeVersion).x'\n  inputs:\n    versionSpec: '$(NodeVersion).x'\n    checkLatest: true\n- task: YarnInstaller@3\n  displayName: 'Use Yarn 1.x'\n  inputs:\n    versionSpec: 1.x\n    checkLatest: true\n- task: Yarn@3\n  displayName: 'Yarn Install Dependencies'\n  inputs:\n    arguments: 'install'\n    customRegistry: 'useFeed'\n    customFeed: '284e7aad-e1cd-4b8b-9882-b5bb4e0235f0'\n- task: Yarn@3\n  displayName: 'nx affected:build'\n  inputs:\n    arguments: 'nx affected:build'\n\n```\n\n[Azure-Pipeline 链接](http://dev.corp.sheencity.com/PSG/_git/psg?path=%2F.azure-pipelines%2Ftemplates%2Fbuild.yaml&version=GBdaily-news)\n\n还有一份关于 YAML 和 JSON 对比的参考资料：\n[Read More](https://markrichman.com/yaml-for-aws-cloudformation/)\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","date":"2020-02-11T09:48:37.317Z","updated":"2020-02-11T09:48:37.317Z","path":"daily-news/2019/yaml.2019-12-14.html","title":"","comments":1,"layout":"page","_id":"ck6hpsayr0058ckufrr7xvpee","content":"<h2 id=\"为什么用-YAML-而不是-JSON-来管理配置项？\"><a href=\"#为什么用-YAML-而不是-JSON-来管理配置项？\" class=\"headerlink\" title=\"为什么用 YAML 而不是 JSON 来管理配置项？\"></a>为什么用 YAML 而不是 JSON 来管理配置项？</h2><p>考虑如下配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"PSG\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"members\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"repos\"</span>: [<span class=\"string\">\"BMS\"</span>,<span class=\"string\">\"Mars\"</span>,<span class=\"string\">\"Official-Site\"</span>,<span class=\"string\">\"Venus\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"env\"</span>: <span class=\"string\">\"prod\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的配置，用 Yaml 表示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 名称</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">PSG</span></span><br><span class=\"line\"><span class=\"comment\"># 成员</span></span><br><span class=\"line\"><span class=\"attr\">members:</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"comment\"># 仓库</span></span><br><span class=\"line\"><span class=\"attr\">repos:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">BMS</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Mars</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Official-Site</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Venus</span></span><br><span class=\"line\"><span class=\"attr\">env:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"><span class=\"attr\">toJSON:</span> <span class=\"string\">&#123;</span> <span class=\"string\">\"name\"</span><span class=\"string\">:</span> <span class=\"string\">\"PSG\"</span><span class=\"string\">,</span> <span class=\"string\">\"members\"</span><span class=\"string\">:</span> <span class=\"number\">6</span><span class=\"string\">,</span> <span class=\"string\">\"repos\"</span><span class=\"string\">:</span> <span class=\"string\">[\"BMS\",\"Mars\",\"Official-Site\",\"Venus\"],</span> <span class=\"string\">\"env\"</span><span class=\"string\">:</span> <span class=\"string\">\"prod\"</span> <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">env:</span> <span class=\"string\">$(variable.prod)</span></span><br></pre></td></tr></table></figure>\n<p>可见，YAML 的优势体现在：</p>\n<ol>\n<li>支持注释</li>\n<li>支持外部传入参数，和 YAML 上下文中定义变量，具备可编程性</li>\n<li>除了缩进，没有过多标点符号的严格限制，并且兼容 JSON 的写法</li>\n</ol>\n<p>可以参考 王老师 写的一份 Azure-pipeline.yaml 文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\"><span class=\"attr\">- pwsh:</span> <span class=\"string\">'git config --local user.email azurebot@sheencity.com'</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'git config email'</span></span><br><span class=\"line\"><span class=\"attr\">- pwsh:</span> <span class=\"string\">'git config --local user.name Azurebot'</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'git config name'</span></span><br><span class=\"line\"><span class=\"attr\">- pwsh:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    $current = git rev-parse HEAD</span></span><br><span class=\"line\"><span class=\"string\">    Write-Host \"Git Checkout Master\"</span></span><br><span class=\"line\"><span class=\"string\">    git checkout --progress --force master</span></span><br><span class=\"line\"><span class=\"string\">    git pull --ff-only</span></span><br><span class=\"line\"><span class=\"string\">    Write-Host \"Git Checkout $&#123;current&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">    git checkout --progress --force $current</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">  displayName:</span> <span class=\"string\">'Git Checkout Master'</span></span><br><span class=\"line\"><span class=\"attr\">- task:</span> <span class=\"string\">NodeTool@0</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'Use Node $(NodeVersion).x'</span></span><br><span class=\"line\"><span class=\"attr\">  inputs:</span></span><br><span class=\"line\"><span class=\"attr\">    versionSpec:</span> <span class=\"string\">'$(NodeVersion).x'</span></span><br><span class=\"line\"><span class=\"attr\">    checkLatest:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">- task:</span> <span class=\"string\">YarnInstaller@3</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'Use Yarn 1.x'</span></span><br><span class=\"line\"><span class=\"attr\">  inputs:</span></span><br><span class=\"line\"><span class=\"attr\">    versionSpec:</span> <span class=\"number\">1.</span><span class=\"string\">x</span></span><br><span class=\"line\"><span class=\"attr\">    checkLatest:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">- task:</span> <span class=\"string\">Yarn@3</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'Yarn Install Dependencies'</span></span><br><span class=\"line\"><span class=\"attr\">  inputs:</span></span><br><span class=\"line\"><span class=\"attr\">    arguments:</span> <span class=\"string\">'install'</span></span><br><span class=\"line\"><span class=\"attr\">    customRegistry:</span> <span class=\"string\">'useFeed'</span></span><br><span class=\"line\"><span class=\"attr\">    customFeed:</span> <span class=\"string\">'284e7aad-e1cd-4b8b-9882-b5bb4e0235f0'</span></span><br><span class=\"line\"><span class=\"attr\">- task:</span> <span class=\"string\">Yarn@3</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'nx affected:build'</span></span><br><span class=\"line\"><span class=\"attr\">  inputs:</span></span><br><span class=\"line\"><span class=\"attr\">    arguments:</span> <span class=\"string\">'nx affected:build'</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://dev.corp.sheencity.com/PSG/_git/psg?path=%2F.azure-pipelines%2Ftemplates%2Fbuild.yaml&amp;version=GBdaily-news\" target=\"_blank\" rel=\"noopener\">Azure-Pipeline 链接</a></p>\n<p>还有一份关于 YAML 和 JSON 对比的参考资料：<br><a href=\"https://markrichman.com/yaml-for-aws-cloudformation/\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么用-YAML-而不是-JSON-来管理配置项？\"><a href=\"#为什么用-YAML-而不是-JSON-来管理配置项？\" class=\"headerlink\" title=\"为什么用 YAML 而不是 JSON 来管理配置项？\"></a>为什么用 YAML 而不是 JSON 来管理配置项？</h2><p>考虑如下配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"PSG\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"members\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"repos\"</span>: [<span class=\"string\">\"BMS\"</span>,<span class=\"string\">\"Mars\"</span>,<span class=\"string\">\"Official-Site\"</span>,<span class=\"string\">\"Venus\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"env\"</span>: <span class=\"string\">\"prod\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的配置，用 Yaml 表示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 名称</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">PSG</span></span><br><span class=\"line\"><span class=\"comment\"># 成员</span></span><br><span class=\"line\"><span class=\"attr\">members:</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"comment\"># 仓库</span></span><br><span class=\"line\"><span class=\"attr\">repos:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">BMS</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Mars</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Official-Site</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Venus</span></span><br><span class=\"line\"><span class=\"attr\">env:</span> <span class=\"string\">prod</span></span><br><span class=\"line\"><span class=\"attr\">toJSON:</span> <span class=\"string\">&#123;</span> <span class=\"string\">\"name\"</span><span class=\"string\">:</span> <span class=\"string\">\"PSG\"</span><span class=\"string\">,</span> <span class=\"string\">\"members\"</span><span class=\"string\">:</span> <span class=\"number\">6</span><span class=\"string\">,</span> <span class=\"string\">\"repos\"</span><span class=\"string\">:</span> <span class=\"string\">[\"BMS\",\"Mars\",\"Official-Site\",\"Venus\"],</span> <span class=\"string\">\"env\"</span><span class=\"string\">:</span> <span class=\"string\">\"prod\"</span> <span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">env:</span> <span class=\"string\">$(variable.prod)</span></span><br></pre></td></tr></table></figure>\n<p>可见，YAML 的优势体现在：</p>\n<ol>\n<li>支持注释</li>\n<li>支持外部传入参数，和 YAML 上下文中定义变量，具备可编程性</li>\n<li>除了缩进，没有过多标点符号的严格限制，并且兼容 JSON 的写法</li>\n</ol>\n<p>可以参考 王老师 写的一份 Azure-pipeline.yaml 文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\"><span class=\"attr\">- pwsh:</span> <span class=\"string\">'git config --local user.email azurebot@sheencity.com'</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'git config email'</span></span><br><span class=\"line\"><span class=\"attr\">- pwsh:</span> <span class=\"string\">'git config --local user.name Azurebot'</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'git config name'</span></span><br><span class=\"line\"><span class=\"attr\">- pwsh:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    $current = git rev-parse HEAD</span></span><br><span class=\"line\"><span class=\"string\">    Write-Host \"Git Checkout Master\"</span></span><br><span class=\"line\"><span class=\"string\">    git checkout --progress --force master</span></span><br><span class=\"line\"><span class=\"string\">    git pull --ff-only</span></span><br><span class=\"line\"><span class=\"string\">    Write-Host \"Git Checkout $&#123;current&#125;\"</span></span><br><span class=\"line\"><span class=\"string\">    git checkout --progress --force $current</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">  displayName:</span> <span class=\"string\">'Git Checkout Master'</span></span><br><span class=\"line\"><span class=\"attr\">- task:</span> <span class=\"string\">NodeTool@0</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'Use Node $(NodeVersion).x'</span></span><br><span class=\"line\"><span class=\"attr\">  inputs:</span></span><br><span class=\"line\"><span class=\"attr\">    versionSpec:</span> <span class=\"string\">'$(NodeVersion).x'</span></span><br><span class=\"line\"><span class=\"attr\">    checkLatest:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">- task:</span> <span class=\"string\">YarnInstaller@3</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'Use Yarn 1.x'</span></span><br><span class=\"line\"><span class=\"attr\">  inputs:</span></span><br><span class=\"line\"><span class=\"attr\">    versionSpec:</span> <span class=\"number\">1.</span><span class=\"string\">x</span></span><br><span class=\"line\"><span class=\"attr\">    checkLatest:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">- task:</span> <span class=\"string\">Yarn@3</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'Yarn Install Dependencies'</span></span><br><span class=\"line\"><span class=\"attr\">  inputs:</span></span><br><span class=\"line\"><span class=\"attr\">    arguments:</span> <span class=\"string\">'install'</span></span><br><span class=\"line\"><span class=\"attr\">    customRegistry:</span> <span class=\"string\">'useFeed'</span></span><br><span class=\"line\"><span class=\"attr\">    customFeed:</span> <span class=\"string\">'284e7aad-e1cd-4b8b-9882-b5bb4e0235f0'</span></span><br><span class=\"line\"><span class=\"attr\">- task:</span> <span class=\"string\">Yarn@3</span></span><br><span class=\"line\"><span class=\"attr\">  displayName:</span> <span class=\"string\">'nx affected:build'</span></span><br><span class=\"line\"><span class=\"attr\">  inputs:</span></span><br><span class=\"line\"><span class=\"attr\">    arguments:</span> <span class=\"string\">'nx affected:build'</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://dev.corp.sheencity.com/PSG/_git/psg?path=%2F.azure-pipelines%2Ftemplates%2Fbuild.yaml&amp;version=GBdaily-news\" target=\"_blank\" rel=\"noopener\">Azure-Pipeline 链接</a></p>\n<p>还有一份关于 YAML 和 JSON 对比的参考资料：<br><a href=\"https://markrichman.com/yaml-for-aws-cloudformation/\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"## WSL for VSCode\n\n当你满心欢喜的安装好 WSL, 应该试试这款插件,它能够帮助你自由的穿梭在 WSL 的文件系统中,先看看介绍:\n![WSL](../assets/wsl-remote-wsl.png)\n\n再看看效果, 6 的飞起:\n![WSL](../assets/wsl-plugin-demo.png)\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"daily-news/2019/wsl.2019-12-18.md","raw":"## WSL for VSCode\n\n当你满心欢喜的安装好 WSL, 应该试试这款插件,它能够帮助你自由的穿梭在 WSL 的文件系统中,先看看介绍:\n![WSL](../assets/wsl-remote-wsl.png)\n\n再看看效果, 6 的飞起:\n![WSL](../assets/wsl-plugin-demo.png)\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","date":"2020-02-11T09:48:37.317Z","updated":"2020-02-11T09:48:37.317Z","path":"daily-news/2019/wsl.2019-12-18.html","title":"","comments":1,"layout":"page","_id":"ck6hpsays0059ckufkpn5qmfn","content":"<h2 id=\"WSL-for-VSCode\"><a href=\"#WSL-for-VSCode\" class=\"headerlink\" title=\"WSL for VSCode\"></a>WSL for VSCode</h2><p>当你满心欢喜的安装好 WSL, 应该试试这款插件,它能够帮助你自由的穿梭在 WSL 的文件系统中,先看看介绍:<br><figure class=\"image-box\">\n                <img src=\"../assets/wsl-remote-wsl.png\" alt=\"WSL\" title=\"\" class=\"\">\n                <p>WSL</p>\n            </figure></p>\n<p>再看看效果, 6 的飞起:<br><figure class=\"image-box\">\n                <img src=\"../assets/wsl-plugin-demo.png\" alt=\"WSL\" title=\"\" class=\"\">\n                <p>WSL</p>\n            </figure></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"WSL-for-VSCode\"><a href=\"#WSL-for-VSCode\" class=\"headerlink\" title=\"WSL for VSCode\"></a>WSL for VSCode</h2><p>当你满心欢喜的安装好 WSL, 应该试试这款插件,它能够帮助你自由的穿梭在 WSL 的文件系统中,先看看介绍:<br><figure class=\"image-box\">\n                <img src=\"../assets/wsl-remote-wsl.png\" alt=\"WSL\" title=\"\" class=\"\">\n                <p>WSL</p>\n            </figure></p>\n<p>再看看效果, 6 的飞起:<br><figure class=\"image-box\">\n                <img src=\"../assets/wsl-plugin-demo.png\" alt=\"WSL\" title=\"\" class=\"\">\n                <p>WSL</p>\n            </figure></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"\n## 开源项目的翻译(i18n)方案\n\n目前，多数的国外开源项目都采用 [crowdin](https://support.crowdin.com/) 来做 i18n 和 i18n 托管的。\n\n根据官方的描述，其本质是一套面向科技公司的、cloud-based + autoML 的翻译方案。由项目的管理者上传项目，再将需要翻译的部分提供给热心的开源市民来翻译；或者是请专业的 translator 来 crowdin 平台翻译，届时通过平台来进行计费工作。\n\ncrowdin 也支持项目管理者自行上传 TM (translate memory) 来进行预翻译。\n\ncrowdin 集成了 Google translate 以及 MicroSoft translate 这样的老牌机翻引擎会实时提供翻译建议，作为一个 translator 不用担心自己捉襟见肘的词汇量:\n\n![图](../assets/crowdin-with-pxt.png)\n\n还支持 [ICU syntax](http://userguide.icu-project.org/formatparse/messages) 简而言之这套语法就是把需要翻译的例句中，提取出变量，大大简化翻译工作。\n\n最终成果将以 chat 的形式将当前翻译工作的词汇量、进度、预计完成时间、准确度等关键维度的信息陈列给管理者:\n\n![report](../assets/crowdin-report.png)\n\n[Read More](https://support.crowdin.com/project-reports/)\n\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"daily-news/2020/crowdin.2020-01-14.md","raw":"\n## 开源项目的翻译(i18n)方案\n\n目前，多数的国外开源项目都采用 [crowdin](https://support.crowdin.com/) 来做 i18n 和 i18n 托管的。\n\n根据官方的描述，其本质是一套面向科技公司的、cloud-based + autoML 的翻译方案。由项目的管理者上传项目，再将需要翻译的部分提供给热心的开源市民来翻译；或者是请专业的 translator 来 crowdin 平台翻译，届时通过平台来进行计费工作。\n\ncrowdin 也支持项目管理者自行上传 TM (translate memory) 来进行预翻译。\n\ncrowdin 集成了 Google translate 以及 MicroSoft translate 这样的老牌机翻引擎会实时提供翻译建议，作为一个 translator 不用担心自己捉襟见肘的词汇量:\n\n![图](../assets/crowdin-with-pxt.png)\n\n还支持 [ICU syntax](http://userguide.icu-project.org/formatparse/messages) 简而言之这套语法就是把需要翻译的例句中，提取出变量，大大简化翻译工作。\n\n最终成果将以 chat 的形式将当前翻译工作的词汇量、进度、预计完成时间、准确度等关键维度的信息陈列给管理者:\n\n![report](../assets/crowdin-report.png)\n\n[Read More](https://support.crowdin.com/project-reports/)\n\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","date":"2020-02-11T09:48:37.318Z","updated":"2020-02-11T09:48:37.318Z","path":"daily-news/2020/crowdin.2020-01-14.html","title":"","comments":1,"layout":"page","_id":"ck6hpsays005ackufc152xq74","content":"<h2 id=\"开源项目的翻译-i18n-方案\"><a href=\"#开源项目的翻译-i18n-方案\" class=\"headerlink\" title=\"开源项目的翻译(i18n)方案\"></a>开源项目的翻译(i18n)方案</h2><p>目前，多数的国外开源项目都采用 <a href=\"https://support.crowdin.com/\" target=\"_blank\" rel=\"noopener\">crowdin</a> 来做 i18n 和 i18n 托管的。</p>\n<p>根据官方的描述，其本质是一套面向科技公司的、cloud-based + autoML 的翻译方案。由项目的管理者上传项目，再将需要翻译的部分提供给热心的开源市民来翻译；或者是请专业的 translator 来 crowdin 平台翻译，届时通过平台来进行计费工作。</p>\n<p>crowdin 也支持项目管理者自行上传 TM (translate memory) 来进行预翻译。</p>\n<p>crowdin 集成了 Google translate 以及 MicroSoft translate 这样的老牌机翻引擎会实时提供翻译建议，作为一个 translator 不用担心自己捉襟见肘的词汇量:</p>\n<figure class=\"image-box\">\n                <img src=\"../assets/crowdin-with-pxt.png\" alt=\"图\" title=\"\" class=\"\">\n                <p>图</p>\n            </figure>\n<p>还支持 <a href=\"http://userguide.icu-project.org/formatparse/messages\" target=\"_blank\" rel=\"noopener\">ICU syntax</a> 简而言之这套语法就是把需要翻译的例句中，提取出变量，大大简化翻译工作。</p>\n<p>最终成果将以 chat 的形式将当前翻译工作的词汇量、进度、预计完成时间、准确度等关键维度的信息陈列给管理者:</p>\n<figure class=\"image-box\">\n                <img src=\"../assets/crowdin-report.png\" alt=\"report\" title=\"\" class=\"\">\n                <p>report</p>\n            </figure>\n<p><a href=\"https://support.crowdin.com/project-reports/\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开源项目的翻译-i18n-方案\"><a href=\"#开源项目的翻译-i18n-方案\" class=\"headerlink\" title=\"开源项目的翻译(i18n)方案\"></a>开源项目的翻译(i18n)方案</h2><p>目前，多数的国外开源项目都采用 <a href=\"https://support.crowdin.com/\" target=\"_blank\" rel=\"noopener\">crowdin</a> 来做 i18n 和 i18n 托管的。</p>\n<p>根据官方的描述，其本质是一套面向科技公司的、cloud-based + autoML 的翻译方案。由项目的管理者上传项目，再将需要翻译的部分提供给热心的开源市民来翻译；或者是请专业的 translator 来 crowdin 平台翻译，届时通过平台来进行计费工作。</p>\n<p>crowdin 也支持项目管理者自行上传 TM (translate memory) 来进行预翻译。</p>\n<p>crowdin 集成了 Google translate 以及 MicroSoft translate 这样的老牌机翻引擎会实时提供翻译建议，作为一个 translator 不用担心自己捉襟见肘的词汇量:</p>\n<figure class=\"image-box\">\n                <img src=\"../assets/crowdin-with-pxt.png\" alt=\"图\" title=\"\" class=\"\">\n                <p>图</p>\n            </figure>\n<p>还支持 <a href=\"http://userguide.icu-project.org/formatparse/messages\" target=\"_blank\" rel=\"noopener\">ICU syntax</a> 简而言之这套语法就是把需要翻译的例句中，提取出变量，大大简化翻译工作。</p>\n<p>最终成果将以 chat 的形式将当前翻译工作的词汇量、进度、预计完成时间、准确度等关键维度的信息陈列给管理者:</p>\n<figure class=\"image-box\">\n                <img src=\"../assets/crowdin-report.png\" alt=\"report\" title=\"\" class=\"\">\n                <p>report</p>\n            </figure>\n<p><a href=\"https://support.crowdin.com/project-reports/\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"## quick-link\n\n来自 GoogleChromeLib team 的小玩意，可以在浏览器空闲时，进行资源的预加载，使得之后有可能要跳转的路由会加载的更快。\n\n大致原理如下：\n\n1. 检测当前页面所有的 links.\n\n2. 等待浏览器空闲，即在帧绘制的间隙。\n\n3. 分析用户的网络状况，通过 `navigator.connection.effectiveType` 来判断用户的网络类型，quick-link 将通过 `requestIdleCallback` API，推入每个 pre-fetch 的任务，根据网络状况的好坏，来决定加载量。\n\n举个例子：\n\n```typescript\nconst tasks = [] as  Promise<Response>[];\nlinks.forEach(link => tasks.push(preFetch(link)));\nawait Promise.all(tasks);\n```\n**这些信息可能会预加载，也可能不会预加载。**\n\n4. 当然了，上一步中的 link 看起来都一样，但其中有一部分是这样的：\n\n```xml\n<link url =\"xxx\" rel=\"prefetch\">\n```\n因此，这部分 link 优先级比较高，quick-link 会优先考虑加载高优先级的 link.\n\nPlayGround:\n[https://anton-karlovskiy-quicklink-news.glitch.me/](https://anton-karlovskiy-quicklink-news.glitch.me/)\n\n打开控制台，点击一个链接，看他加载了多少资源吧!\n\n[Read More](https://github.com/GoogleChromeLabs/quicklink)\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"daily-news/2020/quick-link.2020-01-16.md","raw":"## quick-link\n\n来自 GoogleChromeLib team 的小玩意，可以在浏览器空闲时，进行资源的预加载，使得之后有可能要跳转的路由会加载的更快。\n\n大致原理如下：\n\n1. 检测当前页面所有的 links.\n\n2. 等待浏览器空闲，即在帧绘制的间隙。\n\n3. 分析用户的网络状况，通过 `navigator.connection.effectiveType` 来判断用户的网络类型，quick-link 将通过 `requestIdleCallback` API，推入每个 pre-fetch 的任务，根据网络状况的好坏，来决定加载量。\n\n举个例子：\n\n```typescript\nconst tasks = [] as  Promise<Response>[];\nlinks.forEach(link => tasks.push(preFetch(link)));\nawait Promise.all(tasks);\n```\n**这些信息可能会预加载，也可能不会预加载。**\n\n4. 当然了，上一步中的 link 看起来都一样，但其中有一部分是这样的：\n\n```xml\n<link url =\"xxx\" rel=\"prefetch\">\n```\n因此，这部分 link 优先级比较高，quick-link 会优先考虑加载高优先级的 link.\n\nPlayGround:\n[https://anton-karlovskiy-quicklink-news.glitch.me/](https://anton-karlovskiy-quicklink-news.glitch.me/)\n\n打开控制台，点击一个链接，看他加载了多少资源吧!\n\n[Read More](https://github.com/GoogleChromeLabs/quicklink)\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","date":"2020-02-11T09:48:37.318Z","updated":"2020-02-11T09:48:37.318Z","path":"daily-news/2020/quick-link.2020-01-16.html","title":"","comments":1,"layout":"page","_id":"ck6hpsayt005bckufhoscbhur","content":"<h2 id=\"quick-link\"><a href=\"#quick-link\" class=\"headerlink\" title=\"quick-link\"></a>quick-link</h2><p>来自 GoogleChromeLib team 的小玩意，可以在浏览器空闲时，进行资源的预加载，使得之后有可能要跳转的路由会加载的更快。</p>\n<p>大致原理如下：</p>\n<ol>\n<li><p>检测当前页面所有的 links.</p>\n</li>\n<li><p>等待浏览器空闲，即在帧绘制的间隙。</p>\n</li>\n<li><p>分析用户的网络状况，通过 <code>navigator.connection.effectiveType</code> 来判断用户的网络类型，quick-link 将通过 <code>requestIdleCallback</code> API，推入每个 pre-fetch 的任务，根据网络状况的好坏，来决定加载量。</p>\n</li>\n</ol>\n<p>举个例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tasks = [] <span class=\"keyword\">as</span>  <span class=\"built_in\">Promise</span>&lt;Response&gt;[];</span><br><span class=\"line\">links.forEach(<span class=\"function\"><span class=\"params\">link</span> =&gt;</span> tasks.push(preFetch(link)));</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(tasks);</span><br></pre></td></tr></table></figure>\n<p><strong>这些信息可能会预加载，也可能不会预加载。</strong></p>\n<ol start=\"4\">\n<li>当然了，上一步中的 link 看起来都一样，但其中有一部分是这样的：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">url</span> =<span class=\"string\">\"xxx\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prefetch\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因此，这部分 link 优先级比较高，quick-link 会优先考虑加载高优先级的 link.</p>\n<p>PlayGround:<br><a href=\"https://anton-karlovskiy-quicklink-news.glitch.me/\" target=\"_blank\" rel=\"noopener\">https://anton-karlovskiy-quicklink-news.glitch.me/</a></p>\n<p>打开控制台，点击一个链接，看他加载了多少资源吧!</p>\n<p><a href=\"https://github.com/GoogleChromeLabs/quicklink\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"quick-link\"><a href=\"#quick-link\" class=\"headerlink\" title=\"quick-link\"></a>quick-link</h2><p>来自 GoogleChromeLib team 的小玩意，可以在浏览器空闲时，进行资源的预加载，使得之后有可能要跳转的路由会加载的更快。</p>\n<p>大致原理如下：</p>\n<ol>\n<li><p>检测当前页面所有的 links.</p>\n</li>\n<li><p>等待浏览器空闲，即在帧绘制的间隙。</p>\n</li>\n<li><p>分析用户的网络状况，通过 <code>navigator.connection.effectiveType</code> 来判断用户的网络类型，quick-link 将通过 <code>requestIdleCallback</code> API，推入每个 pre-fetch 的任务，根据网络状况的好坏，来决定加载量。</p>\n</li>\n</ol>\n<p>举个例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tasks = [] <span class=\"keyword\">as</span>  <span class=\"built_in\">Promise</span>&lt;Response&gt;[];</span><br><span class=\"line\">links.forEach(<span class=\"function\"><span class=\"params\">link</span> =&gt;</span> tasks.push(preFetch(link)));</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(tasks);</span><br></pre></td></tr></table></figure>\n<p><strong>这些信息可能会预加载，也可能不会预加载。</strong></p>\n<ol start=\"4\">\n<li>当然了，上一步中的 link 看起来都一样，但其中有一部分是这样的：</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">url</span> =<span class=\"string\">\"xxx\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prefetch\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因此，这部分 link 优先级比较高，quick-link 会优先考虑加载高优先级的 link.</p>\n<p>PlayGround:<br><a href=\"https://anton-karlovskiy-quicklink-news.glitch.me/\" target=\"_blank\" rel=\"noopener\">https://anton-karlovskiy-quicklink-news.glitch.me/</a></p>\n<p>打开控制台，点击一个链接，看他加载了多少资源吧!</p>\n<p><a href=\"https://github.com/GoogleChromeLabs/quicklink\" target=\"_blank\" rel=\"noopener\">Read More</a></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"_content":"function createScanner(languageVersion, skipTrivia, languageVariant, textInitial, onError, start, length) {\n  if (languageVariant === void 0) { languageVariant = 0; }\n  var text = textInitial;\n  var pos;\n  var end;\n  var startPos;\n  var tokenPos;\n  var token;\n  var tokenValue;\n  var tokenFlags;\n  var inJSDocType = 0;\n  setText(text, start, length);\n  var scanner = {\n    getStartPos: function () { return startPos; },\n    getTextPos: function () { return pos; },\n    getToken: function () { return token; },\n    getTokenPos: function () { return tokenPos; },\n    getTokenText: function () { return text.substring(tokenPos, pos); },\n    getTokenValue: function () { return tokenValue; },\n    hasUnicodeEscape: function () { return (tokenFlags & 1024) !== 0; },\n    hasExtendedUnicodeEscape: function () { return (tokenFlags & 8) !== 0; },\n    hasPrecedingLineBreak: function () { return (tokenFlags & 1) !== 0; },\n    isIdentifier: function () { return token === 75 || token > 111; },\n    isReservedWord: function () { return token >= 76 && token <= 111; },\n    isUnterminated: function () { return (tokenFlags & 4) !== 0; },\n    getTokenFlags: function () { return tokenFlags; },\n    reScanGreaterToken: reScanGreaterToken,\n    reScanSlashToken: reScanSlashToken,\n    reScanTemplateToken: reScanTemplateToken,\n    scanJsxIdentifier: scanJsxIdentifier,\n    scanJsxAttributeValue: scanJsxAttributeValue,\n    reScanJsxToken: reScanJsxToken,\n    reScanLessThanToken: reScanLessThanToken,\n    reScanQuestionToken: reScanQuestionToken,\n    scanJsxToken: scanJsxToken,\n    scanJsDocToken: scanJsDocToken,\n    scan: scan,\n    getText: getText,\n    setText: setText,\n    setScriptTarget: setScriptTarget,\n    setLanguageVariant: setLanguageVariant,\n    setOnError: setOnError,\n    setTextPos: setTextPos,\n    setInJSDocType: setInJSDocType,\n    tryScan: tryScan,\n    lookAhead: lookAhead,\n    scanRange: scanRange,\n  };\n  if (ts.Debug.isDebugging) {\n    Object.defineProperty(scanner, \"__debugShowCurrentPositionInText\", {\n      get: function () {\n        var text = scanner.getText();\n        return text.slice(0, scanner.getStartPos()) + \"║\" + text.slice(scanner.getStartPos());\n      },\n    });\n  }\n  return scanner;\n  function error(message, errPos, length) {\n    if (errPos === void 0) { errPos = pos; }\n    if (onError) {\n      var oldPos = pos;\n      pos = errPos;\n      onError(message, length || 0);\n      pos = oldPos;\n    }\n  }\n  function scanNumberFragment() {\n    var start = pos;\n    var allowSeparator = false;\n    var isPreviousTokenSeparator = false;\n    var result = \"\";\n    while (true) {\n      var ch = text.charCodeAt(pos);\n      if (ch === 95) {\n        tokenFlags |= 512;\n        if (allowSeparator) {\n          allowSeparator = false;\n          isPreviousTokenSeparator = true;\n          result += text.substring(start, pos);\n        }\n        else if (isPreviousTokenSeparator) {\n          error(ts.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);\n        }\n        else {\n          error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);\n        }\n        pos++;\n        start = pos;\n        continue;\n      }\n      if (isDigit(ch)) {\n        allowSeparator = true;\n        isPreviousTokenSeparator = false;\n        pos++;\n        continue;\n      }\n      break;\n    }\n    if (text.charCodeAt(pos - 1) === 95) {\n      error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);\n    }\n    return result + text.substring(start, pos);\n  }\n  function scanNumber() {\n    var start = pos;\n    var mainFragment = scanNumberFragment();\n    var decimalFragment;\n    var scientificFragment;\n    if (text.charCodeAt(pos) === 46) {\n      pos++;\n      decimalFragment = scanNumberFragment();\n    }\n    var end = pos;\n    if (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101) {\n      pos++;\n      tokenFlags |= 16;\n      if (text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45)\n        pos++;\n      var preNumericPart = pos;\n      var finalFragment = scanNumberFragment();\n      if (!finalFragment) {\n        error(ts.Diagnostics.Digit_expected);\n      }\n      else {\n        scientificFragment = text.substring(end, preNumericPart) + finalFragment;\n        end = pos;\n      }\n    }\n    var result;\n    if (tokenFlags & 512) {\n      result = mainFragment;\n      if (decimalFragment) {\n        result += \".\" + decimalFragment;\n      }\n      if (scientificFragment) {\n        result += scientificFragment;\n      }\n    }\n    else {\n      result = text.substring(start, end);\n    }\n    if (decimalFragment !== undefined || tokenFlags & 16) {\n      checkForIdentifierStartAfterNumericLiteral(start, decimalFragment === undefined && !!(tokenFlags & 16));\n      return {\n        type: 8,\n        value: \"\" + +result\n      };\n    }\n    else {\n      tokenValue = result;\n      var type = checkBigIntSuffix();\n      checkForIdentifierStartAfterNumericLiteral(start);\n      return { type: type, value: tokenValue };\n    }\n  }\n  function checkForIdentifierStartAfterNumericLiteral(numericStart, isScientific) {\n    if (!isIdentifierStart(codePointAt(text, pos), languageVersion)) {\n      return;\n    }\n    var identifierStart = pos;\n    var length = scanIdentifierParts().length;\n    if (length === 1 && text[identifierStart] === \"n\") {\n      if (isScientific) {\n        error(ts.Diagnostics.A_bigint_literal_cannot_use_exponential_notation, numericStart, identifierStart - numericStart + 1);\n      }\n      else {\n        error(ts.Diagnostics.A_bigint_literal_must_be_an_integer, numericStart, identifierStart - numericStart + 1);\n      }\n    }\n    else {\n      error(ts.Diagnostics.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal, identifierStart, length);\n      pos = identifierStart;\n    }\n  }\n  function scanOctalDigits() {\n    var start = pos;\n    while (isOctalDigit(text.charCodeAt(pos))) {\n      pos++;\n    }\n    return +(text.substring(start, pos));\n  }\n  function scanExactNumberOfHexDigits(count, canHaveSeparators) {\n    var valueString = scanHexDigits(count, false, canHaveSeparators);\n    return valueString ? parseInt(valueString, 16) : -1;\n  }\n  function scanMinimumNumberOfHexDigits(count, canHaveSeparators) {\n    return scanHexDigits(count, true, canHaveSeparators);\n  }\n  function scanHexDigits(minCount, scanAsManyAsPossible, canHaveSeparators) {\n    var valueChars = [];\n    var allowSeparator = false;\n    var isPreviousTokenSeparator = false;\n    while (valueChars.length < minCount || scanAsManyAsPossible) {\n      var ch = text.charCodeAt(pos);\n      if (canHaveSeparators && ch === 95) {\n        tokenFlags |= 512;\n        if (allowSeparator) {\n          allowSeparator = false;\n          isPreviousTokenSeparator = true;\n        }\n        else if (isPreviousTokenSeparator) {\n          error(ts.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);\n        }\n        else {\n          error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);\n        }\n        pos++;\n        continue;\n      }\n      allowSeparator = canHaveSeparators;\n      if (ch >= 65 && ch <= 70) {\n        ch += 97 - 65;\n      }\n      else if (!((ch >= 48 && ch <= 57) ||\n        (ch >= 97 && ch <= 102))) {\n        break;\n      }\n      valueChars.push(ch);\n      pos++;\n      isPreviousTokenSeparator = false;\n    }\n    if (valueChars.length < minCount) {\n      valueChars = [];\n    }\n    if (text.charCodeAt(pos - 1) === 95) {\n      error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);\n    }\n    return String.fromCharCode.apply(String, valueChars);\n  }\n  function scanString(jsxAttributeString) {\n    if (jsxAttributeString === void 0) { jsxAttributeString = false; }\n    var quote = text.charCodeAt(pos);\n    pos++;\n    var result = \"\";\n    var start = pos;\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_string_literal);\n        break;\n      }\n      var ch = text.charCodeAt(pos);\n      if (ch === quote) {\n        result += text.substring(start, pos);\n        pos++;\n        break;\n      }\n      if (ch === 92 && !jsxAttributeString) {\n        result += text.substring(start, pos);\n        result += scanEscapeSequence();\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(ch) && !jsxAttributeString) {\n        result += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_string_literal);\n        break;\n      }\n      pos++;\n    }\n    return result;\n  }\n  function scanTemplateAndSetTokenValue() {\n    var startedWithBacktick = text.charCodeAt(pos) === 96;\n    pos++;\n    var start = pos;\n    var contents = \"\";\n    var resultingToken;\n    while (true) {\n      if (pos >= end) {\n        contents += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_template_literal);\n        resultingToken = startedWithBacktick ? 14 : 17;\n        break;\n      }\n      var currChar = text.charCodeAt(pos);\n      if (currChar === 96) {\n        contents += text.substring(start, pos);\n        pos++;\n        resultingToken = startedWithBacktick ? 14 : 17;\n        break;\n      }\n      if (currChar === 36 && pos + 1 < end && text.charCodeAt(pos + 1) === 123) {\n        contents += text.substring(start, pos);\n        pos += 2;\n        resultingToken = startedWithBacktick ? 15 : 16;\n        break;\n      }\n      if (currChar === 92) {\n        contents += text.substring(start, pos);\n        contents += scanEscapeSequence();\n        start = pos;\n        continue;\n      }\n      if (currChar === 13) {\n        contents += text.substring(start, pos);\n        pos++;\n        if (pos < end && text.charCodeAt(pos) === 10) {\n          pos++;\n        }\n        contents += \"\\n\";\n        start = pos;\n        continue;\n      }\n      pos++;\n    }\n    ts.Debug.assert(resultingToken !== undefined);\n    tokenValue = contents;\n    return resultingToken;\n  }\n  function scanEscapeSequence() {\n    pos++;\n    if (pos >= end) {\n      error(ts.Diagnostics.Unexpected_end_of_text);\n      return \"\";\n    }\n    var ch = text.charCodeAt(pos);\n    pos++;\n    switch (ch) {\n      case 48:\n        return \"\\0\";\n      case 98:\n        return \"\\b\";\n      case 116:\n        return \"\\t\";\n      case 110:\n        return \"\\n\";\n      case 118:\n        return \"\\v\";\n      case 102:\n        return \"\\f\";\n      case 114:\n        return \"\\r\";\n      case 39:\n        return \"\\'\";\n      case 34:\n        return \"\\\"\";\n      case 117:\n        if (pos < end && text.charCodeAt(pos) === 123) {\n          tokenFlags |= 8;\n          pos++;\n          return scanExtendedUnicodeEscape();\n        }\n        tokenFlags |= 1024;\n        return scanHexadecimalEscape(4);\n      case 120:\n        return scanHexadecimalEscape(2);\n      case 13:\n        if (pos < end && text.charCodeAt(pos) === 10) {\n          pos++;\n        }\n      case 10:\n      case 8232:\n      case 8233:\n        return \"\";\n      default:\n        return String.fromCharCode(ch);\n    }\n  }\n  function scanHexadecimalEscape(numDigits) {\n    var escapedValue = scanExactNumberOfHexDigits(numDigits, false);\n    if (escapedValue >= 0) {\n      return String.fromCharCode(escapedValue);\n    }\n    else {\n      error(ts.Diagnostics.Hexadecimal_digit_expected);\n      return \"\";\n    }\n  }\n  function scanExtendedUnicodeEscape() {\n    var escapedValueString = scanMinimumNumberOfHexDigits(1, false);\n    var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;\n    var isInvalidExtendedEscape = false;\n    if (escapedValue < 0) {\n      error(ts.Diagnostics.Hexadecimal_digit_expected);\n      isInvalidExtendedEscape = true;\n    }\n    else if (escapedValue > 0x10FFFF) {\n      error(ts.Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);\n      isInvalidExtendedEscape = true;\n    }\n    if (pos >= end) {\n      error(ts.Diagnostics.Unexpected_end_of_text);\n      isInvalidExtendedEscape = true;\n    }\n    else if (text.charCodeAt(pos) === 125) {\n      pos++;\n    }\n    else {\n      error(ts.Diagnostics.Unterminated_Unicode_escape_sequence);\n      isInvalidExtendedEscape = true;\n    }\n    if (isInvalidExtendedEscape) {\n      return \"\";\n    }\n    return utf16EncodeAsString(escapedValue);\n  }\n  function utf16EncodeAsString(codePoint) {\n    ts.Debug.assert(0x0 <= codePoint && codePoint <= 0x10FFFF);\n    if (codePoint <= 65535) {\n      return String.fromCharCode(codePoint);\n    }\n    var codeUnit1 = Math.floor((codePoint - 65536) / 1024) + 0xD800;\n    var codeUnit2 = ((codePoint - 65536) % 1024) + 0xDC00;\n    return String.fromCharCode(codeUnit1, codeUnit2);\n  }\n  function peekUnicodeEscape() {\n    if (pos + 5 < end && text.charCodeAt(pos + 1) === 117) {\n      var start_1 = pos;\n      pos += 2;\n      var value = scanExactNumberOfHexDigits(4, false);\n      pos = start_1;\n      return value;\n    }\n    return -1;\n  }\n  function peekExtendedUnicodeEscape() {\n    if (languageVersion >= 2 && codePointAt(text, pos + 1) === 117 && codePointAt(text, pos + 2) === 123) {\n      var start_2 = pos;\n      pos += 3;\n      var escapedValueString = scanMinimumNumberOfHexDigits(1, false);\n      var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;\n      pos = start_2;\n      return escapedValue;\n    }\n    return -1;\n  }\n  function scanIdentifierParts() {\n    var result = \"\";\n    var start = pos;\n    while (pos < end) {\n      var ch = codePointAt(text, pos);\n      if (isIdentifierPart(ch, languageVersion)) {\n        pos += charSize(ch);\n      }\n      else if (ch === 92) {\n        ch = peekExtendedUnicodeEscape();\n        if (ch >= 0 && isIdentifierPart(ch, languageVersion)) {\n          pos += 3;\n          tokenFlags |= 8;\n          result += scanExtendedUnicodeEscape();\n          start = pos;\n          continue;\n        }\n        ch = peekUnicodeEscape();\n        if (!(ch >= 0 && isIdentifierPart(ch, languageVersion))) {\n          break;\n        }\n        tokenFlags |= 1024;\n        result += text.substring(start, pos);\n        result += utf16EncodeAsString(ch);\n        pos += 6;\n        start = pos;\n      }\n      else {\n        break;\n      }\n    }\n    result += text.substring(start, pos);\n    return result;\n  }\n  function getIdentifierToken() {\n    var len = tokenValue.length;\n    if (len >= 2 && len <= 11) {\n      var ch = tokenValue.charCodeAt(0);\n      if (ch >= 97 && ch <= 122) {\n        var keyword = textToKeyword.get(tokenValue);\n        if (keyword !== undefined) {\n          return token = keyword;\n        }\n      }\n    }\n    return token = 75;\n  }\n  function scanBinaryOrOctalDigits(base) {\n    var value = \"\";\n    var separatorAllowed = false;\n    var isPreviousTokenSeparator = false;\n    while (true) {\n      var ch = text.charCodeAt(pos);\n      if (ch === 95) {\n        tokenFlags |= 512;\n        if (separatorAllowed) {\n          separatorAllowed = false;\n          isPreviousTokenSeparator = true;\n        }\n        else if (isPreviousTokenSeparator) {\n          error(ts.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);\n        }\n        else {\n          error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);\n        }\n        pos++;\n        continue;\n      }\n      separatorAllowed = true;\n      if (!isDigit(ch) || ch - 48 >= base) {\n        break;\n      }\n      value += text[pos];\n      pos++;\n      isPreviousTokenSeparator = false;\n    }\n    if (text.charCodeAt(pos - 1) === 95) {\n      error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);\n    }\n    return value;\n  }\n  function checkBigIntSuffix() {\n    if (text.charCodeAt(pos) === 110) {\n      tokenValue += \"n\";\n      if (tokenFlags & 384) {\n        tokenValue = ts.parsePseudoBigInt(tokenValue) + \"n\";\n      }\n      pos++;\n      return 9;\n    }\n    else {\n      var numericValue = tokenFlags & 128\n        ? parseInt(tokenValue.slice(2), 2)\n        : tokenFlags & 256\n          ? parseInt(tokenValue.slice(2), 8)\n          : +tokenValue;\n      tokenValue = \"\" + numericValue;\n      return 8;\n    }\n  }\n  function scan() {\n    var _a;\n    startPos = pos;\n    tokenFlags = 0;\n    var asteriskSeen = false;\n    while (true) {\n      tokenPos = pos;\n      if (pos >= end) {\n        return token = 1;\n      }\n      var ch = codePointAt(text, pos);\n      if (ch === 35 && pos === 0 && isShebangTrivia(text, pos)) {\n        pos = scanShebangTrivia(text, pos);\n        if (skipTrivia) {\n          continue;\n        }\n        else {\n          return token = 6;\n        }\n      }\n      switch (ch) {\n        case 10:\n        case 13:\n          tokenFlags |= 1;\n          if (skipTrivia) {\n            pos++;\n            continue;\n          }\n          else {\n            if (ch === 13 && pos + 1 < end && text.charCodeAt(pos + 1) === 10) {\n              pos += 2;\n            }\n            else {\n              pos++;\n            }\n            return token = 4;\n          }\n        case 9:\n        case 11:\n        case 12:\n        case 32:\n        case 160:\n        case 5760:\n        case 8192:\n        case 8193:\n        case 8194:\n        case 8195:\n        case 8196:\n        case 8197:\n        case 8198:\n        case 8199:\n        case 8200:\n        case 8201:\n        case 8202:\n        case 8203:\n        case 8239:\n        case 8287:\n        case 12288:\n        case 65279:\n          if (skipTrivia) {\n            pos++;\n            continue;\n          }\n          else {\n            while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {\n              pos++;\n            }\n            return token = 5;\n          }\n        case 33:\n          if (text.charCodeAt(pos + 1) === 61) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 37;\n            }\n            return pos += 2, token = 35;\n          }\n          pos++;\n          return token = 53;\n        case 34:\n        case 39:\n          tokenValue = scanString();\n          return token = 10;\n        case 96:\n          return token = scanTemplateAndSetTokenValue();\n        case 37:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 68;\n          }\n          pos++;\n          return token = 44;\n        case 38:\n          if (text.charCodeAt(pos + 1) === 38) {\n            return pos += 2, token = 55;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 72;\n          }\n          pos++;\n          return token = 50;\n        case 40:\n          pos++;\n          return token = 20;\n        case 41:\n          pos++;\n          return token = 21;\n        case 42:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 65;\n          }\n          if (text.charCodeAt(pos + 1) === 42) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 66;\n            }\n            return pos += 2, token = 42;\n          }\n          pos++;\n          if (inJSDocType && !asteriskSeen && (tokenFlags & 1)) {\n            asteriskSeen = true;\n            continue;\n          }\n          return token = 41;\n        case 43:\n          if (text.charCodeAt(pos + 1) === 43) {\n            return pos += 2, token = 45;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 63;\n          }\n          pos++;\n          return token = 39;\n        case 44:\n          pos++;\n          return token = 27;\n        case 45:\n          if (text.charCodeAt(pos + 1) === 45) {\n            return pos += 2, token = 46;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 64;\n          }\n          pos++;\n          return token = 40;\n        case 46:\n          if (isDigit(text.charCodeAt(pos + 1))) {\n            tokenValue = scanNumber().value;\n            return token = 8;\n          }\n          if (text.charCodeAt(pos + 1) === 46 && text.charCodeAt(pos + 2) === 46) {\n            return pos += 3, token = 25;\n          }\n          pos++;\n          return token = 24;\n        case 47:\n          if (text.charCodeAt(pos + 1) === 47) {\n            pos += 2;\n            while (pos < end) {\n              if (isLineBreak(text.charCodeAt(pos))) {\n                break;\n              }\n              pos++;\n            }\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 2;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 42) {\n            pos += 2;\n            if (text.charCodeAt(pos) === 42 && text.charCodeAt(pos + 1) !== 47) {\n              tokenFlags |= 2;\n            }\n            var commentClosed = false;\n            while (pos < end) {\n              var ch_1 = text.charCodeAt(pos);\n              if (ch_1 === 42 && text.charCodeAt(pos + 1) === 47) {\n                pos += 2;\n                commentClosed = true;\n                break;\n              }\n              if (isLineBreak(ch_1)) {\n                tokenFlags |= 1;\n              }\n              pos++;\n            }\n            if (!commentClosed) {\n              error(ts.Diagnostics.Asterisk_Slash_expected);\n            }\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              if (!commentClosed) {\n                tokenFlags |= 4;\n              }\n              return token = 3;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 67;\n          }\n          pos++;\n          return token = 43;\n        case 48:\n          if (pos + 2 < end && (text.charCodeAt(pos + 1) === 88 || text.charCodeAt(pos + 1) === 120)) {\n            pos += 2;\n            tokenValue = scanMinimumNumberOfHexDigits(1, true);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Hexadecimal_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0x\" + tokenValue;\n            tokenFlags |= 64;\n            return token = checkBigIntSuffix();\n          }\n          else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 66 || text.charCodeAt(pos + 1) === 98)) {\n            pos += 2;\n            tokenValue = scanBinaryOrOctalDigits(2);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Binary_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0b\" + tokenValue;\n            tokenFlags |= 128;\n            return token = checkBigIntSuffix();\n          }\n          else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 79 || text.charCodeAt(pos + 1) === 111)) {\n            pos += 2;\n            tokenValue = scanBinaryOrOctalDigits(8);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Octal_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0o\" + tokenValue;\n            tokenFlags |= 256;\n            return token = checkBigIntSuffix();\n          }\n          if (pos + 1 < end && isOctalDigit(text.charCodeAt(pos + 1))) {\n            tokenValue = \"\" + scanOctalDigits();\n            tokenFlags |= 32;\n            return token = 8;\n          }\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          (_a = scanNumber(), token = _a.type, tokenValue = _a.value);\n          return token;\n        case 58:\n          pos++;\n          return token = 58;\n        case 59:\n          pos++;\n          return token = 26;\n        case 60:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 60) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 69;\n            }\n            return pos += 2, token = 47;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 32;\n          }\n          if (languageVariant === 1 &&\n            text.charCodeAt(pos + 1) === 47 &&\n            text.charCodeAt(pos + 2) !== 42) {\n            return pos += 2, token = 30;\n          }\n          pos++;\n          return token = 29;\n        case 61:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 36;\n            }\n            return pos += 2, token = 34;\n          }\n          if (text.charCodeAt(pos + 1) === 62) {\n            return pos += 2, token = 38;\n          }\n          pos++;\n          return token = 62;\n        case 62:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          pos++;\n          return token = 31;\n        case 63:\n          pos++;\n          if (text.charCodeAt(pos) === 46 && !isDigit(text.charCodeAt(pos + 1))) {\n            pos++;\n            return token = 28;\n          }\n          if (text.charCodeAt(pos) === 63) {\n            pos++;\n            return token = 60;\n          }\n          return token = 57;\n        case 91:\n          pos++;\n          return token = 22;\n        case 93:\n          pos++;\n          return token = 23;\n        case 94:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 74;\n          }\n          pos++;\n          return token = 52;\n        case 123:\n          pos++;\n          return token = 18;\n        case 124:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 124) {\n            return pos += 2, token = 56;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 73;\n          }\n          pos++;\n          return token = 51;\n        case 125:\n          pos++;\n          return token = 19;\n        case 126:\n          pos++;\n          return token = 54;\n        case 64:\n          pos++;\n          return token = 59;\n        case 92:\n          var extendedCookedChar = peekExtendedUnicodeEscape();\n          if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {\n            pos += 3;\n            tokenFlags |= 8;\n            tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();\n            return token = getIdentifierToken();\n          }\n          var cookedChar = peekUnicodeEscape();\n          if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n            pos += 6;\n            tokenFlags |= 1024;\n            tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n            return token = getIdentifierToken();\n          }\n          error(ts.Diagnostics.Invalid_character);\n          pos++;\n          return token = 0;\n        default:\n          if (isIdentifierStart(ch, languageVersion)) {\n            pos += charSize(ch);\n            while (pos < end && isIdentifierPart(ch = codePointAt(text, pos), languageVersion))\n              pos += charSize(ch);\n            tokenValue = text.substring(tokenPos, pos);\n            if (ch === 92) {\n              tokenValue += scanIdentifierParts();\n            }\n            return token = getIdentifierToken();\n          }\n          else if (isWhiteSpaceSingleLine(ch)) {\n            pos += charSize(ch);\n            continue;\n          }\n          else if (isLineBreak(ch)) {\n            tokenFlags |= 1;\n            pos += charSize(ch);\n            continue;\n          }\n          error(ts.Diagnostics.Invalid_character);\n          pos += charSize(ch);\n          return token = 0;\n      }\n    }\n  }\n  function reScanGreaterToken() {\n    if (token === 31) {\n      if (text.charCodeAt(pos) === 62) {\n        if (text.charCodeAt(pos + 1) === 62) {\n          if (text.charCodeAt(pos + 2) === 61) {\n            return pos += 3, token = 71;\n          }\n          return pos += 2, token = 49;\n        }\n        if (text.charCodeAt(pos + 1) === 61) {\n          return pos += 2, token = 70;\n        }\n        pos++;\n        return token = 48;\n      }\n      if (text.charCodeAt(pos) === 61) {\n        pos++;\n        return token = 33;\n      }\n    }\n    return token;\n  }\n  function reScanSlashToken() {\n    if (token === 43 || token === 67) {\n      var p = tokenPos + 1;\n      var inEscape = false;\n      var inCharacterClass = false;\n      while (true) {\n        if (p >= end) {\n          tokenFlags |= 4;\n          error(ts.Diagnostics.Unterminated_regular_expression_literal);\n          break;\n        }\n        var ch = text.charCodeAt(p);\n        if (isLineBreak(ch)) {\n          tokenFlags |= 4;\n          error(ts.Diagnostics.Unterminated_regular_expression_literal);\n          break;\n        }\n        if (inEscape) {\n          inEscape = false;\n        }\n        else if (ch === 47 && !inCharacterClass) {\n          p++;\n          break;\n        }\n        else if (ch === 91) {\n          inCharacterClass = true;\n        }\n        else if (ch === 92) {\n          inEscape = true;\n        }\n        else if (ch === 93) {\n          inCharacterClass = false;\n        }\n        p++;\n      }\n      while (p < end && isIdentifierPart(text.charCodeAt(p), languageVersion)) {\n        p++;\n      }\n      pos = p;\n      tokenValue = text.substring(tokenPos, pos);\n      token = 13;\n    }\n    return token;\n  }\n  function reScanTemplateToken() {\n    ts.Debug.assert(token === 19, \"'reScanTemplateToken' should only be called on a '}'\");\n    pos = tokenPos;\n    return token = scanTemplateAndSetTokenValue();\n  }\n  function reScanJsxToken() {\n    pos = tokenPos = startPos;\n    return token = scanJsxToken();\n  }\n  function reScanLessThanToken() {\n    if (token === 47) {\n      pos = tokenPos + 1;\n      return token = 29;\n    }\n    return token;\n  }\n  function reScanQuestionToken() {\n    ts.Debug.assert(token === 60, \"'reScanQuestionToken' should only be called on a '??'\");\n    pos = tokenPos + 1;\n    return token = 57;\n  }\n  function scanJsxToken() {\n    startPos = tokenPos = pos;\n    if (pos >= end) {\n      return token = 1;\n    }\n    var char = text.charCodeAt(pos);\n    if (char === 60) {\n      if (text.charCodeAt(pos + 1) === 47) {\n        pos += 2;\n        return token = 30;\n      }\n      pos++;\n      return token = 29;\n    }\n    if (char === 123) {\n      pos++;\n      return token = 18;\n    }\n    var firstNonWhitespace = 0;\n    while (pos < end) {\n      char = text.charCodeAt(pos);\n      if (char === 123) {\n        break;\n      }\n      if (char === 60) {\n        if (isConflictMarkerTrivia(text, pos)) {\n          pos = scanConflictMarkerTrivia(text, pos, error);\n          return token = 7;\n        }\n        break;\n      }\n      if (isLineBreak(char) && firstNonWhitespace === 0) {\n        firstNonWhitespace = -1;\n      }\n      else if (!isWhiteSpaceLike(char)) {\n        firstNonWhitespace = pos;\n      }\n      pos++;\n    }\n    tokenValue = text.substring(startPos, pos);\n    return firstNonWhitespace === -1 ? 12 : 11;\n  }\n  function scanJsxIdentifier() {\n    if (tokenIsIdentifierOrKeyword(token)) {\n      while (pos < end) {\n        var ch = text.charCodeAt(pos);\n        if (ch === 45) {\n          tokenValue += \"-\";\n          pos++;\n          continue;\n        }\n        var oldPos = pos;\n        tokenValue += scanIdentifierParts();\n        if (pos === oldPos) {\n          break;\n        }\n      }\n    }\n    return token;\n  }\n  function scanJsxAttributeValue() {\n    startPos = pos;\n    switch (text.charCodeAt(pos)) {\n      case 34:\n      case 39:\n        tokenValue = scanString(true);\n        return token = 10;\n      default:\n        return scan();\n    }\n  }\n  function scanJsDocToken() {\n    startPos = tokenPos = pos;\n    tokenFlags = 0;\n    if (pos >= end) {\n      return token = 1;\n    }\n    var ch = codePointAt(text, pos);\n    pos += charSize(ch);\n    switch (ch) {\n      case 9:\n      case 11:\n      case 12:\n      case 32:\n        while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {\n          pos++;\n        }\n        return token = 5;\n      case 64:\n        return token = 59;\n      case 10:\n      case 13:\n        tokenFlags |= 1;\n        return token = 4;\n      case 42:\n        return token = 41;\n      case 123:\n        return token = 18;\n      case 125:\n        return token = 19;\n      case 91:\n        return token = 22;\n      case 93:\n        return token = 23;\n      case 60:\n        return token = 29;\n      case 62:\n        return token = 31;\n      case 61:\n        return token = 62;\n      case 44:\n        return token = 27;\n      case 46:\n        return token = 24;\n      case 96:\n        return token = 61;\n      case 92:\n        pos--;\n        var extendedCookedChar = peekExtendedUnicodeEscape();\n        if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {\n          pos += 3;\n          tokenFlags |= 8;\n          tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();\n          return token = getIdentifierToken();\n        }\n        var cookedChar = peekUnicodeEscape();\n        if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n          pos += 6;\n          tokenFlags |= 1024;\n          tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n          return token = getIdentifierToken();\n        }\n        pos++;\n        return token = 0;\n    }\n    if (isIdentifierStart(ch, languageVersion)) {\n      var char = ch;\n      while (pos < end && isIdentifierPart(char = codePointAt(text, pos), languageVersion) || text.charCodeAt(pos) === 45)\n        pos += charSize(char);\n      tokenValue = text.substring(tokenPos, pos);\n      if (char === 92) {\n        tokenValue += scanIdentifierParts();\n      }\n      return token = getIdentifierToken();\n    }\n    else {\n      return token = 0;\n    }\n  }\n  function speculationHelper(callback, isLookahead) {\n    var savePos = pos;\n    var saveStartPos = startPos;\n    var saveTokenPos = tokenPos;\n    var saveToken = token;\n    var saveTokenValue = tokenValue;\n    var saveTokenFlags = tokenFlags;\n    var result = callback();\n    if (!result || isLookahead) {\n      pos = savePos;\n      startPos = saveStartPos;\n      tokenPos = saveTokenPos;\n      token = saveToken;\n      tokenValue = saveTokenValue;\n      tokenFlags = saveTokenFlags;\n    }\n    return result;\n  }\n  function scanRange(start, length, callback) {\n    var saveEnd = end;\n    var savePos = pos;\n    var saveStartPos = startPos;\n    var saveTokenPos = tokenPos;\n    var saveToken = token;\n    var saveTokenValue = tokenValue;\n    var saveTokenFlags = tokenFlags;\n    setText(text, start, length);\n    var result = callback();\n    end = saveEnd;\n    pos = savePos;\n    startPos = saveStartPos;\n    tokenPos = saveTokenPos;\n    token = saveToken;\n    tokenValue = saveTokenValue;\n    tokenFlags = saveTokenFlags;\n    return result;\n  }\n  function lookAhead(callback) {\n    return speculationHelper(callback, true);\n  }\n  function tryScan(callback) {\n    return speculationHelper(callback, false);\n  }\n  function getText() {\n    return text;\n  }\n  function setText(newText, start, length) {\n    text = newText || \"\";\n    end = length === undefined ? text.length : start + length;\n    setTextPos(start || 0);\n  }\n  function setOnError(errorCallback) {\n    onError = errorCallback;\n  }\n  function setScriptTarget(scriptTarget) {\n    languageVersion = scriptTarget;\n  }\n  function setLanguageVariant(variant) {\n    languageVariant = variant;\n  }\n  function setTextPos(textPos) {\n    ts.Debug.assert(textPos >= 0);\n    pos = textPos;\n    startPos = textPos;\n    tokenPos = textPos;\n    token = 0;\n    tokenValue = undefined;\n    tokenFlags = 0;\n  }\n  function setInJSDocType(inType) {\n    inJSDocType += inType ? 1 : -1;\n  }\n}\n\n","source":"daily-news/assets/typescript-scanner.js","raw":"function createScanner(languageVersion, skipTrivia, languageVariant, textInitial, onError, start, length) {\n  if (languageVariant === void 0) { languageVariant = 0; }\n  var text = textInitial;\n  var pos;\n  var end;\n  var startPos;\n  var tokenPos;\n  var token;\n  var tokenValue;\n  var tokenFlags;\n  var inJSDocType = 0;\n  setText(text, start, length);\n  var scanner = {\n    getStartPos: function () { return startPos; },\n    getTextPos: function () { return pos; },\n    getToken: function () { return token; },\n    getTokenPos: function () { return tokenPos; },\n    getTokenText: function () { return text.substring(tokenPos, pos); },\n    getTokenValue: function () { return tokenValue; },\n    hasUnicodeEscape: function () { return (tokenFlags & 1024) !== 0; },\n    hasExtendedUnicodeEscape: function () { return (tokenFlags & 8) !== 0; },\n    hasPrecedingLineBreak: function () { return (tokenFlags & 1) !== 0; },\n    isIdentifier: function () { return token === 75 || token > 111; },\n    isReservedWord: function () { return token >= 76 && token <= 111; },\n    isUnterminated: function () { return (tokenFlags & 4) !== 0; },\n    getTokenFlags: function () { return tokenFlags; },\n    reScanGreaterToken: reScanGreaterToken,\n    reScanSlashToken: reScanSlashToken,\n    reScanTemplateToken: reScanTemplateToken,\n    scanJsxIdentifier: scanJsxIdentifier,\n    scanJsxAttributeValue: scanJsxAttributeValue,\n    reScanJsxToken: reScanJsxToken,\n    reScanLessThanToken: reScanLessThanToken,\n    reScanQuestionToken: reScanQuestionToken,\n    scanJsxToken: scanJsxToken,\n    scanJsDocToken: scanJsDocToken,\n    scan: scan,\n    getText: getText,\n    setText: setText,\n    setScriptTarget: setScriptTarget,\n    setLanguageVariant: setLanguageVariant,\n    setOnError: setOnError,\n    setTextPos: setTextPos,\n    setInJSDocType: setInJSDocType,\n    tryScan: tryScan,\n    lookAhead: lookAhead,\n    scanRange: scanRange,\n  };\n  if (ts.Debug.isDebugging) {\n    Object.defineProperty(scanner, \"__debugShowCurrentPositionInText\", {\n      get: function () {\n        var text = scanner.getText();\n        return text.slice(0, scanner.getStartPos()) + \"║\" + text.slice(scanner.getStartPos());\n      },\n    });\n  }\n  return scanner;\n  function error(message, errPos, length) {\n    if (errPos === void 0) { errPos = pos; }\n    if (onError) {\n      var oldPos = pos;\n      pos = errPos;\n      onError(message, length || 0);\n      pos = oldPos;\n    }\n  }\n  function scanNumberFragment() {\n    var start = pos;\n    var allowSeparator = false;\n    var isPreviousTokenSeparator = false;\n    var result = \"\";\n    while (true) {\n      var ch = text.charCodeAt(pos);\n      if (ch === 95) {\n        tokenFlags |= 512;\n        if (allowSeparator) {\n          allowSeparator = false;\n          isPreviousTokenSeparator = true;\n          result += text.substring(start, pos);\n        }\n        else if (isPreviousTokenSeparator) {\n          error(ts.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);\n        }\n        else {\n          error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);\n        }\n        pos++;\n        start = pos;\n        continue;\n      }\n      if (isDigit(ch)) {\n        allowSeparator = true;\n        isPreviousTokenSeparator = false;\n        pos++;\n        continue;\n      }\n      break;\n    }\n    if (text.charCodeAt(pos - 1) === 95) {\n      error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);\n    }\n    return result + text.substring(start, pos);\n  }\n  function scanNumber() {\n    var start = pos;\n    var mainFragment = scanNumberFragment();\n    var decimalFragment;\n    var scientificFragment;\n    if (text.charCodeAt(pos) === 46) {\n      pos++;\n      decimalFragment = scanNumberFragment();\n    }\n    var end = pos;\n    if (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101) {\n      pos++;\n      tokenFlags |= 16;\n      if (text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45)\n        pos++;\n      var preNumericPart = pos;\n      var finalFragment = scanNumberFragment();\n      if (!finalFragment) {\n        error(ts.Diagnostics.Digit_expected);\n      }\n      else {\n        scientificFragment = text.substring(end, preNumericPart) + finalFragment;\n        end = pos;\n      }\n    }\n    var result;\n    if (tokenFlags & 512) {\n      result = mainFragment;\n      if (decimalFragment) {\n        result += \".\" + decimalFragment;\n      }\n      if (scientificFragment) {\n        result += scientificFragment;\n      }\n    }\n    else {\n      result = text.substring(start, end);\n    }\n    if (decimalFragment !== undefined || tokenFlags & 16) {\n      checkForIdentifierStartAfterNumericLiteral(start, decimalFragment === undefined && !!(tokenFlags & 16));\n      return {\n        type: 8,\n        value: \"\" + +result\n      };\n    }\n    else {\n      tokenValue = result;\n      var type = checkBigIntSuffix();\n      checkForIdentifierStartAfterNumericLiteral(start);\n      return { type: type, value: tokenValue };\n    }\n  }\n  function checkForIdentifierStartAfterNumericLiteral(numericStart, isScientific) {\n    if (!isIdentifierStart(codePointAt(text, pos), languageVersion)) {\n      return;\n    }\n    var identifierStart = pos;\n    var length = scanIdentifierParts().length;\n    if (length === 1 && text[identifierStart] === \"n\") {\n      if (isScientific) {\n        error(ts.Diagnostics.A_bigint_literal_cannot_use_exponential_notation, numericStart, identifierStart - numericStart + 1);\n      }\n      else {\n        error(ts.Diagnostics.A_bigint_literal_must_be_an_integer, numericStart, identifierStart - numericStart + 1);\n      }\n    }\n    else {\n      error(ts.Diagnostics.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal, identifierStart, length);\n      pos = identifierStart;\n    }\n  }\n  function scanOctalDigits() {\n    var start = pos;\n    while (isOctalDigit(text.charCodeAt(pos))) {\n      pos++;\n    }\n    return +(text.substring(start, pos));\n  }\n  function scanExactNumberOfHexDigits(count, canHaveSeparators) {\n    var valueString = scanHexDigits(count, false, canHaveSeparators);\n    return valueString ? parseInt(valueString, 16) : -1;\n  }\n  function scanMinimumNumberOfHexDigits(count, canHaveSeparators) {\n    return scanHexDigits(count, true, canHaveSeparators);\n  }\n  function scanHexDigits(minCount, scanAsManyAsPossible, canHaveSeparators) {\n    var valueChars = [];\n    var allowSeparator = false;\n    var isPreviousTokenSeparator = false;\n    while (valueChars.length < minCount || scanAsManyAsPossible) {\n      var ch = text.charCodeAt(pos);\n      if (canHaveSeparators && ch === 95) {\n        tokenFlags |= 512;\n        if (allowSeparator) {\n          allowSeparator = false;\n          isPreviousTokenSeparator = true;\n        }\n        else if (isPreviousTokenSeparator) {\n          error(ts.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);\n        }\n        else {\n          error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);\n        }\n        pos++;\n        continue;\n      }\n      allowSeparator = canHaveSeparators;\n      if (ch >= 65 && ch <= 70) {\n        ch += 97 - 65;\n      }\n      else if (!((ch >= 48 && ch <= 57) ||\n        (ch >= 97 && ch <= 102))) {\n        break;\n      }\n      valueChars.push(ch);\n      pos++;\n      isPreviousTokenSeparator = false;\n    }\n    if (valueChars.length < minCount) {\n      valueChars = [];\n    }\n    if (text.charCodeAt(pos - 1) === 95) {\n      error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);\n    }\n    return String.fromCharCode.apply(String, valueChars);\n  }\n  function scanString(jsxAttributeString) {\n    if (jsxAttributeString === void 0) { jsxAttributeString = false; }\n    var quote = text.charCodeAt(pos);\n    pos++;\n    var result = \"\";\n    var start = pos;\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_string_literal);\n        break;\n      }\n      var ch = text.charCodeAt(pos);\n      if (ch === quote) {\n        result += text.substring(start, pos);\n        pos++;\n        break;\n      }\n      if (ch === 92 && !jsxAttributeString) {\n        result += text.substring(start, pos);\n        result += scanEscapeSequence();\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(ch) && !jsxAttributeString) {\n        result += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_string_literal);\n        break;\n      }\n      pos++;\n    }\n    return result;\n  }\n  function scanTemplateAndSetTokenValue() {\n    var startedWithBacktick = text.charCodeAt(pos) === 96;\n    pos++;\n    var start = pos;\n    var contents = \"\";\n    var resultingToken;\n    while (true) {\n      if (pos >= end) {\n        contents += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_template_literal);\n        resultingToken = startedWithBacktick ? 14 : 17;\n        break;\n      }\n      var currChar = text.charCodeAt(pos);\n      if (currChar === 96) {\n        contents += text.substring(start, pos);\n        pos++;\n        resultingToken = startedWithBacktick ? 14 : 17;\n        break;\n      }\n      if (currChar === 36 && pos + 1 < end && text.charCodeAt(pos + 1) === 123) {\n        contents += text.substring(start, pos);\n        pos += 2;\n        resultingToken = startedWithBacktick ? 15 : 16;\n        break;\n      }\n      if (currChar === 92) {\n        contents += text.substring(start, pos);\n        contents += scanEscapeSequence();\n        start = pos;\n        continue;\n      }\n      if (currChar === 13) {\n        contents += text.substring(start, pos);\n        pos++;\n        if (pos < end && text.charCodeAt(pos) === 10) {\n          pos++;\n        }\n        contents += \"\\n\";\n        start = pos;\n        continue;\n      }\n      pos++;\n    }\n    ts.Debug.assert(resultingToken !== undefined);\n    tokenValue = contents;\n    return resultingToken;\n  }\n  function scanEscapeSequence() {\n    pos++;\n    if (pos >= end) {\n      error(ts.Diagnostics.Unexpected_end_of_text);\n      return \"\";\n    }\n    var ch = text.charCodeAt(pos);\n    pos++;\n    switch (ch) {\n      case 48:\n        return \"\\0\";\n      case 98:\n        return \"\\b\";\n      case 116:\n        return \"\\t\";\n      case 110:\n        return \"\\n\";\n      case 118:\n        return \"\\v\";\n      case 102:\n        return \"\\f\";\n      case 114:\n        return \"\\r\";\n      case 39:\n        return \"\\'\";\n      case 34:\n        return \"\\\"\";\n      case 117:\n        if (pos < end && text.charCodeAt(pos) === 123) {\n          tokenFlags |= 8;\n          pos++;\n          return scanExtendedUnicodeEscape();\n        }\n        tokenFlags |= 1024;\n        return scanHexadecimalEscape(4);\n      case 120:\n        return scanHexadecimalEscape(2);\n      case 13:\n        if (pos < end && text.charCodeAt(pos) === 10) {\n          pos++;\n        }\n      case 10:\n      case 8232:\n      case 8233:\n        return \"\";\n      default:\n        return String.fromCharCode(ch);\n    }\n  }\n  function scanHexadecimalEscape(numDigits) {\n    var escapedValue = scanExactNumberOfHexDigits(numDigits, false);\n    if (escapedValue >= 0) {\n      return String.fromCharCode(escapedValue);\n    }\n    else {\n      error(ts.Diagnostics.Hexadecimal_digit_expected);\n      return \"\";\n    }\n  }\n  function scanExtendedUnicodeEscape() {\n    var escapedValueString = scanMinimumNumberOfHexDigits(1, false);\n    var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;\n    var isInvalidExtendedEscape = false;\n    if (escapedValue < 0) {\n      error(ts.Diagnostics.Hexadecimal_digit_expected);\n      isInvalidExtendedEscape = true;\n    }\n    else if (escapedValue > 0x10FFFF) {\n      error(ts.Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);\n      isInvalidExtendedEscape = true;\n    }\n    if (pos >= end) {\n      error(ts.Diagnostics.Unexpected_end_of_text);\n      isInvalidExtendedEscape = true;\n    }\n    else if (text.charCodeAt(pos) === 125) {\n      pos++;\n    }\n    else {\n      error(ts.Diagnostics.Unterminated_Unicode_escape_sequence);\n      isInvalidExtendedEscape = true;\n    }\n    if (isInvalidExtendedEscape) {\n      return \"\";\n    }\n    return utf16EncodeAsString(escapedValue);\n  }\n  function utf16EncodeAsString(codePoint) {\n    ts.Debug.assert(0x0 <= codePoint && codePoint <= 0x10FFFF);\n    if (codePoint <= 65535) {\n      return String.fromCharCode(codePoint);\n    }\n    var codeUnit1 = Math.floor((codePoint - 65536) / 1024) + 0xD800;\n    var codeUnit2 = ((codePoint - 65536) % 1024) + 0xDC00;\n    return String.fromCharCode(codeUnit1, codeUnit2);\n  }\n  function peekUnicodeEscape() {\n    if (pos + 5 < end && text.charCodeAt(pos + 1) === 117) {\n      var start_1 = pos;\n      pos += 2;\n      var value = scanExactNumberOfHexDigits(4, false);\n      pos = start_1;\n      return value;\n    }\n    return -1;\n  }\n  function peekExtendedUnicodeEscape() {\n    if (languageVersion >= 2 && codePointAt(text, pos + 1) === 117 && codePointAt(text, pos + 2) === 123) {\n      var start_2 = pos;\n      pos += 3;\n      var escapedValueString = scanMinimumNumberOfHexDigits(1, false);\n      var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;\n      pos = start_2;\n      return escapedValue;\n    }\n    return -1;\n  }\n  function scanIdentifierParts() {\n    var result = \"\";\n    var start = pos;\n    while (pos < end) {\n      var ch = codePointAt(text, pos);\n      if (isIdentifierPart(ch, languageVersion)) {\n        pos += charSize(ch);\n      }\n      else if (ch === 92) {\n        ch = peekExtendedUnicodeEscape();\n        if (ch >= 0 && isIdentifierPart(ch, languageVersion)) {\n          pos += 3;\n          tokenFlags |= 8;\n          result += scanExtendedUnicodeEscape();\n          start = pos;\n          continue;\n        }\n        ch = peekUnicodeEscape();\n        if (!(ch >= 0 && isIdentifierPart(ch, languageVersion))) {\n          break;\n        }\n        tokenFlags |= 1024;\n        result += text.substring(start, pos);\n        result += utf16EncodeAsString(ch);\n        pos += 6;\n        start = pos;\n      }\n      else {\n        break;\n      }\n    }\n    result += text.substring(start, pos);\n    return result;\n  }\n  function getIdentifierToken() {\n    var len = tokenValue.length;\n    if (len >= 2 && len <= 11) {\n      var ch = tokenValue.charCodeAt(0);\n      if (ch >= 97 && ch <= 122) {\n        var keyword = textToKeyword.get(tokenValue);\n        if (keyword !== undefined) {\n          return token = keyword;\n        }\n      }\n    }\n    return token = 75;\n  }\n  function scanBinaryOrOctalDigits(base) {\n    var value = \"\";\n    var separatorAllowed = false;\n    var isPreviousTokenSeparator = false;\n    while (true) {\n      var ch = text.charCodeAt(pos);\n      if (ch === 95) {\n        tokenFlags |= 512;\n        if (separatorAllowed) {\n          separatorAllowed = false;\n          isPreviousTokenSeparator = true;\n        }\n        else if (isPreviousTokenSeparator) {\n          error(ts.Diagnostics.Multiple_consecutive_numeric_separators_are_not_permitted, pos, 1);\n        }\n        else {\n          error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos, 1);\n        }\n        pos++;\n        continue;\n      }\n      separatorAllowed = true;\n      if (!isDigit(ch) || ch - 48 >= base) {\n        break;\n      }\n      value += text[pos];\n      pos++;\n      isPreviousTokenSeparator = false;\n    }\n    if (text.charCodeAt(pos - 1) === 95) {\n      error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);\n    }\n    return value;\n  }\n  function checkBigIntSuffix() {\n    if (text.charCodeAt(pos) === 110) {\n      tokenValue += \"n\";\n      if (tokenFlags & 384) {\n        tokenValue = ts.parsePseudoBigInt(tokenValue) + \"n\";\n      }\n      pos++;\n      return 9;\n    }\n    else {\n      var numericValue = tokenFlags & 128\n        ? parseInt(tokenValue.slice(2), 2)\n        : tokenFlags & 256\n          ? parseInt(tokenValue.slice(2), 8)\n          : +tokenValue;\n      tokenValue = \"\" + numericValue;\n      return 8;\n    }\n  }\n  function scan() {\n    var _a;\n    startPos = pos;\n    tokenFlags = 0;\n    var asteriskSeen = false;\n    while (true) {\n      tokenPos = pos;\n      if (pos >= end) {\n        return token = 1;\n      }\n      var ch = codePointAt(text, pos);\n      if (ch === 35 && pos === 0 && isShebangTrivia(text, pos)) {\n        pos = scanShebangTrivia(text, pos);\n        if (skipTrivia) {\n          continue;\n        }\n        else {\n          return token = 6;\n        }\n      }\n      switch (ch) {\n        case 10:\n        case 13:\n          tokenFlags |= 1;\n          if (skipTrivia) {\n            pos++;\n            continue;\n          }\n          else {\n            if (ch === 13 && pos + 1 < end && text.charCodeAt(pos + 1) === 10) {\n              pos += 2;\n            }\n            else {\n              pos++;\n            }\n            return token = 4;\n          }\n        case 9:\n        case 11:\n        case 12:\n        case 32:\n        case 160:\n        case 5760:\n        case 8192:\n        case 8193:\n        case 8194:\n        case 8195:\n        case 8196:\n        case 8197:\n        case 8198:\n        case 8199:\n        case 8200:\n        case 8201:\n        case 8202:\n        case 8203:\n        case 8239:\n        case 8287:\n        case 12288:\n        case 65279:\n          if (skipTrivia) {\n            pos++;\n            continue;\n          }\n          else {\n            while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {\n              pos++;\n            }\n            return token = 5;\n          }\n        case 33:\n          if (text.charCodeAt(pos + 1) === 61) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 37;\n            }\n            return pos += 2, token = 35;\n          }\n          pos++;\n          return token = 53;\n        case 34:\n        case 39:\n          tokenValue = scanString();\n          return token = 10;\n        case 96:\n          return token = scanTemplateAndSetTokenValue();\n        case 37:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 68;\n          }\n          pos++;\n          return token = 44;\n        case 38:\n          if (text.charCodeAt(pos + 1) === 38) {\n            return pos += 2, token = 55;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 72;\n          }\n          pos++;\n          return token = 50;\n        case 40:\n          pos++;\n          return token = 20;\n        case 41:\n          pos++;\n          return token = 21;\n        case 42:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 65;\n          }\n          if (text.charCodeAt(pos + 1) === 42) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 66;\n            }\n            return pos += 2, token = 42;\n          }\n          pos++;\n          if (inJSDocType && !asteriskSeen && (tokenFlags & 1)) {\n            asteriskSeen = true;\n            continue;\n          }\n          return token = 41;\n        case 43:\n          if (text.charCodeAt(pos + 1) === 43) {\n            return pos += 2, token = 45;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 63;\n          }\n          pos++;\n          return token = 39;\n        case 44:\n          pos++;\n          return token = 27;\n        case 45:\n          if (text.charCodeAt(pos + 1) === 45) {\n            return pos += 2, token = 46;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 64;\n          }\n          pos++;\n          return token = 40;\n        case 46:\n          if (isDigit(text.charCodeAt(pos + 1))) {\n            tokenValue = scanNumber().value;\n            return token = 8;\n          }\n          if (text.charCodeAt(pos + 1) === 46 && text.charCodeAt(pos + 2) === 46) {\n            return pos += 3, token = 25;\n          }\n          pos++;\n          return token = 24;\n        case 47:\n          if (text.charCodeAt(pos + 1) === 47) {\n            pos += 2;\n            while (pos < end) {\n              if (isLineBreak(text.charCodeAt(pos))) {\n                break;\n              }\n              pos++;\n            }\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 2;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 42) {\n            pos += 2;\n            if (text.charCodeAt(pos) === 42 && text.charCodeAt(pos + 1) !== 47) {\n              tokenFlags |= 2;\n            }\n            var commentClosed = false;\n            while (pos < end) {\n              var ch_1 = text.charCodeAt(pos);\n              if (ch_1 === 42 && text.charCodeAt(pos + 1) === 47) {\n                pos += 2;\n                commentClosed = true;\n                break;\n              }\n              if (isLineBreak(ch_1)) {\n                tokenFlags |= 1;\n              }\n              pos++;\n            }\n            if (!commentClosed) {\n              error(ts.Diagnostics.Asterisk_Slash_expected);\n            }\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              if (!commentClosed) {\n                tokenFlags |= 4;\n              }\n              return token = 3;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 67;\n          }\n          pos++;\n          return token = 43;\n        case 48:\n          if (pos + 2 < end && (text.charCodeAt(pos + 1) === 88 || text.charCodeAt(pos + 1) === 120)) {\n            pos += 2;\n            tokenValue = scanMinimumNumberOfHexDigits(1, true);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Hexadecimal_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0x\" + tokenValue;\n            tokenFlags |= 64;\n            return token = checkBigIntSuffix();\n          }\n          else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 66 || text.charCodeAt(pos + 1) === 98)) {\n            pos += 2;\n            tokenValue = scanBinaryOrOctalDigits(2);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Binary_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0b\" + tokenValue;\n            tokenFlags |= 128;\n            return token = checkBigIntSuffix();\n          }\n          else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 79 || text.charCodeAt(pos + 1) === 111)) {\n            pos += 2;\n            tokenValue = scanBinaryOrOctalDigits(8);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Octal_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0o\" + tokenValue;\n            tokenFlags |= 256;\n            return token = checkBigIntSuffix();\n          }\n          if (pos + 1 < end && isOctalDigit(text.charCodeAt(pos + 1))) {\n            tokenValue = \"\" + scanOctalDigits();\n            tokenFlags |= 32;\n            return token = 8;\n          }\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          (_a = scanNumber(), token = _a.type, tokenValue = _a.value);\n          return token;\n        case 58:\n          pos++;\n          return token = 58;\n        case 59:\n          pos++;\n          return token = 26;\n        case 60:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 60) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 69;\n            }\n            return pos += 2, token = 47;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 32;\n          }\n          if (languageVariant === 1 &&\n            text.charCodeAt(pos + 1) === 47 &&\n            text.charCodeAt(pos + 2) !== 42) {\n            return pos += 2, token = 30;\n          }\n          pos++;\n          return token = 29;\n        case 61:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 36;\n            }\n            return pos += 2, token = 34;\n          }\n          if (text.charCodeAt(pos + 1) === 62) {\n            return pos += 2, token = 38;\n          }\n          pos++;\n          return token = 62;\n        case 62:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          pos++;\n          return token = 31;\n        case 63:\n          pos++;\n          if (text.charCodeAt(pos) === 46 && !isDigit(text.charCodeAt(pos + 1))) {\n            pos++;\n            return token = 28;\n          }\n          if (text.charCodeAt(pos) === 63) {\n            pos++;\n            return token = 60;\n          }\n          return token = 57;\n        case 91:\n          pos++;\n          return token = 22;\n        case 93:\n          pos++;\n          return token = 23;\n        case 94:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 74;\n          }\n          pos++;\n          return token = 52;\n        case 123:\n          pos++;\n          return token = 18;\n        case 124:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 124) {\n            return pos += 2, token = 56;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 73;\n          }\n          pos++;\n          return token = 51;\n        case 125:\n          pos++;\n          return token = 19;\n        case 126:\n          pos++;\n          return token = 54;\n        case 64:\n          pos++;\n          return token = 59;\n        case 92:\n          var extendedCookedChar = peekExtendedUnicodeEscape();\n          if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {\n            pos += 3;\n            tokenFlags |= 8;\n            tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();\n            return token = getIdentifierToken();\n          }\n          var cookedChar = peekUnicodeEscape();\n          if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n            pos += 6;\n            tokenFlags |= 1024;\n            tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n            return token = getIdentifierToken();\n          }\n          error(ts.Diagnostics.Invalid_character);\n          pos++;\n          return token = 0;\n        default:\n          if (isIdentifierStart(ch, languageVersion)) {\n            pos += charSize(ch);\n            while (pos < end && isIdentifierPart(ch = codePointAt(text, pos), languageVersion))\n              pos += charSize(ch);\n            tokenValue = text.substring(tokenPos, pos);\n            if (ch === 92) {\n              tokenValue += scanIdentifierParts();\n            }\n            return token = getIdentifierToken();\n          }\n          else if (isWhiteSpaceSingleLine(ch)) {\n            pos += charSize(ch);\n            continue;\n          }\n          else if (isLineBreak(ch)) {\n            tokenFlags |= 1;\n            pos += charSize(ch);\n            continue;\n          }\n          error(ts.Diagnostics.Invalid_character);\n          pos += charSize(ch);\n          return token = 0;\n      }\n    }\n  }\n  function reScanGreaterToken() {\n    if (token === 31) {\n      if (text.charCodeAt(pos) === 62) {\n        if (text.charCodeAt(pos + 1) === 62) {\n          if (text.charCodeAt(pos + 2) === 61) {\n            return pos += 3, token = 71;\n          }\n          return pos += 2, token = 49;\n        }\n        if (text.charCodeAt(pos + 1) === 61) {\n          return pos += 2, token = 70;\n        }\n        pos++;\n        return token = 48;\n      }\n      if (text.charCodeAt(pos) === 61) {\n        pos++;\n        return token = 33;\n      }\n    }\n    return token;\n  }\n  function reScanSlashToken() {\n    if (token === 43 || token === 67) {\n      var p = tokenPos + 1;\n      var inEscape = false;\n      var inCharacterClass = false;\n      while (true) {\n        if (p >= end) {\n          tokenFlags |= 4;\n          error(ts.Diagnostics.Unterminated_regular_expression_literal);\n          break;\n        }\n        var ch = text.charCodeAt(p);\n        if (isLineBreak(ch)) {\n          tokenFlags |= 4;\n          error(ts.Diagnostics.Unterminated_regular_expression_literal);\n          break;\n        }\n        if (inEscape) {\n          inEscape = false;\n        }\n        else if (ch === 47 && !inCharacterClass) {\n          p++;\n          break;\n        }\n        else if (ch === 91) {\n          inCharacterClass = true;\n        }\n        else if (ch === 92) {\n          inEscape = true;\n        }\n        else if (ch === 93) {\n          inCharacterClass = false;\n        }\n        p++;\n      }\n      while (p < end && isIdentifierPart(text.charCodeAt(p), languageVersion)) {\n        p++;\n      }\n      pos = p;\n      tokenValue = text.substring(tokenPos, pos);\n      token = 13;\n    }\n    return token;\n  }\n  function reScanTemplateToken() {\n    ts.Debug.assert(token === 19, \"'reScanTemplateToken' should only be called on a '}'\");\n    pos = tokenPos;\n    return token = scanTemplateAndSetTokenValue();\n  }\n  function reScanJsxToken() {\n    pos = tokenPos = startPos;\n    return token = scanJsxToken();\n  }\n  function reScanLessThanToken() {\n    if (token === 47) {\n      pos = tokenPos + 1;\n      return token = 29;\n    }\n    return token;\n  }\n  function reScanQuestionToken() {\n    ts.Debug.assert(token === 60, \"'reScanQuestionToken' should only be called on a '??'\");\n    pos = tokenPos + 1;\n    return token = 57;\n  }\n  function scanJsxToken() {\n    startPos = tokenPos = pos;\n    if (pos >= end) {\n      return token = 1;\n    }\n    var char = text.charCodeAt(pos);\n    if (char === 60) {\n      if (text.charCodeAt(pos + 1) === 47) {\n        pos += 2;\n        return token = 30;\n      }\n      pos++;\n      return token = 29;\n    }\n    if (char === 123) {\n      pos++;\n      return token = 18;\n    }\n    var firstNonWhitespace = 0;\n    while (pos < end) {\n      char = text.charCodeAt(pos);\n      if (char === 123) {\n        break;\n      }\n      if (char === 60) {\n        if (isConflictMarkerTrivia(text, pos)) {\n          pos = scanConflictMarkerTrivia(text, pos, error);\n          return token = 7;\n        }\n        break;\n      }\n      if (isLineBreak(char) && firstNonWhitespace === 0) {\n        firstNonWhitespace = -1;\n      }\n      else if (!isWhiteSpaceLike(char)) {\n        firstNonWhitespace = pos;\n      }\n      pos++;\n    }\n    tokenValue = text.substring(startPos, pos);\n    return firstNonWhitespace === -1 ? 12 : 11;\n  }\n  function scanJsxIdentifier() {\n    if (tokenIsIdentifierOrKeyword(token)) {\n      while (pos < end) {\n        var ch = text.charCodeAt(pos);\n        if (ch === 45) {\n          tokenValue += \"-\";\n          pos++;\n          continue;\n        }\n        var oldPos = pos;\n        tokenValue += scanIdentifierParts();\n        if (pos === oldPos) {\n          break;\n        }\n      }\n    }\n    return token;\n  }\n  function scanJsxAttributeValue() {\n    startPos = pos;\n    switch (text.charCodeAt(pos)) {\n      case 34:\n      case 39:\n        tokenValue = scanString(true);\n        return token = 10;\n      default:\n        return scan();\n    }\n  }\n  function scanJsDocToken() {\n    startPos = tokenPos = pos;\n    tokenFlags = 0;\n    if (pos >= end) {\n      return token = 1;\n    }\n    var ch = codePointAt(text, pos);\n    pos += charSize(ch);\n    switch (ch) {\n      case 9:\n      case 11:\n      case 12:\n      case 32:\n        while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {\n          pos++;\n        }\n        return token = 5;\n      case 64:\n        return token = 59;\n      case 10:\n      case 13:\n        tokenFlags |= 1;\n        return token = 4;\n      case 42:\n        return token = 41;\n      case 123:\n        return token = 18;\n      case 125:\n        return token = 19;\n      case 91:\n        return token = 22;\n      case 93:\n        return token = 23;\n      case 60:\n        return token = 29;\n      case 62:\n        return token = 31;\n      case 61:\n        return token = 62;\n      case 44:\n        return token = 27;\n      case 46:\n        return token = 24;\n      case 96:\n        return token = 61;\n      case 92:\n        pos--;\n        var extendedCookedChar = peekExtendedUnicodeEscape();\n        if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {\n          pos += 3;\n          tokenFlags |= 8;\n          tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();\n          return token = getIdentifierToken();\n        }\n        var cookedChar = peekUnicodeEscape();\n        if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n          pos += 6;\n          tokenFlags |= 1024;\n          tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n          return token = getIdentifierToken();\n        }\n        pos++;\n        return token = 0;\n    }\n    if (isIdentifierStart(ch, languageVersion)) {\n      var char = ch;\n      while (pos < end && isIdentifierPart(char = codePointAt(text, pos), languageVersion) || text.charCodeAt(pos) === 45)\n        pos += charSize(char);\n      tokenValue = text.substring(tokenPos, pos);\n      if (char === 92) {\n        tokenValue += scanIdentifierParts();\n      }\n      return token = getIdentifierToken();\n    }\n    else {\n      return token = 0;\n    }\n  }\n  function speculationHelper(callback, isLookahead) {\n    var savePos = pos;\n    var saveStartPos = startPos;\n    var saveTokenPos = tokenPos;\n    var saveToken = token;\n    var saveTokenValue = tokenValue;\n    var saveTokenFlags = tokenFlags;\n    var result = callback();\n    if (!result || isLookahead) {\n      pos = savePos;\n      startPos = saveStartPos;\n      tokenPos = saveTokenPos;\n      token = saveToken;\n      tokenValue = saveTokenValue;\n      tokenFlags = saveTokenFlags;\n    }\n    return result;\n  }\n  function scanRange(start, length, callback) {\n    var saveEnd = end;\n    var savePos = pos;\n    var saveStartPos = startPos;\n    var saveTokenPos = tokenPos;\n    var saveToken = token;\n    var saveTokenValue = tokenValue;\n    var saveTokenFlags = tokenFlags;\n    setText(text, start, length);\n    var result = callback();\n    end = saveEnd;\n    pos = savePos;\n    startPos = saveStartPos;\n    tokenPos = saveTokenPos;\n    token = saveToken;\n    tokenValue = saveTokenValue;\n    tokenFlags = saveTokenFlags;\n    return result;\n  }\n  function lookAhead(callback) {\n    return speculationHelper(callback, true);\n  }\n  function tryScan(callback) {\n    return speculationHelper(callback, false);\n  }\n  function getText() {\n    return text;\n  }\n  function setText(newText, start, length) {\n    text = newText || \"\";\n    end = length === undefined ? text.length : start + length;\n    setTextPos(start || 0);\n  }\n  function setOnError(errorCallback) {\n    onError = errorCallback;\n  }\n  function setScriptTarget(scriptTarget) {\n    languageVersion = scriptTarget;\n  }\n  function setLanguageVariant(variant) {\n    languageVariant = variant;\n  }\n  function setTextPos(textPos) {\n    ts.Debug.assert(textPos >= 0);\n    pos = textPos;\n    startPos = textPos;\n    tokenPos = textPos;\n    token = 0;\n    tokenValue = undefined;\n    tokenFlags = 0;\n  }\n  function setInJSDocType(inType) {\n    inJSDocType += inType ? 1 : -1;\n  }\n}\n\n","date":"2020-02-11T09:48:37.343Z","updated":"2020-02-11T09:48:37.343Z","path":"daily-news/assets/typescript-scanner.js","layout":"false","title":"","comments":1,"_id":"ck6hpsazh005cckufxuywynuc","content":"function createScanner(languageVersion, skipTrivia, languageVariant, textInitial, onError, start, length) {\n  if (languageVariant === void 0) { languageVariant = 0; }\n  var text = textInitial;\n  var pos;\n  var end;\n  var startPos;\n  var tokenPos;\n  var token;\n  var tokenValue;\n  var tokenFlags;\n  var inJSDocType = 0;\n  setText(text, start, length);\n  var scanner = {\n    getStartPos: function () { return startPos; },\n    getTextPos: function () { return pos; },\n    getToken: function () { return token; },\n    getTokenPos: function () { return tokenPos; },\n    getTokenText: function () { return text.substring(tokenPos, pos); },\n    getTokenValue: function () { return tokenValue; },\n    hasUnicodeEscape: function () { return (tokenFlags & 1024) !== 0; },\n    hasExtendedUnicodeEscape: function () { return (tokenFlags & 8) !== 0; },\n    hasPrecedingLineBreak: function () { return (tokenFlags & 1) !== 0; },\n    isIdentifier: function () { return token === 75 || token > 111; },\n    isReservedWord: function () { return token >= 76 && token <= 1=\"\" 43=\"\" 69=\"\" 111;=\"\" },=\"\" isunterminated:=\"\" function=\"\" ()=\"\" {=\"\" return=\"\" (tokenflags=\"\" &=\"\" 4)=\"\" !=\"=\" 0;=\"\" gettokenflags:=\"\" tokenflags;=\"\" rescangreatertoken:=\"\" rescangreatertoken,=\"\" rescanslashtoken:=\"\" rescanslashtoken,=\"\" rescantemplatetoken:=\"\" rescantemplatetoken,=\"\" scanjsxidentifier:=\"\" scanjsxidentifier,=\"\" scanjsxattributevalue:=\"\" scanjsxattributevalue,=\"\" rescanjsxtoken:=\"\" rescanjsxtoken,=\"\" rescanlessthantoken:=\"\" rescanlessthantoken,=\"\" rescanquestiontoken:=\"\" rescanquestiontoken,=\"\" scanjsxtoken:=\"\" scanjsxtoken,=\"\" scanjsdoctoken:=\"\" scanjsdoctoken,=\"\" scan:=\"\" scan,=\"\" gettext:=\"\" gettext,=\"\" settext:=\"\" settext,=\"\" setscripttarget:=\"\" setscripttarget,=\"\" setlanguagevariant:=\"\" setlanguagevariant,=\"\" setonerror:=\"\" setonerror,=\"\" settextpos:=\"\" settextpos,=\"\" setinjsdoctype:=\"\" setinjsdoctype,=\"\" tryscan:=\"\" tryscan,=\"\" lookahead:=\"\" lookahead,=\"\" scanrange:=\"\" scanrange,=\"\" };=\"\" if=\"\" (ts.debug.isdebugging)=\"\" object.defineproperty(scanner,=\"\" \"__debugshowcurrentpositionintext\",=\"\" get:=\"\" var=\"\" text=\"scanner.getText();\" text.slice(0,=\"\" scanner.getstartpos())=\"\" +=\"\" \"║\"=\"\" text.slice(scanner.getstartpos());=\"\" });=\"\" }=\"\" scanner;=\"\" error(message,=\"\" errpos,=\"\" length)=\"\" (errpos=\"==\" void=\"\" 0)=\"\" errpos=\"pos;\" (onerror)=\"\" oldpos=\"pos;\" pos=\"errPos;\" onerror(message,=\"\" length=\"\" ||=\"\" 0);=\"\" scannumberfragment()=\"\" start=\"pos;\" allowseparator=\"false;\" isprevioustokenseparator=\"false;\" result=\"\" ;=\"\" while=\"\" (true)=\"\" ch=\"text.charCodeAt(pos);\" (ch=\"==\" 95)=\"\" tokenflags=\"\" |=\"512;\" (allowseparator)=\"\" pos);=\"\" else=\"\" (isprevioustokenseparator)=\"\" error(ts.diagnostics.multiple_consecutive_numeric_separators_are_not_permitted,=\"\" pos,=\"\" 1);=\"\" error(ts.diagnostics.numeric_separators_are_not_allowed_here,=\"\" pos++;=\"\" continue;=\"\" (isdigit(ch))=\"\" break;=\"\" (text.charcodeat(pos=\"\" -=\"\" 1)=\"==\" 1,=\"\" text.substring(start,=\"\" scannumber()=\"\" mainfragment=\"scanNumberFragment();\" decimalfragment;=\"\" scientificfragment;=\"\" (text.charcodeat(pos)=\"==\" 46)=\"\" decimalfragment=\"scanNumberFragment();\" end=\"pos;\" text.charcodeat(pos)=\"==\" 101)=\"\" 45)=\"\" prenumericpart=\"pos;\" finalfragment=\"scanNumberFragment();\" (!finalfragment)=\"\" error(ts.diagnostics.digit_expected);=\"\" scientificfragment=\"text.substring(end,\" prenumericpart)=\"\" finalfragment;=\"\" result;=\"\" 512)=\"\" (decimalfragment)=\"\" (scientificfragment)=\"\" end);=\"\" (decimalfragment=\"\" undefined=\"\" 16)=\"\" checkforidentifierstartafternumericliteral(start,=\"\" &&=\"\" !!(tokenflags=\"\" 16));=\"\" type:=\"\" 8,=\"\" value:=\"\" \"\"=\"\" +result=\"\" tokenvalue=\"result;\" type=\"checkBigIntSuffix();\" checkforidentifierstartafternumericliteral(start);=\"\" type,=\"\" checkforidentifierstartafternumericliteral(numericstart,=\"\" isscientific)=\"\" (!isidentifierstart(codepointat(text,=\"\" pos),=\"\" languageversion))=\"\" return;=\"\" identifierstart=\"pos;\" (length=\"==\" text[identifierstart]=\"==\" \"n\")=\"\" (isscientific)=\"\" error(ts.diagnostics.a_bigint_literal_cannot_use_exponential_notation,=\"\" numericstart,=\"\" numericstart=\"\" error(ts.diagnostics.a_bigint_literal_must_be_an_integer,=\"\" error(ts.diagnostics.an_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal,=\"\" identifierstart,=\"\" length);=\"\" scanoctaldigits()=\"\" (isoctaldigit(text.charcodeat(pos)))=\"\" +(text.substring(start,=\"\" pos));=\"\" scanexactnumberofhexdigits(count,=\"\" canhaveseparators)=\"\" valuestring=\"scanHexDigits(count,\" false,=\"\" canhaveseparators);=\"\" ?=\"\" parseint(valuestring,=\"\" :=\"\" -1;=\"\" scanminimumnumberofhexdigits(count,=\"\" scanhexdigits(count,=\"\" true,=\"\" scanhexdigits(mincount,=\"\" scanasmanyaspossible,=\"\" valuechars=\"[];\" (valuechars.length=\"\" <=\"\" mincount=\"\" scanasmanyaspossible)=\"\" (canhaveseparators=\"\">= 65 && ch <= 70)=\"\" {=\"\" ch=\"\" +=\"97\" -=\"\" 65;=\"\" }=\"\" else=\"\" if=\"\" (!((ch=\"\">= 48 && ch <= 57)=\"\" ||=\"\" (ch=\"\">= 97 && ch <= 102)))=\"\" {=\"\" break;=\"\" }=\"\" valuechars.push(ch);=\"\" pos++;=\"\" isprevioustokenseparator=\"false;\" if=\"\" (valuechars.length=\"\" <=\"\" mincount)=\"\" valuechars=\"[];\" (text.charcodeat(pos=\"\" -=\"\" 1)=\"==\" 95)=\"\" error(ts.diagnostics.numeric_separators_are_not_allowed_here,=\"\" pos=\"\" 1,=\"\" 1);=\"\" return=\"\" string.fromcharcode.apply(string,=\"\" valuechars);=\"\" function=\"\" scanstring(jsxattributestring)=\"\" (jsxattributestring=\"==\" void=\"\" 0)=\"\" jsxattributestring=\"false;\" var=\"\" quote=\"text.charCodeAt(pos);\" result=\"\" ;=\"\" start=\"pos;\" while=\"\" (true)=\"\" (pos=\"\">= end) {\n        result += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_string_literal);\n        break;\n      }\n      var ch = text.charCodeAt(pos);\n      if (ch === quote) {\n        result += text.substring(start, pos);\n        pos++;\n        break;\n      }\n      if (ch === 92 && !jsxAttributeString) {\n        result += text.substring(start, pos);\n        result += scanEscapeSequence();\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(ch) && !jsxAttributeString) {\n        result += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_string_literal);\n        break;\n      }\n      pos++;\n    }\n    return result;\n  }\n  function scanTemplateAndSetTokenValue() {\n    var startedWithBacktick = text.charCodeAt(pos) === 96;\n    pos++;\n    var start = pos;\n    var contents = \"\";\n    var resultingToken;\n    while (true) {\n      if (pos >= end) {\n        contents += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_template_literal);\n        resultingToken = startedWithBacktick ? 14 : 17;\n        break;\n      }\n      var currChar = text.charCodeAt(pos);\n      if (currChar === 96) {\n        contents += text.substring(start, pos);\n        pos++;\n        resultingToken = startedWithBacktick ? 14 : 17;\n        break;\n      }\n      if (currChar === 36 && pos + 1 < end && text.charCodeAt(pos + 1) === 123) {\n        contents += text.substring(start, pos);\n        pos += 2;\n        resultingToken = startedWithBacktick ? 15 : 16;\n        break;\n      }\n      if (currChar === 92) {\n        contents += text.substring(start, pos);\n        contents += scanEscapeSequence();\n        start = pos;\n        continue;\n      }\n      if (currChar === 13) {\n        contents += text.substring(start, pos);\n        pos++;\n        if (pos < end && text.charCodeAt(pos) === 10) {\n          pos++;\n        }\n        contents += \"\\n\";\n        start = pos;\n        continue;\n      }\n      pos++;\n    }\n    ts.Debug.assert(resultingToken !== undefined);\n    tokenValue = contents;\n    return resultingToken;\n  }\n  function scanEscapeSequence() {\n    pos++;\n    if (pos >= end) {\n      error(ts.Diagnostics.Unexpected_end_of_text);\n      return \"\";\n    }\n    var ch = text.charCodeAt(pos);\n    pos++;\n    switch (ch) {\n      case 48:\n        return \"\\0\";\n      case 98:\n        return \"\\b\";\n      case 116:\n        return \"\\t\";\n      case 110:\n        return \"\\n\";\n      case 118:\n        return \"\\v\";\n      case 102:\n        return \"\\f\";\n      case 114:\n        return \"\\r\";\n      case 39:\n        return \"\\'\";\n      case 34:\n        return \"\\\"\";\n      case 117:\n        if (pos < end && text.charCodeAt(pos) === 123) {\n          tokenFlags |= 8;\n          pos++;\n          return scanExtendedUnicodeEscape();\n        }\n        tokenFlags |= 1024;\n        return scanHexadecimalEscape(4);\n      case 120:\n        return scanHexadecimalEscape(2);\n      case 13:\n        if (pos < end && text.charCodeAt(pos) === 10) {\n          pos++;\n        }\n      case 10:\n      case 8232:\n      case 8233:\n        return \"\";\n      default:\n        return String.fromCharCode(ch);\n    }\n  }\n  function scanHexadecimalEscape(numDigits) {\n    var escapedValue = scanExactNumberOfHexDigits(numDigits, false);\n    if (escapedValue >= 0) {\n      return String.fromCharCode(escapedValue);\n    }\n    else {\n      error(ts.Diagnostics.Hexadecimal_digit_expected);\n      return \"\";\n    }\n  }\n  function scanExtendedUnicodeEscape() {\n    var escapedValueString = scanMinimumNumberOfHexDigits(1, false);\n    var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;\n    var isInvalidExtendedEscape = false;\n    if (escapedValue < 0) {\n      error(ts.Diagnostics.Hexadecimal_digit_expected);\n      isInvalidExtendedEscape = true;\n    }\n    else if (escapedValue > 0x10FFFF) {\n      error(ts.Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);\n      isInvalidExtendedEscape = true;\n    }\n    if (pos >= end) {\n      error(ts.Diagnostics.Unexpected_end_of_text);\n      isInvalidExtendedEscape = true;\n    }\n    else if (text.charCodeAt(pos) === 125) {\n      pos++;\n    }\n    else {\n      error(ts.Diagnostics.Unterminated_Unicode_escape_sequence);\n      isInvalidExtendedEscape = true;\n    }\n    if (isInvalidExtendedEscape) {\n      return \"\";\n    }\n    return utf16EncodeAsString(escapedValue);\n  }\n  function utf16EncodeAsString(codePoint) {\n    ts.Debug.assert(0x0 <= 5=\"\" codepoint=\"\" &&=\"\" <=\"0x10FFFF);\" if=\"\" (codepoint=\"\" {=\"\" return=\"\" string.fromcharcode(codepoint);=\"\" }=\"\" var=\"\" codeunit1=\"Math.floor((codePoint\" -=\"\" 65536)=\"\" 1024)=\"\" +=\"\" 0xd800;=\"\" codeunit2=\"((codePoint\" %=\"\" 0xdc00;=\"\" string.fromcharcode(codeunit1,=\"\" codeunit2);=\"\" function=\"\" peekunicodeescape()=\"\" (pos=\"\" end=\"\" text.charcodeat(pos=\"\" 1)=\"==\" 117)=\"\" start_1=\"pos;\" pos=\"\" value=\"scanExactNumberOfHexDigits(4,\" false);=\"\" value;=\"\" -1;=\"\" peekextendedunicodeescape()=\"\" (languageversion=\"\">= 2 && codePointAt(text, pos + 1) === 117 && codePointAt(text, pos + 2) === 123) {\n      var start_2 = pos;\n      pos += 3;\n      var escapedValueString = scanMinimumNumberOfHexDigits(1, false);\n      var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;\n      pos = start_2;\n      return escapedValue;\n    }\n    return -1;\n  }\n  function scanIdentifierParts() {\n    var result = \"\";\n    var start = pos;\n    while (pos < end) {\n      var ch = codePointAt(text, pos);\n      if (isIdentifierPart(ch, languageVersion)) {\n        pos += charSize(ch);\n      }\n      else if (ch === 92) {\n        ch = peekExtendedUnicodeEscape();\n        if (ch >= 0 && isIdentifierPart(ch, languageVersion)) {\n          pos += 3;\n          tokenFlags |= 8;\n          result += scanExtendedUnicodeEscape();\n          start = pos;\n          continue;\n        }\n        ch = peekUnicodeEscape();\n        if (!(ch >= 0 && isIdentifierPart(ch, languageVersion))) {\n          break;\n        }\n        tokenFlags |= 1024;\n        result += text.substring(start, pos);\n        result += utf16EncodeAsString(ch);\n        pos += 6;\n        start = pos;\n      }\n      else {\n        break;\n      }\n    }\n    result += text.substring(start, pos);\n    return result;\n  }\n  function getIdentifierToken() {\n    var len = tokenValue.length;\n    if (len >= 2 && len <= 11)=\"\" {=\"\" var=\"\" ch=\"tokenValue.charCodeAt(0);\" if=\"\" (ch=\"\">= 97 && ch <= 48=\"\" 122)=\"\" {=\"\" var=\"\" keyword=\"textToKeyword.get(tokenValue);\" if=\"\" (keyword=\"\" !=\"=\" undefined)=\"\" return=\"\" token=\"keyword;\" }=\"\" function=\"\" scanbinaryoroctaldigits(base)=\"\" value=\"\" ;=\"\" separatorallowed=\"false;\" isprevioustokenseparator=\"false;\" while=\"\" (true)=\"\" ch=\"text.charCodeAt(pos);\" (ch=\"==\" 95)=\"\" tokenflags=\"\" |=\"512;\" (separatorallowed)=\"\" else=\"\" (isprevioustokenseparator)=\"\" error(ts.diagnostics.multiple_consecutive_numeric_separators_are_not_permitted,=\"\" pos,=\"\" 1);=\"\" error(ts.diagnostics.numeric_separators_are_not_allowed_here,=\"\" pos++;=\"\" continue;=\"\" (!isdigit(ch)=\"\" ||=\"\" -=\"\">= base) {\n        break;\n      }\n      value += text[pos];\n      pos++;\n      isPreviousTokenSeparator = false;\n    }\n    if (text.charCodeAt(pos - 1) === 95) {\n      error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);\n    }\n    return value;\n  }\n  function checkBigIntSuffix() {\n    if (text.charCodeAt(pos) === 110) {\n      tokenValue += \"n\";\n      if (tokenFlags & 384) {\n        tokenValue = ts.parsePseudoBigInt(tokenValue) + \"n\";\n      }\n      pos++;\n      return 9;\n    }\n    else {\n      var numericValue = tokenFlags & 128\n        ? parseInt(tokenValue.slice(2), 2)\n        : tokenFlags & 256\n          ? parseInt(tokenValue.slice(2), 8)\n          : +tokenValue;\n      tokenValue = \"\" + numericValue;\n      return 8;\n    }\n  }\n  function scan() {\n    var _a;\n    startPos = pos;\n    tokenFlags = 0;\n    var asteriskSeen = false;\n    while (true) {\n      tokenPos = pos;\n      if (pos >= end) {\n        return token = 1;\n      }\n      var ch = codePointAt(text, pos);\n      if (ch === 35 && pos === 0 && isShebangTrivia(text, pos)) {\n        pos = scanShebangTrivia(text, pos);\n        if (skipTrivia) {\n          continue;\n        }\n        else {\n          return token = 6;\n        }\n      }\n      switch (ch) {\n        case 10:\n        case 13:\n          tokenFlags |= 1;\n          if (skipTrivia) {\n            pos++;\n            continue;\n          }\n          else {\n            if (ch === 13 && pos + 1 < end && text.charCodeAt(pos + 1) === 10) {\n              pos += 2;\n            }\n            else {\n              pos++;\n            }\n            return token = 4;\n          }\n        case 9:\n        case 11:\n        case 12:\n        case 32:\n        case 160:\n        case 5760:\n        case 8192:\n        case 8193:\n        case 8194:\n        case 8195:\n        case 8196:\n        case 8197:\n        case 8198:\n        case 8199:\n        case 8200:\n        case 8201:\n        case 8202:\n        case 8203:\n        case 8239:\n        case 8287:\n        case 12288:\n        case 65279:\n          if (skipTrivia) {\n            pos++;\n            continue;\n          }\n          else {\n            while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {\n              pos++;\n            }\n            return token = 5;\n          }\n        case 33:\n          if (text.charCodeAt(pos + 1) === 61) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 37;\n            }\n            return pos += 2, token = 35;\n          }\n          pos++;\n          return token = 53;\n        case 34:\n        case 39:\n          tokenValue = scanString();\n          return token = 10;\n        case 96:\n          return token = scanTemplateAndSetTokenValue();\n        case 37:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 68;\n          }\n          pos++;\n          return token = 44;\n        case 38:\n          if (text.charCodeAt(pos + 1) === 38) {\n            return pos += 2, token = 55;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 72;\n          }\n          pos++;\n          return token = 50;\n        case 40:\n          pos++;\n          return token = 20;\n        case 41:\n          pos++;\n          return token = 21;\n        case 42:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 65;\n          }\n          if (text.charCodeAt(pos + 1) === 42) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 66;\n            }\n            return pos += 2, token = 42;\n          }\n          pos++;\n          if (inJSDocType && !asteriskSeen && (tokenFlags & 1)) {\n            asteriskSeen = true;\n            continue;\n          }\n          return token = 41;\n        case 43:\n          if (text.charCodeAt(pos + 1) === 43) {\n            return pos += 2, token = 45;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 63;\n          }\n          pos++;\n          return token = 39;\n        case 44:\n          pos++;\n          return token = 27;\n        case 45:\n          if (text.charCodeAt(pos + 1) === 45) {\n            return pos += 2, token = 46;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 64;\n          }\n          pos++;\n          return token = 40;\n        case 46:\n          if (isDigit(text.charCodeAt(pos + 1))) {\n            tokenValue = scanNumber().value;\n            return token = 8;\n          }\n          if (text.charCodeAt(pos + 1) === 46 && text.charCodeAt(pos + 2) === 46) {\n            return pos += 3, token = 25;\n          }\n          pos++;\n          return token = 24;\n        case 47:\n          if (text.charCodeAt(pos + 1) === 47) {\n            pos += 2;\n            while (pos < end) {\n              if (isLineBreak(text.charCodeAt(pos))) {\n                break;\n              }\n              pos++;\n            }\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 2;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 42) {\n            pos += 2;\n            if (text.charCodeAt(pos) === 42 && text.charCodeAt(pos + 1) !== 47) {\n              tokenFlags |= 2;\n            }\n            var commentClosed = false;\n            while (pos < end) {\n              var ch_1 = text.charCodeAt(pos);\n              if (ch_1 === 42 && text.charCodeAt(pos + 1) === 47) {\n                pos += 2;\n                commentClosed = true;\n                break;\n              }\n              if (isLineBreak(ch_1)) {\n                tokenFlags |= 1;\n              }\n              pos++;\n            }\n            if (!commentClosed) {\n              error(ts.Diagnostics.Asterisk_Slash_expected);\n            }\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              if (!commentClosed) {\n                tokenFlags |= 4;\n              }\n              return token = 3;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 67;\n          }\n          pos++;\n          return token = 43;\n        case 48:\n          if (pos + 2 < end && (text.charCodeAt(pos + 1) === 88 || text.charCodeAt(pos + 1) === 120)) {\n            pos += 2;\n            tokenValue = scanMinimumNumberOfHexDigits(1, true);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Hexadecimal_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0x\" + tokenValue;\n            tokenFlags |= 64;\n            return token = checkBigIntSuffix();\n          }\n          else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 66 || text.charCodeAt(pos + 1) === 98)) {\n            pos += 2;\n            tokenValue = scanBinaryOrOctalDigits(2);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Binary_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0b\" + tokenValue;\n            tokenFlags |= 128;\n            return token = checkBigIntSuffix();\n          }\n          else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 79 || text.charCodeAt(pos + 1) === 111)) {\n            pos += 2;\n            tokenValue = scanBinaryOrOctalDigits(8);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Octal_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0o\" + tokenValue;\n            tokenFlags |= 256;\n            return token = checkBigIntSuffix();\n          }\n          if (pos + 1 < end && isOctalDigit(text.charCodeAt(pos + 1))) {\n            tokenValue = \"\" + scanOctalDigits();\n            tokenFlags |= 32;\n            return token = 8;\n          }\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          (_a = scanNumber(), token = _a.type, tokenValue = _a.value);\n          return token;\n        case 58:\n          pos++;\n          return token = 58;\n        case 59:\n          pos++;\n          return token = 26;\n        case 60:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 60) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 69;\n            }\n            return pos += 2, token = 47;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 32;\n          }\n          if (languageVariant === 1 &&\n            text.charCodeAt(pos + 1) === 47 &&\n            text.charCodeAt(pos + 2) !== 42) {\n            return pos += 2, token = 30;\n          }\n          pos++;\n          return token = 29;\n        case 61:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 36;\n            }\n            return pos += 2, token = 34;\n          }\n          if (text.charCodeAt(pos + 1) === 62) {\n            return pos += 2, token = 38;\n          }\n          pos++;\n          return token = 62;\n        case 62:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          pos++;\n          return token = 31;\n        case 63:\n          pos++;\n          if (text.charCodeAt(pos) === 46 && !isDigit(text.charCodeAt(pos + 1))) {\n            pos++;\n            return token = 28;\n          }\n          if (text.charCodeAt(pos) === 63) {\n            pos++;\n            return token = 60;\n          }\n          return token = 57;\n        case 91:\n          pos++;\n          return token = 22;\n        case 93:\n          pos++;\n          return token = 23;\n        case 94:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 74;\n          }\n          pos++;\n          return token = 52;\n        case 123:\n          pos++;\n          return token = 18;\n        case 124:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 124) {\n            return pos += 2, token = 56;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 73;\n          }\n          pos++;\n          return token = 51;\n        case 125:\n          pos++;\n          return token = 19;\n        case 126:\n          pos++;\n          return token = 54;\n        case 64:\n          pos++;\n          return token = 59;\n        case 92:\n          var extendedCookedChar = peekExtendedUnicodeEscape();\n          if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {\n            pos += 3;\n            tokenFlags |= 8;\n            tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();\n            return token = getIdentifierToken();\n          }\n          var cookedChar = peekUnicodeEscape();\n          if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n            pos += 6;\n            tokenFlags |= 1024;\n            tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n            return token = getIdentifierToken();\n          }\n          error(ts.Diagnostics.Invalid_character);\n          pos++;\n          return token = 0;\n        default:\n          if (isIdentifierStart(ch, languageVersion)) {\n            pos += charSize(ch);\n            while (pos < end && isIdentifierPart(ch = codePointAt(text, pos), languageVersion))\n              pos += charSize(ch);\n            tokenValue = text.substring(tokenPos, pos);\n            if (ch === 92) {\n              tokenValue += scanIdentifierParts();\n            }\n            return token = getIdentifierToken();\n          }\n          else if (isWhiteSpaceSingleLine(ch)) {\n            pos += charSize(ch);\n            continue;\n          }\n          else if (isLineBreak(ch)) {\n            tokenFlags |= 1;\n            pos += charSize(ch);\n            continue;\n          }\n          error(ts.Diagnostics.Invalid_character);\n          pos += charSize(ch);\n          return token = 0;\n      }\n    }\n  }\n  function reScanGreaterToken() {\n    if (token === 31) {\n      if (text.charCodeAt(pos) === 62) {\n        if (text.charCodeAt(pos + 1) === 62) {\n          if (text.charCodeAt(pos + 2) === 61) {\n            return pos += 3, token = 71;\n          }\n          return pos += 2, token = 49;\n        }\n        if (text.charCodeAt(pos + 1) === 61) {\n          return pos += 2, token = 70;\n        }\n        pos++;\n        return token = 48;\n      }\n      if (text.charCodeAt(pos) === 61) {\n        pos++;\n        return token = 33;\n      }\n    }\n    return token;\n  }\n  function reScanSlashToken() {\n    if (token === 43 || token === 67) {\n      var p = tokenPos + 1;\n      var inEscape = false;\n      var inCharacterClass = false;\n      while (true) {\n        if (p >= end) {\n          tokenFlags |= 4;\n          error(ts.Diagnostics.Unterminated_regular_expression_literal);\n          break;\n        }\n        var ch = text.charCodeAt(p);\n        if (isLineBreak(ch)) {\n          tokenFlags |= 4;\n          error(ts.Diagnostics.Unterminated_regular_expression_literal);\n          break;\n        }\n        if (inEscape) {\n          inEscape = false;\n        }\n        else if (ch === 47 && !inCharacterClass) {\n          p++;\n          break;\n        }\n        else if (ch === 91) {\n          inCharacterClass = true;\n        }\n        else if (ch === 92) {\n          inEscape = true;\n        }\n        else if (ch === 93) {\n          inCharacterClass = false;\n        }\n        p++;\n      }\n      while (p < end && isIdentifierPart(text.charCodeAt(p), languageVersion)) {\n        p++;\n      }\n      pos = p;\n      tokenValue = text.substring(tokenPos, pos);\n      token = 13;\n    }\n    return token;\n  }\n  function reScanTemplateToken() {\n    ts.Debug.assert(token === 19, \"'reScanTemplateToken' should only be called on a '}'\");\n    pos = tokenPos;\n    return token = scanTemplateAndSetTokenValue();\n  }\n  function reScanJsxToken() {\n    pos = tokenPos = startPos;\n    return token = scanJsxToken();\n  }\n  function reScanLessThanToken() {\n    if (token === 47) {\n      pos = tokenPos + 1;\n      return token = 29;\n    }\n    return token;\n  }\n  function reScanQuestionToken() {\n    ts.Debug.assert(token === 60, \"'reScanQuestionToken' should only be called on a '??'\");\n    pos = tokenPos + 1;\n    return token = 57;\n  }\n  function scanJsxToken() {\n    startPos = tokenPos = pos;\n    if (pos >= end) {\n      return token = 1;\n    }\n    var char = text.charCodeAt(pos);\n    if (char === 60) {\n      if (text.charCodeAt(pos + 1) === 47) {\n        pos += 2;\n        return token = 30;\n      }\n      pos++;\n      return token = 29;\n    }\n    if (char === 123) {\n      pos++;\n      return token = 18;\n    }\n    var firstNonWhitespace = 0;\n    while (pos < end) {\n      char = text.charCodeAt(pos);\n      if (char === 123) {\n        break;\n      }\n      if (char === 60) {\n        if (isConflictMarkerTrivia(text, pos)) {\n          pos = scanConflictMarkerTrivia(text, pos, error);\n          return token = 7;\n        }\n        break;\n      }\n      if (isLineBreak(char) && firstNonWhitespace === 0) {\n        firstNonWhitespace = -1;\n      }\n      else if (!isWhiteSpaceLike(char)) {\n        firstNonWhitespace = pos;\n      }\n      pos++;\n    }\n    tokenValue = text.substring(startPos, pos);\n    return firstNonWhitespace === -1 ? 12 : 11;\n  }\n  function scanJsxIdentifier() {\n    if (tokenIsIdentifierOrKeyword(token)) {\n      while (pos < end) {\n        var ch = text.charCodeAt(pos);\n        if (ch === 45) {\n          tokenValue += \"-\";\n          pos++;\n          continue;\n        }\n        var oldPos = pos;\n        tokenValue += scanIdentifierParts();\n        if (pos === oldPos) {\n          break;\n        }\n      }\n    }\n    return token;\n  }\n  function scanJsxAttributeValue() {\n    startPos = pos;\n    switch (text.charCodeAt(pos)) {\n      case 34:\n      case 39:\n        tokenValue = scanString(true);\n        return token = 10;\n      default:\n        return scan();\n    }\n  }\n  function scanJsDocToken() {\n    startPos = tokenPos = pos;\n    tokenFlags = 0;\n    if (pos >= end) {\n      return token = 1;\n    }\n    var ch = codePointAt(text, pos);\n    pos += charSize(ch);\n    switch (ch) {\n      case 9:\n      case 11:\n      case 12:\n      case 32:\n        while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {\n          pos++;\n        }\n        return token = 5;\n      case 64:\n        return token = 59;\n      case 10:\n      case 13:\n        tokenFlags |= 1;\n        return token = 4;\n      case 42:\n        return token = 41;\n      case 123:\n        return token = 18;\n      case 125:\n        return token = 19;\n      case 91:\n        return token = 22;\n      case 93:\n        return token = 23;\n      case 60:\n        return token = 29;\n      case 62:\n        return token = 31;\n      case 61:\n        return token = 62;\n      case 44:\n        return token = 27;\n      case 46:\n        return token = 24;\n      case 96:\n        return token = 61;\n      case 92:\n        pos--;\n        var extendedCookedChar = peekExtendedUnicodeEscape();\n        if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {\n          pos += 3;\n          tokenFlags |= 8;\n          tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();\n          return token = getIdentifierToken();\n        }\n        var cookedChar = peekUnicodeEscape();\n        if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n          pos += 6;\n          tokenFlags |= 1024;\n          tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n          return token = getIdentifierToken();\n        }\n        pos++;\n        return token = 0;\n    }\n    if (isIdentifierStart(ch, languageVersion)) {\n      var char = ch;\n      while (pos < end && isIdentifierPart(char = codePointAt(text, pos), languageVersion) || text.charCodeAt(pos) === 45)\n        pos += charSize(char);\n      tokenValue = text.substring(tokenPos, pos);\n      if (char === 92) {\n        tokenValue += scanIdentifierParts();\n      }\n      return token = getIdentifierToken();\n    }\n    else {\n      return token = 0;\n    }\n  }\n  function speculationHelper(callback, isLookahead) {\n    var savePos = pos;\n    var saveStartPos = startPos;\n    var saveTokenPos = tokenPos;\n    var saveToken = token;\n    var saveTokenValue = tokenValue;\n    var saveTokenFlags = tokenFlags;\n    var result = callback();\n    if (!result || isLookahead) {\n      pos = savePos;\n      startPos = saveStartPos;\n      tokenPos = saveTokenPos;\n      token = saveToken;\n      tokenValue = saveTokenValue;\n      tokenFlags = saveTokenFlags;\n    }\n    return result;\n  }\n  function scanRange(start, length, callback) {\n    var saveEnd = end;\n    var savePos = pos;\n    var saveStartPos = startPos;\n    var saveTokenPos = tokenPos;\n    var saveToken = token;\n    var saveTokenValue = tokenValue;\n    var saveTokenFlags = tokenFlags;\n    setText(text, start, length);\n    var result = callback();\n    end = saveEnd;\n    pos = savePos;\n    startPos = saveStartPos;\n    tokenPos = saveTokenPos;\n    token = saveToken;\n    tokenValue = saveTokenValue;\n    tokenFlags = saveTokenFlags;\n    return result;\n  }\n  function lookAhead(callback) {\n    return speculationHelper(callback, true);\n  }\n  function tryScan(callback) {\n    return speculationHelper(callback, false);\n  }\n  function getText() {\n    return text;\n  }\n  function setText(newText, start, length) {\n    text = newText || \"\";\n    end = length === undefined ? text.length : start + length;\n    setTextPos(start || 0);\n  }\n  function setOnError(errorCallback) {\n    onError = errorCallback;\n  }\n  function setScriptTarget(scriptTarget) {\n    languageVersion = scriptTarget;\n  }\n  function setLanguageVariant(variant) {\n    languageVariant = variant;\n  }\n  function setTextPos(textPos) {\n    ts.Debug.assert(textPos >= 0);\n    pos = textPos;\n    startPos = textPos;\n    tokenPos = textPos;\n    token = 0;\n    tokenValue = undefined;\n    tokenFlags = 0;\n  }\n  function setInJSDocType(inType) {\n    inJSDocType += inType ? 1 : -1;\n  }\n}\n\n</=></=></=></=></=></=></=>","site":{"data":{}},"excerpt":"","more":"function createScanner(languageVersion, skipTrivia, languageVariant, textInitial, onError, start, length) {\n  if (languageVariant === void 0) { languageVariant = 0; }\n  var text = textInitial;\n  var pos;\n  var end;\n  var startPos;\n  var tokenPos;\n  var token;\n  var tokenValue;\n  var tokenFlags;\n  var inJSDocType = 0;\n  setText(text, start, length);\n  var scanner = {\n    getStartPos: function () { return startPos; },\n    getTextPos: function () { return pos; },\n    getToken: function () { return token; },\n    getTokenPos: function () { return tokenPos; },\n    getTokenText: function () { return text.substring(tokenPos, pos); },\n    getTokenValue: function () { return tokenValue; },\n    hasUnicodeEscape: function () { return (tokenFlags & 1024) !== 0; },\n    hasExtendedUnicodeEscape: function () { return (tokenFlags & 8) !== 0; },\n    hasPrecedingLineBreak: function () { return (tokenFlags & 1) !== 0; },\n    isIdentifier: function () { return token === 75 || token > 111; },\n    isReservedWord: function () { return token >= 76 && token <= 1=\"\" 43=\"\" 69=\"\" 111;=\"\" },=\"\" isunterminated:=\"\" function=\"\" ()=\"\" {=\"\" return=\"\" (tokenflags=\"\" &=\"\" 4)=\"\" !=\"=\" 0;=\"\" gettokenflags:=\"\" tokenflags;=\"\" rescangreatertoken:=\"\" rescangreatertoken,=\"\" rescanslashtoken:=\"\" rescanslashtoken,=\"\" rescantemplatetoken:=\"\" rescantemplatetoken,=\"\" scanjsxidentifier:=\"\" scanjsxidentifier,=\"\" scanjsxattributevalue:=\"\" scanjsxattributevalue,=\"\" rescanjsxtoken:=\"\" rescanjsxtoken,=\"\" rescanlessthantoken:=\"\" rescanlessthantoken,=\"\" rescanquestiontoken:=\"\" rescanquestiontoken,=\"\" scanjsxtoken:=\"\" scanjsxtoken,=\"\" scanjsdoctoken:=\"\" scanjsdoctoken,=\"\" scan:=\"\" scan,=\"\" gettext:=\"\" gettext,=\"\" settext:=\"\" settext,=\"\" setscripttarget:=\"\" setscripttarget,=\"\" setlanguagevariant:=\"\" setlanguagevariant,=\"\" setonerror:=\"\" setonerror,=\"\" settextpos:=\"\" settextpos,=\"\" setinjsdoctype:=\"\" setinjsdoctype,=\"\" tryscan:=\"\" tryscan,=\"\" lookahead:=\"\" lookahead,=\"\" scanrange:=\"\" scanrange,=\"\" };=\"\" if=\"\" (ts.debug.isdebugging)=\"\" object.defineproperty(scanner,=\"\" \"__debugshowcurrentpositionintext\",=\"\" get:=\"\" var=\"\" text=\"scanner.getText();\" text.slice(0,=\"\" scanner.getstartpos())=\"\" +=\"\" \"║\"=\"\" text.slice(scanner.getstartpos());=\"\" });=\"\" }=\"\" scanner;=\"\" error(message,=\"\" errpos,=\"\" length)=\"\" (errpos=\"==\" void=\"\" 0)=\"\" errpos=\"pos;\" (onerror)=\"\" oldpos=\"pos;\" pos=\"errPos;\" onerror(message,=\"\" length=\"\" ||=\"\" 0);=\"\" scannumberfragment()=\"\" start=\"pos;\" allowseparator=\"false;\" isprevioustokenseparator=\"false;\" result=\"\" ;=\"\" while=\"\" (true)=\"\" ch=\"text.charCodeAt(pos);\" (ch=\"==\" 95)=\"\" tokenflags=\"\" |=\"512;\" (allowseparator)=\"\" pos);=\"\" else=\"\" (isprevioustokenseparator)=\"\" error(ts.diagnostics.multiple_consecutive_numeric_separators_are_not_permitted,=\"\" pos,=\"\" 1);=\"\" error(ts.diagnostics.numeric_separators_are_not_allowed_here,=\"\" pos++;=\"\" continue;=\"\" (isdigit(ch))=\"\" break;=\"\" (text.charcodeat(pos=\"\" -=\"\" 1)=\"==\" 1,=\"\" text.substring(start,=\"\" scannumber()=\"\" mainfragment=\"scanNumberFragment();\" decimalfragment;=\"\" scientificfragment;=\"\" (text.charcodeat(pos)=\"==\" 46)=\"\" decimalfragment=\"scanNumberFragment();\" end=\"pos;\" text.charcodeat(pos)=\"==\" 101)=\"\" 45)=\"\" prenumericpart=\"pos;\" finalfragment=\"scanNumberFragment();\" (!finalfragment)=\"\" error(ts.diagnostics.digit_expected);=\"\" scientificfragment=\"text.substring(end,\" prenumericpart)=\"\" finalfragment;=\"\" result;=\"\" 512)=\"\" (decimalfragment)=\"\" (scientificfragment)=\"\" end);=\"\" (decimalfragment=\"\" undefined=\"\" 16)=\"\" checkforidentifierstartafternumericliteral(start,=\"\" &&=\"\" !!(tokenflags=\"\" 16));=\"\" type:=\"\" 8,=\"\" value:=\"\" \"\"=\"\" +result=\"\" tokenvalue=\"result;\" type=\"checkBigIntSuffix();\" checkforidentifierstartafternumericliteral(start);=\"\" type,=\"\" checkforidentifierstartafternumericliteral(numericstart,=\"\" isscientific)=\"\" (!isidentifierstart(codepointat(text,=\"\" pos),=\"\" languageversion))=\"\" return;=\"\" identifierstart=\"pos;\" (length=\"==\" text[identifierstart]=\"==\" \"n\")=\"\" (isscientific)=\"\" error(ts.diagnostics.a_bigint_literal_cannot_use_exponential_notation,=\"\" numericstart,=\"\" numericstart=\"\" error(ts.diagnostics.a_bigint_literal_must_be_an_integer,=\"\" error(ts.diagnostics.an_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal,=\"\" identifierstart,=\"\" length);=\"\" scanoctaldigits()=\"\" (isoctaldigit(text.charcodeat(pos)))=\"\" +(text.substring(start,=\"\" pos));=\"\" scanexactnumberofhexdigits(count,=\"\" canhaveseparators)=\"\" valuestring=\"scanHexDigits(count,\" false,=\"\" canhaveseparators);=\"\" ?=\"\" parseint(valuestring,=\"\" :=\"\" -1;=\"\" scanminimumnumberofhexdigits(count,=\"\" scanhexdigits(count,=\"\" true,=\"\" scanhexdigits(mincount,=\"\" scanasmanyaspossible,=\"\" valuechars=\"[];\" (valuechars.length=\"\" <=\"\" mincount=\"\" scanasmanyaspossible)=\"\" (canhaveseparators=\"\">= 65 && ch <= 70)=\"\" {=\"\" ch=\"\" +=\"97\" -=\"\" 65;=\"\" }=\"\" else=\"\" if=\"\" (!((ch=\"\">= 48 && ch <= 57)=\"\" ||=\"\" (ch=\"\">= 97 && ch <= 102)))=\"\" {=\"\" break;=\"\" }=\"\" valuechars.push(ch);=\"\" pos++;=\"\" isprevioustokenseparator=\"false;\" if=\"\" (valuechars.length=\"\" <=\"\" mincount)=\"\" valuechars=\"[];\" (text.charcodeat(pos=\"\" -=\"\" 1)=\"==\" 95)=\"\" error(ts.diagnostics.numeric_separators_are_not_allowed_here,=\"\" pos=\"\" 1,=\"\" 1);=\"\" return=\"\" string.fromcharcode.apply(string,=\"\" valuechars);=\"\" function=\"\" scanstring(jsxattributestring)=\"\" (jsxattributestring=\"==\" void=\"\" 0)=\"\" jsxattributestring=\"false;\" var=\"\" quote=\"text.charCodeAt(pos);\" result=\"\" ;=\"\" start=\"pos;\" while=\"\" (true)=\"\" (pos=\"\">= end) {\n        result += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_string_literal);\n        break;\n      }\n      var ch = text.charCodeAt(pos);\n      if (ch === quote) {\n        result += text.substring(start, pos);\n        pos++;\n        break;\n      }\n      if (ch === 92 && !jsxAttributeString) {\n        result += text.substring(start, pos);\n        result += scanEscapeSequence();\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(ch) && !jsxAttributeString) {\n        result += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_string_literal);\n        break;\n      }\n      pos++;\n    }\n    return result;\n  }\n  function scanTemplateAndSetTokenValue() {\n    var startedWithBacktick = text.charCodeAt(pos) === 96;\n    pos++;\n    var start = pos;\n    var contents = \"\";\n    var resultingToken;\n    while (true) {\n      if (pos >= end) {\n        contents += text.substring(start, pos);\n        tokenFlags |= 4;\n        error(ts.Diagnostics.Unterminated_template_literal);\n        resultingToken = startedWithBacktick ? 14 : 17;\n        break;\n      }\n      var currChar = text.charCodeAt(pos);\n      if (currChar === 96) {\n        contents += text.substring(start, pos);\n        pos++;\n        resultingToken = startedWithBacktick ? 14 : 17;\n        break;\n      }\n      if (currChar === 36 && pos + 1 < end && text.charCodeAt(pos + 1) === 123) {\n        contents += text.substring(start, pos);\n        pos += 2;\n        resultingToken = startedWithBacktick ? 15 : 16;\n        break;\n      }\n      if (currChar === 92) {\n        contents += text.substring(start, pos);\n        contents += scanEscapeSequence();\n        start = pos;\n        continue;\n      }\n      if (currChar === 13) {\n        contents += text.substring(start, pos);\n        pos++;\n        if (pos < end && text.charCodeAt(pos) === 10) {\n          pos++;\n        }\n        contents += \"\\n\";\n        start = pos;\n        continue;\n      }\n      pos++;\n    }\n    ts.Debug.assert(resultingToken !== undefined);\n    tokenValue = contents;\n    return resultingToken;\n  }\n  function scanEscapeSequence() {\n    pos++;\n    if (pos >= end) {\n      error(ts.Diagnostics.Unexpected_end_of_text);\n      return \"\";\n    }\n    var ch = text.charCodeAt(pos);\n    pos++;\n    switch (ch) {\n      case 48:\n        return \"\\0\";\n      case 98:\n        return \"\\b\";\n      case 116:\n        return \"\\t\";\n      case 110:\n        return \"\\n\";\n      case 118:\n        return \"\\v\";\n      case 102:\n        return \"\\f\";\n      case 114:\n        return \"\\r\";\n      case 39:\n        return \"\\'\";\n      case 34:\n        return \"\\\"\";\n      case 117:\n        if (pos < end && text.charCodeAt(pos) === 123) {\n          tokenFlags |= 8;\n          pos++;\n          return scanExtendedUnicodeEscape();\n        }\n        tokenFlags |= 1024;\n        return scanHexadecimalEscape(4);\n      case 120:\n        return scanHexadecimalEscape(2);\n      case 13:\n        if (pos < end && text.charCodeAt(pos) === 10) {\n          pos++;\n        }\n      case 10:\n      case 8232:\n      case 8233:\n        return \"\";\n      default:\n        return String.fromCharCode(ch);\n    }\n  }\n  function scanHexadecimalEscape(numDigits) {\n    var escapedValue = scanExactNumberOfHexDigits(numDigits, false);\n    if (escapedValue >= 0) {\n      return String.fromCharCode(escapedValue);\n    }\n    else {\n      error(ts.Diagnostics.Hexadecimal_digit_expected);\n      return \"\";\n    }\n  }\n  function scanExtendedUnicodeEscape() {\n    var escapedValueString = scanMinimumNumberOfHexDigits(1, false);\n    var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;\n    var isInvalidExtendedEscape = false;\n    if (escapedValue < 0) {\n      error(ts.Diagnostics.Hexadecimal_digit_expected);\n      isInvalidExtendedEscape = true;\n    }\n    else if (escapedValue > 0x10FFFF) {\n      error(ts.Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);\n      isInvalidExtendedEscape = true;\n    }\n    if (pos >= end) {\n      error(ts.Diagnostics.Unexpected_end_of_text);\n      isInvalidExtendedEscape = true;\n    }\n    else if (text.charCodeAt(pos) === 125) {\n      pos++;\n    }\n    else {\n      error(ts.Diagnostics.Unterminated_Unicode_escape_sequence);\n      isInvalidExtendedEscape = true;\n    }\n    if (isInvalidExtendedEscape) {\n      return \"\";\n    }\n    return utf16EncodeAsString(escapedValue);\n  }\n  function utf16EncodeAsString(codePoint) {\n    ts.Debug.assert(0x0 <= 5=\"\" codepoint=\"\" &&=\"\" <=\"0x10FFFF);\" if=\"\" (codepoint=\"\" {=\"\" return=\"\" string.fromcharcode(codepoint);=\"\" }=\"\" var=\"\" codeunit1=\"Math.floor((codePoint\" -=\"\" 65536)=\"\" 1024)=\"\" +=\"\" 0xd800;=\"\" codeunit2=\"((codePoint\" %=\"\" 0xdc00;=\"\" string.fromcharcode(codeunit1,=\"\" codeunit2);=\"\" function=\"\" peekunicodeescape()=\"\" (pos=\"\" end=\"\" text.charcodeat(pos=\"\" 1)=\"==\" 117)=\"\" start_1=\"pos;\" pos=\"\" value=\"scanExactNumberOfHexDigits(4,\" false);=\"\" value;=\"\" -1;=\"\" peekextendedunicodeescape()=\"\" (languageversion=\"\">= 2 && codePointAt(text, pos + 1) === 117 && codePointAt(text, pos + 2) === 123) {\n      var start_2 = pos;\n      pos += 3;\n      var escapedValueString = scanMinimumNumberOfHexDigits(1, false);\n      var escapedValue = escapedValueString ? parseInt(escapedValueString, 16) : -1;\n      pos = start_2;\n      return escapedValue;\n    }\n    return -1;\n  }\n  function scanIdentifierParts() {\n    var result = \"\";\n    var start = pos;\n    while (pos < end) {\n      var ch = codePointAt(text, pos);\n      if (isIdentifierPart(ch, languageVersion)) {\n        pos += charSize(ch);\n      }\n      else if (ch === 92) {\n        ch = peekExtendedUnicodeEscape();\n        if (ch >= 0 && isIdentifierPart(ch, languageVersion)) {\n          pos += 3;\n          tokenFlags |= 8;\n          result += scanExtendedUnicodeEscape();\n          start = pos;\n          continue;\n        }\n        ch = peekUnicodeEscape();\n        if (!(ch >= 0 && isIdentifierPart(ch, languageVersion))) {\n          break;\n        }\n        tokenFlags |= 1024;\n        result += text.substring(start, pos);\n        result += utf16EncodeAsString(ch);\n        pos += 6;\n        start = pos;\n      }\n      else {\n        break;\n      }\n    }\n    result += text.substring(start, pos);\n    return result;\n  }\n  function getIdentifierToken() {\n    var len = tokenValue.length;\n    if (len >= 2 && len <= 11)=\"\" {=\"\" var=\"\" ch=\"tokenValue.charCodeAt(0);\" if=\"\" (ch=\"\">= 97 && ch <= 48=\"\" 122)=\"\" {=\"\" var=\"\" keyword=\"textToKeyword.get(tokenValue);\" if=\"\" (keyword=\"\" !=\"=\" undefined)=\"\" return=\"\" token=\"keyword;\" }=\"\" function=\"\" scanbinaryoroctaldigits(base)=\"\" value=\"\" ;=\"\" separatorallowed=\"false;\" isprevioustokenseparator=\"false;\" while=\"\" (true)=\"\" ch=\"text.charCodeAt(pos);\" (ch=\"==\" 95)=\"\" tokenflags=\"\" |=\"512;\" (separatorallowed)=\"\" else=\"\" (isprevioustokenseparator)=\"\" error(ts.diagnostics.multiple_consecutive_numeric_separators_are_not_permitted,=\"\" pos,=\"\" 1);=\"\" error(ts.diagnostics.numeric_separators_are_not_allowed_here,=\"\" pos++;=\"\" continue;=\"\" (!isdigit(ch)=\"\" ||=\"\" -=\"\">= base) {\n        break;\n      }\n      value += text[pos];\n      pos++;\n      isPreviousTokenSeparator = false;\n    }\n    if (text.charCodeAt(pos - 1) === 95) {\n      error(ts.Diagnostics.Numeric_separators_are_not_allowed_here, pos - 1, 1);\n    }\n    return value;\n  }\n  function checkBigIntSuffix() {\n    if (text.charCodeAt(pos) === 110) {\n      tokenValue += \"n\";\n      if (tokenFlags & 384) {\n        tokenValue = ts.parsePseudoBigInt(tokenValue) + \"n\";\n      }\n      pos++;\n      return 9;\n    }\n    else {\n      var numericValue = tokenFlags & 128\n        ? parseInt(tokenValue.slice(2), 2)\n        : tokenFlags & 256\n          ? parseInt(tokenValue.slice(2), 8)\n          : +tokenValue;\n      tokenValue = \"\" + numericValue;\n      return 8;\n    }\n  }\n  function scan() {\n    var _a;\n    startPos = pos;\n    tokenFlags = 0;\n    var asteriskSeen = false;\n    while (true) {\n      tokenPos = pos;\n      if (pos >= end) {\n        return token = 1;\n      }\n      var ch = codePointAt(text, pos);\n      if (ch === 35 && pos === 0 && isShebangTrivia(text, pos)) {\n        pos = scanShebangTrivia(text, pos);\n        if (skipTrivia) {\n          continue;\n        }\n        else {\n          return token = 6;\n        }\n      }\n      switch (ch) {\n        case 10:\n        case 13:\n          tokenFlags |= 1;\n          if (skipTrivia) {\n            pos++;\n            continue;\n          }\n          else {\n            if (ch === 13 && pos + 1 < end && text.charCodeAt(pos + 1) === 10) {\n              pos += 2;\n            }\n            else {\n              pos++;\n            }\n            return token = 4;\n          }\n        case 9:\n        case 11:\n        case 12:\n        case 32:\n        case 160:\n        case 5760:\n        case 8192:\n        case 8193:\n        case 8194:\n        case 8195:\n        case 8196:\n        case 8197:\n        case 8198:\n        case 8199:\n        case 8200:\n        case 8201:\n        case 8202:\n        case 8203:\n        case 8239:\n        case 8287:\n        case 12288:\n        case 65279:\n          if (skipTrivia) {\n            pos++;\n            continue;\n          }\n          else {\n            while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {\n              pos++;\n            }\n            return token = 5;\n          }\n        case 33:\n          if (text.charCodeAt(pos + 1) === 61) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 37;\n            }\n            return pos += 2, token = 35;\n          }\n          pos++;\n          return token = 53;\n        case 34:\n        case 39:\n          tokenValue = scanString();\n          return token = 10;\n        case 96:\n          return token = scanTemplateAndSetTokenValue();\n        case 37:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 68;\n          }\n          pos++;\n          return token = 44;\n        case 38:\n          if (text.charCodeAt(pos + 1) === 38) {\n            return pos += 2, token = 55;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 72;\n          }\n          pos++;\n          return token = 50;\n        case 40:\n          pos++;\n          return token = 20;\n        case 41:\n          pos++;\n          return token = 21;\n        case 42:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 65;\n          }\n          if (text.charCodeAt(pos + 1) === 42) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 66;\n            }\n            return pos += 2, token = 42;\n          }\n          pos++;\n          if (inJSDocType && !asteriskSeen && (tokenFlags & 1)) {\n            asteriskSeen = true;\n            continue;\n          }\n          return token = 41;\n        case 43:\n          if (text.charCodeAt(pos + 1) === 43) {\n            return pos += 2, token = 45;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 63;\n          }\n          pos++;\n          return token = 39;\n        case 44:\n          pos++;\n          return token = 27;\n        case 45:\n          if (text.charCodeAt(pos + 1) === 45) {\n            return pos += 2, token = 46;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 64;\n          }\n          pos++;\n          return token = 40;\n        case 46:\n          if (isDigit(text.charCodeAt(pos + 1))) {\n            tokenValue = scanNumber().value;\n            return token = 8;\n          }\n          if (text.charCodeAt(pos + 1) === 46 && text.charCodeAt(pos + 2) === 46) {\n            return pos += 3, token = 25;\n          }\n          pos++;\n          return token = 24;\n        case 47:\n          if (text.charCodeAt(pos + 1) === 47) {\n            pos += 2;\n            while (pos < end) {\n              if (isLineBreak(text.charCodeAt(pos))) {\n                break;\n              }\n              pos++;\n            }\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 2;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 42) {\n            pos += 2;\n            if (text.charCodeAt(pos) === 42 && text.charCodeAt(pos + 1) !== 47) {\n              tokenFlags |= 2;\n            }\n            var commentClosed = false;\n            while (pos < end) {\n              var ch_1 = text.charCodeAt(pos);\n              if (ch_1 === 42 && text.charCodeAt(pos + 1) === 47) {\n                pos += 2;\n                commentClosed = true;\n                break;\n              }\n              if (isLineBreak(ch_1)) {\n                tokenFlags |= 1;\n              }\n              pos++;\n            }\n            if (!commentClosed) {\n              error(ts.Diagnostics.Asterisk_Slash_expected);\n            }\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              if (!commentClosed) {\n                tokenFlags |= 4;\n              }\n              return token = 3;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 67;\n          }\n          pos++;\n          return token = 43;\n        case 48:\n          if (pos + 2 < end && (text.charCodeAt(pos + 1) === 88 || text.charCodeAt(pos + 1) === 120)) {\n            pos += 2;\n            tokenValue = scanMinimumNumberOfHexDigits(1, true);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Hexadecimal_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0x\" + tokenValue;\n            tokenFlags |= 64;\n            return token = checkBigIntSuffix();\n          }\n          else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 66 || text.charCodeAt(pos + 1) === 98)) {\n            pos += 2;\n            tokenValue = scanBinaryOrOctalDigits(2);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Binary_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0b\" + tokenValue;\n            tokenFlags |= 128;\n            return token = checkBigIntSuffix();\n          }\n          else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 79 || text.charCodeAt(pos + 1) === 111)) {\n            pos += 2;\n            tokenValue = scanBinaryOrOctalDigits(8);\n            if (!tokenValue) {\n              error(ts.Diagnostics.Octal_digit_expected);\n              tokenValue = \"0\";\n            }\n            tokenValue = \"0o\" + tokenValue;\n            tokenFlags |= 256;\n            return token = checkBigIntSuffix();\n          }\n          if (pos + 1 < end && isOctalDigit(text.charCodeAt(pos + 1))) {\n            tokenValue = \"\" + scanOctalDigits();\n            tokenFlags |= 32;\n            return token = 8;\n          }\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          (_a = scanNumber(), token = _a.type, tokenValue = _a.value);\n          return token;\n        case 58:\n          pos++;\n          return token = 58;\n        case 59:\n          pos++;\n          return token = 26;\n        case 60:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 60) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 69;\n            }\n            return pos += 2, token = 47;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 32;\n          }\n          if (languageVariant === 1 &&\n            text.charCodeAt(pos + 1) === 47 &&\n            text.charCodeAt(pos + 2) !== 42) {\n            return pos += 2, token = 30;\n          }\n          pos++;\n          return token = 29;\n        case 61:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            if (text.charCodeAt(pos + 2) === 61) {\n              return pos += 3, token = 36;\n            }\n            return pos += 2, token = 34;\n          }\n          if (text.charCodeAt(pos + 1) === 62) {\n            return pos += 2, token = 38;\n          }\n          pos++;\n          return token = 62;\n        case 62:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          pos++;\n          return token = 31;\n        case 63:\n          pos++;\n          if (text.charCodeAt(pos) === 46 && !isDigit(text.charCodeAt(pos + 1))) {\n            pos++;\n            return token = 28;\n          }\n          if (text.charCodeAt(pos) === 63) {\n            pos++;\n            return token = 60;\n          }\n          return token = 57;\n        case 91:\n          pos++;\n          return token = 22;\n        case 93:\n          pos++;\n          return token = 23;\n        case 94:\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 74;\n          }\n          pos++;\n          return token = 52;\n        case 123:\n          pos++;\n          return token = 18;\n        case 124:\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos, error);\n            if (skipTrivia) {\n              continue;\n            }\n            else {\n              return token = 7;\n            }\n          }\n          if (text.charCodeAt(pos + 1) === 124) {\n            return pos += 2, token = 56;\n          }\n          if (text.charCodeAt(pos + 1) === 61) {\n            return pos += 2, token = 73;\n          }\n          pos++;\n          return token = 51;\n        case 125:\n          pos++;\n          return token = 19;\n        case 126:\n          pos++;\n          return token = 54;\n        case 64:\n          pos++;\n          return token = 59;\n        case 92:\n          var extendedCookedChar = peekExtendedUnicodeEscape();\n          if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {\n            pos += 3;\n            tokenFlags |= 8;\n            tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();\n            return token = getIdentifierToken();\n          }\n          var cookedChar = peekUnicodeEscape();\n          if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n            pos += 6;\n            tokenFlags |= 1024;\n            tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n            return token = getIdentifierToken();\n          }\n          error(ts.Diagnostics.Invalid_character);\n          pos++;\n          return token = 0;\n        default:\n          if (isIdentifierStart(ch, languageVersion)) {\n            pos += charSize(ch);\n            while (pos < end && isIdentifierPart(ch = codePointAt(text, pos), languageVersion))\n              pos += charSize(ch);\n            tokenValue = text.substring(tokenPos, pos);\n            if (ch === 92) {\n              tokenValue += scanIdentifierParts();\n            }\n            return token = getIdentifierToken();\n          }\n          else if (isWhiteSpaceSingleLine(ch)) {\n            pos += charSize(ch);\n            continue;\n          }\n          else if (isLineBreak(ch)) {\n            tokenFlags |= 1;\n            pos += charSize(ch);\n            continue;\n          }\n          error(ts.Diagnostics.Invalid_character);\n          pos += charSize(ch);\n          return token = 0;\n      }\n    }\n  }\n  function reScanGreaterToken() {\n    if (token === 31) {\n      if (text.charCodeAt(pos) === 62) {\n        if (text.charCodeAt(pos + 1) === 62) {\n          if (text.charCodeAt(pos + 2) === 61) {\n            return pos += 3, token = 71;\n          }\n          return pos += 2, token = 49;\n        }\n        if (text.charCodeAt(pos + 1) === 61) {\n          return pos += 2, token = 70;\n        }\n        pos++;\n        return token = 48;\n      }\n      if (text.charCodeAt(pos) === 61) {\n        pos++;\n        return token = 33;\n      }\n    }\n    return token;\n  }\n  function reScanSlashToken() {\n    if (token === 43 || token === 67) {\n      var p = tokenPos + 1;\n      var inEscape = false;\n      var inCharacterClass = false;\n      while (true) {\n        if (p >= end) {\n          tokenFlags |= 4;\n          error(ts.Diagnostics.Unterminated_regular_expression_literal);\n          break;\n        }\n        var ch = text.charCodeAt(p);\n        if (isLineBreak(ch)) {\n          tokenFlags |= 4;\n          error(ts.Diagnostics.Unterminated_regular_expression_literal);\n          break;\n        }\n        if (inEscape) {\n          inEscape = false;\n        }\n        else if (ch === 47 && !inCharacterClass) {\n          p++;\n          break;\n        }\n        else if (ch === 91) {\n          inCharacterClass = true;\n        }\n        else if (ch === 92) {\n          inEscape = true;\n        }\n        else if (ch === 93) {\n          inCharacterClass = false;\n        }\n        p++;\n      }\n      while (p < end && isIdentifierPart(text.charCodeAt(p), languageVersion)) {\n        p++;\n      }\n      pos = p;\n      tokenValue = text.substring(tokenPos, pos);\n      token = 13;\n    }\n    return token;\n  }\n  function reScanTemplateToken() {\n    ts.Debug.assert(token === 19, \"'reScanTemplateToken' should only be called on a '}'\");\n    pos = tokenPos;\n    return token = scanTemplateAndSetTokenValue();\n  }\n  function reScanJsxToken() {\n    pos = tokenPos = startPos;\n    return token = scanJsxToken();\n  }\n  function reScanLessThanToken() {\n    if (token === 47) {\n      pos = tokenPos + 1;\n      return token = 29;\n    }\n    return token;\n  }\n  function reScanQuestionToken() {\n    ts.Debug.assert(token === 60, \"'reScanQuestionToken' should only be called on a '??'\");\n    pos = tokenPos + 1;\n    return token = 57;\n  }\n  function scanJsxToken() {\n    startPos = tokenPos = pos;\n    if (pos >= end) {\n      return token = 1;\n    }\n    var char = text.charCodeAt(pos);\n    if (char === 60) {\n      if (text.charCodeAt(pos + 1) === 47) {\n        pos += 2;\n        return token = 30;\n      }\n      pos++;\n      return token = 29;\n    }\n    if (char === 123) {\n      pos++;\n      return token = 18;\n    }\n    var firstNonWhitespace = 0;\n    while (pos < end) {\n      char = text.charCodeAt(pos);\n      if (char === 123) {\n        break;\n      }\n      if (char === 60) {\n        if (isConflictMarkerTrivia(text, pos)) {\n          pos = scanConflictMarkerTrivia(text, pos, error);\n          return token = 7;\n        }\n        break;\n      }\n      if (isLineBreak(char) && firstNonWhitespace === 0) {\n        firstNonWhitespace = -1;\n      }\n      else if (!isWhiteSpaceLike(char)) {\n        firstNonWhitespace = pos;\n      }\n      pos++;\n    }\n    tokenValue = text.substring(startPos, pos);\n    return firstNonWhitespace === -1 ? 12 : 11;\n  }\n  function scanJsxIdentifier() {\n    if (tokenIsIdentifierOrKeyword(token)) {\n      while (pos < end) {\n        var ch = text.charCodeAt(pos);\n        if (ch === 45) {\n          tokenValue += \"-\";\n          pos++;\n          continue;\n        }\n        var oldPos = pos;\n        tokenValue += scanIdentifierParts();\n        if (pos === oldPos) {\n          break;\n        }\n      }\n    }\n    return token;\n  }\n  function scanJsxAttributeValue() {\n    startPos = pos;\n    switch (text.charCodeAt(pos)) {\n      case 34:\n      case 39:\n        tokenValue = scanString(true);\n        return token = 10;\n      default:\n        return scan();\n    }\n  }\n  function scanJsDocToken() {\n    startPos = tokenPos = pos;\n    tokenFlags = 0;\n    if (pos >= end) {\n      return token = 1;\n    }\n    var ch = codePointAt(text, pos);\n    pos += charSize(ch);\n    switch (ch) {\n      case 9:\n      case 11:\n      case 12:\n      case 32:\n        while (pos < end && isWhiteSpaceSingleLine(text.charCodeAt(pos))) {\n          pos++;\n        }\n        return token = 5;\n      case 64:\n        return token = 59;\n      case 10:\n      case 13:\n        tokenFlags |= 1;\n        return token = 4;\n      case 42:\n        return token = 41;\n      case 123:\n        return token = 18;\n      case 125:\n        return token = 19;\n      case 91:\n        return token = 22;\n      case 93:\n        return token = 23;\n      case 60:\n        return token = 29;\n      case 62:\n        return token = 31;\n      case 61:\n        return token = 62;\n      case 44:\n        return token = 27;\n      case 46:\n        return token = 24;\n      case 96:\n        return token = 61;\n      case 92:\n        pos--;\n        var extendedCookedChar = peekExtendedUnicodeEscape();\n        if (extendedCookedChar >= 0 && isIdentifierStart(extendedCookedChar, languageVersion)) {\n          pos += 3;\n          tokenFlags |= 8;\n          tokenValue = scanExtendedUnicodeEscape() + scanIdentifierParts();\n          return token = getIdentifierToken();\n        }\n        var cookedChar = peekUnicodeEscape();\n        if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n          pos += 6;\n          tokenFlags |= 1024;\n          tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n          return token = getIdentifierToken();\n        }\n        pos++;\n        return token = 0;\n    }\n    if (isIdentifierStart(ch, languageVersion)) {\n      var char = ch;\n      while (pos < end && isIdentifierPart(char = codePointAt(text, pos), languageVersion) || text.charCodeAt(pos) === 45)\n        pos += charSize(char);\n      tokenValue = text.substring(tokenPos, pos);\n      if (char === 92) {\n        tokenValue += scanIdentifierParts();\n      }\n      return token = getIdentifierToken();\n    }\n    else {\n      return token = 0;\n    }\n  }\n  function speculationHelper(callback, isLookahead) {\n    var savePos = pos;\n    var saveStartPos = startPos;\n    var saveTokenPos = tokenPos;\n    var saveToken = token;\n    var saveTokenValue = tokenValue;\n    var saveTokenFlags = tokenFlags;\n    var result = callback();\n    if (!result || isLookahead) {\n      pos = savePos;\n      startPos = saveStartPos;\n      tokenPos = saveTokenPos;\n      token = saveToken;\n      tokenValue = saveTokenValue;\n      tokenFlags = saveTokenFlags;\n    }\n    return result;\n  }\n  function scanRange(start, length, callback) {\n    var saveEnd = end;\n    var savePos = pos;\n    var saveStartPos = startPos;\n    var saveTokenPos = tokenPos;\n    var saveToken = token;\n    var saveTokenValue = tokenValue;\n    var saveTokenFlags = tokenFlags;\n    setText(text, start, length);\n    var result = callback();\n    end = saveEnd;\n    pos = savePos;\n    startPos = saveStartPos;\n    tokenPos = saveTokenPos;\n    token = saveToken;\n    tokenValue = saveTokenValue;\n    tokenFlags = saveTokenFlags;\n    return result;\n  }\n  function lookAhead(callback) {\n    return speculationHelper(callback, true);\n  }\n  function tryScan(callback) {\n    return speculationHelper(callback, false);\n  }\n  function getText() {\n    return text;\n  }\n  function setText(newText, start, length) {\n    text = newText || \"\";\n    end = length === undefined ? text.length : start + length;\n    setTextPos(start || 0);\n  }\n  function setOnError(errorCallback) {\n    onError = errorCallback;\n  }\n  function setScriptTarget(scriptTarget) {\n    languageVersion = scriptTarget;\n  }\n  function setLanguageVariant(variant) {\n    languageVariant = variant;\n  }\n  function setTextPos(textPos) {\n    ts.Debug.assert(textPos >= 0);\n    pos = textPos;\n    startPos = textPos;\n    tokenPos = textPos;\n    token = 0;\n    tokenValue = undefined;\n    tokenFlags = 0;\n  }\n  function setInJSDocType(inType) {\n    inJSDocType += inType ? 1 : -1;\n  }\n}\n\n</=></=></=></=></=></=></=>"}],"Post":[{"title":"zhangqiang","_content":"","source":"_drafts/zhangqiang.md","raw":"---\ntitle: zhangqiang\ntags:\n---\n","slug":"zhangqiang","published":0,"date":"2019-05-14T14:30:28.591Z","updated":"2019-05-14T14:30:28.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsauh0002ckufs7b0gcin","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Ajax初探","date":"2017-11-06T06:03:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78457021)\n\n\n## Ajax初探 ##\n\n---------- \n<h2>1.环境搭建与配置</h2>\n这两天在捣鼓Ajax,期初用的都是开发工具自己集成的apache服务器，但是因为我太蠢，找不到相关的设置项和说明，又或者是我懒得找把，于是搜了一款**数据库**和**Apache**服务器集成好的本地站点包：【XAMPP】，百度下载好，按照相关说明进行配置。\n<h2>2.基本设置与文件索引目录</h2>\n\n![这里写图片描述](http://img.blog.csdn.net/20171106140930710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如图所示，只需要将Apache与MySQL打钩，并且star，就OK。\n打开浏览器，输入站点ip与端口（默认是127.0.0.1）\n然后在安装目录下的,安装盘:\\xampp\\htdocs 看到有个.html的文件，该就是刚才在浏览器中看到的。\n可以将这个.html的文件**删除**，刷新浏览器，可以直接看到浏览器中的目录索引。\n![这里写图片描述](http://img.blog.csdn.net/20171106141608295?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n现在网页上127.0.0.1的目录就是文件库中的映射。\n以后我们可以将服务器端需要响应的asp/php/txt文件，都放在  **安装盘:\\xampp\\htdocs**下即可，环境搭建完成。\n\n<h2>3.喜闻乐见敲代码环节</h2>\n<h4>3.1 javascript原生Ajax</h4>\n\n>       所谓Ajax：\n      A:async 异步加载\n      ja: javascript  脚本语言\n      x:xml  前后台通信的数据载体，文本\n      （鉴与json的出现，XML正在被逐渐取代，大有\"Ajaj\"的趋势）\n\n  <h4> 3.2 目的</h4>\n  目的是为了提高用户体验，更新局部数据时不用刷新整个网页，就可以完成数据交互。\n  <h4>3.3 对象(API)</h4>\n 1. 在IE7+/Chrome/Opera/Safari 中，对象为XMLHttpRequest，**该对象属于window下的子对象**;\n  创建方法为\n```\nvar xhr = new XMLHttpRequest;\n```\n2.在IE7以下， 对象为ActiveXObject,**该对象属于window下的子对象**;\n 创建方法为\n \n\n```\nvar xhr = new ActiveXObject('Microsoft.XMLHTTP');\n//括号中的必须有。\n```\n <h4>3.4 浏览器兼容判断</h4>\n\n```\n var xhr =;  //var 一个空对象\n if(window.XMLHttpRequest){\n xhr = new XMLHttpRequest;\n }  //非IE7以下\n \n else if(window.ActiveXObject){\nxhr = new ActiveXObject('Microsoft.XMLHTTP');\n}//IE7以下\n\nelse{alert(\"您的浏览器过于先进，请降级到合适的版本！\")}\n```\n\n  <h4>3.5 方法</h4>\n  这个xhr对象，自带了一些方法。\n  1.open（规定请求的类型，地址，是否异步）方法\n\n```\n  xhr.open(method,url,async) \n```\n2.send(string)方法，用于发送请求\n该方法中的string，只要在method=\"post\"时，才可以使用。\n\n3.当method==true,那么要设定就绪时执行的函数，跟回调函数有点像:\n  先说两个属性：\n  (1)xhr.responseText           //······························· 返回字符串形式的相应数据\n  (2)xhr.responseXML          //································ 返回XML形式的相应数据\n```\n\nxhr.onreadystateChange=function{\nif(xhr.readystate==4&&xhr.status==200){\n     //这里写下要回调的方法\n     document.getElementById('div').innerHTML=xhr.responseText;\n     //获取返回的文本，这里也可以写xhr.responseXML\n     \n     }\n}\nxhr.open('get','123.php',true);\nxhr.send();\n```\nOK,这是默认的**异步处理**，要执行一个就绪时的函数。\n那么，在同步模式下，即async=false时，应该这么写请求：\n\nxhr.open(\"GET\",\"/try/ajax/ajax_info.txt\",false);\nxh.send();\ndocument.getElementById(\"Div\").innerHTML=xhr.responseText;\n\n\n   <h4>3.6  onreadystatechange 存储函数</h4>\n    onreadystatechange 存储着xhr的好几种状态：\n    0：初始化未就绪    (想找老板要工资，但没准备好)\n    1：已经与服务器连接 （已经走进老板办公室）\n    2：服务器已经接受（老板已经听到你的诉求）\n    3：正在处理请求（老板在苦思冥想给不给你钱）\n    4：请求已经完成，并且响应也已经下发（想了半天给你了）\n    每当 readyState 改变时，就会触发 onreadystatechange 事件。\n\n  同时，status也需要有响应的返回值，从服务器传递回来，有两个值：\n  200 响应就绪，成功下发（会计接到老板的电话，立马爽快的给了你工资）\n  404  未找到   （会计跑路了，尽管老板同意，你还是没拿到钱）\n    <h4></h4>\n     <h4></h4>\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/Ajax初探.md","raw":"---\ntitle: Ajax初探 \ndate: 2017-11-06 14:03:00\ntags: ajax\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78457021)\n\n\n## Ajax初探 ##\n\n---------- \n<h2>1.环境搭建与配置</h2>\n这两天在捣鼓Ajax,期初用的都是开发工具自己集成的apache服务器，但是因为我太蠢，找不到相关的设置项和说明，又或者是我懒得找把，于是搜了一款**数据库**和**Apache**服务器集成好的本地站点包：【XAMPP】，百度下载好，按照相关说明进行配置。\n<h2>2.基本设置与文件索引目录</h2>\n\n![这里写图片描述](http://img.blog.csdn.net/20171106140930710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如图所示，只需要将Apache与MySQL打钩，并且star，就OK。\n打开浏览器，输入站点ip与端口（默认是127.0.0.1）\n然后在安装目录下的,安装盘:\\xampp\\htdocs 看到有个.html的文件，该就是刚才在浏览器中看到的。\n可以将这个.html的文件**删除**，刷新浏览器，可以直接看到浏览器中的目录索引。\n![这里写图片描述](http://img.blog.csdn.net/20171106141608295?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n现在网页上127.0.0.1的目录就是文件库中的映射。\n以后我们可以将服务器端需要响应的asp/php/txt文件，都放在  **安装盘:\\xampp\\htdocs**下即可，环境搭建完成。\n\n<h2>3.喜闻乐见敲代码环节</h2>\n<h4>3.1 javascript原生Ajax</h4>\n\n>       所谓Ajax：\n      A:async 异步加载\n      ja: javascript  脚本语言\n      x:xml  前后台通信的数据载体，文本\n      （鉴与json的出现，XML正在被逐渐取代，大有\"Ajaj\"的趋势）\n\n  <h4> 3.2 目的</h4>\n  目的是为了提高用户体验，更新局部数据时不用刷新整个网页，就可以完成数据交互。\n  <h4>3.3 对象(API)</h4>\n 1. 在IE7+/Chrome/Opera/Safari 中，对象为XMLHttpRequest，**该对象属于window下的子对象**;\n  创建方法为\n```\nvar xhr = new XMLHttpRequest;\n```\n2.在IE7以下， 对象为ActiveXObject,**该对象属于window下的子对象**;\n 创建方法为\n \n\n```\nvar xhr = new ActiveXObject('Microsoft.XMLHTTP');\n//括号中的必须有。\n```\n <h4>3.4 浏览器兼容判断</h4>\n\n```\n var xhr =;  //var 一个空对象\n if(window.XMLHttpRequest){\n xhr = new XMLHttpRequest;\n }  //非IE7以下\n \n else if(window.ActiveXObject){\nxhr = new ActiveXObject('Microsoft.XMLHTTP');\n}//IE7以下\n\nelse{alert(\"您的浏览器过于先进，请降级到合适的版本！\")}\n```\n\n  <h4>3.5 方法</h4>\n  这个xhr对象，自带了一些方法。\n  1.open（规定请求的类型，地址，是否异步）方法\n\n```\n  xhr.open(method,url,async) \n```\n2.send(string)方法，用于发送请求\n该方法中的string，只要在method=\"post\"时，才可以使用。\n\n3.当method==true,那么要设定就绪时执行的函数，跟回调函数有点像:\n  先说两个属性：\n  (1)xhr.responseText           //······························· 返回字符串形式的相应数据\n  (2)xhr.responseXML          //································ 返回XML形式的相应数据\n```\n\nxhr.onreadystateChange=function{\nif(xhr.readystate==4&&xhr.status==200){\n     //这里写下要回调的方法\n     document.getElementById('div').innerHTML=xhr.responseText;\n     //获取返回的文本，这里也可以写xhr.responseXML\n     \n     }\n}\nxhr.open('get','123.php',true);\nxhr.send();\n```\nOK,这是默认的**异步处理**，要执行一个就绪时的函数。\n那么，在同步模式下，即async=false时，应该这么写请求：\n\nxhr.open(\"GET\",\"/try/ajax/ajax_info.txt\",false);\nxh.send();\ndocument.getElementById(\"Div\").innerHTML=xhr.responseText;\n\n\n   <h4>3.6  onreadystatechange 存储函数</h4>\n    onreadystatechange 存储着xhr的好几种状态：\n    0：初始化未就绪    (想找老板要工资，但没准备好)\n    1：已经与服务器连接 （已经走进老板办公室）\n    2：服务器已经接受（老板已经听到你的诉求）\n    3：正在处理请求（老板在苦思冥想给不给你钱）\n    4：请求已经完成，并且响应也已经下发（想了半天给你了）\n    每当 readyState 改变时，就会触发 onreadystatechange 事件。\n\n  同时，status也需要有响应的返回值，从服务器传递回来，有两个值：\n  200 响应就绪，成功下发（会计接到老板的电话，立马爽快的给了你工资）\n  404  未找到   （会计跑路了，尽管老板同意，你还是没拿到钱）\n    <h4></h4>\n     <h4></h4>\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"Ajax初探","published":1,"updated":"2019-05-14T14:30:28.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaun0004ckufebzjjikf","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78457021\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"Ajax初探\"><a href=\"#Ajax初探\" class=\"headerlink\" title=\"Ajax初探\"></a>Ajax初探</h2><hr>\n<h2>1.环境搭建与配置</h2><br>这两天在捣鼓Ajax,期初用的都是开发工具自己集成的apache服务器，但是因为我太蠢，找不到相关的设置项和说明，又或者是我懒得找把，于是搜了一款<strong>数据库</strong>和<strong>Apache</strong>服务器集成好的本地站点包：【XAMPP】，百度下载好，按照相关说明进行配置。<br><h2>2.基本设置与文件索引目录</h2>\n\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171106140930710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>如图所示，只需要将Apache与MySQL打钩，并且star，就OK。<br>打开浏览器，输入站点ip与端口（默认是127.0.0.1）<br>然后在安装目录下的,安装盘:\\xampp\\htdocs 看到有个.html的文件，该就是刚才在浏览器中看到的。<br>可以将这个.html的文件<strong>删除</strong>，刷新浏览器，可以直接看到浏览器中的目录索引。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171106141608295?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>现在网页上127.0.0.1的目录就是文件库中的映射。<br>以后我们可以将服务器端需要响应的asp/php/txt文件，都放在  <strong>安装盘:\\xampp\\htdocs</strong>下即可，环境搭建完成。</p>\n<p></p><h2>3.喜闻乐见敲代码环节</h2><p></p>\n<h4>3.1 javascript原生Ajax</h4>\n\n<blockquote>\n<pre><code>所谓Ajax：\nA:async 异步加载\nja: javascript  脚本语言\nx:xml  前后台通信的数据载体，文本\n（鉴与json的出现，XML正在被逐渐取代，大有&quot;Ajaj&quot;的趋势）\n</code></pre></blockquote>\n  <h4> 3.2 目的</h4><br>  目的是为了提高用户体验，更新局部数据时不用刷新整个网页，就可以完成数据交互。<br>  <h4>3.3 对象(API)</h4><br> 1. 在IE7+/Chrome/Opera/Safari 中，对象为XMLHttpRequest，<strong>该对象属于window下的子对象</strong>;<br>  创建方法为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest;</span><br></pre></td></tr></table></figure><br><br>2.在IE7以下， 对象为ActiveXObject,<strong>该对象属于window下的子对象</strong>;<br> 创建方法为<br><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">//括号中的必须有。</span><br></pre></td></tr></table></figure><br><br> <h4>3.4 浏览器兼容判断</h4>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var xhr =;  //var 一个空对象</span><br><span class=\"line\"> if(window.XMLHttpRequest)&#123;</span><br><span class=\"line\"> xhr = new XMLHttpRequest;</span><br><span class=\"line\"> &#125;  //非IE7以下</span><br><span class=\"line\"> </span><br><span class=\"line\"> else if(window.ActiveXObject)&#123;</span><br><span class=\"line\">xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">&#125;//IE7以下</span><br><span class=\"line\"></span><br><span class=\"line\">else&#123;alert(&quot;您的浏览器过于先进，请降级到合适的版本！&quot;)&#125;</span><br></pre></td></tr></table></figure>\n  <h4>3.5 方法</h4><br>  这个xhr对象，自带了一些方法。<br>  1.open（规定请求的类型，地址，是否异步）方法<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(method,url,async)</span><br></pre></td></tr></table></figure><br><br>2.send(string)方法，用于发送请求<br>该方法中的string，只要在method=”post”时，才可以使用。<br><br>3.当method==true,那么要设定就绪时执行的函数，跟回调函数有点像:<br>  先说两个属性：<br>  (1)xhr.responseText           //······························· 返回字符串形式的相应数据<br>  (2)xhr.responseXML          //································ 返回XML形式的相应数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystateChange=function&#123;</span><br><span class=\"line\">if(xhr.readystate==4&amp;&amp;xhr.status==200)&#123;</span><br><span class=\"line\">     //这里写下要回调的方法</span><br><span class=\"line\">     document.getElementById(&apos;div&apos;).innerHTML=xhr.responseText;</span><br><span class=\"line\">     //获取返回的文本，这里也可以写xhr.responseXML</span><br><span class=\"line\">     </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.open(&apos;get&apos;,&apos;123.php&apos;,true);</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure><br><br>OK,这是默认的<strong>异步处理</strong>，要执行一个就绪时的函数。<br>那么，在同步模式下，即async=false时，应该这么写请求：<br><br>xhr.open(“GET”,”/try/ajax/ajax_info.txt”,false);<br>xh.send();<br>document.getElementById(“Div”).innerHTML=xhr.responseText;<br><br><br>   <h4>3.6  onreadystatechange 存储函数</h4><br>    onreadystatechange 存储着xhr的好几种状态：<br>    0：初始化未就绪    (想找老板要工资，但没准备好)<br>    1：已经与服务器连接 （已经走进老板办公室）<br>    2：服务器已经接受（老板已经听到你的诉求）<br>    3：正在处理请求（老板在苦思冥想给不给你钱）<br>    4：请求已经完成，并且响应也已经下发（想了半天给你了）<br>    每当 readyState 改变时，就会触发 onreadystatechange 事件。<br><br>  同时，status也需要有响应的返回值，从服务器传递回来，有两个值：<br>  200 响应就绪，成功下发（会计接到老板的电话，立马爽快的给了你工资）<br>  404  未找到   （会计跑路了，尽管老板同意，你还是没拿到钱）<br>    <h4></h4><br>     <h4></h4>\n\n\n\n\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78457021\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"Ajax初探\"><a href=\"#Ajax初探\" class=\"headerlink\" title=\"Ajax初探\"></a>Ajax初探</h2><hr>\n<h2>1.环境搭建与配置</h2><br>这两天在捣鼓Ajax,期初用的都是开发工具自己集成的apache服务器，但是因为我太蠢，找不到相关的设置项和说明，又或者是我懒得找把，于是搜了一款<strong>数据库</strong>和<strong>Apache</strong>服务器集成好的本地站点包：【XAMPP】，百度下载好，按照相关说明进行配置。<br><h2>2.基本设置与文件索引目录</h2>\n\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171106140930710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>如图所示，只需要将Apache与MySQL打钩，并且star，就OK。<br>打开浏览器，输入站点ip与端口（默认是127.0.0.1）<br>然后在安装目录下的,安装盘:\\xampp\\htdocs 看到有个.html的文件，该就是刚才在浏览器中看到的。<br>可以将这个.html的文件<strong>删除</strong>，刷新浏览器，可以直接看到浏览器中的目录索引。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171106141608295?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>现在网页上127.0.0.1的目录就是文件库中的映射。<br>以后我们可以将服务器端需要响应的asp/php/txt文件，都放在  <strong>安装盘:\\xampp\\htdocs</strong>下即可，环境搭建完成。</p>\n<p></p><h2>3.喜闻乐见敲代码环节</h2><p></p>\n<h4>3.1 javascript原生Ajax</h4>\n\n<blockquote>\n<pre><code>所谓Ajax：\nA:async 异步加载\nja: javascript  脚本语言\nx:xml  前后台通信的数据载体，文本\n（鉴与json的出现，XML正在被逐渐取代，大有&quot;Ajaj&quot;的趋势）\n</code></pre></blockquote>\n  <h4> 3.2 目的</h4><br>  目的是为了提高用户体验，更新局部数据时不用刷新整个网页，就可以完成数据交互。<br>  <h4>3.3 对象(API)</h4><br> 1. 在IE7+/Chrome/Opera/Safari 中，对象为XMLHttpRequest，<strong>该对象属于window下的子对象</strong>;<br>  创建方法为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest;</span><br></pre></td></tr></table></figure><br><br>2.在IE7以下， 对象为ActiveXObject,<strong>该对象属于window下的子对象</strong>;<br> 创建方法为<br><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">//括号中的必须有。</span><br></pre></td></tr></table></figure><br><br> <h4>3.4 浏览器兼容判断</h4>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var xhr =;  //var 一个空对象</span><br><span class=\"line\"> if(window.XMLHttpRequest)&#123;</span><br><span class=\"line\"> xhr = new XMLHttpRequest;</span><br><span class=\"line\"> &#125;  //非IE7以下</span><br><span class=\"line\"> </span><br><span class=\"line\"> else if(window.ActiveXObject)&#123;</span><br><span class=\"line\">xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class=\"line\">&#125;//IE7以下</span><br><span class=\"line\"></span><br><span class=\"line\">else&#123;alert(&quot;您的浏览器过于先进，请降级到合适的版本！&quot;)&#125;</span><br></pre></td></tr></table></figure>\n  <h4>3.5 方法</h4><br>  这个xhr对象，自带了一些方法。<br>  1.open（规定请求的类型，地址，是否异步）方法<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(method,url,async)</span><br></pre></td></tr></table></figure><br><br>2.send(string)方法，用于发送请求<br>该方法中的string，只要在method=”post”时，才可以使用。<br><br>3.当method==true,那么要设定就绪时执行的函数，跟回调函数有点像:<br>  先说两个属性：<br>  (1)xhr.responseText           //······························· 返回字符串形式的相应数据<br>  (2)xhr.responseXML          //································ 返回XML形式的相应数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">xhr.onreadystateChange=function&#123;</span><br><span class=\"line\">if(xhr.readystate==4&amp;&amp;xhr.status==200)&#123;</span><br><span class=\"line\">     //这里写下要回调的方法</span><br><span class=\"line\">     document.getElementById(&apos;div&apos;).innerHTML=xhr.responseText;</span><br><span class=\"line\">     //获取返回的文本，这里也可以写xhr.responseXML</span><br><span class=\"line\">     </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.open(&apos;get&apos;,&apos;123.php&apos;,true);</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure><br><br>OK,这是默认的<strong>异步处理</strong>，要执行一个就绪时的函数。<br>那么，在同步模式下，即async=false时，应该这么写请求：<br><br>xhr.open(“GET”,”/try/ajax/ajax_info.txt”,false);<br>xh.send();<br>document.getElementById(“Div”).innerHTML=xhr.responseText;<br><br><br>   <h4>3.6  onreadystatechange 存储函数</h4><br>    onreadystatechange 存储着xhr的好几种状态：<br>    0：初始化未就绪    (想找老板要工资，但没准备好)<br>    1：已经与服务器连接 （已经走进老板办公室）<br>    2：服务器已经接受（老板已经听到你的诉求）<br>    3：正在处理请求（老板在苦思冥想给不给你钱）<br>    4：请求已经完成，并且响应也已经下发（想了半天给你了）<br>    每当 readyState 改变时，就会触发 onreadystatechange 事件。<br><br>  同时，status也需要有响应的返回值，从服务器传递回来，有两个值：<br>  200 响应就绪，成功下发（会计接到老板的电话，立马爽快的给了你工资）<br>  404  未找到   （会计跑路了，尽管老板同意，你还是没拿到钱）<br>    <h4></h4><br>     <h4></h4>\n\n\n\n\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"AngularJS学习笔记3","date":"2017-12-05T10:44:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78719707)\n**eg13.依赖注入**\n=========\n故事要从js说起，在js的function(){}中，参数可以传递为另外一个函数。举个例子：\n\n```\nfunction first(){\n\treturn 3\n}\n//参数函数1\nfunction second(){\n\treturn 5 \n}\n//参数函数2\n\nfunction add(a,b){\n\tvar a_  = a();\n\tvar b_= b();\n\talert(a_+b_)\n}\n//总函数\n\nadd(first,second);//调用总函数，其参数为first和second的返回值，弹出 8\n\n\n```\n不光如此，在回调函数中，大致也是这样的思路：\n```\nfunction callback(result){\n\tconsole.log(\"您的计算结果为:\"+result)\n}\nfunction fn(num,callback){\n\tnum = num*num\n\tcallback(num);\n}\nfn(10,callback);//控制台：您的计算结果为100\n```\n*简短回忆后，发现javaScript函数的特点，函数定义时的参数个数是定死的，但是如果传入的参数不达标/超出/太少，那么函数体就会报错。\n例如上面的add(first,second)只传入add(first)就会报错：b is not a function*\n**普通函数的参数往往是由调用它的人时候来决定的**\n回到angular中，依赖注入与javaScript函数正好相反，函数体一旦定义了参数，调用它的人就得老老实实的传入指定数量/类型的参数。\nfor eg1:\n\n```\n\t<script type=\"text/javascript\">\n\t\tvar app = angular.module('app',[]);\n\t\tapp.controller('c',function(){\n\t\t\talert(arguments.length);//这里打印出0，因为没参数，这个OK，接着往下看\n\t\t});\n\t</script>\n\n\n\n```\n```\n\n\t<script type=\"text/javascript\">\n\t\tvar app = angular.module('app',[]);\n\t\tapp.controller('c',function(s,b){\n\t\t\talert(arguments.length);\n\t\t});\n\t</script>\n这里我们发现，虽然传入了s,b两个参数，但是压根连弹窗都没有，只能说明，传入的参数不合法，函数不认。\n\n\n```\n```\n\tfor eg3:\n\t<script type=\"text/javascript\">\n\t\tvar app = angular.module('app',[]);\n\t\tapp.controller('c',function(){\n\t\t\talert(arguments.length);\n\t\t});\n\t</script>\n```\n\n```\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/AngularJS学习笔记3.md","raw":"---\ntitle: AngularJS学习笔记3\ndate: 2017-12-05 18:44:00\ntags: angularjs\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78719707)\n**eg13.依赖注入**\n=========\n故事要从js说起，在js的function(){}中，参数可以传递为另外一个函数。举个例子：\n\n```\nfunction first(){\n\treturn 3\n}\n//参数函数1\nfunction second(){\n\treturn 5 \n}\n//参数函数2\n\nfunction add(a,b){\n\tvar a_  = a();\n\tvar b_= b();\n\talert(a_+b_)\n}\n//总函数\n\nadd(first,second);//调用总函数，其参数为first和second的返回值，弹出 8\n\n\n```\n不光如此，在回调函数中，大致也是这样的思路：\n```\nfunction callback(result){\n\tconsole.log(\"您的计算结果为:\"+result)\n}\nfunction fn(num,callback){\n\tnum = num*num\n\tcallback(num);\n}\nfn(10,callback);//控制台：您的计算结果为100\n```\n*简短回忆后，发现javaScript函数的特点，函数定义时的参数个数是定死的，但是如果传入的参数不达标/超出/太少，那么函数体就会报错。\n例如上面的add(first,second)只传入add(first)就会报错：b is not a function*\n**普通函数的参数往往是由调用它的人时候来决定的**\n回到angular中，依赖注入与javaScript函数正好相反，函数体一旦定义了参数，调用它的人就得老老实实的传入指定数量/类型的参数。\nfor eg1:\n\n```\n\t<script type=\"text/javascript\">\n\t\tvar app = angular.module('app',[]);\n\t\tapp.controller('c',function(){\n\t\t\talert(arguments.length);//这里打印出0，因为没参数，这个OK，接着往下看\n\t\t});\n\t</script>\n\n\n\n```\n```\n\n\t<script type=\"text/javascript\">\n\t\tvar app = angular.module('app',[]);\n\t\tapp.controller('c',function(s,b){\n\t\t\talert(arguments.length);\n\t\t});\n\t</script>\n这里我们发现，虽然传入了s,b两个参数，但是压根连弹窗都没有，只能说明，传入的参数不合法，函数不认。\n\n\n```\n```\n\tfor eg3:\n\t<script type=\"text/javascript\">\n\t\tvar app = angular.module('app',[]);\n\t\tapp.controller('c',function(){\n\t\t\talert(arguments.length);\n\t\t});\n\t</script>\n```\n\n```\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"AngularJS学习笔记3","published":1,"updated":"2019-05-14T14:30:28.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaus0006ckufic6q49zd","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78719707\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h1 id=\"eg13-依赖注入\"><a href=\"#eg13-依赖注入\" class=\"headerlink\" title=\"eg13.依赖注入\"></a><strong>eg13.依赖注入</strong></h1><p>故事要从js说起，在js的function(){}中，参数可以传递为另外一个函数。举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function first()&#123;</span><br><span class=\"line\">\treturn 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//参数函数1</span><br><span class=\"line\">function second()&#123;</span><br><span class=\"line\">\treturn 5 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//参数函数2</span><br><span class=\"line\"></span><br><span class=\"line\">function add(a,b)&#123;</span><br><span class=\"line\">\tvar a_  = a();</span><br><span class=\"line\">\tvar b_= b();</span><br><span class=\"line\">\talert(a_+b_)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//总函数</span><br><span class=\"line\"></span><br><span class=\"line\">add(first,second);//调用总函数，其参数为first和second的返回值，弹出 8</span><br></pre></td></tr></table></figure>\n<p>不光如此，在回调函数中，大致也是这样的思路：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function callback(result)&#123;</span><br><span class=\"line\">\tconsole.log(&quot;您的计算结果为:&quot;+result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function fn(num,callback)&#123;</span><br><span class=\"line\">\tnum = num*num</span><br><span class=\"line\">\tcallback(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(10,callback);//控制台：您的计算结果为100</span><br></pre></td></tr></table></figure></p>\n<p><em>简短回忆后，发现javaScript函数的特点，函数定义时的参数个数是定死的，但是如果传入的参数不达标/超出/太少，那么函数体就会报错。<br>例如上面的add(first,second)只传入add(first)就会报错：b is not a function</em><br><strong>普通函数的参数往往是由调用它的人时候来决定的</strong><br>回到angular中，依赖注入与javaScript函数正好相反，函数体一旦定义了参数，调用它的人就得老老实实的传入指定数量/类型的参数。<br>for eg1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar app = angular.module(&apos;app&apos;,[]);</span><br><span class=\"line\">\tapp.controller(&apos;c&apos;,function()&#123;</span><br><span class=\"line\">\t\talert(arguments.length);//这里打印出0，因为没参数，这个OK，接着往下看</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\tvar app = angular.module(&apos;app&apos;,[]);</span><br><span class=\"line\">\t\tapp.controller(&apos;c&apos;,function(s,b)&#123;</span><br><span class=\"line\">\t\t\talert(arguments.length);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">这里我们发现，虽然传入了s,b两个参数，但是压根连弹窗都没有，只能说明，传入的参数不合法，函数不认。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for eg3:</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar app = angular.module(&apos;app&apos;,[]);</span><br><span class=\"line\">\tapp.controller(&apos;c&apos;,function()&#123;</span><br><span class=\"line\">\t\talert(arguments.length);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><code>`</code></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78719707\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h1 id=\"eg13-依赖注入\"><a href=\"#eg13-依赖注入\" class=\"headerlink\" title=\"eg13.依赖注入\"></a><strong>eg13.依赖注入</strong></h1><p>故事要从js说起，在js的function(){}中，参数可以传递为另外一个函数。举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function first()&#123;</span><br><span class=\"line\">\treturn 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//参数函数1</span><br><span class=\"line\">function second()&#123;</span><br><span class=\"line\">\treturn 5 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//参数函数2</span><br><span class=\"line\"></span><br><span class=\"line\">function add(a,b)&#123;</span><br><span class=\"line\">\tvar a_  = a();</span><br><span class=\"line\">\tvar b_= b();</span><br><span class=\"line\">\talert(a_+b_)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//总函数</span><br><span class=\"line\"></span><br><span class=\"line\">add(first,second);//调用总函数，其参数为first和second的返回值，弹出 8</span><br></pre></td></tr></table></figure>\n<p>不光如此，在回调函数中，大致也是这样的思路：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function callback(result)&#123;</span><br><span class=\"line\">\tconsole.log(&quot;您的计算结果为:&quot;+result)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function fn(num,callback)&#123;</span><br><span class=\"line\">\tnum = num*num</span><br><span class=\"line\">\tcallback(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(10,callback);//控制台：您的计算结果为100</span><br></pre></td></tr></table></figure></p>\n<p><em>简短回忆后，发现javaScript函数的特点，函数定义时的参数个数是定死的，但是如果传入的参数不达标/超出/太少，那么函数体就会报错。<br>例如上面的add(first,second)只传入add(first)就会报错：b is not a function</em><br><strong>普通函数的参数往往是由调用它的人时候来决定的</strong><br>回到angular中，依赖注入与javaScript函数正好相反，函数体一旦定义了参数，调用它的人就得老老实实的传入指定数量/类型的参数。<br>for eg1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar app = angular.module(&apos;app&apos;,[]);</span><br><span class=\"line\">\tapp.controller(&apos;c&apos;,function()&#123;</span><br><span class=\"line\">\t\talert(arguments.length);//这里打印出0，因为没参数，这个OK，接着往下看</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\tvar app = angular.module(&apos;app&apos;,[]);</span><br><span class=\"line\">\t\tapp.controller(&apos;c&apos;,function(s,b)&#123;</span><br><span class=\"line\">\t\t\talert(arguments.length);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">这里我们发现，虽然传入了s,b两个参数，但是压根连弹窗都没有，只能说明，传入的参数不合法，函数不认。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for eg3:</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar app = angular.module(&apos;app&apos;,[]);</span><br><span class=\"line\">\tapp.controller(&apos;c&apos;,function()&#123;</span><br><span class=\"line\">\t\talert(arguments.length);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><code>`</code></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"Angular1.4.6 & Bootstrap3.3.7搭建后台人员管理系统 1.0.0","date":"2017-12-19T07:35:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78842927)\n\n\n**前言：接触前端快1满一年了，从什么都不会，一步步摸索，走到现在，觉得前方的路还是很迷茫，但是每天感觉自己都在进步，这是最好的！希望自己能坚持下去，也跟各位同仁共勉！**\n\n```\n@important message!\n{\n    \"name\":\"Manage-system-By-AngularJs\",\n    \"version\":\"1.0.0\",\n    \"author\":\"ZQ-jhon\",\n    \"connect\":\"QQ:350037310\"\n}\n```\n\n直接上全部效果的演示图：\nLet's view together:\n\n![GIF加载中，请耐心等待... ...](http://img.blog.csdn.net/20171220094856558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n\n## 1.Angualr和Bootstrap的火花 ##\n\nAngular是开发SPA的得力框架，其数据双向绑定和指令系统能够最大程度的保持页面的\n\n整洁干净，而Bootstrap作为一个UI库，也能够很好的满足本系统的需求。\n\n## 2.思路 ##\n\n2.1 在后台人员管理系统中，需要有以下功能：增、删、改、查。\n\n为了实现这些功能，就必须在项目中留好数据接口，方便跟后台数据进行I/O操作。\n\n2.2 为了实现部分功能的 toggle()，例如：\n\n 1. 点击编辑，文本框的可编辑状态会来回在:  可编辑/不可编辑  切换。\n\n 2. 点击编辑，删除button的 show 与 hidden。\n\n必须使用一个ng-show = bool/ng-disabled = !bool，bool的具体方法每次访问，会\n\n更改布尔值为对立值：\n\n```\n//初始化:\n$scope.bool = true;\n\n//调用改变自身布尔值\n$scope.toggle = function(){        \n\n\n$scope.bool = !$scope.bool;  //谁调谁改变\n \n}\n```\n\n\n而这个`$scope`的bool()方法，应该位于`$rootscope`是最好的解决方式，所有的局部\n\ncontroller都可以访问到根作用域。\n\n因此，改写如下：\n\n```\n$rootscope.toggle = function(){        \n\n\n$rootscope.bool = !$scope.bool;  //谁调谁改变\n \n}\n```\n\n\n## 3.实现 ##\n\n3.1 框架搭建 ：使用bootstrap搭建框架\n\n3.2 初始数据展示：为了让用户有一个直观的展示，当前界面上会mock一些假的数据上\n\n去，仅供参考(当然这些数据也可以删除)，mock的方法为，在`$scope`上绑定一个数\n\n组，该数组是对象数组，然后用过ng-repeat来展现在我们的bootstrap表格中。\n\n3.3 框架代码：\n\n```\n<body>\n\t\t\t\t\t\t\t\n\n        <div class=\"container-fluid\">\n            <h1 class=\"text-center\">增删改查后台管理系统</h1>\n       <table class=\"table table-responsive table-hover\">\n           <thead>\n               <tr>\n                   <td>序号</td>\n                   <td>姓名</td>\n                   <td>年龄</td>\n                   <td>职务</td>\n                   \n               </tr>\n               <tr>\n                   <td><span class=\"glyphicon glyphicon-pencil btn btn-info\">编辑</span></td>\n               \n                   <td></td>\n                   <td><input type=\"text\" value=\"\" ng-disabled=\"bool\"/></td>\n                   <td><input type=\"text\" value=\"\" ng-disabled=\"bool\"/></td>\n                   <td><input type=\"text\" value=\"\" ng-disabled=\"bool\"/></td>\n                   <td><button class=\"btn btn-danger\">删除</button></td>\n                   \n               </tr>\n           </thead>\n       </table>\n       \n       <button class=\"btn btn-success\"><i class=\"glyphicon glyphicon-user\"></i>创建新用户</button> \t\n        </div> \n        </body>\n```\n3.4 ng指令系统的控制原理与规划过程 \n\n  3.4.1     指令构建\n  \n    首先在表格上声明 `ng-app =\"myapp\"`\n         \n    并且声明控制器`ng-controller=\"ctrl\"`\n     \n    接着，在需要toggle切换的地方赋值，如果默认要false,可以使用 \n         \n      ng-show=\"!bool\"或者 ng-disabled=\"bool\"\n         \n    这里因为初始值是：\n\n       `$scope.bool = true`\n\n  然后，在$`scope`上绑定初始数据，即一个对象组：\n     \n\n```\n        var app=angular.module('myApp',[]);\n \tapp.controller('ctrl',function($scope){\n \t\t$scope.users = [\n \t\t{name:'LiMing',age:23,job:'fontAnggener'},\n \t\t{name:'Hanmeimei',age:22,job:'teacher'},\n \t\t{name:'Wangjie',age:25,job:'driver'},\n \t\t{name:'Liusir',age:27,job:'business'},\n \t\t{name:'guojingming',age:29,job:'editor'},\n \t\t{name:'Yaoming',age:33,job:'player'}\n \t\t\n \t\t];\n```\n\n  有了元数据，就可以为所欲为了，在需要的位置，例如 table 中的 tr 进行ng - repeat\n\n循环，循环的结果是\n\n对象数组中每一个对象！\n==\n然后在对应的`<td></td>`中使用{{use.name}}或者balalala进行取值\n\n\n\n \n   为了完成自动化序号排列以及删除功能，需要$index服务，不需要依赖注入。\n   \n    当每个删除按钮点击的一瞬间，Angular如何判断该删除哪个呢？\n\n \n    我们为每一个删除按钮button添加一个指令 `ng-click = 'remove($index)'`\n    \n这里，Angular就是通过`$index`来自行判定当前的行序。来看这一块的代码：\n\n```\n<tr ng-repeat=\"user in users\">\n    <td>\n        <span class=\"glyphicon glyphicon-pencil btn btn-info\" ng-click=\"toggle()\">编辑</span>\n    </td>\n\n    <td>{{$index+1}}</td>\n    <td>\n        <input type=\"text\" value=\"{{user.name}}\" ng-disabled=\"bool\" />\n    </td>\n    <td>\n        <input type=\"text\" value=\"{{user.age}}\" ng-disabled=\"bool\" />\n    </td>\n    <td>\n        <input type=\"text\" value=\"{{user.job}}\" ng-disabled=\"bool\" />\n    </td>\n    <td>\n        <button class=\"btn btn-danger\" ng-click=\"remove($index)\" ng-show=\"!bool\">删除</button>\n    </td>\n\n</tr>\n```\nOK，删除，排序，Toggle功能都完成了，还有一个增加新用户怎么完成呢？\n\n这个更简单了，直接往Object Array 里 push 对象即可：\n\n```\n/****这是增加用户按钮的指令*****/\nng-click = \"addUser()\"\n\n/*****以下是js*****/\n\n $scope.addUser = function(){\n       var index = $scope.users.length-1;  //确定当前最大的行序（ps.本来想自己实现 $index 功能的。。。）\n  \n       \t$scope.users.push({name:'',age:'',job:''});\n       \n       }\n```\n\n以上，就完成了一个后台管理系统，这是初始版本，后续我会增加新的功能在里面。\n\n\n\n## 4.初步完成alpha版本，觉得还是有很多不足之处： ##\n\n1.数据很糙，很杂，controller中的东西太过冗杂，而我并没有选择使用构建工具来模块\n\n化、打包、合并，这不是一个好习惯。\n\n2.所有的输入框没有加入过滤器，例如：姓名的位置我们可以用filter或者正则来强行限\n\n定只能输英文，而不是数字或者标点。 这是一个细节不够完善的地方。\n\n3.在点下编辑的时候，文本框变得可以编辑，再次点下编辑，文本框变成了丑丑的不可\n\n编辑，我在想：**\n\n如何可以使得文字在不可编辑的状态下自动切换为`<p>`标签，而在可编辑的状态下变成`<input>`表单？\n------------------------------------------------\n\n**\n4.自学了这么久ajax,nodejs，然而并没有从后端拉任何数据，所有数据都是angular来\n\n进行操作的，这样也不好，我希望尽快精通express，来进行项目的全栈构建。\n\n以上问题留给自己去解决。\n\n\n最后，附上我的Github地址，fork 或者 download都可以\n\n地址：https://github.com/ZQ-jhon/Manage-system-By-AngularJs\n\n注意：将 index.html中的\n\n```\n<script>以及<link>的src 及 href 替换 成本地目录 \n```\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/Angular1-4-6-Bootstrap3-3-7搭建后台人员管理系统-1-0-0.md","raw":"---\ntitle: Angular1.4.6 & Bootstrap3.3.7搭建后台人员管理系统 1.0.0 \ndate: 2017-12-19 15:35:00\ntags: angularjs\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78842927)\n\n\n**前言：接触前端快1满一年了，从什么都不会，一步步摸索，走到现在，觉得前方的路还是很迷茫，但是每天感觉自己都在进步，这是最好的！希望自己能坚持下去，也跟各位同仁共勉！**\n\n```\n@important message!\n{\n    \"name\":\"Manage-system-By-AngularJs\",\n    \"version\":\"1.0.0\",\n    \"author\":\"ZQ-jhon\",\n    \"connect\":\"QQ:350037310\"\n}\n```\n\n直接上全部效果的演示图：\nLet's view together:\n\n![GIF加载中，请耐心等待... ...](http://img.blog.csdn.net/20171220094856558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n\n## 1.Angualr和Bootstrap的火花 ##\n\nAngular是开发SPA的得力框架，其数据双向绑定和指令系统能够最大程度的保持页面的\n\n整洁干净，而Bootstrap作为一个UI库，也能够很好的满足本系统的需求。\n\n## 2.思路 ##\n\n2.1 在后台人员管理系统中，需要有以下功能：增、删、改、查。\n\n为了实现这些功能，就必须在项目中留好数据接口，方便跟后台数据进行I/O操作。\n\n2.2 为了实现部分功能的 toggle()，例如：\n\n 1. 点击编辑，文本框的可编辑状态会来回在:  可编辑/不可编辑  切换。\n\n 2. 点击编辑，删除button的 show 与 hidden。\n\n必须使用一个ng-show = bool/ng-disabled = !bool，bool的具体方法每次访问，会\n\n更改布尔值为对立值：\n\n```\n//初始化:\n$scope.bool = true;\n\n//调用改变自身布尔值\n$scope.toggle = function(){        \n\n\n$scope.bool = !$scope.bool;  //谁调谁改变\n \n}\n```\n\n\n而这个`$scope`的bool()方法，应该位于`$rootscope`是最好的解决方式，所有的局部\n\ncontroller都可以访问到根作用域。\n\n因此，改写如下：\n\n```\n$rootscope.toggle = function(){        \n\n\n$rootscope.bool = !$scope.bool;  //谁调谁改变\n \n}\n```\n\n\n## 3.实现 ##\n\n3.1 框架搭建 ：使用bootstrap搭建框架\n\n3.2 初始数据展示：为了让用户有一个直观的展示，当前界面上会mock一些假的数据上\n\n去，仅供参考(当然这些数据也可以删除)，mock的方法为，在`$scope`上绑定一个数\n\n组，该数组是对象数组，然后用过ng-repeat来展现在我们的bootstrap表格中。\n\n3.3 框架代码：\n\n```\n<body>\n\t\t\t\t\t\t\t\n\n        <div class=\"container-fluid\">\n            <h1 class=\"text-center\">增删改查后台管理系统</h1>\n       <table class=\"table table-responsive table-hover\">\n           <thead>\n               <tr>\n                   <td>序号</td>\n                   <td>姓名</td>\n                   <td>年龄</td>\n                   <td>职务</td>\n                   \n               </tr>\n               <tr>\n                   <td><span class=\"glyphicon glyphicon-pencil btn btn-info\">编辑</span></td>\n               \n                   <td></td>\n                   <td><input type=\"text\" value=\"\" ng-disabled=\"bool\"/></td>\n                   <td><input type=\"text\" value=\"\" ng-disabled=\"bool\"/></td>\n                   <td><input type=\"text\" value=\"\" ng-disabled=\"bool\"/></td>\n                   <td><button class=\"btn btn-danger\">删除</button></td>\n                   \n               </tr>\n           </thead>\n       </table>\n       \n       <button class=\"btn btn-success\"><i class=\"glyphicon glyphicon-user\"></i>创建新用户</button> \t\n        </div> \n        </body>\n```\n3.4 ng指令系统的控制原理与规划过程 \n\n  3.4.1     指令构建\n  \n    首先在表格上声明 `ng-app =\"myapp\"`\n         \n    并且声明控制器`ng-controller=\"ctrl\"`\n     \n    接着，在需要toggle切换的地方赋值，如果默认要false,可以使用 \n         \n      ng-show=\"!bool\"或者 ng-disabled=\"bool\"\n         \n    这里因为初始值是：\n\n       `$scope.bool = true`\n\n  然后，在$`scope`上绑定初始数据，即一个对象组：\n     \n\n```\n        var app=angular.module('myApp',[]);\n \tapp.controller('ctrl',function($scope){\n \t\t$scope.users = [\n \t\t{name:'LiMing',age:23,job:'fontAnggener'},\n \t\t{name:'Hanmeimei',age:22,job:'teacher'},\n \t\t{name:'Wangjie',age:25,job:'driver'},\n \t\t{name:'Liusir',age:27,job:'business'},\n \t\t{name:'guojingming',age:29,job:'editor'},\n \t\t{name:'Yaoming',age:33,job:'player'}\n \t\t\n \t\t];\n```\n\n  有了元数据，就可以为所欲为了，在需要的位置，例如 table 中的 tr 进行ng - repeat\n\n循环，循环的结果是\n\n对象数组中每一个对象！\n==\n然后在对应的`<td></td>`中使用{{use.name}}或者balalala进行取值\n\n\n\n \n   为了完成自动化序号排列以及删除功能，需要$index服务，不需要依赖注入。\n   \n    当每个删除按钮点击的一瞬间，Angular如何判断该删除哪个呢？\n\n \n    我们为每一个删除按钮button添加一个指令 `ng-click = 'remove($index)'`\n    \n这里，Angular就是通过`$index`来自行判定当前的行序。来看这一块的代码：\n\n```\n<tr ng-repeat=\"user in users\">\n    <td>\n        <span class=\"glyphicon glyphicon-pencil btn btn-info\" ng-click=\"toggle()\">编辑</span>\n    </td>\n\n    <td>{{$index+1}}</td>\n    <td>\n        <input type=\"text\" value=\"{{user.name}}\" ng-disabled=\"bool\" />\n    </td>\n    <td>\n        <input type=\"text\" value=\"{{user.age}}\" ng-disabled=\"bool\" />\n    </td>\n    <td>\n        <input type=\"text\" value=\"{{user.job}}\" ng-disabled=\"bool\" />\n    </td>\n    <td>\n        <button class=\"btn btn-danger\" ng-click=\"remove($index)\" ng-show=\"!bool\">删除</button>\n    </td>\n\n</tr>\n```\nOK，删除，排序，Toggle功能都完成了，还有一个增加新用户怎么完成呢？\n\n这个更简单了，直接往Object Array 里 push 对象即可：\n\n```\n/****这是增加用户按钮的指令*****/\nng-click = \"addUser()\"\n\n/*****以下是js*****/\n\n $scope.addUser = function(){\n       var index = $scope.users.length-1;  //确定当前最大的行序（ps.本来想自己实现 $index 功能的。。。）\n  \n       \t$scope.users.push({name:'',age:'',job:''});\n       \n       }\n```\n\n以上，就完成了一个后台管理系统，这是初始版本，后续我会增加新的功能在里面。\n\n\n\n## 4.初步完成alpha版本，觉得还是有很多不足之处： ##\n\n1.数据很糙，很杂，controller中的东西太过冗杂，而我并没有选择使用构建工具来模块\n\n化、打包、合并，这不是一个好习惯。\n\n2.所有的输入框没有加入过滤器，例如：姓名的位置我们可以用filter或者正则来强行限\n\n定只能输英文，而不是数字或者标点。 这是一个细节不够完善的地方。\n\n3.在点下编辑的时候，文本框变得可以编辑，再次点下编辑，文本框变成了丑丑的不可\n\n编辑，我在想：**\n\n如何可以使得文字在不可编辑的状态下自动切换为`<p>`标签，而在可编辑的状态下变成`<input>`表单？\n------------------------------------------------\n\n**\n4.自学了这么久ajax,nodejs，然而并没有从后端拉任何数据，所有数据都是angular来\n\n进行操作的，这样也不好，我希望尽快精通express，来进行项目的全栈构建。\n\n以上问题留给自己去解决。\n\n\n最后，附上我的Github地址，fork 或者 download都可以\n\n地址：https://github.com/ZQ-jhon/Manage-system-By-AngularJs\n\n注意：将 index.html中的\n\n```\n<script>以及<link>的src 及 href 替换 成本地目录 \n```\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"Angular1-4-6-Bootstrap3-3-7搭建后台人员管理系统-1-0-0","published":1,"updated":"2019-05-14T14:30:28.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaux0009ckufzz9rbwb8","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78842927\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p><strong>前言：接触前端快1满一年了，从什么都不会，一步步摸索，走到现在，觉得前方的路还是很迷茫，但是每天感觉自己都在进步，这是最好的！希望自己能坚持下去，也跟各位同仁共勉！</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@important message!</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;:&quot;Manage-system-By-AngularJs&quot;,</span><br><span class=\"line\">    &quot;version&quot;:&quot;1.0.0&quot;,</span><br><span class=\"line\">    &quot;author&quot;:&quot;ZQ-jhon&quot;,</span><br><span class=\"line\">    &quot;connect&quot;:&quot;QQ:350037310&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接上全部效果的演示图：<br>Let’s view together:</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171220094856558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"GIF加载中，请耐心等待... ...\" title=\"\" class=\"\">\n                <p>GIF加载中，请耐心等待... ...</p>\n            </figure>\n<h2 id=\"1-Angualr和Bootstrap的火花\"><a href=\"#1-Angualr和Bootstrap的火花\" class=\"headerlink\" title=\"1.Angualr和Bootstrap的火花\"></a>1.Angualr和Bootstrap的火花</h2><p>Angular是开发SPA的得力框架，其数据双向绑定和指令系统能够最大程度的保持页面的</p>\n<p>整洁干净，而Bootstrap作为一个UI库，也能够很好的满足本系统的需求。</p>\n<h2 id=\"2-思路\"><a href=\"#2-思路\" class=\"headerlink\" title=\"2.思路\"></a>2.思路</h2><p>2.1 在后台人员管理系统中，需要有以下功能：增、删、改、查。</p>\n<p>为了实现这些功能，就必须在项目中留好数据接口，方便跟后台数据进行I/O操作。</p>\n<p>2.2 为了实现部分功能的 toggle()，例如：</p>\n<ol>\n<li><p>点击编辑，文本框的可编辑状态会来回在:  可编辑/不可编辑  切换。</p>\n</li>\n<li><p>点击编辑，删除button的 show 与 hidden。</p>\n</li>\n</ol>\n<p>必须使用一个ng-show = bool/ng-disabled = !bool，bool的具体方法每次访问，会</p>\n<p>更改布尔值为对立值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化:</span><br><span class=\"line\">$scope.bool = true;</span><br><span class=\"line\"></span><br><span class=\"line\">//调用改变自身布尔值</span><br><span class=\"line\">$scope.toggle = function()&#123;        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$scope.bool = !$scope.bool;  //谁调谁改变</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而这个<code>$scope</code>的bool()方法，应该位于<code>$rootscope</code>是最好的解决方式，所有的局部</p>\n<p>controller都可以访问到根作用域。</p>\n<p>因此，改写如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$rootscope.toggle = function()&#123;        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$rootscope.bool = !$scope.bool;  //谁调谁改变</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h2><p>3.1 框架搭建 ：使用bootstrap搭建框架</p>\n<p>3.2 初始数据展示：为了让用户有一个直观的展示，当前界面上会mock一些假的数据上</p>\n<p>去，仅供参考(当然这些数据也可以删除)，mock的方法为，在<code>$scope</code>上绑定一个数</p>\n<p>组，该数组是对象数组，然后用过ng-repeat来展现在我们的bootstrap表格中。</p>\n<p>3.3 框架代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class=\"line\">            &lt;h1 class=&quot;text-center&quot;&gt;增删改查后台管理系统&lt;/h1&gt;</span><br><span class=\"line\">       &lt;table class=&quot;table table-responsive table-hover&quot;&gt;</span><br><span class=\"line\">           &lt;thead&gt;</span><br><span class=\"line\">               &lt;tr&gt;</span><br><span class=\"line\">                   &lt;td&gt;序号&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;姓名&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;年龄&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;职务&lt;/td&gt;</span><br><span class=\"line\">                   </span><br><span class=\"line\">               &lt;/tr&gt;</span><br><span class=\"line\">               &lt;tr&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;span class=&quot;glyphicon glyphicon-pencil btn btn-info&quot;&gt;编辑&lt;/span&gt;&lt;/td&gt;</span><br><span class=\"line\">               </span><br><span class=\"line\">                   &lt;td&gt;&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;input type=&quot;text&quot; value=&quot;&quot; ng-disabled=&quot;bool&quot;/&gt;&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;input type=&quot;text&quot; value=&quot;&quot; ng-disabled=&quot;bool&quot;/&gt;&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;input type=&quot;text&quot; value=&quot;&quot; ng-disabled=&quot;bool&quot;/&gt;&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;button class=&quot;btn btn-danger&quot;&gt;删除&lt;/button&gt;&lt;/td&gt;</span><br><span class=\"line\">                   </span><br><span class=\"line\">               &lt;/tr&gt;</span><br><span class=\"line\">           &lt;/thead&gt;</span><br><span class=\"line\">       &lt;/table&gt;</span><br><span class=\"line\">       </span><br><span class=\"line\">       &lt;button class=&quot;btn btn-success&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/i&gt;创建新用户&lt;/button&gt; \t</span><br><span class=\"line\">        &lt;/div&gt; </span><br><span class=\"line\">        &lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>3.4 ng指令系统的控制原理与规划过程 </p>\n<p>  3.4.1     指令构建</p>\n<pre><code>首先在表格上声明 `ng-app =&quot;myapp&quot;`\n\n并且声明控制器`ng-controller=&quot;ctrl&quot;`\n\n接着，在需要toggle切换的地方赋值，如果默认要false,可以使用 \n\n  ng-show=&quot;!bool&quot;或者 ng-disabled=&quot;bool&quot;\n\n这里因为初始值是：\n\n   `$scope.bool = true`\n</code></pre><p>  然后，在$<code>scope</code>上绑定初始数据，即一个对象组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      var app=angular.module(&apos;myApp&apos;,[]);</span><br><span class=\"line\">app.controller(&apos;ctrl&apos;,function($scope)&#123;</span><br><span class=\"line\">\t$scope.users = [</span><br><span class=\"line\">\t&#123;name:&apos;LiMing&apos;,age:23,job:&apos;fontAnggener&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;Hanmeimei&apos;,age:22,job:&apos;teacher&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;Wangjie&apos;,age:25,job:&apos;driver&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;Liusir&apos;,age:27,job:&apos;business&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;guojingming&apos;,age:29,job:&apos;editor&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;Yaoming&apos;,age:33,job:&apos;player&apos;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t];</span><br></pre></td></tr></table></figure>\n<p>  有了元数据，就可以为所欲为了，在需要的位置，例如 table 中的 tr 进行ng - repeat</p>\n<p>循环，循环的结果是</p>\n<h1 id=\"对象数组中每一个对象！\"><a href=\"#对象数组中每一个对象！\" class=\"headerlink\" title=\"对象数组中每一个对象！\"></a>对象数组中每一个对象！</h1><p>然后在对应的<code>&lt;td&gt;&lt;/td&gt;</code>中使用或者balalala进行取值</p>\n<p>   为了完成自动化序号排列以及删除功能，需要$index服务，不需要依赖注入。</p>\n<pre><code>当每个删除按钮点击的一瞬间，Angular如何判断该删除哪个呢？\n\n\n我们为每一个删除按钮button添加一个指令 `ng-click = &apos;remove($index)&apos;`\n</code></pre><p>这里，Angular就是通过<code>$index</code>来自行判定当前的行序。来看这一块的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr ng-repeat=&quot;user in users&quot;&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;span class=&quot;glyphicon glyphicon-pencil btn btn-info&quot; ng-click=&quot;toggle()&quot;&gt;编辑&lt;/span&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;td&gt;&#123;&#123;$index+1&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; value=&quot;&#123;&#123;user.name&#125;&#125;&quot; ng-disabled=&quot;bool&quot; /&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; value=&quot;&#123;&#123;user.age&#125;&#125;&quot; ng-disabled=&quot;bool&quot; /&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; value=&quot;&#123;&#123;user.job&#125;&#125;&quot; ng-disabled=&quot;bool&quot; /&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;button class=&quot;btn btn-danger&quot; ng-click=&quot;remove($index)&quot; ng-show=&quot;!bool&quot;&gt;删除&lt;/button&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<p>OK，删除，排序，Toggle功能都完成了，还有一个增加新用户怎么完成呢？</p>\n<p>这个更简单了，直接往Object Array 里 push 对象即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/****这是增加用户按钮的指令*****/</span><br><span class=\"line\">ng-click = &quot;addUser()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">/*****以下是js*****/</span><br><span class=\"line\"></span><br><span class=\"line\"> $scope.addUser = function()&#123;</span><br><span class=\"line\">       var index = $scope.users.length-1;  //确定当前最大的行序（ps.本来想自己实现 $index 功能的。。。）</span><br><span class=\"line\">  </span><br><span class=\"line\">       \t$scope.users.push(&#123;name:&apos;&apos;,age:&apos;&apos;,job:&apos;&apos;&#125;);</span><br><span class=\"line\">       </span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>以上，就完成了一个后台管理系统，这是初始版本，后续我会增加新的功能在里面。</p>\n<h2 id=\"4-初步完成alpha版本，觉得还是有很多不足之处：\"><a href=\"#4-初步完成alpha版本，觉得还是有很多不足之处：\" class=\"headerlink\" title=\"4.初步完成alpha版本，觉得还是有很多不足之处：\"></a>4.初步完成alpha版本，觉得还是有很多不足之处：</h2><p>1.数据很糙，很杂，controller中的东西太过冗杂，而我并没有选择使用构建工具来模块</p>\n<p>化、打包、合并，这不是一个好习惯。</p>\n<p>2.所有的输入框没有加入过滤器，例如：姓名的位置我们可以用filter或者正则来强行限</p>\n<p>定只能输英文，而不是数字或者标点。 这是一个细节不够完善的地方。</p>\n<p>3.在点下编辑的时候，文本框变得可以编辑，再次点下编辑，文本框变成了丑丑的不可</p>\n<p>编辑，我在想：**</p>\n<h2 id=\"如何可以使得文字在不可编辑的状态下自动切换为-lt-p-gt-标签，而在可编辑的状态下变成-lt-input-gt-表单？\"><a href=\"#如何可以使得文字在不可编辑的状态下自动切换为-lt-p-gt-标签，而在可编辑的状态下变成-lt-input-gt-表单？\" class=\"headerlink\" title=\"如何可以使得文字在不可编辑的状态下自动切换为&lt;p&gt;标签，而在可编辑的状态下变成&lt;input&gt;表单？\"></a>如何可以使得文字在不可编辑的状态下自动切换为<code>&lt;p&gt;</code>标签，而在可编辑的状态下变成<code>&lt;input&gt;</code>表单？</h2><p>**<br>4.自学了这么久ajax,nodejs，然而并没有从后端拉任何数据，所有数据都是angular来</p>\n<p>进行操作的，这样也不好，我希望尽快精通express，来进行项目的全栈构建。</p>\n<p>以上问题留给自己去解决。</p>\n<p>最后，附上我的Github地址，fork 或者 download都可以</p>\n<p>地址：<a href=\"https://github.com/ZQ-jhon/Manage-system-By-AngularJs\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/Manage-system-By-AngularJs</a></p>\n<p>注意：将 index.html中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;以及&lt;link&gt;的src 及 href 替换 成本地目录</span><br></pre></td></tr></table></figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78842927\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p><strong>前言：接触前端快1满一年了，从什么都不会，一步步摸索，走到现在，觉得前方的路还是很迷茫，但是每天感觉自己都在进步，这是最好的！希望自己能坚持下去，也跟各位同仁共勉！</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@important message!</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;:&quot;Manage-system-By-AngularJs&quot;,</span><br><span class=\"line\">    &quot;version&quot;:&quot;1.0.0&quot;,</span><br><span class=\"line\">    &quot;author&quot;:&quot;ZQ-jhon&quot;,</span><br><span class=\"line\">    &quot;connect&quot;:&quot;QQ:350037310&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接上全部效果的演示图：<br>Let’s view together:</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171220094856558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"GIF加载中，请耐心等待... ...\" title=\"\" class=\"\">\n                <p>GIF加载中，请耐心等待... ...</p>\n            </figure>\n<h2 id=\"1-Angualr和Bootstrap的火花\"><a href=\"#1-Angualr和Bootstrap的火花\" class=\"headerlink\" title=\"1.Angualr和Bootstrap的火花\"></a>1.Angualr和Bootstrap的火花</h2><p>Angular是开发SPA的得力框架，其数据双向绑定和指令系统能够最大程度的保持页面的</p>\n<p>整洁干净，而Bootstrap作为一个UI库，也能够很好的满足本系统的需求。</p>\n<h2 id=\"2-思路\"><a href=\"#2-思路\" class=\"headerlink\" title=\"2.思路\"></a>2.思路</h2><p>2.1 在后台人员管理系统中，需要有以下功能：增、删、改、查。</p>\n<p>为了实现这些功能，就必须在项目中留好数据接口，方便跟后台数据进行I/O操作。</p>\n<p>2.2 为了实现部分功能的 toggle()，例如：</p>\n<ol>\n<li><p>点击编辑，文本框的可编辑状态会来回在:  可编辑/不可编辑  切换。</p>\n</li>\n<li><p>点击编辑，删除button的 show 与 hidden。</p>\n</li>\n</ol>\n<p>必须使用一个ng-show = bool/ng-disabled = !bool，bool的具体方法每次访问，会</p>\n<p>更改布尔值为对立值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化:</span><br><span class=\"line\">$scope.bool = true;</span><br><span class=\"line\"></span><br><span class=\"line\">//调用改变自身布尔值</span><br><span class=\"line\">$scope.toggle = function()&#123;        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$scope.bool = !$scope.bool;  //谁调谁改变</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而这个<code>$scope</code>的bool()方法，应该位于<code>$rootscope</code>是最好的解决方式，所有的局部</p>\n<p>controller都可以访问到根作用域。</p>\n<p>因此，改写如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$rootscope.toggle = function()&#123;        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$rootscope.bool = !$scope.bool;  //谁调谁改变</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h2><p>3.1 框架搭建 ：使用bootstrap搭建框架</p>\n<p>3.2 初始数据展示：为了让用户有一个直观的展示，当前界面上会mock一些假的数据上</p>\n<p>去，仅供参考(当然这些数据也可以删除)，mock的方法为，在<code>$scope</code>上绑定一个数</p>\n<p>组，该数组是对象数组，然后用过ng-repeat来展现在我们的bootstrap表格中。</p>\n<p>3.3 框架代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class=\"line\">            &lt;h1 class=&quot;text-center&quot;&gt;增删改查后台管理系统&lt;/h1&gt;</span><br><span class=\"line\">       &lt;table class=&quot;table table-responsive table-hover&quot;&gt;</span><br><span class=\"line\">           &lt;thead&gt;</span><br><span class=\"line\">               &lt;tr&gt;</span><br><span class=\"line\">                   &lt;td&gt;序号&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;姓名&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;年龄&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;职务&lt;/td&gt;</span><br><span class=\"line\">                   </span><br><span class=\"line\">               &lt;/tr&gt;</span><br><span class=\"line\">               &lt;tr&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;span class=&quot;glyphicon glyphicon-pencil btn btn-info&quot;&gt;编辑&lt;/span&gt;&lt;/td&gt;</span><br><span class=\"line\">               </span><br><span class=\"line\">                   &lt;td&gt;&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;input type=&quot;text&quot; value=&quot;&quot; ng-disabled=&quot;bool&quot;/&gt;&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;input type=&quot;text&quot; value=&quot;&quot; ng-disabled=&quot;bool&quot;/&gt;&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;input type=&quot;text&quot; value=&quot;&quot; ng-disabled=&quot;bool&quot;/&gt;&lt;/td&gt;</span><br><span class=\"line\">                   &lt;td&gt;&lt;button class=&quot;btn btn-danger&quot;&gt;删除&lt;/button&gt;&lt;/td&gt;</span><br><span class=\"line\">                   </span><br><span class=\"line\">               &lt;/tr&gt;</span><br><span class=\"line\">           &lt;/thead&gt;</span><br><span class=\"line\">       &lt;/table&gt;</span><br><span class=\"line\">       </span><br><span class=\"line\">       &lt;button class=&quot;btn btn-success&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/i&gt;创建新用户&lt;/button&gt; \t</span><br><span class=\"line\">        &lt;/div&gt; </span><br><span class=\"line\">        &lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>3.4 ng指令系统的控制原理与规划过程 </p>\n<p>  3.4.1     指令构建</p>\n<pre><code>首先在表格上声明 `ng-app =&quot;myapp&quot;`\n\n并且声明控制器`ng-controller=&quot;ctrl&quot;`\n\n接着，在需要toggle切换的地方赋值，如果默认要false,可以使用 \n\n  ng-show=&quot;!bool&quot;或者 ng-disabled=&quot;bool&quot;\n\n这里因为初始值是：\n\n   `$scope.bool = true`\n</code></pre><p>  然后，在$<code>scope</code>上绑定初始数据，即一个对象组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      var app=angular.module(&apos;myApp&apos;,[]);</span><br><span class=\"line\">app.controller(&apos;ctrl&apos;,function($scope)&#123;</span><br><span class=\"line\">\t$scope.users = [</span><br><span class=\"line\">\t&#123;name:&apos;LiMing&apos;,age:23,job:&apos;fontAnggener&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;Hanmeimei&apos;,age:22,job:&apos;teacher&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;Wangjie&apos;,age:25,job:&apos;driver&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;Liusir&apos;,age:27,job:&apos;business&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;guojingming&apos;,age:29,job:&apos;editor&apos;&#125;,</span><br><span class=\"line\">\t&#123;name:&apos;Yaoming&apos;,age:33,job:&apos;player&apos;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t];</span><br></pre></td></tr></table></figure>\n<p>  有了元数据，就可以为所欲为了，在需要的位置，例如 table 中的 tr 进行ng - repeat</p>\n<p>循环，循环的结果是</p>\n<h1 id=\"对象数组中每一个对象！\"><a href=\"#对象数组中每一个对象！\" class=\"headerlink\" title=\"对象数组中每一个对象！\"></a>对象数组中每一个对象！</h1><p>然后在对应的<code>&lt;td&gt;&lt;/td&gt;</code>中使用或者balalala进行取值</p>\n<p>   为了完成自动化序号排列以及删除功能，需要$index服务，不需要依赖注入。</p>\n<pre><code>当每个删除按钮点击的一瞬间，Angular如何判断该删除哪个呢？\n\n\n我们为每一个删除按钮button添加一个指令 `ng-click = &apos;remove($index)&apos;`\n</code></pre><p>这里，Angular就是通过<code>$index</code>来自行判定当前的行序。来看这一块的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr ng-repeat=&quot;user in users&quot;&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;span class=&quot;glyphicon glyphicon-pencil btn btn-info&quot; ng-click=&quot;toggle()&quot;&gt;编辑&lt;/span&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;td&gt;&#123;&#123;$index+1&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; value=&quot;&#123;&#123;user.name&#125;&#125;&quot; ng-disabled=&quot;bool&quot; /&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; value=&quot;&#123;&#123;user.age&#125;&#125;&quot; ng-disabled=&quot;bool&quot; /&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; value=&quot;&#123;&#123;user.job&#125;&#125;&quot; ng-disabled=&quot;bool&quot; /&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;button class=&quot;btn btn-danger&quot; ng-click=&quot;remove($index)&quot; ng-show=&quot;!bool&quot;&gt;删除&lt;/button&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<p>OK，删除，排序，Toggle功能都完成了，还有一个增加新用户怎么完成呢？</p>\n<p>这个更简单了，直接往Object Array 里 push 对象即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/****这是增加用户按钮的指令*****/</span><br><span class=\"line\">ng-click = &quot;addUser()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">/*****以下是js*****/</span><br><span class=\"line\"></span><br><span class=\"line\"> $scope.addUser = function()&#123;</span><br><span class=\"line\">       var index = $scope.users.length-1;  //确定当前最大的行序（ps.本来想自己实现 $index 功能的。。。）</span><br><span class=\"line\">  </span><br><span class=\"line\">       \t$scope.users.push(&#123;name:&apos;&apos;,age:&apos;&apos;,job:&apos;&apos;&#125;);</span><br><span class=\"line\">       </span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>以上，就完成了一个后台管理系统，这是初始版本，后续我会增加新的功能在里面。</p>\n<h2 id=\"4-初步完成alpha版本，觉得还是有很多不足之处：\"><a href=\"#4-初步完成alpha版本，觉得还是有很多不足之处：\" class=\"headerlink\" title=\"4.初步完成alpha版本，觉得还是有很多不足之处：\"></a>4.初步完成alpha版本，觉得还是有很多不足之处：</h2><p>1.数据很糙，很杂，controller中的东西太过冗杂，而我并没有选择使用构建工具来模块</p>\n<p>化、打包、合并，这不是一个好习惯。</p>\n<p>2.所有的输入框没有加入过滤器，例如：姓名的位置我们可以用filter或者正则来强行限</p>\n<p>定只能输英文，而不是数字或者标点。 这是一个细节不够完善的地方。</p>\n<p>3.在点下编辑的时候，文本框变得可以编辑，再次点下编辑，文本框变成了丑丑的不可</p>\n<p>编辑，我在想：**</p>\n<h2 id=\"如何可以使得文字在不可编辑的状态下自动切换为-lt-p-gt-标签，而在可编辑的状态下变成-lt-input-gt-表单？\"><a href=\"#如何可以使得文字在不可编辑的状态下自动切换为-lt-p-gt-标签，而在可编辑的状态下变成-lt-input-gt-表单？\" class=\"headerlink\" title=\"如何可以使得文字在不可编辑的状态下自动切换为&lt;p&gt;标签，而在可编辑的状态下变成&lt;input&gt;表单？\"></a>如何可以使得文字在不可编辑的状态下自动切换为<code>&lt;p&gt;</code>标签，而在可编辑的状态下变成<code>&lt;input&gt;</code>表单？</h2><p>**<br>4.自学了这么久ajax,nodejs，然而并没有从后端拉任何数据，所有数据都是angular来</p>\n<p>进行操作的，这样也不好，我希望尽快精通express，来进行项目的全栈构建。</p>\n<p>以上问题留给自己去解决。</p>\n<p>最后，附上我的Github地址，fork 或者 download都可以</p>\n<p>地址：<a href=\"https://github.com/ZQ-jhon/Manage-system-By-AngularJs\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/Manage-system-By-AngularJs</a></p>\n<p>注意：将 index.html中的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;以及&lt;link&gt;的src 及 href 替换 成本地目录</span><br></pre></td></tr></table></figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"Angular搭建后台人员管理系统 1.1.0","date":"2018-01-17T03:18:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78863387)\n\n\n今天基于原来的DEMO，将功能进行了调整。\n![这里写图片描述](http://img.blog.csdn.net/20171221142259866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如图所示，增加了一个新的controller，完成了增删改查的最后一步：查。\n\nstep1中还是使用ng-repeat遍历出的options，然后这个select又绑定了一个model，可以在controller用于判定用户的选项，然后根据这个选项，在users的数组中进行查找，最后，显示在查询结果的框中。\n\n今天遇到的几个问题：\n1.数据可视化和canvas视图留了一个坑。\n2.突然发现controller之间的方法、变量不可以共享，例如我在下面的控制器中创建的用户数组：\n\n```\n$scope.users=[\n{...},\n{...},\n{...},\n{...}\n]\n```\n在上面查询控制器中无法访问，网上查询之，得到结果，原因是作用域无法访问，这点跟js比较像，两个在树形结构上是兄弟层级关系的节点，不能访问对方的内部变量。但是angular 可以像js一样，变量继承，因此，可以吧users挂到 相对比较高的祖先节点上，这样，其子控制器就可以访问到了。\n3.在Step1的位置，出现了F5以后，默认出现一个空白options的现象，查看元素，得知该元素：\n\n```\n<option value=\"  undefind!\"></option>\n```\n于是采用了一个笨办法，手动添加一个\n`<option value=\"\" selected=\"\"></option>\n`\n然后，在ng-repeat的原始option选项中，也添加`selected=\"selected\"，这样就OK了！`\n4.今天对各个控制器进行合理的切分，达到模块化的效果，例如：\n\n```\n/*********根控制器的数据*********/\n \tapp.controller('rootctrl',function($scope){\n \t\t$scope.users = [\n \t\t{name:'LiMing',age:23,job:'fontAnggener'},\n \t\t{name:'Hanmeimei',age:22,job:'teacher'},\n \t\t{name:'Wangjie',age:25,job:'driver'},\n \t\t{name:'Liusir',age:27,job:'business'},\n \t\t{name:'guojingming',age:29,job:'editor'},\n \t\t{name:'Yaoming',age:33,job:'player'}\n \t\t\n \t\t];\n \t})\n/**********增加用户 控制器*************/\n $scope.addUser = function(){\n       var index = $scope.users.length-1;\n  \n       \t$scope.users.push({name:'',age:'',job:''});\n       \n       }\n /**********查询 控制器************ /\n $scope.jiansuo = function(){\n \t\t\tvar a = $scope.selectValue;\n \t\t\t$scope.result = a;\n \t\t\n \t\t\n \t\t    if(a==\"\"||null||undefined){\n \t\t    \tdocument.getElementById('sp').innerHTML=\"未选择/未输入!\";\n \t\t    \tdocument.getElementById('inputInfo').setAttribute('placeholder','请先选择分类')\n \t\t    }\n \t\t    else{\n \t\t    \tdocument.getElementById('sp').innerHTML=\"您要查询的\"+$scope.infos[a].name+\"是:\"+$scope.input;\n \t\t    \tdocument.getElementById('inputInfo').setAttribute('placeholder','请输入具体的'+$scope.infos[a].name+\"！\");\n \t\t    }\n \t\t\t\n \t\t\t\n \t\t\t\n \t\t};\n /********删除 控制器***********/\n    \n      $scope.remove = function(index){\n      \n//   if($scope.users.length<=1){\n//   \t$scope.users.splice(index,1)\n//   }\n//   else{}\n         \t$scope.users.splice(index,1)\n         \n         \n\n      \t \t\n            \n      };\n```\n在切分这些控制器的过程中，一定要注意各个控制器的作用域，以及能否访问到调用数据。\nGitHub:\nhttps://github.com/ZQ-jhon/Manage-system-By-AngularJs/commits/master\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/Angular搭建后台人员管理系统-1-1-0.md","raw":"---\ntitle: Angular搭建后台人员管理系统 1.1.0 \ndate: 2018-01-17 11:18:00\ntags: angularjs\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78863387)\n\n\n今天基于原来的DEMO，将功能进行了调整。\n![这里写图片描述](http://img.blog.csdn.net/20171221142259866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如图所示，增加了一个新的controller，完成了增删改查的最后一步：查。\n\nstep1中还是使用ng-repeat遍历出的options，然后这个select又绑定了一个model，可以在controller用于判定用户的选项，然后根据这个选项，在users的数组中进行查找，最后，显示在查询结果的框中。\n\n今天遇到的几个问题：\n1.数据可视化和canvas视图留了一个坑。\n2.突然发现controller之间的方法、变量不可以共享，例如我在下面的控制器中创建的用户数组：\n\n```\n$scope.users=[\n{...},\n{...},\n{...},\n{...}\n]\n```\n在上面查询控制器中无法访问，网上查询之，得到结果，原因是作用域无法访问，这点跟js比较像，两个在树形结构上是兄弟层级关系的节点，不能访问对方的内部变量。但是angular 可以像js一样，变量继承，因此，可以吧users挂到 相对比较高的祖先节点上，这样，其子控制器就可以访问到了。\n3.在Step1的位置，出现了F5以后，默认出现一个空白options的现象，查看元素，得知该元素：\n\n```\n<option value=\"  undefind!\"></option>\n```\n于是采用了一个笨办法，手动添加一个\n`<option value=\"\" selected=\"\"></option>\n`\n然后，在ng-repeat的原始option选项中，也添加`selected=\"selected\"，这样就OK了！`\n4.今天对各个控制器进行合理的切分，达到模块化的效果，例如：\n\n```\n/*********根控制器的数据*********/\n \tapp.controller('rootctrl',function($scope){\n \t\t$scope.users = [\n \t\t{name:'LiMing',age:23,job:'fontAnggener'},\n \t\t{name:'Hanmeimei',age:22,job:'teacher'},\n \t\t{name:'Wangjie',age:25,job:'driver'},\n \t\t{name:'Liusir',age:27,job:'business'},\n \t\t{name:'guojingming',age:29,job:'editor'},\n \t\t{name:'Yaoming',age:33,job:'player'}\n \t\t\n \t\t];\n \t})\n/**********增加用户 控制器*************/\n $scope.addUser = function(){\n       var index = $scope.users.length-1;\n  \n       \t$scope.users.push({name:'',age:'',job:''});\n       \n       }\n /**********查询 控制器************ /\n $scope.jiansuo = function(){\n \t\t\tvar a = $scope.selectValue;\n \t\t\t$scope.result = a;\n \t\t\n \t\t\n \t\t    if(a==\"\"||null||undefined){\n \t\t    \tdocument.getElementById('sp').innerHTML=\"未选择/未输入!\";\n \t\t    \tdocument.getElementById('inputInfo').setAttribute('placeholder','请先选择分类')\n \t\t    }\n \t\t    else{\n \t\t    \tdocument.getElementById('sp').innerHTML=\"您要查询的\"+$scope.infos[a].name+\"是:\"+$scope.input;\n \t\t    \tdocument.getElementById('inputInfo').setAttribute('placeholder','请输入具体的'+$scope.infos[a].name+\"！\");\n \t\t    }\n \t\t\t\n \t\t\t\n \t\t\t\n \t\t};\n /********删除 控制器***********/\n    \n      $scope.remove = function(index){\n      \n//   if($scope.users.length<=1){\n//   \t$scope.users.splice(index,1)\n//   }\n//   else{}\n         \t$scope.users.splice(index,1)\n         \n         \n\n      \t \t\n            \n      };\n```\n在切分这些控制器的过程中，一定要注意各个控制器的作用域，以及能否访问到调用数据。\nGitHub:\nhttps://github.com/ZQ-jhon/Manage-system-By-AngularJs/commits/master\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"Angular搭建后台人员管理系统-1-1-0","published":1,"updated":"2019-05-14T14:30:28.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsav1000bckufmag9rv61","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78863387\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>今天基于原来的DEMO，将功能进行了调整。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171221142259866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>如图所示，增加了一个新的controller，完成了增删改查的最后一步：查。</p>\n<p>step1中还是使用ng-repeat遍历出的options，然后这个select又绑定了一个model，可以在controller用于判定用户的选项，然后根据这个选项，在users的数组中进行查找，最后，显示在查询结果的框中。</p>\n<p>今天遇到的几个问题：<br>1.数据可视化和canvas视图留了一个坑。<br>2.突然发现controller之间的方法、变量不可以共享，例如我在下面的控制器中创建的用户数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.users=[</span><br><span class=\"line\">&#123;...&#125;,</span><br><span class=\"line\">&#123;...&#125;,</span><br><span class=\"line\">&#123;...&#125;,</span><br><span class=\"line\">&#123;...&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>在上面查询控制器中无法访问，网上查询之，得到结果，原因是作用域无法访问，这点跟js比较像，两个在树形结构上是兄弟层级关系的节点，不能访问对方的内部变量。但是angular 可以像js一样，变量继承，因此，可以吧users挂到 相对比较高的祖先节点上，这样，其子控制器就可以访问到了。<br>3.在Step1的位置，出现了F5以后，默认出现一个空白options的现象，查看元素，得知该元素：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;option value=&quot;  undefind!&quot;&gt;&lt;/option&gt;</span><br></pre></td></tr></table></figure>\n<p>于是采用了一个笨办法，手动添加一个<br><code>&lt;option value=&quot;&quot; selected=&quot;&quot;&gt;&lt;/option&gt;</code><br>然后，在ng-repeat的原始option选项中，也添加<code>selected=&quot;selected&quot;，这样就OK了！</code><br>4.今天对各个控制器进行合理的切分，达到模块化的效果，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*********根控制器的数据*********/</span><br><span class=\"line\"> \tapp.controller(&apos;rootctrl&apos;,function($scope)&#123;</span><br><span class=\"line\"> \t\t$scope.users = [</span><br><span class=\"line\"> \t\t&#123;name:&apos;LiMing&apos;,age:23,job:&apos;fontAnggener&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;Hanmeimei&apos;,age:22,job:&apos;teacher&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;Wangjie&apos;,age:25,job:&apos;driver&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;Liusir&apos;,age:27,job:&apos;business&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;guojingming&apos;,age:29,job:&apos;editor&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;Yaoming&apos;,age:33,job:&apos;player&apos;&#125;</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t];</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\">/**********增加用户 控制器*************/</span><br><span class=\"line\"> $scope.addUser = function()&#123;</span><br><span class=\"line\">       var index = $scope.users.length-1;</span><br><span class=\"line\">  </span><br><span class=\"line\">       \t$scope.users.push(&#123;name:&apos;&apos;,age:&apos;&apos;,job:&apos;&apos;&#125;);</span><br><span class=\"line\">       </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"> /**********查询 控制器************ /</span><br><span class=\"line\"> $scope.jiansuo = function()&#123;</span><br><span class=\"line\"> \t\t\tvar a = $scope.selectValue;</span><br><span class=\"line\"> \t\t\t$scope.result = a;</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t    if(a==&quot;&quot;||null||undefined)&#123;</span><br><span class=\"line\"> \t\t    \tdocument.getElementById(&apos;sp&apos;).innerHTML=&quot;未选择/未输入!&quot;;</span><br><span class=\"line\"> \t\t    \tdocument.getElementById(&apos;inputInfo&apos;).setAttribute(&apos;placeholder&apos;,&apos;请先选择分类&apos;)</span><br><span class=\"line\"> \t\t    &#125;</span><br><span class=\"line\"> \t\t    else&#123;</span><br><span class=\"line\"> \t\t    \tdocument.getElementById(&apos;sp&apos;).innerHTML=&quot;您要查询的&quot;+$scope.infos[a].name+&quot;是:&quot;+$scope.input;</span><br><span class=\"line\"> \t\t    \tdocument.getElementById(&apos;inputInfo&apos;).setAttribute(&apos;placeholder&apos;,&apos;请输入具体的&apos;+$scope.infos[a].name+&quot;！&quot;);</span><br><span class=\"line\"> \t\t    &#125;</span><br><span class=\"line\"> \t\t\t</span><br><span class=\"line\"> \t\t\t</span><br><span class=\"line\"> \t\t\t</span><br><span class=\"line\"> \t\t&#125;;</span><br><span class=\"line\"> /********删除 控制器***********/</span><br><span class=\"line\">    </span><br><span class=\"line\">      $scope.remove = function(index)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">//   if($scope.users.length&lt;=1)&#123;</span><br><span class=\"line\">//   \t$scope.users.splice(index,1)</span><br><span class=\"line\">//   &#125;</span><br><span class=\"line\">//   else&#123;&#125;</span><br><span class=\"line\">         \t$scope.users.splice(index,1)</span><br><span class=\"line\">         </span><br><span class=\"line\">         </span><br><span class=\"line\"></span><br><span class=\"line\">      \t \t</span><br><span class=\"line\">            </span><br><span class=\"line\">      &#125;;</span><br></pre></td></tr></table></figure>\n<p>在切分这些控制器的过程中，一定要注意各个控制器的作用域，以及能否访问到调用数据。<br>GitHub:<br><a href=\"https://github.com/ZQ-jhon/Manage-system-By-AngularJs/commits/master\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/Manage-system-By-AngularJs/commits/master</a></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78863387\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>今天基于原来的DEMO，将功能进行了调整。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171221142259866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>如图所示，增加了一个新的controller，完成了增删改查的最后一步：查。</p>\n<p>step1中还是使用ng-repeat遍历出的options，然后这个select又绑定了一个model，可以在controller用于判定用户的选项，然后根据这个选项，在users的数组中进行查找，最后，显示在查询结果的框中。</p>\n<p>今天遇到的几个问题：<br>1.数据可视化和canvas视图留了一个坑。<br>2.突然发现controller之间的方法、变量不可以共享，例如我在下面的控制器中创建的用户数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.users=[</span><br><span class=\"line\">&#123;...&#125;,</span><br><span class=\"line\">&#123;...&#125;,</span><br><span class=\"line\">&#123;...&#125;,</span><br><span class=\"line\">&#123;...&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>在上面查询控制器中无法访问，网上查询之，得到结果，原因是作用域无法访问，这点跟js比较像，两个在树形结构上是兄弟层级关系的节点，不能访问对方的内部变量。但是angular 可以像js一样，变量继承，因此，可以吧users挂到 相对比较高的祖先节点上，这样，其子控制器就可以访问到了。<br>3.在Step1的位置，出现了F5以后，默认出现一个空白options的现象，查看元素，得知该元素：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;option value=&quot;  undefind!&quot;&gt;&lt;/option&gt;</span><br></pre></td></tr></table></figure>\n<p>于是采用了一个笨办法，手动添加一个<br><code>&lt;option value=&quot;&quot; selected=&quot;&quot;&gt;&lt;/option&gt;</code><br>然后，在ng-repeat的原始option选项中，也添加<code>selected=&quot;selected&quot;，这样就OK了！</code><br>4.今天对各个控制器进行合理的切分，达到模块化的效果，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*********根控制器的数据*********/</span><br><span class=\"line\"> \tapp.controller(&apos;rootctrl&apos;,function($scope)&#123;</span><br><span class=\"line\"> \t\t$scope.users = [</span><br><span class=\"line\"> \t\t&#123;name:&apos;LiMing&apos;,age:23,job:&apos;fontAnggener&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;Hanmeimei&apos;,age:22,job:&apos;teacher&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;Wangjie&apos;,age:25,job:&apos;driver&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;Liusir&apos;,age:27,job:&apos;business&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;guojingming&apos;,age:29,job:&apos;editor&apos;&#125;,</span><br><span class=\"line\"> \t\t&#123;name:&apos;Yaoming&apos;,age:33,job:&apos;player&apos;&#125;</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t];</span><br><span class=\"line\"> \t&#125;)</span><br><span class=\"line\">/**********增加用户 控制器*************/</span><br><span class=\"line\"> $scope.addUser = function()&#123;</span><br><span class=\"line\">       var index = $scope.users.length-1;</span><br><span class=\"line\">  </span><br><span class=\"line\">       \t$scope.users.push(&#123;name:&apos;&apos;,age:&apos;&apos;,job:&apos;&apos;&#125;);</span><br><span class=\"line\">       </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"> /**********查询 控制器************ /</span><br><span class=\"line\"> $scope.jiansuo = function()&#123;</span><br><span class=\"line\"> \t\t\tvar a = $scope.selectValue;</span><br><span class=\"line\"> \t\t\t$scope.result = a;</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t</span><br><span class=\"line\"> \t\t    if(a==&quot;&quot;||null||undefined)&#123;</span><br><span class=\"line\"> \t\t    \tdocument.getElementById(&apos;sp&apos;).innerHTML=&quot;未选择/未输入!&quot;;</span><br><span class=\"line\"> \t\t    \tdocument.getElementById(&apos;inputInfo&apos;).setAttribute(&apos;placeholder&apos;,&apos;请先选择分类&apos;)</span><br><span class=\"line\"> \t\t    &#125;</span><br><span class=\"line\"> \t\t    else&#123;</span><br><span class=\"line\"> \t\t    \tdocument.getElementById(&apos;sp&apos;).innerHTML=&quot;您要查询的&quot;+$scope.infos[a].name+&quot;是:&quot;+$scope.input;</span><br><span class=\"line\"> \t\t    \tdocument.getElementById(&apos;inputInfo&apos;).setAttribute(&apos;placeholder&apos;,&apos;请输入具体的&apos;+$scope.infos[a].name+&quot;！&quot;);</span><br><span class=\"line\"> \t\t    &#125;</span><br><span class=\"line\"> \t\t\t</span><br><span class=\"line\"> \t\t\t</span><br><span class=\"line\"> \t\t\t</span><br><span class=\"line\"> \t\t&#125;;</span><br><span class=\"line\"> /********删除 控制器***********/</span><br><span class=\"line\">    </span><br><span class=\"line\">      $scope.remove = function(index)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">//   if($scope.users.length&lt;=1)&#123;</span><br><span class=\"line\">//   \t$scope.users.splice(index,1)</span><br><span class=\"line\">//   &#125;</span><br><span class=\"line\">//   else&#123;&#125;</span><br><span class=\"line\">         \t$scope.users.splice(index,1)</span><br><span class=\"line\">         </span><br><span class=\"line\">         </span><br><span class=\"line\"></span><br><span class=\"line\">      \t \t</span><br><span class=\"line\">            </span><br><span class=\"line\">      &#125;;</span><br></pre></td></tr></table></figure>\n<p>在切分这些控制器的过程中，一定要注意各个控制器的作用域，以及能否访问到调用数据。<br>GitHub:<br><a href=\"https://github.com/ZQ-jhon/Manage-system-By-AngularJs/commits/master\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/Manage-system-By-AngularJs/commits/master</a></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"Electron设置-webkit-app-region 后无法响应鼠标点击事件的解决方式","date":"2019-02-19T09:46:11.000Z","reward":true,"comment":true,"_content":"\n## 一、抛出问题 ##\n在开发 Electron 应用的过程中，想要使得窗口在普通大小可以拖动，于是设置给 title-bar css 如下：\n\n```css\n.title-bar {\n\n-webkit-app-region: drag;\n}\n\n```\n但是设置了这个属性后，发现在 title-bar 上双击全屏和 restore size 的功能又废了，现象如图：\n<img src=\"https://img-blog.csdnimg.cn/20190219173642306.gif\" alt=\"现象\">\n\n怎么办呢？\n\n## 二、网上现有的方案 ##\n通过搜索不难发现，有如下方案：\n\n1. 拖动不要用 -webkit-app-region 了，自己监听 mouseDown 和 mouseUp 来实现吧\n\n2. 父元素设置 -webkit-app-region： drag, 子元素 -webkit-app-region： no-drag 即可\n\n但是，本项目在实际开发过程中有点特殊，即：要实现拖拽和双击放大/缩小的所著元素为同一个 DOM\n\n\n## 三、最终解决方案 ##\n在宿主 Dom 中嵌套一个等宽，等高，但设置了-webkit-app-region： no-drag 属性的 div 即可，上代码：\n\n```html\n<!-- 拖拽使用 -->\n<div [ngClass]=\"{'title-bar__drag': !isMax}\">\n    <div style=\"-webkit-app-region: no-drag; width: 100%;height: 100%\"></div>\n</div>\n```\n现在，一切都正常啦！\n\n","source":"_posts/Electron设置-webkit-app-region 后无法响应鼠标点击事件的解决方式.md","raw":"---\ntitle: Electron设置-webkit-app-region 后无法响应鼠标点击事件的解决方式 \ndate: 2019-02-19 17:46:11\ntags: [css,electron]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n## 一、抛出问题 ##\n在开发 Electron 应用的过程中，想要使得窗口在普通大小可以拖动，于是设置给 title-bar css 如下：\n\n```css\n.title-bar {\n\n-webkit-app-region: drag;\n}\n\n```\n但是设置了这个属性后，发现在 title-bar 上双击全屏和 restore size 的功能又废了，现象如图：\n<img src=\"https://img-blog.csdnimg.cn/20190219173642306.gif\" alt=\"现象\">\n\n怎么办呢？\n\n## 二、网上现有的方案 ##\n通过搜索不难发现，有如下方案：\n\n1. 拖动不要用 -webkit-app-region 了，自己监听 mouseDown 和 mouseUp 来实现吧\n\n2. 父元素设置 -webkit-app-region： drag, 子元素 -webkit-app-region： no-drag 即可\n\n但是，本项目在实际开发过程中有点特殊，即：要实现拖拽和双击放大/缩小的所著元素为同一个 DOM\n\n\n## 三、最终解决方案 ##\n在宿主 Dom 中嵌套一个等宽，等高，但设置了-webkit-app-region： no-drag 属性的 div 即可，上代码：\n\n```html\n<!-- 拖拽使用 -->\n<div [ngClass]=\"{'title-bar__drag': !isMax}\">\n    <div style=\"-webkit-app-region: no-drag; width: 100%;height: 100%\"></div>\n</div>\n```\n现在，一切都正常啦！\n\n","slug":"Electron设置-webkit-app-region 后无法响应鼠标点击事件的解决方式","published":1,"updated":"2019-05-14T14:30:28.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsav2000cckufx0cwpn2v","content":"<h2 id=\"一、抛出问题\"><a href=\"#一、抛出问题\" class=\"headerlink\" title=\"一、抛出问题\"></a>一、抛出问题</h2><p>在开发 Electron 应用的过程中，想要使得窗口在普通大小可以拖动，于是设置给 title-bar css 如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title-bar</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">-webkit-app-region</span>: drag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是设置了这个属性后，发现在 title-bar 上双击全屏和 restore size 的功能又废了，现象如图：<br><img src=\"https://img-blog.csdnimg.cn/20190219173642306.gif\" alt=\"现象\"></p>\n<p>怎么办呢？</p>\n<h2 id=\"二、网上现有的方案\"><a href=\"#二、网上现有的方案\" class=\"headerlink\" title=\"二、网上现有的方案\"></a>二、网上现有的方案</h2><p>通过搜索不难发现，有如下方案：</p>\n<ol>\n<li><p>拖动不要用 -webkit-app-region 了，自己监听 mouseDown 和 mouseUp 来实现吧</p>\n</li>\n<li><p>父元素设置 -webkit-app-region： drag, 子元素 -webkit-app-region： no-drag 即可</p>\n</li>\n</ol>\n<p>但是，本项目在实际开发过程中有点特殊，即：要实现拖拽和双击放大/缩小的所著元素为同一个 DOM</p>\n<h2 id=\"三、最终解决方案\"><a href=\"#三、最终解决方案\" class=\"headerlink\" title=\"三、最终解决方案\"></a>三、最终解决方案</h2><p>在宿主 Dom 中嵌套一个等宽，等高，但设置了-webkit-app-region： no-drag 属性的 div 即可，上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 拖拽使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123;'title-bar__drag': !isMax&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"-webkit-app-region: no-drag; width: 100%;height: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在，一切都正常啦！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、抛出问题\"><a href=\"#一、抛出问题\" class=\"headerlink\" title=\"一、抛出问题\"></a>一、抛出问题</h2><p>在开发 Electron 应用的过程中，想要使得窗口在普通大小可以拖动，于是设置给 title-bar css 如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.title-bar</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">-webkit-app-region</span>: drag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是设置了这个属性后，发现在 title-bar 上双击全屏和 restore size 的功能又废了，现象如图：<br><img src=\"https://img-blog.csdnimg.cn/20190219173642306.gif\" alt=\"现象\"></p>\n<p>怎么办呢？</p>\n<h2 id=\"二、网上现有的方案\"><a href=\"#二、网上现有的方案\" class=\"headerlink\" title=\"二、网上现有的方案\"></a>二、网上现有的方案</h2><p>通过搜索不难发现，有如下方案：</p>\n<ol>\n<li><p>拖动不要用 -webkit-app-region 了，自己监听 mouseDown 和 mouseUp 来实现吧</p>\n</li>\n<li><p>父元素设置 -webkit-app-region： drag, 子元素 -webkit-app-region： no-drag 即可</p>\n</li>\n</ol>\n<p>但是，本项目在实际开发过程中有点特殊，即：要实现拖拽和双击放大/缩小的所著元素为同一个 DOM</p>\n<h2 id=\"三、最终解决方案\"><a href=\"#三、最终解决方案\" class=\"headerlink\" title=\"三、最终解决方案\"></a>三、最终解决方案</h2><p>在宿主 Dom 中嵌套一个等宽，等高，但设置了-webkit-app-region： no-drag 属性的 div 即可，上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 拖拽使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"&#123;'title-bar__drag': !isMax&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"-webkit-app-region: no-drag; width: 100%;height: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>现在，一切都正常啦！</p>\n"},{"title":"Express快速构建应用(一)","date":"2017-12-25T03:27:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78890797)\n\nExpress是基于Nodejs的前端应用构建工具，可以快速开发基于Node的前端SPA，在Nodejs的基础上，又进行一些功能的扩充，使得应用的构建流程非常简单高效，应用也足够健壮。\n## 1.安装与 环境配置##\n首先使用IDE建一个工程目录，放在Nodejs.exe 的同域目录下。\n然后打开Git bash,输入，然后进入工程目录，接着 `$npm init` 表明我们要创建一个应用，最后疯狂回车，可以看到，在工程目录里自动生成了package.json文件。\n![这里写图片描述](http://img.blog.csdn.net/20171225112504969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n接下来安装Express，命令行敲：`$npm install express --save`将express包存放到我们的工程目录里，甚至还可以将其在json文件中声明依赖关系，只需要多加一个-dev：\n\n```\n$npm install express --save-dev\n```\n接着会看到工程目录里出现了modules子目录，并且已经为我们下载好了express及其依赖的包（看上图）。\n\n接下来，我们创建一个app.js，放在工程子目录，app.js代码如下：\n\n```\n//app.js\nvar express = require('express'); //require进来我们的Express\nvar app = express(); //实例化\n\n//匹配任意路由，都返回下面这句：first test success\napp.get('/',function(req,res){\nres.send('first test success!');\n});\n\n//接着配置server\nvar server = app.listen(3000,function(){\nconsole.log('绑定到了3000端口')\n});\n\n```\n在命令行敲：`$node app.js`，打开浏览器输入127.0.0.1:3000 可以看到\"first test success\"\n![这里写图片描述](http://img.blog.csdn.net/20171225113447312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n\n## 2.路由功能 ##\n在进入一些网页的时候，会看到后面的url坠着 index.html，这是网站的homepage，如果去列表页，则后缀会变成: list.html，这个其实就是路由，根据请求的url不同，服务器返回不同的路径。\n而express可以很好的胜任这个功能。下面来看\n在刚才的app.js中加入一些代码，并创建新的index.html文件：\n\n```\n//app.js\n//使用get请求到index.html时，会向页面吐出一个index.html的文件\napp.get('/index.html',function(req,res){\n\tres.sendfile('./index.html')\t\n\t\n});\n\n//index.html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title></title>\n\t</head>\n\t<body>\n\t\t<h1>gekki</h1>\n\t\t<h2>hello</h2>\n\t\t<h3>ke;llt</h3>\n\t</body>\n</html>\n\n```\n接着，继续运行`$node app.js`，网页中输入URL：127.0.0.1:3000/index.html\n效果如图：\n![这里写图片描述](http://img.blog.csdn.net/20171225130220554?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n成功了！\n\n在命令行中，会提示\n![这里写图片描述](http://img.blog.csdn.net/20171225130107618?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n提示我们 : res.sendfile不太赞成使用，应该使用驼峰式命名 res.sendFile。。。粗心了。\n由上述例子可知，express对于路由的配置非常之简单。设想一下，在一些需要密码和表单操作密集的地方，可以采用post请求来进行路由的配置。那么同理，如果想要加载图片或者加载其他问价，则可以：\n\n```\n//表单的html\napp.post('/form.html',function(req,res){\nres.sendFile('./form.html');\n});\n\n\n\n//访问路由的某个图片\n//all方法用于 匹配所有的请求类型，不管是post,get,put,delete等等都给他返回指定的东西，一视同仁。\napp.all('./longzhu.png',function(req,res){  \nres.sendFile('./img/longzhu.png');\n});\n```\n## 3.静态资源 ##\n所谓的静态资源，就是一旦网页生成，就不会再被改变了。例如：图片，CSS,JS文件等。\n我们可以将这些文件放置在一个统一的文件夹里面，命名为：public\n![这里写图片描述](http://img.blog.csdn.net/20171225130726717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n现在，在public下粘贴一张图片，接下来，我们来看这些静态资源应该如何配置以及访问：\n\n```\n//app.js\napp.use(express.static('./public'));//一句话就完成了静态资源的配置\n```\n接着，在浏览器中输入:127.0.0.1:3000/xxx.png ，我们可以得到效果：\n![这里写图片描述](http://img.blog.csdn.net/20171225130939742?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n说明静态资源配置成功，同理，我们在来试试其他类型的文件:\n\n![这里写图片描述](http://img.blog.csdn.net/20171225131120326?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20171225131151137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n都OK。\n\n有时候，可以在一个路由请求中写多个callback函数，来不断的匹配用户输入的需求路由：\n\n```\n//app.js\n\napp.get('/123.error',callback1,callback2);\n```\n此时，如果第一个callback捕获不到路由，则将皮球提给第二个callback函数来执行，不过要在第一个callback中写明白参数:\n```\n\nfunction(req,res,next){\nconsole.log('对不起，我没找到，现在请下一个回调函数帮你找')\nnext();\n},\nfunction (req,res){\nconsole.log('find it!');\nres.sendFile('123.error');\n}\n```\n整个回调函数甚至可以组成一个数组，来对用户的请求进行匹配：\n\n```\n回调函数1:  \nvar a = function(req,res,next){\n....\nnext();\n\n};\n回调函数2:\nvar b = function(req,res,next){\n....\nnext();\n\n};\n\n回调函数3:\nvar b = function(req,res){\n....\nconsole.log('找到了!');\n\n};\n\n\napp.get('/123.error',[a,b,c]);  //这样写很美观\n```\n当然也可以使用数组和function(){}的混合写法，但是这样写我想不出来哪个地方有好处？\n\n\n\n在访问不同的路由时，不必从新restar server，因为服务器是在返回本地的目录，这个状态是一直轮询的，如果有就返回，没有就老老实实报错404 .\n\n当然，整个路由匹配的时候，甚至可以使用正则魔法，以防止用户的误输入行为，防患于未然。\n\n\n## 4.API走马观花 ##\n1.res.download() \t提示下载文件。  //res.download('文件名')，\n2.res.end() \t终结响应处理流程。\n3.res.json() \t发送一个 JSON 格式的响应。\n4.res.jsonp() \t发送一个支持 JSONP 的 JSON 格式的响应。\n5.res.redirect() \t重定向请求。 //更改用于在根url之后的路由，例如用户输入了:127.0.0.1:3000/index.html\n我们可以`res.redirect('error.html');`，此时浏览器的url会自动变成：127.0.0.1:3000/error.html\n\n\n6.res.render() \t渲染视图模板。 \n7.res.send() \t发送各种类型的响应。\n8.res.sendFile \t以八位字节流的形式发送文件。\n9.res.sendStatus() \t设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。//express预设好了，我就试了两个:\n`res.sendStatus(200)//页面显示：OK `\n\n```\nres.sendStatus(404)//页面显示：Not Found\n```\n留坑。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/Express快速构建应用.md","raw":"---\ntitle: Express快速构建应用(一) \ndate: 2017-12-25 11:27:00\ntags: Express\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78890797)\n\nExpress是基于Nodejs的前端应用构建工具，可以快速开发基于Node的前端SPA，在Nodejs的基础上，又进行一些功能的扩充，使得应用的构建流程非常简单高效，应用也足够健壮。\n## 1.安装与 环境配置##\n首先使用IDE建一个工程目录，放在Nodejs.exe 的同域目录下。\n然后打开Git bash,输入，然后进入工程目录，接着 `$npm init` 表明我们要创建一个应用，最后疯狂回车，可以看到，在工程目录里自动生成了package.json文件。\n![这里写图片描述](http://img.blog.csdn.net/20171225112504969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n接下来安装Express，命令行敲：`$npm install express --save`将express包存放到我们的工程目录里，甚至还可以将其在json文件中声明依赖关系，只需要多加一个-dev：\n\n```\n$npm install express --save-dev\n```\n接着会看到工程目录里出现了modules子目录，并且已经为我们下载好了express及其依赖的包（看上图）。\n\n接下来，我们创建一个app.js，放在工程子目录，app.js代码如下：\n\n```\n//app.js\nvar express = require('express'); //require进来我们的Express\nvar app = express(); //实例化\n\n//匹配任意路由，都返回下面这句：first test success\napp.get('/',function(req,res){\nres.send('first test success!');\n});\n\n//接着配置server\nvar server = app.listen(3000,function(){\nconsole.log('绑定到了3000端口')\n});\n\n```\n在命令行敲：`$node app.js`，打开浏览器输入127.0.0.1:3000 可以看到\"first test success\"\n![这里写图片描述](http://img.blog.csdn.net/20171225113447312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n\n## 2.路由功能 ##\n在进入一些网页的时候，会看到后面的url坠着 index.html，这是网站的homepage，如果去列表页，则后缀会变成: list.html，这个其实就是路由，根据请求的url不同，服务器返回不同的路径。\n而express可以很好的胜任这个功能。下面来看\n在刚才的app.js中加入一些代码，并创建新的index.html文件：\n\n```\n//app.js\n//使用get请求到index.html时，会向页面吐出一个index.html的文件\napp.get('/index.html',function(req,res){\n\tres.sendfile('./index.html')\t\n\t\n});\n\n//index.html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title></title>\n\t</head>\n\t<body>\n\t\t<h1>gekki</h1>\n\t\t<h2>hello</h2>\n\t\t<h3>ke;llt</h3>\n\t</body>\n</html>\n\n```\n接着，继续运行`$node app.js`，网页中输入URL：127.0.0.1:3000/index.html\n效果如图：\n![这里写图片描述](http://img.blog.csdn.net/20171225130220554?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n成功了！\n\n在命令行中，会提示\n![这里写图片描述](http://img.blog.csdn.net/20171225130107618?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n提示我们 : res.sendfile不太赞成使用，应该使用驼峰式命名 res.sendFile。。。粗心了。\n由上述例子可知，express对于路由的配置非常之简单。设想一下，在一些需要密码和表单操作密集的地方，可以采用post请求来进行路由的配置。那么同理，如果想要加载图片或者加载其他问价，则可以：\n\n```\n//表单的html\napp.post('/form.html',function(req,res){\nres.sendFile('./form.html');\n});\n\n\n\n//访问路由的某个图片\n//all方法用于 匹配所有的请求类型，不管是post,get,put,delete等等都给他返回指定的东西，一视同仁。\napp.all('./longzhu.png',function(req,res){  \nres.sendFile('./img/longzhu.png');\n});\n```\n## 3.静态资源 ##\n所谓的静态资源，就是一旦网页生成，就不会再被改变了。例如：图片，CSS,JS文件等。\n我们可以将这些文件放置在一个统一的文件夹里面，命名为：public\n![这里写图片描述](http://img.blog.csdn.net/20171225130726717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n现在，在public下粘贴一张图片，接下来，我们来看这些静态资源应该如何配置以及访问：\n\n```\n//app.js\napp.use(express.static('./public'));//一句话就完成了静态资源的配置\n```\n接着，在浏览器中输入:127.0.0.1:3000/xxx.png ，我们可以得到效果：\n![这里写图片描述](http://img.blog.csdn.net/20171225130939742?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n说明静态资源配置成功，同理，我们在来试试其他类型的文件:\n\n![这里写图片描述](http://img.blog.csdn.net/20171225131120326?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20171225131151137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n都OK。\n\n有时候，可以在一个路由请求中写多个callback函数，来不断的匹配用户输入的需求路由：\n\n```\n//app.js\n\napp.get('/123.error',callback1,callback2);\n```\n此时，如果第一个callback捕获不到路由，则将皮球提给第二个callback函数来执行，不过要在第一个callback中写明白参数:\n```\n\nfunction(req,res,next){\nconsole.log('对不起，我没找到，现在请下一个回调函数帮你找')\nnext();\n},\nfunction (req,res){\nconsole.log('find it!');\nres.sendFile('123.error');\n}\n```\n整个回调函数甚至可以组成一个数组，来对用户的请求进行匹配：\n\n```\n回调函数1:  \nvar a = function(req,res,next){\n....\nnext();\n\n};\n回调函数2:\nvar b = function(req,res,next){\n....\nnext();\n\n};\n\n回调函数3:\nvar b = function(req,res){\n....\nconsole.log('找到了!');\n\n};\n\n\napp.get('/123.error',[a,b,c]);  //这样写很美观\n```\n当然也可以使用数组和function(){}的混合写法，但是这样写我想不出来哪个地方有好处？\n\n\n\n在访问不同的路由时，不必从新restar server，因为服务器是在返回本地的目录，这个状态是一直轮询的，如果有就返回，没有就老老实实报错404 .\n\n当然，整个路由匹配的时候，甚至可以使用正则魔法，以防止用户的误输入行为，防患于未然。\n\n\n## 4.API走马观花 ##\n1.res.download() \t提示下载文件。  //res.download('文件名')，\n2.res.end() \t终结响应处理流程。\n3.res.json() \t发送一个 JSON 格式的响应。\n4.res.jsonp() \t发送一个支持 JSONP 的 JSON 格式的响应。\n5.res.redirect() \t重定向请求。 //更改用于在根url之后的路由，例如用户输入了:127.0.0.1:3000/index.html\n我们可以`res.redirect('error.html');`，此时浏览器的url会自动变成：127.0.0.1:3000/error.html\n\n\n6.res.render() \t渲染视图模板。 \n7.res.send() \t发送各种类型的响应。\n8.res.sendFile \t以八位字节流的形式发送文件。\n9.res.sendStatus() \t设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。//express预设好了，我就试了两个:\n`res.sendStatus(200)//页面显示：OK `\n\n```\nres.sendStatus(404)//页面显示：Not Found\n```\n留坑。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"Express快速构建应用","published":1,"updated":"2019-05-14T14:30:28.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsav4000fckufqyzjoybx","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78890797\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>Express是基于Nodejs的前端应用构建工具，可以快速开发基于Node的前端SPA，在Nodejs的基础上，又进行一些功能的扩充，使得应用的构建流程非常简单高效，应用也足够健壮。</p>\n<h2 id=\"1-安装与-环境配置\"><a href=\"#1-安装与-环境配置\" class=\"headerlink\" title=\"1.安装与 环境配置\"></a>1.安装与 环境配置</h2><p>首先使用IDE建一个工程目录，放在Nodejs.exe 的同域目录下。<br>然后打开Git bash,输入，然后进入工程目录，接着 <code>$npm init</code> 表明我们要创建一个应用，最后疯狂回车，可以看到，在工程目录里自动生成了package.json文件。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225112504969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>接下来安装Express，命令行敲：<code>$npm install express --save</code>将express包存放到我们的工程目录里，甚至还可以将其在json文件中声明依赖关系，只需要多加一个-dev：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$npm install express --save-dev</span><br></pre></td></tr></table></figure>\n<p>接着会看到工程目录里出现了modules子目录，并且已经为我们下载好了express及其依赖的包（看上图）。</p>\n<p>接下来，我们创建一个app.js，放在工程子目录，app.js代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app.js</span><br><span class=\"line\">var express = require(&apos;express&apos;); //require进来我们的Express</span><br><span class=\"line\">var app = express(); //实例化</span><br><span class=\"line\"></span><br><span class=\"line\">//匹配任意路由，都返回下面这句：first test success</span><br><span class=\"line\">app.get(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">res.send(&apos;first test success!&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//接着配置server</span><br><span class=\"line\">var server = app.listen(3000,function()&#123;</span><br><span class=\"line\">console.log(&apos;绑定到了3000端口&apos;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在命令行敲：<code>$node app.js</code>，打开浏览器输入127.0.0.1:3000 可以看到”first test success”<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225113447312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<h2 id=\"2-路由功能\"><a href=\"#2-路由功能\" class=\"headerlink\" title=\"2.路由功能\"></a>2.路由功能</h2><p>在进入一些网页的时候，会看到后面的url坠着 index.html，这是网站的homepage，如果去列表页，则后缀会变成: list.html，这个其实就是路由，根据请求的url不同，服务器返回不同的路径。<br>而express可以很好的胜任这个功能。下面来看<br>在刚才的app.js中加入一些代码，并创建新的index.html文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app.js</span><br><span class=\"line\">//使用get请求到index.html时，会向页面吐出一个index.html的文件</span><br><span class=\"line\">app.get(&apos;/index.html&apos;,function(req,res)&#123;</span><br><span class=\"line\">\tres.sendfile(&apos;./index.html&apos;)\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//index.html</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;gekki&lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;h2&gt;hello&lt;/h2&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;ke;llt&lt;/h3&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>接着，继续运行<code>$node app.js</code>，网页中输入URL：127.0.0.1:3000/index.html<br>效果如图：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225130220554?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>成功了！</p>\n<p>在命令行中，会提示<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225130107618?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>提示我们 : res.sendfile不太赞成使用，应该使用驼峰式命名 res.sendFile。。。粗心了。<br>由上述例子可知，express对于路由的配置非常之简单。设想一下，在一些需要密码和表单操作密集的地方，可以采用post请求来进行路由的配置。那么同理，如果想要加载图片或者加载其他问价，则可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//表单的html</span><br><span class=\"line\">app.post(&apos;/form.html&apos;,function(req,res)&#123;</span><br><span class=\"line\">res.sendFile(&apos;./form.html&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//访问路由的某个图片</span><br><span class=\"line\">//all方法用于 匹配所有的请求类型，不管是post,get,put,delete等等都给他返回指定的东西，一视同仁。</span><br><span class=\"line\">app.all(&apos;./longzhu.png&apos;,function(req,res)&#123;  </span><br><span class=\"line\">res.sendFile(&apos;./img/longzhu.png&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-静态资源\"><a href=\"#3-静态资源\" class=\"headerlink\" title=\"3.静态资源\"></a>3.静态资源</h2><p>所谓的静态资源，就是一旦网页生成，就不会再被改变了。例如：图片，CSS,JS文件等。<br>我们可以将这些文件放置在一个统一的文件夹里面，命名为：public<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225130726717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>现在，在public下粘贴一张图片，接下来，我们来看这些静态资源应该如何配置以及访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app.js</span><br><span class=\"line\">app.use(express.static(&apos;./public&apos;));//一句话就完成了静态资源的配置</span><br></pre></td></tr></table></figure>\n<p>接着，在浏览器中输入:127.0.0.1:3000/xxx.png ，我们可以得到效果：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225130939742?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>说明静态资源配置成功，同理，我们在来试试其他类型的文件:</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225131120326?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225131151137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>都OK。</p>\n<p>有时候，可以在一个路由请求中写多个callback函数，来不断的匹配用户输入的需求路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app.js</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/123.error&apos;,callback1,callback2);</span><br></pre></td></tr></table></figure>\n<p>此时，如果第一个callback捕获不到路由，则将皮球提给第二个callback函数来执行，不过要在第一个callback中写明白参数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function(req,res,next)&#123;</span><br><span class=\"line\">console.log(&apos;对不起，我没找到，现在请下一个回调函数帮你找&apos;)</span><br><span class=\"line\">next();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">function (req,res)&#123;</span><br><span class=\"line\">console.log(&apos;find it!&apos;);</span><br><span class=\"line\">res.sendFile(&apos;123.error&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>整个回调函数甚至可以组成一个数组，来对用户的请求进行匹配：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">回调函数1:  </span><br><span class=\"line\">var a = function(req,res,next)&#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">next();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">回调函数2:</span><br><span class=\"line\">var b = function(req,res,next)&#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">next();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">回调函数3:</span><br><span class=\"line\">var b = function(req,res)&#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">console.log(&apos;找到了!&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/123.error&apos;,[a,b,c]);  //这样写很美观</span><br></pre></td></tr></table></figure>\n<p>当然也可以使用数组和function(){}的混合写法，但是这样写我想不出来哪个地方有好处？</p>\n<p>在访问不同的路由时，不必从新restar server，因为服务器是在返回本地的目录，这个状态是一直轮询的，如果有就返回，没有就老老实实报错404 .</p>\n<p>当然，整个路由匹配的时候，甚至可以使用正则魔法，以防止用户的误输入行为，防患于未然。</p>\n<h2 id=\"4-API走马观花\"><a href=\"#4-API走马观花\" class=\"headerlink\" title=\"4.API走马观花\"></a>4.API走马观花</h2><p>1.res.download()     提示下载文件。  //res.download(‘文件名’)，<br>2.res.end()     终结响应处理流程。<br>3.res.json()     发送一个 JSON 格式的响应。<br>4.res.jsonp()     发送一个支持 JSONP 的 JSON 格式的响应。<br>5.res.redirect()     重定向请求。 //更改用于在根url之后的路由，例如用户输入了:127.0.0.1:3000/index.html<br>我们可以<code>res.redirect(&#39;error.html&#39;);</code>，此时浏览器的url会自动变成：127.0.0.1:3000/error.html</p>\n<p>6.res.render()     渲染视图模板。<br>7.res.send()     发送各种类型的响应。<br>8.res.sendFile     以八位字节流的形式发送文件。<br>9.res.sendStatus()     设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。//express预设好了，我就试了两个:<br><code>res.sendStatus(200)//页面显示：OK</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.sendStatus(404)//页面显示：Not Found</span><br></pre></td></tr></table></figure>\n<p>留坑。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78890797\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>Express是基于Nodejs的前端应用构建工具，可以快速开发基于Node的前端SPA，在Nodejs的基础上，又进行一些功能的扩充，使得应用的构建流程非常简单高效，应用也足够健壮。</p>\n<h2 id=\"1-安装与-环境配置\"><a href=\"#1-安装与-环境配置\" class=\"headerlink\" title=\"1.安装与 环境配置\"></a>1.安装与 环境配置</h2><p>首先使用IDE建一个工程目录，放在Nodejs.exe 的同域目录下。<br>然后打开Git bash,输入，然后进入工程目录，接着 <code>$npm init</code> 表明我们要创建一个应用，最后疯狂回车，可以看到，在工程目录里自动生成了package.json文件。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225112504969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>接下来安装Express，命令行敲：<code>$npm install express --save</code>将express包存放到我们的工程目录里，甚至还可以将其在json文件中声明依赖关系，只需要多加一个-dev：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$npm install express --save-dev</span><br></pre></td></tr></table></figure>\n<p>接着会看到工程目录里出现了modules子目录，并且已经为我们下载好了express及其依赖的包（看上图）。</p>\n<p>接下来，我们创建一个app.js，放在工程子目录，app.js代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app.js</span><br><span class=\"line\">var express = require(&apos;express&apos;); //require进来我们的Express</span><br><span class=\"line\">var app = express(); //实例化</span><br><span class=\"line\"></span><br><span class=\"line\">//匹配任意路由，都返回下面这句：first test success</span><br><span class=\"line\">app.get(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">res.send(&apos;first test success!&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//接着配置server</span><br><span class=\"line\">var server = app.listen(3000,function()&#123;</span><br><span class=\"line\">console.log(&apos;绑定到了3000端口&apos;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在命令行敲：<code>$node app.js</code>，打开浏览器输入127.0.0.1:3000 可以看到”first test success”<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225113447312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<h2 id=\"2-路由功能\"><a href=\"#2-路由功能\" class=\"headerlink\" title=\"2.路由功能\"></a>2.路由功能</h2><p>在进入一些网页的时候，会看到后面的url坠着 index.html，这是网站的homepage，如果去列表页，则后缀会变成: list.html，这个其实就是路由，根据请求的url不同，服务器返回不同的路径。<br>而express可以很好的胜任这个功能。下面来看<br>在刚才的app.js中加入一些代码，并创建新的index.html文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app.js</span><br><span class=\"line\">//使用get请求到index.html时，会向页面吐出一个index.html的文件</span><br><span class=\"line\">app.get(&apos;/index.html&apos;,function(req,res)&#123;</span><br><span class=\"line\">\tres.sendfile(&apos;./index.html&apos;)\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//index.html</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\">\t&lt;body&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;gekki&lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;h2&gt;hello&lt;/h2&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;ke;llt&lt;/h3&gt;</span><br><span class=\"line\">\t&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>接着，继续运行<code>$node app.js</code>，网页中输入URL：127.0.0.1:3000/index.html<br>效果如图：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225130220554?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>成功了！</p>\n<p>在命令行中，会提示<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225130107618?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>提示我们 : res.sendfile不太赞成使用，应该使用驼峰式命名 res.sendFile。。。粗心了。<br>由上述例子可知，express对于路由的配置非常之简单。设想一下，在一些需要密码和表单操作密集的地方，可以采用post请求来进行路由的配置。那么同理，如果想要加载图片或者加载其他问价，则可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//表单的html</span><br><span class=\"line\">app.post(&apos;/form.html&apos;,function(req,res)&#123;</span><br><span class=\"line\">res.sendFile(&apos;./form.html&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//访问路由的某个图片</span><br><span class=\"line\">//all方法用于 匹配所有的请求类型，不管是post,get,put,delete等等都给他返回指定的东西，一视同仁。</span><br><span class=\"line\">app.all(&apos;./longzhu.png&apos;,function(req,res)&#123;  </span><br><span class=\"line\">res.sendFile(&apos;./img/longzhu.png&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-静态资源\"><a href=\"#3-静态资源\" class=\"headerlink\" title=\"3.静态资源\"></a>3.静态资源</h2><p>所谓的静态资源，就是一旦网页生成，就不会再被改变了。例如：图片，CSS,JS文件等。<br>我们可以将这些文件放置在一个统一的文件夹里面，命名为：public<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225130726717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>现在，在public下粘贴一张图片，接下来，我们来看这些静态资源应该如何配置以及访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app.js</span><br><span class=\"line\">app.use(express.static(&apos;./public&apos;));//一句话就完成了静态资源的配置</span><br></pre></td></tr></table></figure>\n<p>接着，在浏览器中输入:127.0.0.1:3000/xxx.png ，我们可以得到效果：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225130939742?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>说明静态资源配置成功，同理，我们在来试试其他类型的文件:</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225131120326?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171225131151137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>都OK。</p>\n<p>有时候，可以在一个路由请求中写多个callback函数，来不断的匹配用户输入的需求路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app.js</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/123.error&apos;,callback1,callback2);</span><br></pre></td></tr></table></figure>\n<p>此时，如果第一个callback捕获不到路由，则将皮球提给第二个callback函数来执行，不过要在第一个callback中写明白参数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function(req,res,next)&#123;</span><br><span class=\"line\">console.log(&apos;对不起，我没找到，现在请下一个回调函数帮你找&apos;)</span><br><span class=\"line\">next();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">function (req,res)&#123;</span><br><span class=\"line\">console.log(&apos;find it!&apos;);</span><br><span class=\"line\">res.sendFile(&apos;123.error&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>整个回调函数甚至可以组成一个数组，来对用户的请求进行匹配：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">回调函数1:  </span><br><span class=\"line\">var a = function(req,res,next)&#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">next();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">回调函数2:</span><br><span class=\"line\">var b = function(req,res,next)&#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">next();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">回调函数3:</span><br><span class=\"line\">var b = function(req,res)&#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">console.log(&apos;找到了!&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.get(&apos;/123.error&apos;,[a,b,c]);  //这样写很美观</span><br></pre></td></tr></table></figure>\n<p>当然也可以使用数组和function(){}的混合写法，但是这样写我想不出来哪个地方有好处？</p>\n<p>在访问不同的路由时，不必从新restar server，因为服务器是在返回本地的目录，这个状态是一直轮询的，如果有就返回，没有就老老实实报错404 .</p>\n<p>当然，整个路由匹配的时候，甚至可以使用正则魔法，以防止用户的误输入行为，防患于未然。</p>\n<h2 id=\"4-API走马观花\"><a href=\"#4-API走马观花\" class=\"headerlink\" title=\"4.API走马观花\"></a>4.API走马观花</h2><p>1.res.download()     提示下载文件。  //res.download(‘文件名’)，<br>2.res.end()     终结响应处理流程。<br>3.res.json()     发送一个 JSON 格式的响应。<br>4.res.jsonp()     发送一个支持 JSONP 的 JSON 格式的响应。<br>5.res.redirect()     重定向请求。 //更改用于在根url之后的路由，例如用户输入了:127.0.0.1:3000/index.html<br>我们可以<code>res.redirect(&#39;error.html&#39;);</code>，此时浏览器的url会自动变成：127.0.0.1:3000/error.html</p>\n<p>6.res.render()     渲染视图模板。<br>7.res.send()     发送各种类型的响应。<br>8.res.sendFile     以八位字节流的形式发送文件。<br>9.res.sendStatus()     设置响应状态代码，并将其以字符串形式作为响应体的一部分发送。//express预设好了，我就试了两个:<br><code>res.sendStatus(200)//页面显示：OK</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.sendStatus(404)//页面显示：Not Found</span><br></pre></td></tr></table></figure>\n<p>留坑。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"Git与GitHub之本地仓库","date":"2017-12-11T08:07:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78773371)\n\n马上就要到年底了，再复习一下Git的相关知识，还有20天，再拼拼命！\n概念\nGit:分布式版本管理系统。\nGitHub:全球最大同性交友平台。(匿)\n\n**1.本地的版本库**\n==\n## 1.1环境搭建 ##\n首先确保已经安装了Nodejs的环境。\n首先，下载GitBash命令工具。\nhttps://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit\n运行之。\n命令行中敲入\n\n```\n$cd  g:\n$mkdir git\n$cd git\ng盘下创建git目录，并且进入该目录\n```\n## 1.2 建仓库 ##\n**1.创建本地仓库**\n\n```\n$git init  //创建OK，g:\\目录下多了一个 .git的文件夹\n```\n然后，在桌面上手动新建一个test.txt文本，里面输入 \"hllo,world\"，然后将该文本放到git目录下(就是刚才创建的那个目录)\n![这里写图片描述](http://img.blog.csdn.net/20171211152923042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n**2.现在，将文件读取至工作区**\n\n```\n$ git add test.txt \n```\n这样，就完成了工作流的初步设置\n\n\n**3.对txt文件暗中做手脚**\n\n在test.txt文件中，将\"hello,world\"改为\"hey,boy\"，然后ctrl+s，ctrl+F4二连。\n\n\n**4.再次commit至暂存区**\n再次提交至暂存区（如果不再次提交，那么刚才的改变只是在仓库里改变了，而并非在我们的暂存区进行记录。）\n```\n$ git add test.txt \n```\n**5.然后读取暂存区文件的状态：**\n\n```\n$ git status\n```\n**6.接着上传到本地版本库:**\n\n```\n$git commit -m \"first change\"  //回车\n\n***************注意:!!!每次commit都会生成一个版本******\n```\n\nOK,这样，系统就记录下了这次改变。当然也可以随时$git status ，来查看当前的暂存区是否干净 (clean)。\n\n**7.要查看历次的修改记录，或者回滚到任一一个版本，可以:**\n\n```\n$git log\n或者$git reflog //reflog可以显示每次迭代的文件值，并进行排序\n```\n如果想要项目升级或降级到某一个版本，可以这样：\n\n```\n$git reflog //查看变更记录，与对应的入口文件值(自动生成)\n\n```\n想去哪里就去那里：\n\n```\n$git reset --hard \"对应的文件入口，例如35s421\"\n\n/*这里的入口文件值，可以写5位，4位甚至更少，因为计算机会自动根据名字来遍历检索，因此为了效率和不必要的麻烦，尽量写7位左右。*/\n```\n**8.撤销修改**\n改到一半发现还不如不改？如果没有commit，那么可以使用“一键还原”\n\n```\n$git checkout --test.txt\n\n//这会使test.txt回到版本库中的状态，即：还没有bei $git add test.txt的时候\n```\n如果已经commit了，那么只能回到最后一次commit的状态。\n\n```\n$git rm test.txt \n\n//做完测试，顺手清理\n```\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/Git与GitHub之本地仓库.md","raw":"---\ntitle: Git与GitHub之本地仓库 \ndate: 2017-12-11 16:07:00\ntags: git\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78773371)\n\n马上就要到年底了，再复习一下Git的相关知识，还有20天，再拼拼命！\n概念\nGit:分布式版本管理系统。\nGitHub:全球最大同性交友平台。(匿)\n\n**1.本地的版本库**\n==\n## 1.1环境搭建 ##\n首先确保已经安装了Nodejs的环境。\n首先，下载GitBash命令工具。\nhttps://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit\n运行之。\n命令行中敲入\n\n```\n$cd  g:\n$mkdir git\n$cd git\ng盘下创建git目录，并且进入该目录\n```\n## 1.2 建仓库 ##\n**1.创建本地仓库**\n\n```\n$git init  //创建OK，g:\\目录下多了一个 .git的文件夹\n```\n然后，在桌面上手动新建一个test.txt文本，里面输入 \"hllo,world\"，然后将该文本放到git目录下(就是刚才创建的那个目录)\n![这里写图片描述](http://img.blog.csdn.net/20171211152923042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n**2.现在，将文件读取至工作区**\n\n```\n$ git add test.txt \n```\n这样，就完成了工作流的初步设置\n\n\n**3.对txt文件暗中做手脚**\n\n在test.txt文件中，将\"hello,world\"改为\"hey,boy\"，然后ctrl+s，ctrl+F4二连。\n\n\n**4.再次commit至暂存区**\n再次提交至暂存区（如果不再次提交，那么刚才的改变只是在仓库里改变了，而并非在我们的暂存区进行记录。）\n```\n$ git add test.txt \n```\n**5.然后读取暂存区文件的状态：**\n\n```\n$ git status\n```\n**6.接着上传到本地版本库:**\n\n```\n$git commit -m \"first change\"  //回车\n\n***************注意:!!!每次commit都会生成一个版本******\n```\n\nOK,这样，系统就记录下了这次改变。当然也可以随时$git status ，来查看当前的暂存区是否干净 (clean)。\n\n**7.要查看历次的修改记录，或者回滚到任一一个版本，可以:**\n\n```\n$git log\n或者$git reflog //reflog可以显示每次迭代的文件值，并进行排序\n```\n如果想要项目升级或降级到某一个版本，可以这样：\n\n```\n$git reflog //查看变更记录，与对应的入口文件值(自动生成)\n\n```\n想去哪里就去那里：\n\n```\n$git reset --hard \"对应的文件入口，例如35s421\"\n\n/*这里的入口文件值，可以写5位，4位甚至更少，因为计算机会自动根据名字来遍历检索，因此为了效率和不必要的麻烦，尽量写7位左右。*/\n```\n**8.撤销修改**\n改到一半发现还不如不改？如果没有commit，那么可以使用“一键还原”\n\n```\n$git checkout --test.txt\n\n//这会使test.txt回到版本库中的状态，即：还没有bei $git add test.txt的时候\n```\n如果已经commit了，那么只能回到最后一次commit的状态。\n\n```\n$git rm test.txt \n\n//做完测试，顺手清理\n```\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"Git与GitHub之本地仓库","published":1,"updated":"2019-05-14T14:30:28.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsav6000gckuf92w3v70v","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78773371\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>马上就要到年底了，再复习一下Git的相关知识，还有20天，再拼拼命！<br>概念<br>Git:分布式版本管理系统。<br>GitHub:全球最大同性交友平台。(匿)</p>\n<h1 id=\"1-本地的版本库\"><a href=\"#1-本地的版本库\" class=\"headerlink\" title=\"1.本地的版本库\"></a><strong>1.本地的版本库</strong></h1><h2 id=\"1-1环境搭建\"><a href=\"#1-1环境搭建\" class=\"headerlink\" title=\"1.1环境搭建\"></a>1.1环境搭建</h2><p>首先确保已经安装了Nodejs的环境。<br>首先，下载GitBash命令工具。<br><a href=\"https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit</a><br>运行之。<br>命令行中敲入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd  g:</span><br><span class=\"line\">$mkdir git</span><br><span class=\"line\">$cd git</span><br><span class=\"line\">g盘下创建git目录，并且进入该目录</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-建仓库\"><a href=\"#1-2-建仓库\" class=\"headerlink\" title=\"1.2 建仓库\"></a>1.2 建仓库</h2><p><strong>1.创建本地仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git init  //创建OK，g:\\目录下多了一个 .git的文件夹</span><br></pre></td></tr></table></figure>\n<p>然后，在桌面上手动新建一个test.txt文本，里面输入 “hllo,world”，然后将该文本放到git目录下(就是刚才创建的那个目录)<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171211152923042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p><strong>2.现在，将文件读取至工作区</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add test.txt</span><br></pre></td></tr></table></figure>\n<p>这样，就完成了工作流的初步设置</p>\n<p><strong>3.对txt文件暗中做手脚</strong></p>\n<p>在test.txt文件中，将”hello,world”改为”hey,boy”，然后ctrl+s，ctrl+F4二连。</p>\n<p><strong>4.再次commit至暂存区</strong><br>再次提交至暂存区（如果不再次提交，那么刚才的改变只是在仓库里改变了，而并非在我们的暂存区进行记录。）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add test.txt</span><br></pre></td></tr></table></figure></p>\n<p><strong>5.然后读取暂存区文件的状态：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n<p><strong>6.接着上传到本地版本库:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git commit -m &quot;first change&quot;  //回车</span><br><span class=\"line\"></span><br><span class=\"line\">***************注意:!!!每次commit都会生成一个版本******</span><br></pre></td></tr></table></figure>\n<p>OK,这样，系统就记录下了这次改变。当然也可以随时$git status ，来查看当前的暂存区是否干净 (clean)。</p>\n<p><strong>7.要查看历次的修改记录，或者回滚到任一一个版本，可以:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git log</span><br><span class=\"line\">或者$git reflog //reflog可以显示每次迭代的文件值，并进行排序</span><br></pre></td></tr></table></figure>\n<p>如果想要项目升级或降级到某一个版本，可以这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git reflog //查看变更记录，与对应的入口文件值(自动生成)</span><br></pre></td></tr></table></figure>\n<p>想去哪里就去那里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git reset --hard &quot;对应的文件入口，例如35s421&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">/*这里的入口文件值，可以写5位，4位甚至更少，因为计算机会自动根据名字来遍历检索，因此为了效率和不必要的麻烦，尽量写7位左右。*/</span><br></pre></td></tr></table></figure>\n<p><strong>8.撤销修改</strong><br>改到一半发现还不如不改？如果没有commit，那么可以使用“一键还原”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git checkout --test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">//这会使test.txt回到版本库中的状态，即：还没有bei $git add test.txt的时候</span><br></pre></td></tr></table></figure>\n<p>如果已经commit了，那么只能回到最后一次commit的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git rm test.txt </span><br><span class=\"line\"></span><br><span class=\"line\">//做完测试，顺手清理</span><br></pre></td></tr></table></figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78773371\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>马上就要到年底了，再复习一下Git的相关知识，还有20天，再拼拼命！<br>概念<br>Git:分布式版本管理系统。<br>GitHub:全球最大同性交友平台。(匿)</p>\n<h1 id=\"1-本地的版本库\"><a href=\"#1-本地的版本库\" class=\"headerlink\" title=\"1.本地的版本库\"></a><strong>1.本地的版本库</strong></h1><h2 id=\"1-1环境搭建\"><a href=\"#1-1环境搭建\" class=\"headerlink\" title=\"1.1环境搭建\"></a>1.1环境搭建</h2><p>首先确保已经安装了Nodejs的环境。<br>首先，下载GitBash命令工具。<br><a href=\"https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit</a><br>运行之。<br>命令行中敲入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd  g:</span><br><span class=\"line\">$mkdir git</span><br><span class=\"line\">$cd git</span><br><span class=\"line\">g盘下创建git目录，并且进入该目录</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-建仓库\"><a href=\"#1-2-建仓库\" class=\"headerlink\" title=\"1.2 建仓库\"></a>1.2 建仓库</h2><p><strong>1.创建本地仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git init  //创建OK，g:\\目录下多了一个 .git的文件夹</span><br></pre></td></tr></table></figure>\n<p>然后，在桌面上手动新建一个test.txt文本，里面输入 “hllo,world”，然后将该文本放到git目录下(就是刚才创建的那个目录)<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171211152923042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p><strong>2.现在，将文件读取至工作区</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add test.txt</span><br></pre></td></tr></table></figure>\n<p>这样，就完成了工作流的初步设置</p>\n<p><strong>3.对txt文件暗中做手脚</strong></p>\n<p>在test.txt文件中，将”hello,world”改为”hey,boy”，然后ctrl+s，ctrl+F4二连。</p>\n<p><strong>4.再次commit至暂存区</strong><br>再次提交至暂存区（如果不再次提交，那么刚才的改变只是在仓库里改变了，而并非在我们的暂存区进行记录。）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add test.txt</span><br></pre></td></tr></table></figure></p>\n<p><strong>5.然后读取暂存区文件的状态：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure>\n<p><strong>6.接着上传到本地版本库:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git commit -m &quot;first change&quot;  //回车</span><br><span class=\"line\"></span><br><span class=\"line\">***************注意:!!!每次commit都会生成一个版本******</span><br></pre></td></tr></table></figure>\n<p>OK,这样，系统就记录下了这次改变。当然也可以随时$git status ，来查看当前的暂存区是否干净 (clean)。</p>\n<p><strong>7.要查看历次的修改记录，或者回滚到任一一个版本，可以:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git log</span><br><span class=\"line\">或者$git reflog //reflog可以显示每次迭代的文件值，并进行排序</span><br></pre></td></tr></table></figure>\n<p>如果想要项目升级或降级到某一个版本，可以这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git reflog //查看变更记录，与对应的入口文件值(自动生成)</span><br></pre></td></tr></table></figure>\n<p>想去哪里就去那里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git reset --hard &quot;对应的文件入口，例如35s421&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">/*这里的入口文件值，可以写5位，4位甚至更少，因为计算机会自动根据名字来遍历检索，因此为了效率和不必要的麻烦，尽量写7位左右。*/</span><br></pre></td></tr></table></figure>\n<p><strong>8.撤销修改</strong><br>改到一半发现还不如不改？如果没有commit，那么可以使用“一键还原”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git checkout --test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">//这会使test.txt回到版本库中的状态，即：还没有bei $git add test.txt的时候</span><br></pre></td></tr></table></figure>\n<p>如果已经commit了，那么只能回到最后一次commit的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$git rm test.txt </span><br><span class=\"line\"></span><br><span class=\"line\">//做完测试，顺手清理</span><br></pre></td></tr></table></figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"Css位移属性导致像素模糊问题解决办法","date":"2019-02-22T02:53:11.000Z","reward":true,"comment":true,"_content":"\n## 一、抛出问题 ##\n```css\n.modal-container {\n    position: fixed;\n    width: 100vw;\n    height: 100vh;\n    z-index: 999;\n}\n.modal {\n    position: absolute;\n    top: 50%;\n    right: 50%;\n    margin: auto;\n    transform: translat(-50%,-50%);\n}\n```\n以上代码，是做一个模态框，该模态框使用 Hack 方法来垂直竖直两个方向居中，但是在实际操作中，会发现，整个模态框的边缘，会出现模糊的现象，仿佛打了马赛克一样。\n\n马赛克版：\n<img src=\"https://img-blog.csdnimg.cn/20190222103114976.png\" alt=\"马赛克\">\n\n高清版:\n<img src=\"https://img-blog.csdnimg.cn/20190222103150331.png\" alt=\"高清版\">\n\n\n可能上传的图片质量不高，但在我的电脑上差异非常明显\n\n## 二、分析原因 ##\n经过查阅资料和一通分析，发现是CSS 的 transform： translate 属性在作元素位移时，极有可能发生像素点无法对其的情况，从而导致显示模糊的问题，画个灵魂示例图：\n<img src=\"https://img-blog.csdnimg.cn/20190222104705597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx,size_16,color_FFFFFF,t_70\" alt=\"灵魂示意图\">\n\n如图，正常情况下，元素的边缘应该和像素点对齐，但是经过 CSS translate 后，计算的结果并非整数的像素点，导致本来一个像素能渲染的内容，没有完全归纳在其像素点内，导致出现模糊的情况。\n\n翻译成人话： css transform:translate(-50%,-50%) 计算后的结果很可能是 transform: translate( 100.5px, 100.5px)，就因为 0.5 所以模糊\n\n## 三、解决方案 ##\n方式有二\n\n第一种： 在 transfrom 时，使用 calc 函数 加上0.5 px ，具体代码 : \n```css\n.modal {\n\n    position: absolute;\n    top: 50%;\n    right: 50%;\n    margin: auto;\n    /** 这 0.5px加或者减都可以 */\n    transform: translat(calc(-50% + 0.5 px), calc(-50% + 0.5 px));\n}\n```\n第二种，别 transform 了，直接父元素弄成 Flex 布局，两条轴都设置居中，也能达到效果。","source":"_posts/Css位移属性导致像素模糊问题解决办法.md","raw":"---\ntitle: Css位移属性导致像素模糊问题解决办法\ndate: 2019-02-22 10:53:11\ntags: [css]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n## 一、抛出问题 ##\n```css\n.modal-container {\n    position: fixed;\n    width: 100vw;\n    height: 100vh;\n    z-index: 999;\n}\n.modal {\n    position: absolute;\n    top: 50%;\n    right: 50%;\n    margin: auto;\n    transform: translat(-50%,-50%);\n}\n```\n以上代码，是做一个模态框，该模态框使用 Hack 方法来垂直竖直两个方向居中，但是在实际操作中，会发现，整个模态框的边缘，会出现模糊的现象，仿佛打了马赛克一样。\n\n马赛克版：\n<img src=\"https://img-blog.csdnimg.cn/20190222103114976.png\" alt=\"马赛克\">\n\n高清版:\n<img src=\"https://img-blog.csdnimg.cn/20190222103150331.png\" alt=\"高清版\">\n\n\n可能上传的图片质量不高，但在我的电脑上差异非常明显\n\n## 二、分析原因 ##\n经过查阅资料和一通分析，发现是CSS 的 transform： translate 属性在作元素位移时，极有可能发生像素点无法对其的情况，从而导致显示模糊的问题，画个灵魂示例图：\n<img src=\"https://img-blog.csdnimg.cn/20190222104705597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx,size_16,color_FFFFFF,t_70\" alt=\"灵魂示意图\">\n\n如图，正常情况下，元素的边缘应该和像素点对齐，但是经过 CSS translate 后，计算的结果并非整数的像素点，导致本来一个像素能渲染的内容，没有完全归纳在其像素点内，导致出现模糊的情况。\n\n翻译成人话： css transform:translate(-50%,-50%) 计算后的结果很可能是 transform: translate( 100.5px, 100.5px)，就因为 0.5 所以模糊\n\n## 三、解决方案 ##\n方式有二\n\n第一种： 在 transfrom 时，使用 calc 函数 加上0.5 px ，具体代码 : \n```css\n.modal {\n\n    position: absolute;\n    top: 50%;\n    right: 50%;\n    margin: auto;\n    /** 这 0.5px加或者减都可以 */\n    transform: translat(calc(-50% + 0.5 px), calc(-50% + 0.5 px));\n}\n```\n第二种，别 transform 了，直接父元素弄成 Flex 布局，两条轴都设置居中，也能达到效果。","slug":"Css位移属性导致像素模糊问题解决办法","published":1,"updated":"2019-05-14T14:30:28.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsav9000ickuf4qczly8u","content":"<h2 id=\"一、抛出问题\"><a href=\"#一、抛出问题\" class=\"headerlink\" title=\"一、抛出问题\"></a>一、抛出问题</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.modal-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translat</span>(-50%,-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码，是做一个模态框，该模态框使用 Hack 方法来垂直竖直两个方向居中，但是在实际操作中，会发现，整个模态框的边缘，会出现模糊的现象，仿佛打了马赛克一样。</p>\n<p>马赛克版：<br><img src=\"https://img-blog.csdnimg.cn/20190222103114976.png\" alt=\"马赛克\"></p>\n<p>高清版:<br><img src=\"https://img-blog.csdnimg.cn/20190222103150331.png\" alt=\"高清版\"></p>\n<p>可能上传的图片质量不高，但在我的电脑上差异非常明显</p>\n<h2 id=\"二、分析原因\"><a href=\"#二、分析原因\" class=\"headerlink\" title=\"二、分析原因\"></a>二、分析原因</h2><p>经过查阅资料和一通分析，发现是CSS 的 transform： translate 属性在作元素位移时，极有可能发生像素点无法对其的情况，从而导致显示模糊的问题，画个灵魂示例图：<br><img src=\"https://img-blog.csdnimg.cn/20190222104705597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx,size_16,color_FFFFFF,t_70\" alt=\"灵魂示意图\"></p>\n<p>如图，正常情况下，元素的边缘应该和像素点对齐，但是经过 CSS translate 后，计算的结果并非整数的像素点，导致本来一个像素能渲染的内容，没有完全归纳在其像素点内，导致出现模糊的情况。</p>\n<p>翻译成人话： css transform:translate(-50%,-50%) 计算后的结果很可能是 transform: translate( 100.5px, 100.5px)，就因为 0.5 所以模糊</p>\n<h2 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h2><p>方式有二</p>\n<p>第一种： 在 transfrom 时，使用 calc 函数 加上0.5 px ，具体代码 :<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"comment\">/** 这 0.5px加或者减都可以 */</span></span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translat</span>(calc(-50% + 0.5 px), <span class=\"built_in\">calc</span>(-50% + 0.5 px));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种，别 transform 了，直接父元素弄成 Flex 布局，两条轴都设置居中，也能达到效果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、抛出问题\"><a href=\"#一、抛出问题\" class=\"headerlink\" title=\"一、抛出问题\"></a>一、抛出问题</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.modal-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100vw</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">999</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translat</span>(-50%,-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码，是做一个模态框，该模态框使用 Hack 方法来垂直竖直两个方向居中，但是在实际操作中，会发现，整个模态框的边缘，会出现模糊的现象，仿佛打了马赛克一样。</p>\n<p>马赛克版：<br><img src=\"https://img-blog.csdnimg.cn/20190222103114976.png\" alt=\"马赛克\"></p>\n<p>高清版:<br><img src=\"https://img-blog.csdnimg.cn/20190222103150331.png\" alt=\"高清版\"></p>\n<p>可能上传的图片质量不高，但在我的电脑上差异非常明显</p>\n<h2 id=\"二、分析原因\"><a href=\"#二、分析原因\" class=\"headerlink\" title=\"二、分析原因\"></a>二、分析原因</h2><p>经过查阅资料和一通分析，发现是CSS 的 transform： translate 属性在作元素位移时，极有可能发生像素点无法对其的情况，从而导致显示模糊的问题，画个灵魂示例图：<br><img src=\"https://img-blog.csdnimg.cn/20190222104705597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx,size_16,color_FFFFFF,t_70\" alt=\"灵魂示意图\"></p>\n<p>如图，正常情况下，元素的边缘应该和像素点对齐，但是经过 CSS translate 后，计算的结果并非整数的像素点，导致本来一个像素能渲染的内容，没有完全归纳在其像素点内，导致出现模糊的情况。</p>\n<p>翻译成人话： css transform:translate(-50%,-50%) 计算后的结果很可能是 transform: translate( 100.5px, 100.5px)，就因为 0.5 所以模糊</p>\n<h2 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h2><p>方式有二</p>\n<p>第一种： 在 transfrom 时，使用 calc 函数 加上0.5 px ，具体代码 :<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">    <span class=\"comment\">/** 这 0.5px加或者减都可以 */</span></span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translat</span>(calc(-50% + 0.5 px), <span class=\"built_in\">calc</span>(-50% + 0.5 px));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二种，别 transform 了，直接父元素弄成 Flex 布局，两条轴都设置居中，也能达到效果。</p>\n"},{"title":"Git与GitHub之远程仓库","date":"2017-12-11T08:46:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78774208)\n\n\n## 在GitHub上创建一个repository。 ##\n1.首先，生成私钥和公钥：\n\n$ ssh-keygen -t rsa -C \"350037310@qq.com\" (最好填写gitHub的注册邮箱)\n\n这里有个关键的地方：SSH，待会会用到。\n\n![这里写图片描述](http://img.blog.csdn.net/20171211161758024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n2.将本地的Git关联到GitHub\n\n在本地命令行中：` git remote add origin git@github.com:ZQ-jhon/test.git`即可关联远程仓库(这里的git@github.com对应上图。)\n\n狂敲回车，然后在C：/Administrator下会生成一个.ssh文件夹，找到里面_pub的文件，记事本打开，全部ctrl+c，来到:\n\ngitHub----->Settings------>SSH and GPG keys ,点New SSH Key ，title随便取个名字，底下内容粘贴刚才复制的_pub文件，OK。\n\nOK，至此，两个库已经关联起来了。关联的GitHub项目库仅仅是名为test的这个库。\n\n3.将本地库推到GitHub中。\n$ git push -u origin master \n\n4.提示信息\n第一次关联推送时，提示：\n\n```\nThe authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.\nRSA key fingerprint is xx.xx.xx.xx.xx.\nAre you sure you want to continue connecting (yes/no)?\n```\n输入yes，回车，OK，现在远程仓库和本地仓目录一摸一样了。\n\n以后每次推送，只需要$git push origin master就行。\n\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/Git与GitHub之远程仓库.md","raw":"---\ntitle: Git与GitHub之远程仓库 \ndate: 2017-12-11 16:46:00\ntags: git\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78774208)\n\n\n## 在GitHub上创建一个repository。 ##\n1.首先，生成私钥和公钥：\n\n$ ssh-keygen -t rsa -C \"350037310@qq.com\" (最好填写gitHub的注册邮箱)\n\n这里有个关键的地方：SSH，待会会用到。\n\n![这里写图片描述](http://img.blog.csdn.net/20171211161758024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n2.将本地的Git关联到GitHub\n\n在本地命令行中：` git remote add origin git@github.com:ZQ-jhon/test.git`即可关联远程仓库(这里的git@github.com对应上图。)\n\n狂敲回车，然后在C：/Administrator下会生成一个.ssh文件夹，找到里面_pub的文件，记事本打开，全部ctrl+c，来到:\n\ngitHub----->Settings------>SSH and GPG keys ,点New SSH Key ，title随便取个名字，底下内容粘贴刚才复制的_pub文件，OK。\n\nOK，至此，两个库已经关联起来了。关联的GitHub项目库仅仅是名为test的这个库。\n\n3.将本地库推到GitHub中。\n$ git push -u origin master \n\n4.提示信息\n第一次关联推送时，提示：\n\n```\nThe authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.\nRSA key fingerprint is xx.xx.xx.xx.xx.\nAre you sure you want to continue connecting (yes/no)?\n```\n输入yes，回车，OK，现在远程仓库和本地仓目录一摸一样了。\n\n以后每次推送，只需要$git push origin master就行。\n\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"Git与GitHub之远程仓库","published":1,"updated":"2019-05-14T14:30:28.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsava000kckuf3zawr2qn","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78774208\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"在GitHub上创建一个repository。\"><a href=\"#在GitHub上创建一个repository。\" class=\"headerlink\" title=\"在GitHub上创建一个repository。\"></a>在GitHub上创建一个repository。</h2><p>1.首先，生成私钥和公钥：</p>\n<p>$ ssh-keygen -t rsa -C “<a href=\"mailto:350037310@qq.com\" target=\"_blank\" rel=\"noopener\">350037310@qq.com</a>“ (最好填写gitHub的注册邮箱)</p>\n<p>这里有个关键的地方：SSH，待会会用到。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171211161758024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>2.将本地的Git关联到GitHub</p>\n<p>在本地命令行中：<code>git remote add origin git@github.com:ZQ-jhon/test.git</code>即可关联远程仓库(这里的<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>对应上图。)</p>\n<p>狂敲回车，然后在C：/Administrator下会生成一个.ssh文件夹，找到里面_pub的文件，记事本打开，全部ctrl+c，来到:</p>\n<p>gitHub—–&gt;Settings——&gt;SSH and GPG keys ,点New SSH Key ，title随便取个名字，底下内容粘贴刚才复制的_pub文件，OK。</p>\n<p>OK，至此，两个库已经关联起来了。关联的GitHub项目库仅仅是名为test的这个库。</p>\n<p>3.将本地库推到GitHub中。<br>$ git push -u origin master </p>\n<p>4.提示信息<br>第一次关联推送时，提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &apos;github.com (xx.xx.xx.xx)&apos; can&apos;t be established.</span><br><span class=\"line\">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n<p>输入yes，回车，OK，现在远程仓库和本地仓目录一摸一样了。</p>\n<p>以后每次推送，只需要$git push origin master就行。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78774208\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"在GitHub上创建一个repository。\"><a href=\"#在GitHub上创建一个repository。\" class=\"headerlink\" title=\"在GitHub上创建一个repository。\"></a>在GitHub上创建一个repository。</h2><p>1.首先，生成私钥和公钥：</p>\n<p>$ ssh-keygen -t rsa -C “<a href=\"mailto:350037310@qq.com\" target=\"_blank\" rel=\"noopener\">350037310@qq.com</a>“ (最好填写gitHub的注册邮箱)</p>\n<p>这里有个关键的地方：SSH，待会会用到。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171211161758024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>2.将本地的Git关联到GitHub</p>\n<p>在本地命令行中：<code>git remote add origin git@github.com:ZQ-jhon/test.git</code>即可关联远程仓库(这里的<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>对应上图。)</p>\n<p>狂敲回车，然后在C：/Administrator下会生成一个.ssh文件夹，找到里面_pub的文件，记事本打开，全部ctrl+c，来到:</p>\n<p>gitHub—–&gt;Settings——&gt;SSH and GPG keys ,点New SSH Key ，title随便取个名字，底下内容粘贴刚才复制的_pub文件，OK。</p>\n<p>OK，至此，两个库已经关联起来了。关联的GitHub项目库仅仅是名为test的这个库。</p>\n<p>3.将本地库推到GitHub中。<br>$ git push -u origin master </p>\n<p>4.提示信息<br>第一次关联推送时，提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host &apos;github.com (xx.xx.xx.xx)&apos; can&apos;t be established.</span><br><span class=\"line\">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n<p>输入yes，回车，OK，现在远程仓库和本地仓目录一摸一样了。</p>\n<p>以后每次推送，只需要$git push origin master就行。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"Html5回顾总结","date":"2018-01-12T02:53:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79041618)\n\n## 1.新标签 ##\n**1.1 `<vedio>`** \n\n```\n<video width=\"320\" height=\"240\" controls=\"controls\">\n  <source src=\"movie.ogg\" type=\"video/ogg\">\n  <source src=\"movie.mp4\" type=\"video/mp4\">\nYour browser does not support the video tag.\n</video>\n```\n两个video source源是为了最大程度的兼容所有浏览器，该标签IE8及以下不支持。\n比较重要的属性：\n\n```\n预加载   preload:preload\n自动播放 autoplay:autoplay\n循环播放 loop:loop\n```\n常见的高大上的背景视频上嵌套文字的效果可以这样实现：\n\n```\n<!DOCTYPE HTML>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<title></title>\n\t\t<style type=\"text/css\">\n\t\t\tvideo{z-index:-99999;float:left;position: relative;left:300px;}\n\t\t\th4{color:white}\n\t\t</style>\n\t\t\n\t</head>\n<body>\n\n<video width=\"320\" height=\"240\" autoplay=\"autoplay\" loop=\"loop\">\n  <source src=\"http://www.w3school.com.cn/i/movie.ogg\" type=\"video/ogg\">\n  <source src=\"http://www.w3school.com.cn/i/movie.ogg\" type=\"video/mp4\">\nYour browser does not support the video tag.\n</video>\n<div style=\"float:left;width:320px;height:240px;z-index:999\">\n   <h4>震惊！野生棕熊竟然对猎物熟视无睹</h4>\n</body>\n</html>\n\n```\n给`video`给z-index：负数 ，给嵌套层的文字给 z-index：正数，然后相对定位，接着取消`video` 的controls属性，这样会隐藏音量条，播放/暂停按钮等控件。\n![这里写图片描述](http://img.blog.csdn.net/20180112101024552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n类似于该网站的页头：[英雄之刃官网](http://cos.qq.com/)\n\n在js中，可以把`<video>` 完全当做一个Dom节点，操作他的相关属性。\n例如：\n\n```\ndocument.getElementById('video').pause()//暂停\n\ndocument.getElementById('video').play()//播放\n\ndocument.getElementById(\"video\").currentSrc;//获得原始播放地址\n\ndocument.getElementById(\"video\").currentTime//获得播放器当前播放位置，单位为s\n\ndocument.getElementById(\"video\").duration //获得视频的整个播放时长\n......\n```\n还有特别多的API，例 如 EVENT：刚开始播放、结束播放、视频的网络状态等等，甚至可以结合播放时间，来控制插入广告。。。\n**1.2 audio  **\n与上述视频同理。兼容度更狭隘：IE9及以上\n**1.3 拖放 Drag 和 drop**\n兼容度：IE9、IE9+\n示例：[W3C拖放示例](http://www.w3school.com.cn/tiy/t.asp?f=html5_draganddrop)\n**1.4 Canvas**\n*\"始于苹果的一项技术，使得Javascript具有图像绘制的能力\"。*\n\n```\n//HTML:\n<canvas id=\"cvs\" height=\"200\" width=\"200\">\n  您的浏览器不支持<canvas>标签\n</canvas>\n\n//JS:\n<script type=\"text/javascript\">\nvar c=document.getElementById(\"cvs\");  //获取\nvar cxt=c.getContext(\"2d\");  //canvas对象特有的方法，目前仅仅支持到2D，未来可能会支持3D...\ncxt.fillStyle=\"green\"; //填充颜色 \ncxt.fillRect(0,0,150,75); //（x,y,width,height）绘制起始点坐标，绘制的宽高\n</script>\n\n```\n\n贴上自己做的demo\n![这里写图片描述](http://img.blog.csdn.net/20180112115334236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n未完待续。。。\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/Html5回顾总结.md","raw":"---\ntitle: Html5回顾总结\ndate: 2018-01-12 10:53:00\ntags: html5\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79041618)\n\n## 1.新标签 ##\n**1.1 `<vedio>`** \n\n```\n<video width=\"320\" height=\"240\" controls=\"controls\">\n  <source src=\"movie.ogg\" type=\"video/ogg\">\n  <source src=\"movie.mp4\" type=\"video/mp4\">\nYour browser does not support the video tag.\n</video>\n```\n两个video source源是为了最大程度的兼容所有浏览器，该标签IE8及以下不支持。\n比较重要的属性：\n\n```\n预加载   preload:preload\n自动播放 autoplay:autoplay\n循环播放 loop:loop\n```\n常见的高大上的背景视频上嵌套文字的效果可以这样实现：\n\n```\n<!DOCTYPE HTML>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<title></title>\n\t\t<style type=\"text/css\">\n\t\t\tvideo{z-index:-99999;float:left;position: relative;left:300px;}\n\t\t\th4{color:white}\n\t\t</style>\n\t\t\n\t</head>\n<body>\n\n<video width=\"320\" height=\"240\" autoplay=\"autoplay\" loop=\"loop\">\n  <source src=\"http://www.w3school.com.cn/i/movie.ogg\" type=\"video/ogg\">\n  <source src=\"http://www.w3school.com.cn/i/movie.ogg\" type=\"video/mp4\">\nYour browser does not support the video tag.\n</video>\n<div style=\"float:left;width:320px;height:240px;z-index:999\">\n   <h4>震惊！野生棕熊竟然对猎物熟视无睹</h4>\n</body>\n</html>\n\n```\n给`video`给z-index：负数 ，给嵌套层的文字给 z-index：正数，然后相对定位，接着取消`video` 的controls属性，这样会隐藏音量条，播放/暂停按钮等控件。\n![这里写图片描述](http://img.blog.csdn.net/20180112101024552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n类似于该网站的页头：[英雄之刃官网](http://cos.qq.com/)\n\n在js中，可以把`<video>` 完全当做一个Dom节点，操作他的相关属性。\n例如：\n\n```\ndocument.getElementById('video').pause()//暂停\n\ndocument.getElementById('video').play()//播放\n\ndocument.getElementById(\"video\").currentSrc;//获得原始播放地址\n\ndocument.getElementById(\"video\").currentTime//获得播放器当前播放位置，单位为s\n\ndocument.getElementById(\"video\").duration //获得视频的整个播放时长\n......\n```\n还有特别多的API，例 如 EVENT：刚开始播放、结束播放、视频的网络状态等等，甚至可以结合播放时间，来控制插入广告。。。\n**1.2 audio  **\n与上述视频同理。兼容度更狭隘：IE9及以上\n**1.3 拖放 Drag 和 drop**\n兼容度：IE9、IE9+\n示例：[W3C拖放示例](http://www.w3school.com.cn/tiy/t.asp?f=html5_draganddrop)\n**1.4 Canvas**\n*\"始于苹果的一项技术，使得Javascript具有图像绘制的能力\"。*\n\n```\n//HTML:\n<canvas id=\"cvs\" height=\"200\" width=\"200\">\n  您的浏览器不支持<canvas>标签\n</canvas>\n\n//JS:\n<script type=\"text/javascript\">\nvar c=document.getElementById(\"cvs\");  //获取\nvar cxt=c.getContext(\"2d\");  //canvas对象特有的方法，目前仅仅支持到2D，未来可能会支持3D...\ncxt.fillStyle=\"green\"; //填充颜色 \ncxt.fillRect(0,0,150,75); //（x,y,width,height）绘制起始点坐标，绘制的宽高\n</script>\n\n```\n\n贴上自己做的demo\n![这里写图片描述](http://img.blog.csdn.net/20180112115334236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n未完待续。。。\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"Html5回顾总结","published":1,"updated":"2019-05-14T14:30:28.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavd000mckuf1bjfsf3n","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79041618\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"1-新标签\"><a href=\"#1-新标签\" class=\"headerlink\" title=\"1.新标签\"></a>1.新标签</h2><p><strong>1.1 <code>&lt;vedio&gt;</code></strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot;&gt;</span><br><span class=\"line\">  &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot;&gt;</span><br><span class=\"line\">  &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class=\"line\">Your browser does not support the video tag.</span><br><span class=\"line\">&lt;/video&gt;</span><br></pre></td></tr></table></figure>\n<p>两个video source源是为了最大程度的兼容所有浏览器，该标签IE8及以下不支持。<br>比较重要的属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">预加载   preload:preload</span><br><span class=\"line\">自动播放 autoplay:autoplay</span><br><span class=\"line\">循环播放 loop:loop</span><br></pre></td></tr></table></figure>\n<p>常见的高大上的背景视频上嵌套文字的效果可以这样实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t\t\tvideo&#123;z-index:-99999;float:left;position: relative;left:300px;&#125;</span><br><span class=\"line\">\t\t\th4&#123;color:white&#125;</span><br><span class=\"line\">\t\t&lt;/style&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;video width=&quot;320&quot; height=&quot;240&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot;&gt;</span><br><span class=\"line\">  &lt;source src=&quot;http://www.w3school.com.cn/i/movie.ogg&quot; type=&quot;video/ogg&quot;&gt;</span><br><span class=\"line\">  &lt;source src=&quot;http://www.w3school.com.cn/i/movie.ogg&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class=\"line\">Your browser does not support the video tag.</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\">&lt;div style=&quot;float:left;width:320px;height:240px;z-index:999&quot;&gt;</span><br><span class=\"line\">   &lt;h4&gt;震惊！野生棕熊竟然对猎物熟视无睹&lt;/h4&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>给<code>video</code>给z-index：负数 ，给嵌套层的文字给 z-index：正数，然后相对定位，接着取消<code>video</code> 的controls属性，这样会隐藏音量条，播放/暂停按钮等控件。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180112101024552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>类似于该网站的页头：<a href=\"http://cos.qq.com/\" target=\"_blank\" rel=\"noopener\">英雄之刃官网</a></p>\n<p>在js中，可以把<code>&lt;video&gt;</code> 完全当做一个Dom节点，操作他的相关属性。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&apos;video&apos;).pause()//暂停</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&apos;video&apos;).play()//播放</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;video&quot;).currentSrc;//获得原始播放地址</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;video&quot;).currentTime//获得播放器当前播放位置，单位为s</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;video&quot;).duration //获得视频的整个播放时长</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>还有特别多的API，例 如 EVENT：刚开始播放、结束播放、视频的网络状态等等，甚至可以结合播放时间，来控制插入广告。。。<br><strong>1.2 audio  </strong><br>与上述视频同理。兼容度更狭隘：IE9及以上<br><strong>1.3 拖放 Drag 和 drop</strong><br>兼容度：IE9、IE9+<br>示例：<a href=\"http://www.w3school.com.cn/tiy/t.asp?f=html5_draganddrop\" target=\"_blank\" rel=\"noopener\">W3C拖放示例</a><br><strong>1.4 Canvas</strong><br><em>“始于苹果的一项技术，使得Javascript具有图像绘制的能力”。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//HTML:</span><br><span class=\"line\">&lt;canvas id=&quot;cvs&quot; height=&quot;200&quot; width=&quot;200&quot;&gt;</span><br><span class=\"line\">  您的浏览器不支持&lt;canvas&gt;标签</span><br><span class=\"line\">&lt;/canvas&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//JS:</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var c=document.getElementById(&quot;cvs&quot;);  //获取</span><br><span class=\"line\">var cxt=c.getContext(&quot;2d&quot;);  //canvas对象特有的方法，目前仅仅支持到2D，未来可能会支持3D...</span><br><span class=\"line\">cxt.fillStyle=&quot;green&quot;; //填充颜色 </span><br><span class=\"line\">cxt.fillRect(0,0,150,75); //（x,y,width,height）绘制起始点坐标，绘制的宽高</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>贴上自己做的demo<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180112115334236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>未完待续。。。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79041618\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"1-新标签\"><a href=\"#1-新标签\" class=\"headerlink\" title=\"1.新标签\"></a>1.新标签</h2><p><strong>1.1 <code>&lt;vedio&gt;</code></strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot;&gt;</span><br><span class=\"line\">  &lt;source src=&quot;movie.ogg&quot; type=&quot;video/ogg&quot;&gt;</span><br><span class=\"line\">  &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class=\"line\">Your browser does not support the video tag.</span><br><span class=\"line\">&lt;/video&gt;</span><br></pre></td></tr></table></figure>\n<p>两个video source源是为了最大程度的兼容所有浏览器，该标签IE8及以下不支持。<br>比较重要的属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">预加载   preload:preload</span><br><span class=\"line\">自动播放 autoplay:autoplay</span><br><span class=\"line\">循环播放 loop:loop</span><br></pre></td></tr></table></figure>\n<p>常见的高大上的背景视频上嵌套文字的效果可以这样实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">\t&lt;head&gt;</span><br><span class=\"line\">\t\t&lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">\t\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t\t\tvideo&#123;z-index:-99999;float:left;position: relative;left:300px;&#125;</span><br><span class=\"line\">\t\t\th4&#123;color:white&#125;</span><br><span class=\"line\">\t\t&lt;/style&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;video width=&quot;320&quot; height=&quot;240&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot;&gt;</span><br><span class=\"line\">  &lt;source src=&quot;http://www.w3school.com.cn/i/movie.ogg&quot; type=&quot;video/ogg&quot;&gt;</span><br><span class=\"line\">  &lt;source src=&quot;http://www.w3school.com.cn/i/movie.ogg&quot; type=&quot;video/mp4&quot;&gt;</span><br><span class=\"line\">Your browser does not support the video tag.</span><br><span class=\"line\">&lt;/video&gt;</span><br><span class=\"line\">&lt;div style=&quot;float:left;width:320px;height:240px;z-index:999&quot;&gt;</span><br><span class=\"line\">   &lt;h4&gt;震惊！野生棕熊竟然对猎物熟视无睹&lt;/h4&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>给<code>video</code>给z-index：负数 ，给嵌套层的文字给 z-index：正数，然后相对定位，接着取消<code>video</code> 的controls属性，这样会隐藏音量条，播放/暂停按钮等控件。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180112101024552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>类似于该网站的页头：<a href=\"http://cos.qq.com/\" target=\"_blank\" rel=\"noopener\">英雄之刃官网</a></p>\n<p>在js中，可以把<code>&lt;video&gt;</code> 完全当做一个Dom节点，操作他的相关属性。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&apos;video&apos;).pause()//暂停</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&apos;video&apos;).play()//播放</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;video&quot;).currentSrc;//获得原始播放地址</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;video&quot;).currentTime//获得播放器当前播放位置，单位为s</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementById(&quot;video&quot;).duration //获得视频的整个播放时长</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>还有特别多的API，例 如 EVENT：刚开始播放、结束播放、视频的网络状态等等，甚至可以结合播放时间，来控制插入广告。。。<br><strong>1.2 audio  </strong><br>与上述视频同理。兼容度更狭隘：IE9及以上<br><strong>1.3 拖放 Drag 和 drop</strong><br>兼容度：IE9、IE9+<br>示例：<a href=\"http://www.w3school.com.cn/tiy/t.asp?f=html5_draganddrop\" target=\"_blank\" rel=\"noopener\">W3C拖放示例</a><br><strong>1.4 Canvas</strong><br><em>“始于苹果的一项技术，使得Javascript具有图像绘制的能力”。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//HTML:</span><br><span class=\"line\">&lt;canvas id=&quot;cvs&quot; height=&quot;200&quot; width=&quot;200&quot;&gt;</span><br><span class=\"line\">  您的浏览器不支持&lt;canvas&gt;标签</span><br><span class=\"line\">&lt;/canvas&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//JS:</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var c=document.getElementById(&quot;cvs&quot;);  //获取</span><br><span class=\"line\">var cxt=c.getContext(&quot;2d&quot;);  //canvas对象特有的方法，目前仅仅支持到2D，未来可能会支持3D...</span><br><span class=\"line\">cxt.fillStyle=&quot;green&quot;; //填充颜色 </span><br><span class=\"line\">cxt.fillRect(0,0,150,75); //（x,y,width,height）绘制起始点坐标，绘制的宽高</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>贴上自己做的demo<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180112115334236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>未完待续。。。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"NodeBB搭建过程（windows+Redis）+ 科学上网方法","date":"2018-06-22T02:04:36.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/80769624)\n\n\n\n\n1.首先去 github 把项目 clone 下来：\n--------------------------\n\n\nhttps://github.com/NodeBB/NodeBB\n\n然后cd到nodebb，安装依赖 cnpm i\n\n依赖在安装的时候，由于没有 package.json ，会自动 clone ，整个以来安装完成后，应该是这样：\n![install](https://img-blog.csdn.net/20180622095626833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n2.环境配置\n------\n\n附上中文文档：https://docs.nodebb-cn.org/\n\n\n1.Chocolatey 可以下载**离线包**，之后通过 Chocolatey 安装一些环境：\n\n```\nchoco install -y imagemagick github python2 nodejs-lts git\n```\n这里的 github , nodejs ，git 可以选择不安装，跳过。\n2.数据库（database）选择 Redis \nRedis 可以在菜鸟教程上面找到安装教程：\nhttp://www.runoob.com/redis/redis-install.html\n\n安装完成以后，WINDOWS + R 打开 services.msc ，找到 Redis 服务，启动之：\n![Redis](https://img-blog.csdn.net/20180622095820272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n3.Hello World Running\n---------------------\n\n首先，使用命令 ./nodebb build 构建静态资源，构建完如下：\n![helloworld](https://img-blog.csdn.net/2018062210001911?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n此时打开监听的 127.0.0.1:4567 (默认配置的端口)，如图所示：\n![installer](https://img-blog.csdn.net/20180622100114522?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n上面的直接填写，下面的数据库配置如下：\n![database](https://img-blog.csdn.net/20180622100206278?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n点击最下面的 install NodeBB 后，整个项目总算 Running 了：\n![running](https://img-blog.csdn.net/20180622100409227?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n4 . use LANTERN to cross wall (使用lantern 科学上网)\n-------\n\n下载lantern安装包 => 一路next安装，并启动 => 右下角图标右键 ，连接 => OK\n依赖环境 .net FrameWork 4.0 +\n我都打包好了 :\n链接：https://pan.baidu.com/s/1-aMsEznQ76Tjd5vrfEwrow 密码：yyfg\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/NodeBB搭建过程（windows+Redis）+ 科学上网方法.md","raw":"---\ntitle:  NodeBB搭建过程（windows+Redis）+ 科学上网方法 \ndate: 2018-06-22 10:04:36\ntags: [node,javascript]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/80769624)\n\n\n\n\n1.首先去 github 把项目 clone 下来：\n--------------------------\n\n\nhttps://github.com/NodeBB/NodeBB\n\n然后cd到nodebb，安装依赖 cnpm i\n\n依赖在安装的时候，由于没有 package.json ，会自动 clone ，整个以来安装完成后，应该是这样：\n![install](https://img-blog.csdn.net/20180622095626833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n2.环境配置\n------\n\n附上中文文档：https://docs.nodebb-cn.org/\n\n\n1.Chocolatey 可以下载**离线包**，之后通过 Chocolatey 安装一些环境：\n\n```\nchoco install -y imagemagick github python2 nodejs-lts git\n```\n这里的 github , nodejs ，git 可以选择不安装，跳过。\n2.数据库（database）选择 Redis \nRedis 可以在菜鸟教程上面找到安装教程：\nhttp://www.runoob.com/redis/redis-install.html\n\n安装完成以后，WINDOWS + R 打开 services.msc ，找到 Redis 服务，启动之：\n![Redis](https://img-blog.csdn.net/20180622095820272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n3.Hello World Running\n---------------------\n\n首先，使用命令 ./nodebb build 构建静态资源，构建完如下：\n![helloworld](https://img-blog.csdn.net/2018062210001911?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n此时打开监听的 127.0.0.1:4567 (默认配置的端口)，如图所示：\n![installer](https://img-blog.csdn.net/20180622100114522?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n上面的直接填写，下面的数据库配置如下：\n![database](https://img-blog.csdn.net/20180622100206278?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n点击最下面的 install NodeBB 后，整个项目总算 Running 了：\n![running](https://img-blog.csdn.net/20180622100409227?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n4 . use LANTERN to cross wall (使用lantern 科学上网)\n-------\n\n下载lantern安装包 => 一路next安装，并启动 => 右下角图标右键 ，连接 => OK\n依赖环境 .net FrameWork 4.0 +\n我都打包好了 :\n链接：https://pan.baidu.com/s/1-aMsEznQ76Tjd5vrfEwrow 密码：yyfg\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"NodeBB搭建过程（windows+Redis）+ 科学上网方法","published":1,"updated":"2019-05-14T14:30:28.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsave000ockufx6syq27a","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/80769624\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"1-首先去-github-把项目-clone-下来：\"><a href=\"#1-首先去-github-把项目-clone-下来：\" class=\"headerlink\" title=\"1.首先去 github 把项目 clone 下来：\"></a>1.首先去 github 把项目 clone 下来：</h2><p><a href=\"https://github.com/NodeBB/NodeBB\" target=\"_blank\" rel=\"noopener\">https://github.com/NodeBB/NodeBB</a></p>\n<p>然后cd到nodebb，安装依赖 cnpm i</p>\n<p>依赖在安装的时候，由于没有 package.json ，会自动 clone ，整个以来安装完成后，应该是这样：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622095626833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"install\" title=\"\" class=\"\">\n                <p>install</p>\n            </figure></p>\n<h2 id=\"2-环境配置\"><a href=\"#2-环境配置\" class=\"headerlink\" title=\"2.环境配置\"></a>2.环境配置</h2><p>附上中文文档：<a href=\"https://docs.nodebb-cn.org/\" target=\"_blank\" rel=\"noopener\">https://docs.nodebb-cn.org/</a></p>\n<p>1.Chocolatey 可以下载<strong>离线包</strong>，之后通过 Chocolatey 安装一些环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install -y imagemagick github python2 nodejs-lts git</span><br></pre></td></tr></table></figure>\n<p>这里的 github , nodejs ，git 可以选择不安装，跳过。<br>2.数据库（database）选择 Redis<br>Redis 可以在菜鸟教程上面找到安装教程：<br><a href=\"http://www.runoob.com/redis/redis-install.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/redis/redis-install.html</a></p>\n<p>安装完成以后，WINDOWS + R 打开 services.msc ，找到 Redis 服务，启动之：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622095820272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"Redis\" title=\"\" class=\"\">\n                <p>Redis</p>\n            </figure></p>\n<h2 id=\"3-Hello-World-Running\"><a href=\"#3-Hello-World-Running\" class=\"headerlink\" title=\"3.Hello World Running\"></a>3.Hello World Running</h2><p>首先，使用命令 ./nodebb build 构建静态资源，构建完如下：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/2018062210001911?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"helloworld\" title=\"\" class=\"\">\n                <p>helloworld</p>\n            </figure></p>\n<p>此时打开监听的 127.0.0.1:4567 (默认配置的端口)，如图所示：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622100114522?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"installer\" title=\"\" class=\"\">\n                <p>installer</p>\n            </figure></p>\n<p>上面的直接填写，下面的数据库配置如下：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622100206278?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"database\" title=\"\" class=\"\">\n                <p>database</p>\n            </figure><br>点击最下面的 install NodeBB 后，整个项目总算 Running 了：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622100409227?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"running\" title=\"\" class=\"\">\n                <p>running</p>\n            </figure></p>\n<h2 id=\"4-use-LANTERN-to-cross-wall-使用lantern-科学上网\"><a href=\"#4-use-LANTERN-to-cross-wall-使用lantern-科学上网\" class=\"headerlink\" title=\"4 . use LANTERN to cross wall (使用lantern 科学上网)\"></a>4 . use LANTERN to cross wall (使用lantern 科学上网)</h2><p>下载lantern安装包 =&gt; 一路next安装，并启动 =&gt; 右下角图标右键 ，连接 =&gt; OK<br>依赖环境 .net FrameWork 4.0 +<br>我都打包好了 :<br>链接：<a href=\"https://pan.baidu.com/s/1-aMsEznQ76Tjd5vrfEwrow\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1-aMsEznQ76Tjd5vrfEwrow</a> 密码：yyfg</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/80769624\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"1-首先去-github-把项目-clone-下来：\"><a href=\"#1-首先去-github-把项目-clone-下来：\" class=\"headerlink\" title=\"1.首先去 github 把项目 clone 下来：\"></a>1.首先去 github 把项目 clone 下来：</h2><p><a href=\"https://github.com/NodeBB/NodeBB\" target=\"_blank\" rel=\"noopener\">https://github.com/NodeBB/NodeBB</a></p>\n<p>然后cd到nodebb，安装依赖 cnpm i</p>\n<p>依赖在安装的时候，由于没有 package.json ，会自动 clone ，整个以来安装完成后，应该是这样：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622095626833?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"install\" title=\"\" class=\"\">\n                <p>install</p>\n            </figure></p>\n<h2 id=\"2-环境配置\"><a href=\"#2-环境配置\" class=\"headerlink\" title=\"2.环境配置\"></a>2.环境配置</h2><p>附上中文文档：<a href=\"https://docs.nodebb-cn.org/\" target=\"_blank\" rel=\"noopener\">https://docs.nodebb-cn.org/</a></p>\n<p>1.Chocolatey 可以下载<strong>离线包</strong>，之后通过 Chocolatey 安装一些环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install -y imagemagick github python2 nodejs-lts git</span><br></pre></td></tr></table></figure>\n<p>这里的 github , nodejs ，git 可以选择不安装，跳过。<br>2.数据库（database）选择 Redis<br>Redis 可以在菜鸟教程上面找到安装教程：<br><a href=\"http://www.runoob.com/redis/redis-install.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/redis/redis-install.html</a></p>\n<p>安装完成以后，WINDOWS + R 打开 services.msc ，找到 Redis 服务，启动之：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622095820272?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"Redis\" title=\"\" class=\"\">\n                <p>Redis</p>\n            </figure></p>\n<h2 id=\"3-Hello-World-Running\"><a href=\"#3-Hello-World-Running\" class=\"headerlink\" title=\"3.Hello World Running\"></a>3.Hello World Running</h2><p>首先，使用命令 ./nodebb build 构建静态资源，构建完如下：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/2018062210001911?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"helloworld\" title=\"\" class=\"\">\n                <p>helloworld</p>\n            </figure></p>\n<p>此时打开监听的 127.0.0.1:4567 (默认配置的端口)，如图所示：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622100114522?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"installer\" title=\"\" class=\"\">\n                <p>installer</p>\n            </figure></p>\n<p>上面的直接填写，下面的数据库配置如下：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622100206278?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"database\" title=\"\" class=\"\">\n                <p>database</p>\n            </figure><br>点击最下面的 install NodeBB 后，整个项目总算 Running 了：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180622100409227?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"running\" title=\"\" class=\"\">\n                <p>running</p>\n            </figure></p>\n<h2 id=\"4-use-LANTERN-to-cross-wall-使用lantern-科学上网\"><a href=\"#4-use-LANTERN-to-cross-wall-使用lantern-科学上网\" class=\"headerlink\" title=\"4 . use LANTERN to cross wall (使用lantern 科学上网)\"></a>4 . use LANTERN to cross wall (使用lantern 科学上网)</h2><p>下载lantern安装包 =&gt; 一路next安装，并启动 =&gt; 右下角图标右键 ，连接 =&gt; OK<br>依赖环境 .net FrameWork 4.0 +<br>我都打包好了 :<br>链接：<a href=\"https://pan.baidu.com/s/1-aMsEznQ76Tjd5vrfEwrow\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1-aMsEznQ76Tjd5vrfEwrow</a> 密码：yyfg</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"JavaScript开心消消乐中的迭代算法","date":"2017-10-22T05:35:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78309575)\n\n这两天玩开心消消乐，突然想琢磨一下每次这些小方块的生成算法。\n**不考虑4个相同颜色的情况**，理了一下初步的思路，大致如下：\n\n\n【一、游戏的初始化】\n1.首先有六种颜色：红、黄、蓝、绿、棕、紫。那么在一个4*4的矩阵里，要让这六种颜色分布于其中。\n2.初始化的颜色随机生成，并且每行、每列不能三个相同的颜色相连。\n3.为了能够进一步的游戏，必须在4*4的的矩阵中产生两个相连的颜色，并且在前者的左上、右上、左下、右下产生一个相同的颜色，否则整个游戏无法玩。\n\n\n【二、游戏的模拟点击操作】\n1.当点击第一个色块，再点击第二个色块，那么，交换这两个色块的颜色。\n2.如果这两个色块交换之后，并没有产生3个相同颜色相连，那么这种情况就应该保持两个点击色块的原本颜色。\n\n\n【三、色块消除以后的后续生成*(难点)】\n1.当三个色块消除后，上面的元素坍塌掉落。并用新的颜色填充坍塌元素的位置，并且还得遵循【一】中的生成原则。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/JavaScript开心消消乐中的迭代算法.md","raw":"---\ntitle: JavaScript开心消消乐中的迭代算法 \ndate: 2017-10-22 13:35:00\ntags: 算法\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78309575)\n\n这两天玩开心消消乐，突然想琢磨一下每次这些小方块的生成算法。\n**不考虑4个相同颜色的情况**，理了一下初步的思路，大致如下：\n\n\n【一、游戏的初始化】\n1.首先有六种颜色：红、黄、蓝、绿、棕、紫。那么在一个4*4的矩阵里，要让这六种颜色分布于其中。\n2.初始化的颜色随机生成，并且每行、每列不能三个相同的颜色相连。\n3.为了能够进一步的游戏，必须在4*4的的矩阵中产生两个相连的颜色，并且在前者的左上、右上、左下、右下产生一个相同的颜色，否则整个游戏无法玩。\n\n\n【二、游戏的模拟点击操作】\n1.当点击第一个色块，再点击第二个色块，那么，交换这两个色块的颜色。\n2.如果这两个色块交换之后，并没有产生3个相同颜色相连，那么这种情况就应该保持两个点击色块的原本颜色。\n\n\n【三、色块消除以后的后续生成*(难点)】\n1.当三个色块消除后，上面的元素坍塌掉落。并用新的颜色填充坍塌元素的位置，并且还得遵循【一】中的生成原则。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"JavaScript开心消消乐中的迭代算法","published":1,"updated":"2019-05-14T14:30:28.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavg000qckufcqs1ap85","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78309575\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>这两天玩开心消消乐，突然想琢磨一下每次这些小方块的生成算法。<br><strong>不考虑4个相同颜色的情况</strong>，理了一下初步的思路，大致如下：</p>\n<p>【一、游戏的初始化】<br>1.首先有六种颜色：红、黄、蓝、绿、棕、紫。那么在一个4<em>4的矩阵里，要让这六种颜色分布于其中。<br>2.初始化的颜色随机生成，并且每行、每列不能三个相同的颜色相连。<br>3.为了能够进一步的游戏，必须在4</em>4的的矩阵中产生两个相连的颜色，并且在前者的左上、右上、左下、右下产生一个相同的颜色，否则整个游戏无法玩。</p>\n<p>【二、游戏的模拟点击操作】<br>1.当点击第一个色块，再点击第二个色块，那么，交换这两个色块的颜色。<br>2.如果这两个色块交换之后，并没有产生3个相同颜色相连，那么这种情况就应该保持两个点击色块的原本颜色。</p>\n<p>【三、色块消除以后的后续生成*(难点)】<br>1.当三个色块消除后，上面的元素坍塌掉落。并用新的颜色填充坍塌元素的位置，并且还得遵循【一】中的生成原则。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78309575\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>这两天玩开心消消乐，突然想琢磨一下每次这些小方块的生成算法。<br><strong>不考虑4个相同颜色的情况</strong>，理了一下初步的思路，大致如下：</p>\n<p>【一、游戏的初始化】<br>1.首先有六种颜色：红、黄、蓝、绿、棕、紫。那么在一个4<em>4的矩阵里，要让这六种颜色分布于其中。<br>2.初始化的颜色随机生成，并且每行、每列不能三个相同的颜色相连。<br>3.为了能够进一步的游戏，必须在4</em>4的的矩阵中产生两个相连的颜色，并且在前者的左上、右上、左下、右下产生一个相同的颜色，否则整个游戏无法玩。</p>\n<p>【二、游戏的模拟点击操作】<br>1.当点击第一个色块，再点击第二个色块，那么，交换这两个色块的颜色。<br>2.如果这两个色块交换之后，并没有产生3个相同颜色相连，那么这种情况就应该保持两个点击色块的原本颜色。</p>\n<p>【三、色块消除以后的后续生成*(难点)】<br>1.当三个色块消除后，上面的元素坍塌掉落。并用新的颜色填充坍塌元素的位置，并且还得遵循【一】中的生成原则。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"公告","date":"2019-04-11T08:34:00.000Z","reward":true,"comment":true,"_content":"如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 [https://zq-jhon.github.io/about/](https://zq-jhon.github.io/about/) 中添加我的微信\n\n\n\n{% image notice.png notice notice %}\n\n今天打开 learnClound 发现，我的博客其实还是有人看的，还有人反映很多图片挂掉：\n\n{% image comment.png comment comment %}\n之前的图片都是在 CSDN 上写完以后，直接 Copy 过来的， CSDN 不允许外链，因此挂了。\n\n于是直接上了 hexo 的文章图片同步构建功能，直接使用文件名，就可以引用图片了，我只能说，GIHUB，等着扩容吧，哈哈，真香！\n\n\n<b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/Notice.md","raw":"---\ntitle: 公告 #标题\ndate: 2019-04-11 16:34:00 #创建时间\ntags: [notice] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 [https://zq-jhon.github.io/about/](https://zq-jhon.github.io/about/) 中添加我的微信\n\n\n\n{% image notice.png notice notice %}\n\n今天打开 learnClound 发现，我的博客其实还是有人看的，还有人反映很多图片挂掉：\n\n{% image comment.png comment comment %}\n之前的图片都是在 CSDN 上写完以后，直接 Copy 过来的， CSDN 不允许外链，因此挂了。\n\n于是直接上了 hexo 的文章图片同步构建功能，直接使用文件名，就可以引用图片了，我只能说，GIHUB，等着扩容吧，哈哈，真香！\n\n\n<b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"Notice","published":1,"updated":"2019-05-14T14:30:37.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavi000sckufornwky81","content":"<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<figure class=\"image-box\">\n                <img src=\"notice.png\" alt=\"notice\" title=\"notice\" class=\"\">\n                <p>notice</p>\n            </figure>\n<p>今天打开 learnClound 发现，我的博客其实还是有人看的，还有人反映很多图片挂掉：</p>\n<figure class=\"image-box\">\n                <img src=\"comment.png\" alt=\"comment\" title=\"comment\" class=\"\">\n                <p>comment</p>\n            </figure>\n<p>之前的图片都是在 CSDN 上写完以后，直接 Copy 过来的， CSDN 不允许外链，因此挂了。</p>\n<p>于是直接上了 hexo 的文章图片同步构建功能，直接使用文件名，就可以引用图片了，我只能说，GIHUB，等着扩容吧，哈哈，真香！</p>\n<p><b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<figure class=\"image-box\">\n                <img src=\"notice.png\" alt=\"notice\" title=\"notice\" class=\"\">\n                <p>notice</p>\n            </figure>\n<p>今天打开 learnClound 发现，我的博客其实还是有人看的，还有人反映很多图片挂掉：</p>\n<figure class=\"image-box\">\n                <img src=\"comment.png\" alt=\"comment\" title=\"comment\" class=\"\">\n                <p>comment</p>\n            </figure>\n<p>之前的图片都是在 CSDN 上写完以后，直接 Copy 过来的， CSDN 不允许外链，因此挂了。</p>\n<p>于是直接上了 hexo 的文章图片同步构建功能，直接使用文件名，就可以引用图片了，我只能说，GIHUB，等着扩容吧，哈哈，真香！</p>\n<p><b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"NodeJs基础配置、核心概念与学习路线回顾","date":"2017-12-12T14:07:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78786161)\n\nNodejs把前端开发带入一个全新的阶段，他使得js能够跑在服务端上，大大强化了js这门语言的可塑性。\nOK，环境配置不提，配置好了以后，直接来跑一些简单的demo\n\n以前一直没搞懂nodejs复杂的目录（其实是不懂linux），老把文件目录和运行时的目录搞错。\n\n在gitbash下，先进入对应的目录，例如我的js文件在 D:\\node\\nodejs下，那么应该：\n\n```\n$ cd d:\n$ cd node/nodejs\n\n```\n这样就OK啦，如果想跟IDE进行配合也不是不行，步骤如下：\n1.在node.exe同级下建立project，命名为 nodejs ：\n![这里写图片描述](http://img.blog.csdn.net/20171212205905914?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n2.在IDE中添加新建项目，添加刚才的文件夹路径：\n![这里写图片描述](http://img.blog.csdn.net/20171212210012938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n欧~~尅！\n接着，在IDE里面新建几个js文件，然后在我们的Node上面跑一跑(CreateServer那个DEMO就不做了)。\n建立第一个文件:hello.js （null文件）\n建立第二个文件:world.js（null文件）\n两个文件可以在同级目录，也可以不在。\n\n将下列代码填入hello.js：\n\n```\nfunction hello(){\n\tconsole.log(\"hello\")\n}\nexports.hello =hello();\n \n```\n打开gitBash,找到IDE中工程的目录(最好把js文件放在工程目录下即可，或者单独建一个js文件夹)：\n然后输入：`$ node hello.js`\n\n![这里写图片描述](http://img.blog.csdn.net/20171212210405883?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n然后将下列代码填入 world.js :\n\n```\nvar world = require(\"./hello.js\");\nworld.hello\n```\n运行之，得出下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20171212210540891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可以看到，两次的运行结果一样。hello.js的运行结果为hello不足为奇，那么world.js为什么也输出hello呢？\n\n这是因为在hello.js中，打包出来一个公共模块，`exports.hello =function(){....}`\n而在world.js中，引入了这个模块，并且赋值给变量world:\n\n```\nvar world = require('./hello.js') /*引入【hello.js里面打包的\n\n模块】*/\n\n/*此时，world相当于拥有共有模块的所有属性和方法了，那么此时，这个\n\nworld有一个方法为hello,我们调用这个hello方法，world.hello ，自然\n\n而然输出hello*/\n\n\n\n```\n如果将hello.js改进一下，\n```\nvar i=0 ; \nfunction hello(){\n++i;\nconsole.log(\"hello for \" + i)\n};\n```\n运行 `node hello.js` 输出: //hello for 1\n\n同时更改world.js:\n\n```\nvar world = require('./hello.js')\nvar world1 = require('./hello.js')\nworld.hello\nworld1.hello\n```\n运行 `$node world.js` 输出//hello for 1甭管运行几次，都是这个结果\n\n这说明，引入模块时，只有第一次引入时会初始化模块。\n\n**模块的集合：包(package)**\n所谓的包，就是内部集成了好多模块，主要使用一个入口文件作为包的入口，该文件的导出对象作为包的公有模块：\n\n```\n一   ---nodejs\n|一   ----js\n   |       -----main.js\n   |       ------head.js\n   |       ------body.js\n   |       ------footer.js\n|一   ------package.json\n\n\n```\n此时，main.js是包的入口和导出对象模块，在main.js中，很有可能引入了head.js、body.js、footer.js的导出模块，然后写入一些功能和方法，最后导出一个公有方法，供其他的包或者模块使用。\n\n\n\n当模块的文件名是index.js，加载模块时可以使用模块所在目录的路径代替模块文件路径，因此接着上例，以下两条语句等价。\n\n\n当引用包的入口文件时，require('./node/nodejs/main.js')这样给人感觉仿佛在引用一个模块，而不是整个包。\n解决方法是，将Main.js命名为index.js，这样，在引入包的入口文件时，直接填写包入口文件的路径：\n```\nvar cat = require('./js/index.js');\nvar cat = require('/js');\n\n//上面两条语句等价\n```\n\n这样处理后，就只需要把包目录路径传递给require函数，感觉上整个目录被当作单个模块使用，更有整体感。\n\n也可以用json文件来声明入口：\n\n```\n｛\n\t  'main':'./main.js'\n｝\n```\n这样，在引入包的入口文件时 require('./node/nodejs')时，会优先查找json文件，并从中读取入口配置，注意，此时的json一定要在引用的路径之下。\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/NodeJs基础配置、核心概念与学习路线回顾.md","raw":"---\ntitle: NodeJs基础配置、核心概念与学习路线回顾 \ndate: 2017-12-12 22:07:00\ntags: nodejs\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78786161)\n\nNodejs把前端开发带入一个全新的阶段，他使得js能够跑在服务端上，大大强化了js这门语言的可塑性。\nOK，环境配置不提，配置好了以后，直接来跑一些简单的demo\n\n以前一直没搞懂nodejs复杂的目录（其实是不懂linux），老把文件目录和运行时的目录搞错。\n\n在gitbash下，先进入对应的目录，例如我的js文件在 D:\\node\\nodejs下，那么应该：\n\n```\n$ cd d:\n$ cd node/nodejs\n\n```\n这样就OK啦，如果想跟IDE进行配合也不是不行，步骤如下：\n1.在node.exe同级下建立project，命名为 nodejs ：\n![这里写图片描述](http://img.blog.csdn.net/20171212205905914?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n2.在IDE中添加新建项目，添加刚才的文件夹路径：\n![这里写图片描述](http://img.blog.csdn.net/20171212210012938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n欧~~尅！\n接着，在IDE里面新建几个js文件，然后在我们的Node上面跑一跑(CreateServer那个DEMO就不做了)。\n建立第一个文件:hello.js （null文件）\n建立第二个文件:world.js（null文件）\n两个文件可以在同级目录，也可以不在。\n\n将下列代码填入hello.js：\n\n```\nfunction hello(){\n\tconsole.log(\"hello\")\n}\nexports.hello =hello();\n \n```\n打开gitBash,找到IDE中工程的目录(最好把js文件放在工程目录下即可，或者单独建一个js文件夹)：\n然后输入：`$ node hello.js`\n\n![这里写图片描述](http://img.blog.csdn.net/20171212210405883?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n然后将下列代码填入 world.js :\n\n```\nvar world = require(\"./hello.js\");\nworld.hello\n```\n运行之，得出下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20171212210540891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可以看到，两次的运行结果一样。hello.js的运行结果为hello不足为奇，那么world.js为什么也输出hello呢？\n\n这是因为在hello.js中，打包出来一个公共模块，`exports.hello =function(){....}`\n而在world.js中，引入了这个模块，并且赋值给变量world:\n\n```\nvar world = require('./hello.js') /*引入【hello.js里面打包的\n\n模块】*/\n\n/*此时，world相当于拥有共有模块的所有属性和方法了，那么此时，这个\n\nworld有一个方法为hello,我们调用这个hello方法，world.hello ，自然\n\n而然输出hello*/\n\n\n\n```\n如果将hello.js改进一下，\n```\nvar i=0 ; \nfunction hello(){\n++i;\nconsole.log(\"hello for \" + i)\n};\n```\n运行 `node hello.js` 输出: //hello for 1\n\n同时更改world.js:\n\n```\nvar world = require('./hello.js')\nvar world1 = require('./hello.js')\nworld.hello\nworld1.hello\n```\n运行 `$node world.js` 输出//hello for 1甭管运行几次，都是这个结果\n\n这说明，引入模块时，只有第一次引入时会初始化模块。\n\n**模块的集合：包(package)**\n所谓的包，就是内部集成了好多模块，主要使用一个入口文件作为包的入口，该文件的导出对象作为包的公有模块：\n\n```\n一   ---nodejs\n|一   ----js\n   |       -----main.js\n   |       ------head.js\n   |       ------body.js\n   |       ------footer.js\n|一   ------package.json\n\n\n```\n此时，main.js是包的入口和导出对象模块，在main.js中，很有可能引入了head.js、body.js、footer.js的导出模块，然后写入一些功能和方法，最后导出一个公有方法，供其他的包或者模块使用。\n\n\n\n当模块的文件名是index.js，加载模块时可以使用模块所在目录的路径代替模块文件路径，因此接着上例，以下两条语句等价。\n\n\n当引用包的入口文件时，require('./node/nodejs/main.js')这样给人感觉仿佛在引用一个模块，而不是整个包。\n解决方法是，将Main.js命名为index.js，这样，在引入包的入口文件时，直接填写包入口文件的路径：\n```\nvar cat = require('./js/index.js');\nvar cat = require('/js');\n\n//上面两条语句等价\n```\n\n这样处理后，就只需要把包目录路径传递给require函数，感觉上整个目录被当作单个模块使用，更有整体感。\n\n也可以用json文件来声明入口：\n\n```\n｛\n\t  'main':'./main.js'\n｝\n```\n这样，在引入包的入口文件时 require('./node/nodejs')时，会优先查找json文件，并从中读取入口配置，注意，此时的json一定要在引用的路径之下。\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"NodeJs基础配置、核心概念与学习路线回顾","published":1,"updated":"2019-05-14T14:30:28.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavn000uckufkh8vygkv","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78786161\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>Nodejs把前端开发带入一个全新的阶段，他使得js能够跑在服务端上，大大强化了js这门语言的可塑性。<br>OK，环境配置不提，配置好了以后，直接来跑一些简单的demo</p>\n<p>以前一直没搞懂nodejs复杂的目录（其实是不懂linux），老把文件目录和运行时的目录搞错。</p>\n<p>在gitbash下，先进入对应的目录，例如我的js文件在 D:\\node\\nodejs下，那么应该：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd d:</span><br><span class=\"line\">$ cd node/nodejs</span><br></pre></td></tr></table></figure>\n<p>这样就OK啦，如果想跟IDE进行配合也不是不行，步骤如下：<br>1.在node.exe同级下建立project，命名为 nodejs ：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212205905914?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>2.在IDE中添加新建项目，添加刚才的文件夹路径：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212210012938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>欧~~尅！<br>接着，在IDE里面新建几个js文件，然后在我们的Node上面跑一跑(CreateServer那个DEMO就不做了)。<br>建立第一个文件:hello.js （null文件）<br>建立第二个文件:world.js（null文件）<br>两个文件可以在同级目录，也可以不在。</p>\n<p>将下列代码填入hello.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hello()&#123;</span><br><span class=\"line\">\tconsole.log(&quot;hello&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.hello =hello();</span><br></pre></td></tr></table></figure>\n<p>打开gitBash,找到IDE中工程的目录(最好把js文件放在工程目录下即可，或者单独建一个js文件夹)：<br>然后输入：<code>$ node hello.js</code></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212210405883?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>然后将下列代码填入 world.js :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var world = require(&quot;./hello.js&quot;);</span><br><span class=\"line\">world.hello</span><br></pre></td></tr></table></figure>\n<p>运行之，得出下图：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212210540891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>可以看到，两次的运行结果一样。hello.js的运行结果为hello不足为奇，那么world.js为什么也输出hello呢？</p>\n<p>这是因为在hello.js中，打包出来一个公共模块，<code>exports.hello =function(){....}</code><br>而在world.js中，引入了这个模块，并且赋值给变量world:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var world = require(&apos;./hello.js&apos;) /*引入【hello.js里面打包的</span><br><span class=\"line\"></span><br><span class=\"line\">模块】*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*此时，world相当于拥有共有模块的所有属性和方法了，那么此时，这个</span><br><span class=\"line\"></span><br><span class=\"line\">world有一个方法为hello,我们调用这个hello方法，world.hello ，自然</span><br><span class=\"line\"></span><br><span class=\"line\">而然输出hello*/</span><br></pre></td></tr></table></figure>\n<p>如果将hello.js改进一下，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i=0 ; </span><br><span class=\"line\">function hello()&#123;</span><br><span class=\"line\">++i;</span><br><span class=\"line\">console.log(&quot;hello for &quot; + i)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>运行 <code>node hello.js</code> 输出: //hello for 1</p>\n<p>同时更改world.js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var world = require(&apos;./hello.js&apos;)</span><br><span class=\"line\">var world1 = require(&apos;./hello.js&apos;)</span><br><span class=\"line\">world.hello</span><br><span class=\"line\">world1.hello</span><br></pre></td></tr></table></figure>\n<p>运行 <code>$node world.js</code> 输出//hello for 1甭管运行几次，都是这个结果</p>\n<p>这说明，引入模块时，只有第一次引入时会初始化模块。</p>\n<p><strong>模块的集合：包(package)</strong><br>所谓的包，就是内部集成了好多模块，主要使用一个入口文件作为包的入口，该文件的导出对象作为包的公有模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一   ---nodejs</span><br><span class=\"line\">|一   ----js</span><br><span class=\"line\">   |       -----main.js</span><br><span class=\"line\">   |       ------head.js</span><br><span class=\"line\">   |       ------body.js</span><br><span class=\"line\">   |       ------footer.js</span><br><span class=\"line\">|一   ------package.json</span><br></pre></td></tr></table></figure>\n<p>此时，main.js是包的入口和导出对象模块，在main.js中，很有可能引入了head.js、body.js、footer.js的导出模块，然后写入一些功能和方法，最后导出一个公有方法，供其他的包或者模块使用。</p>\n<p>当模块的文件名是index.js，加载模块时可以使用模块所在目录的路径代替模块文件路径，因此接着上例，以下两条语句等价。</p>\n<p>当引用包的入口文件时，require(‘./node/nodejs/main.js’)这样给人感觉仿佛在引用一个模块，而不是整个包。<br>解决方法是，将Main.js命名为index.js，这样，在引入包的入口文件时，直接填写包入口文件的路径：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cat = require(&apos;./js/index.js&apos;);</span><br><span class=\"line\">var cat = require(&apos;/js&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//上面两条语句等价</span><br></pre></td></tr></table></figure></p>\n<p>这样处理后，就只需要把包目录路径传递给require函数，感觉上整个目录被当作单个模块使用，更有整体感。</p>\n<p>也可以用json文件来声明入口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">｛</span><br><span class=\"line\">\t  &apos;main&apos;:&apos;./main.js&apos;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<p>这样，在引入包的入口文件时 require(‘./node/nodejs’)时，会优先查找json文件，并从中读取入口配置，注意，此时的json一定要在引用的路径之下。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78786161\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>Nodejs把前端开发带入一个全新的阶段，他使得js能够跑在服务端上，大大强化了js这门语言的可塑性。<br>OK，环境配置不提，配置好了以后，直接来跑一些简单的demo</p>\n<p>以前一直没搞懂nodejs复杂的目录（其实是不懂linux），老把文件目录和运行时的目录搞错。</p>\n<p>在gitbash下，先进入对应的目录，例如我的js文件在 D:\\node\\nodejs下，那么应该：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd d:</span><br><span class=\"line\">$ cd node/nodejs</span><br></pre></td></tr></table></figure>\n<p>这样就OK啦，如果想跟IDE进行配合也不是不行，步骤如下：<br>1.在node.exe同级下建立project，命名为 nodejs ：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212205905914?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>2.在IDE中添加新建项目，添加刚才的文件夹路径：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212210012938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>欧~~尅！<br>接着，在IDE里面新建几个js文件，然后在我们的Node上面跑一跑(CreateServer那个DEMO就不做了)。<br>建立第一个文件:hello.js （null文件）<br>建立第二个文件:world.js（null文件）<br>两个文件可以在同级目录，也可以不在。</p>\n<p>将下列代码填入hello.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hello()&#123;</span><br><span class=\"line\">\tconsole.log(&quot;hello&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.hello =hello();</span><br></pre></td></tr></table></figure>\n<p>打开gitBash,找到IDE中工程的目录(最好把js文件放在工程目录下即可，或者单独建一个js文件夹)：<br>然后输入：<code>$ node hello.js</code></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212210405883?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>然后将下列代码填入 world.js :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var world = require(&quot;./hello.js&quot;);</span><br><span class=\"line\">world.hello</span><br></pre></td></tr></table></figure>\n<p>运行之，得出下图：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212210540891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>可以看到，两次的运行结果一样。hello.js的运行结果为hello不足为奇，那么world.js为什么也输出hello呢？</p>\n<p>这是因为在hello.js中，打包出来一个公共模块，<code>exports.hello =function(){....}</code><br>而在world.js中，引入了这个模块，并且赋值给变量world:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var world = require(&apos;./hello.js&apos;) /*引入【hello.js里面打包的</span><br><span class=\"line\"></span><br><span class=\"line\">模块】*/</span><br><span class=\"line\"></span><br><span class=\"line\">/*此时，world相当于拥有共有模块的所有属性和方法了，那么此时，这个</span><br><span class=\"line\"></span><br><span class=\"line\">world有一个方法为hello,我们调用这个hello方法，world.hello ，自然</span><br><span class=\"line\"></span><br><span class=\"line\">而然输出hello*/</span><br></pre></td></tr></table></figure>\n<p>如果将hello.js改进一下，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i=0 ; </span><br><span class=\"line\">function hello()&#123;</span><br><span class=\"line\">++i;</span><br><span class=\"line\">console.log(&quot;hello for &quot; + i)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>运行 <code>node hello.js</code> 输出: //hello for 1</p>\n<p>同时更改world.js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var world = require(&apos;./hello.js&apos;)</span><br><span class=\"line\">var world1 = require(&apos;./hello.js&apos;)</span><br><span class=\"line\">world.hello</span><br><span class=\"line\">world1.hello</span><br></pre></td></tr></table></figure>\n<p>运行 <code>$node world.js</code> 输出//hello for 1甭管运行几次，都是这个结果</p>\n<p>这说明，引入模块时，只有第一次引入时会初始化模块。</p>\n<p><strong>模块的集合：包(package)</strong><br>所谓的包，就是内部集成了好多模块，主要使用一个入口文件作为包的入口，该文件的导出对象作为包的公有模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一   ---nodejs</span><br><span class=\"line\">|一   ----js</span><br><span class=\"line\">   |       -----main.js</span><br><span class=\"line\">   |       ------head.js</span><br><span class=\"line\">   |       ------body.js</span><br><span class=\"line\">   |       ------footer.js</span><br><span class=\"line\">|一   ------package.json</span><br></pre></td></tr></table></figure>\n<p>此时，main.js是包的入口和导出对象模块，在main.js中，很有可能引入了head.js、body.js、footer.js的导出模块，然后写入一些功能和方法，最后导出一个公有方法，供其他的包或者模块使用。</p>\n<p>当模块的文件名是index.js，加载模块时可以使用模块所在目录的路径代替模块文件路径，因此接着上例，以下两条语句等价。</p>\n<p>当引用包的入口文件时，require(‘./node/nodejs/main.js’)这样给人感觉仿佛在引用一个模块，而不是整个包。<br>解决方法是，将Main.js命名为index.js，这样，在引入包的入口文件时，直接填写包入口文件的路径：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cat = require(&apos;./js/index.js&apos;);</span><br><span class=\"line\">var cat = require(&apos;/js&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//上面两条语句等价</span><br></pre></td></tr></table></figure></p>\n<p>这样处理后，就只需要把包目录路径传递给require函数，感觉上整个目录被当作单个模块使用，更有整体感。</p>\n<p>也可以用json文件来声明入口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">｛</span><br><span class=\"line\">\t  &apos;main&apos;:&apos;./main.js&apos;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<p>这样，在引入包的入口文件时 require(‘./node/nodejs’)时，会优先查找json文件，并从中读取入口配置，注意，此时的json一定要在引用的路径之下。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"PHP初体验","date":"2017-12-09T06:29:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客]()\n\n\n**1.连接符**\n==\n\n```\n$color = 'red'\n第一种连接方式: echo \"my color is $color\"\n第二种连接方式: echo \"my color is\". $color .\"<br>\"//（VB是&链接，js+链接，这个.链接真的反人类）\n第三种连接方式: echo\"my colo is{$color}\"//花括号包住变量\n第四种连接方式(相当于js字符串的+=):\n$a=\"hello\";\necho $a.=\"world\"; //hello,world\n\n\n```\n\n**2.变量Scope**\n==\n\n**1.全局作用域**\n定义的变量只能在全局读取，函数内部都无法读取。\n**2.局部作用域**\n定义的变量只能在局部读取，全局无法读取。\n（js的变量是：父域的变量可以让子域读取，反过来则不能。）\n如果局部子域想要访问Global变量，则需要提前声明：爸爸，我要用你的变量：\n\n```\n\n$a = 5;\nfunction son(){\nglobal $a ;\n$b = 1;\nreturn a+b\n}\nson();//6\n```\n更或通过所有**全局变量**的数组来访问全局变量，因此上述的表达式\n\n```\nglobal $a等价于： $GLOBAL['a']  (下标注意，有引号)\n\n```\n如果想要局部变量的函数在函数执行完成以后不被销毁，即继续在全局域下使用，那么应该提前声明static(静态的)关键字：\n\n```\n<?php\n\nfunction myTest() {\n  static $x=2;\n  echo \"结果是:$x\";\n  $x=$x*$x;\n}\n\nmyTest();//2\nmyTest();//4\nmyTest();//16\n\n?>\n```\n\n**3.常量(真·全局量)**\n==\n\n相当于全局的变量，但是值不可更改或者撤销定义\n\n定义方法：define(name,value,bool)，参数很简单，关键在第三个参数，对大小写不敏感吗？默认flase，对大小写敏感，如果强行设置第三个参数为true,则对常量名字大小写不敏感。\n\n**4.运算符**\n==\n\n+，-，*，/，% ,==,===      大同小异。\n\n唯一和js不同的是，不等于可以写成 <>，啊哈哈，和vb有点像\n\n**5.超全局变量**\n==\nPHP 超全局变量\n```\n $_GET 和 $_POST \n```\n用于收集表单数据（form-data）。\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/PHP初体验.md","raw":"---\ntitle: PHP初体验 \ndate: 2017-12-09 14:29:00\ntags: php\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客]()\n\n\n**1.连接符**\n==\n\n```\n$color = 'red'\n第一种连接方式: echo \"my color is $color\"\n第二种连接方式: echo \"my color is\". $color .\"<br>\"//（VB是&链接，js+链接，这个.链接真的反人类）\n第三种连接方式: echo\"my colo is{$color}\"//花括号包住变量\n第四种连接方式(相当于js字符串的+=):\n$a=\"hello\";\necho $a.=\"world\"; //hello,world\n\n\n```\n\n**2.变量Scope**\n==\n\n**1.全局作用域**\n定义的变量只能在全局读取，函数内部都无法读取。\n**2.局部作用域**\n定义的变量只能在局部读取，全局无法读取。\n（js的变量是：父域的变量可以让子域读取，反过来则不能。）\n如果局部子域想要访问Global变量，则需要提前声明：爸爸，我要用你的变量：\n\n```\n\n$a = 5;\nfunction son(){\nglobal $a ;\n$b = 1;\nreturn a+b\n}\nson();//6\n```\n更或通过所有**全局变量**的数组来访问全局变量，因此上述的表达式\n\n```\nglobal $a等价于： $GLOBAL['a']  (下标注意，有引号)\n\n```\n如果想要局部变量的函数在函数执行完成以后不被销毁，即继续在全局域下使用，那么应该提前声明static(静态的)关键字：\n\n```\n<?php\n\nfunction myTest() {\n  static $x=2;\n  echo \"结果是:$x\";\n  $x=$x*$x;\n}\n\nmyTest();//2\nmyTest();//4\nmyTest();//16\n\n?>\n```\n\n**3.常量(真·全局量)**\n==\n\n相当于全局的变量，但是值不可更改或者撤销定义\n\n定义方法：define(name,value,bool)，参数很简单，关键在第三个参数，对大小写不敏感吗？默认flase，对大小写敏感，如果强行设置第三个参数为true,则对常量名字大小写不敏感。\n\n**4.运算符**\n==\n\n+，-，*，/，% ,==,===      大同小异。\n\n唯一和js不同的是，不等于可以写成 <>，啊哈哈，和vb有点像\n\n**5.超全局变量**\n==\nPHP 超全局变量\n```\n $_GET 和 $_POST \n```\n用于收集表单数据（form-data）。\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"PHP初体验","published":1,"updated":"2019-05-14T14:30:28.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavp000vckuf3zjzrmef","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"\">我的CSDN博客</a></p>\n<h1 id=\"1-连接符\"><a href=\"#1-连接符\" class=\"headerlink\" title=\"1.连接符\"></a><strong>1.连接符</strong></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$color = &apos;red&apos;</span><br><span class=\"line\">第一种连接方式: echo &quot;my color is $color&quot;</span><br><span class=\"line\">第二种连接方式: echo &quot;my color is&quot;. $color .&quot;&lt;br&gt;&quot;//（VB是&amp;链接，js+链接，这个.链接真的反人类）</span><br><span class=\"line\">第三种连接方式: echo&quot;my colo is&#123;$color&#125;&quot;//花括号包住变量</span><br><span class=\"line\">第四种连接方式(相当于js字符串的+=):</span><br><span class=\"line\">$a=&quot;hello&quot;;</span><br><span class=\"line\">echo $a.=&quot;world&quot;; //hello,world</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-变量Scope\"><a href=\"#2-变量Scope\" class=\"headerlink\" title=\"2.变量Scope\"></a><strong>2.变量Scope</strong></h1><p><strong>1.全局作用域</strong><br>定义的变量只能在全局读取，函数内部都无法读取。<br><strong>2.局部作用域</strong><br>定义的变量只能在局部读取，全局无法读取。<br>（js的变量是：父域的变量可以让子域读取，反过来则不能。）<br>如果局部子域想要访问Global变量，则需要提前声明：爸爸，我要用你的变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$a = 5;</span><br><span class=\"line\">function son()&#123;</span><br><span class=\"line\">global $a ;</span><br><span class=\"line\">$b = 1;</span><br><span class=\"line\">return a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">son();//6</span><br></pre></td></tr></table></figure>\n<p>更或通过所有<strong>全局变量</strong>的数组来访问全局变量，因此上述的表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global $a等价于： $GLOBAL[&apos;a&apos;]  (下标注意，有引号)</span><br></pre></td></tr></table></figure>\n<p>如果想要局部变量的函数在函数执行完成以后不被销毁，即继续在全局域下使用，那么应该提前声明static(静态的)关键字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">function myTest() &#123;</span><br><span class=\"line\">  static $x=2;</span><br><span class=\"line\">  echo &quot;结果是:$x&quot;;</span><br><span class=\"line\">  $x=$x*$x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myTest();//2</span><br><span class=\"line\">myTest();//4</span><br><span class=\"line\">myTest();//16</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-常量-真·全局量\"><a href=\"#3-常量-真·全局量\" class=\"headerlink\" title=\"3.常量(真·全局量)\"></a><strong>3.常量(真·全局量)</strong></h1><p>相当于全局的变量，但是值不可更改或者撤销定义</p>\n<p>定义方法：define(name,value,bool)，参数很简单，关键在第三个参数，对大小写不敏感吗？默认flase，对大小写敏感，如果强行设置第三个参数为true,则对常量名字大小写不敏感。</p>\n<h1 id=\"4-运算符\"><a href=\"#4-运算符\" class=\"headerlink\" title=\"4.运算符\"></a><strong>4.运算符</strong></h1><p>+，-，*，/，% ,==,===      大同小异。</p>\n<p>唯一和js不同的是，不等于可以写成 &lt;&gt;，啊哈哈，和vb有点像</p>\n<h1 id=\"5-超全局变量\"><a href=\"#5-超全局变量\" class=\"headerlink\" title=\"5.超全局变量\"></a><strong>5.超全局变量</strong></h1><p>PHP 超全局变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_GET 和 $_POST</span><br></pre></td></tr></table></figure></p>\n<p>用于收集表单数据（form-data）。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"\">我的CSDN博客</a></p>\n<h1 id=\"1-连接符\"><a href=\"#1-连接符\" class=\"headerlink\" title=\"1.连接符\"></a><strong>1.连接符</strong></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$color = &apos;red&apos;</span><br><span class=\"line\">第一种连接方式: echo &quot;my color is $color&quot;</span><br><span class=\"line\">第二种连接方式: echo &quot;my color is&quot;. $color .&quot;&lt;br&gt;&quot;//（VB是&amp;链接，js+链接，这个.链接真的反人类）</span><br><span class=\"line\">第三种连接方式: echo&quot;my colo is&#123;$color&#125;&quot;//花括号包住变量</span><br><span class=\"line\">第四种连接方式(相当于js字符串的+=):</span><br><span class=\"line\">$a=&quot;hello&quot;;</span><br><span class=\"line\">echo $a.=&quot;world&quot;; //hello,world</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-变量Scope\"><a href=\"#2-变量Scope\" class=\"headerlink\" title=\"2.变量Scope\"></a><strong>2.变量Scope</strong></h1><p><strong>1.全局作用域</strong><br>定义的变量只能在全局读取，函数内部都无法读取。<br><strong>2.局部作用域</strong><br>定义的变量只能在局部读取，全局无法读取。<br>（js的变量是：父域的变量可以让子域读取，反过来则不能。）<br>如果局部子域想要访问Global变量，则需要提前声明：爸爸，我要用你的变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$a = 5;</span><br><span class=\"line\">function son()&#123;</span><br><span class=\"line\">global $a ;</span><br><span class=\"line\">$b = 1;</span><br><span class=\"line\">return a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">son();//6</span><br></pre></td></tr></table></figure>\n<p>更或通过所有<strong>全局变量</strong>的数组来访问全局变量，因此上述的表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global $a等价于： $GLOBAL[&apos;a&apos;]  (下标注意，有引号)</span><br></pre></td></tr></table></figure>\n<p>如果想要局部变量的函数在函数执行完成以后不被销毁，即继续在全局域下使用，那么应该提前声明static(静态的)关键字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">function myTest() &#123;</span><br><span class=\"line\">  static $x=2;</span><br><span class=\"line\">  echo &quot;结果是:$x&quot;;</span><br><span class=\"line\">  $x=$x*$x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myTest();//2</span><br><span class=\"line\">myTest();//4</span><br><span class=\"line\">myTest();//16</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-常量-真·全局量\"><a href=\"#3-常量-真·全局量\" class=\"headerlink\" title=\"3.常量(真·全局量)\"></a><strong>3.常量(真·全局量)</strong></h1><p>相当于全局的变量，但是值不可更改或者撤销定义</p>\n<p>定义方法：define(name,value,bool)，参数很简单，关键在第三个参数，对大小写不敏感吗？默认flase，对大小写敏感，如果强行设置第三个参数为true,则对常量名字大小写不敏感。</p>\n<h1 id=\"4-运算符\"><a href=\"#4-运算符\" class=\"headerlink\" title=\"4.运算符\"></a><strong>4.运算符</strong></h1><p>+，-，*，/，% ,==,===      大同小异。</p>\n<p>唯一和js不同的是，不等于可以写成 &lt;&gt;，啊哈哈，和vb有点像</p>\n<h1 id=\"5-超全局变量\"><a href=\"#5-超全局变量\" class=\"headerlink\" title=\"5.超全局变量\"></a><strong>5.超全局变量</strong></h1><p>PHP 超全局变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_GET 和 $_POST</span><br></pre></td></tr></table></figure></p>\n<p>用于收集表单数据（form-data）。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"Base64 encode decode image","date":"2019-12-13T12:30:51.655Z","reward":true,"comment":true,"_content":"本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/100583761](https://blog.csdn.net/qq_20264891/article/details/100583761)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n#### 前言\n\n最近在修福报，深深觉得，一个程序员或者成年人，最大的敌人就是时间，没有时间，就会陷入焦虑的怪圈，一直出不来。\n\n\n\n#### What is Base64\n\nBase64 是一组相似的二进制到文本（binary-to-text）的编码规则，使得二进制数据在解释成 radix-64 的表现形式后能够用 ASCII 字符串的格式表示出来。Base64 这个词出自一种 MIME 数据传输编码。 ----- from [mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding)\n\n\n\n对于前端而言，Base64 使用范围广泛，可以对 ASCII 码进行编码，也是作为 雪碧图 的一种备选方案，即增加运行时的体积，但是减少了静态资源的请求数。对图片的 Base64 编码见 [Advanced](#Advanced)\n\n\n\n#### How to use\n\n\n\n浏览器 API\n\n```typescript\n\n\n\n// 编码\n\nlet encodedData = window.btoa(\"Hello, world\");  // 此时 encodedData = 'SGVsbG8sIHdvcmxk'\n\n\n\n// 解码\n\nlet decodedData = window.atob(encodedData);    // 此时 decodedData = ‘Hello, world’\n\n\n\n```\n\n\n\n#### Advanced\n\n\n\n对于常见的 ASCII 可以解析，那么对于图片，自然有另外的方法：\n\n\n\n**法一： 通过 fetch 图片的 response.arrayBuffer() 来获取二进制缓冲流来进行编码。**\n\n\n\n```typescript\n\nconst image = `https://www.xxxxx.xxxx/abc.png`;\n\nfetch(image).then(response => response.buffer())\n\n            .then(buffer => buffer.toString(\"base64\"));\n\n```\n\n目前 NPM 上最活跃的 imageToBase64 中, 是这么写的： [imageToBase64](https://github.com/renanbastos93/image-to-base64/blob/master/image-to-base64.js#L43)\n\n\n\n\n**法二：通过 Canvas**\n\n\n\n```javascript\n\n// 大致思路:\n\ndocument.querySelector('canvas').getContext('webgl').canvas.toDataURL('image/jpeg', 0.5);\n\n```\n\n第一种，通过图片 url 来获取 base64\n\n\n\n```javascript\n\nfunction getUrlBase64(url, ext, callback) {\n\n    let canvas = document.createElement(\"canvas\");\n\n    const ctx = canvas.getContext(\"2d\");\n\n    const img = new Image;\n\n    img.crossOrigin = 'Anonymous';\n\n    img.src = url;\n\n    img.onload = function () {\n\n        canvas.height = 60;\n\n        canvas.width = 85;\n\n        ctx.drawImage(img, 0, 0, 60, 85);\n\n        const dataURL = canvas.toDataURL(\"image/\" + ext);\n\n        callback.call(this, dataURL);\n\n        canvas = null;\n\n    };\n\n}\n\n```\n\n\n\n第二种，parameter 直接是 image\n\n\n\n```javascript\n\nfunction getImageBase64(img, ext) {\n\n    var canvas = document.createElement(\"canvas\");   //创建canvas DOM元素，并设置其宽高和图片一样\n\n    canvas.width = img.width;\n\n    canvas.height = img.height;\n\n    var ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(img, 0, 0, img.width, img.height); //使用画布画图\n\n    var dataURL = canvas.toDataURL(\"image/\" + ext);  //返回的是一串Base64编码的URL并指定格式\n\n    canvas = null; //释放\n\n    return dataURL;\n\n}\n\n```","source":"_posts/base64-encode-decode.md","raw":"---\ntitle: Base64 encode decode image #标题\ndate: 20190906 17:33:01 #创建时间\ntags: [javascript] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/100583761](https://blog.csdn.net/qq_20264891/article/details/100583761)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n#### 前言\n\n最近在修福报，深深觉得，一个程序员或者成年人，最大的敌人就是时间，没有时间，就会陷入焦虑的怪圈，一直出不来。\n\n\n\n#### What is Base64\n\nBase64 是一组相似的二进制到文本（binary-to-text）的编码规则，使得二进制数据在解释成 radix-64 的表现形式后能够用 ASCII 字符串的格式表示出来。Base64 这个词出自一种 MIME 数据传输编码。 ----- from [mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding)\n\n\n\n对于前端而言，Base64 使用范围广泛，可以对 ASCII 码进行编码，也是作为 雪碧图 的一种备选方案，即增加运行时的体积，但是减少了静态资源的请求数。对图片的 Base64 编码见 [Advanced](#Advanced)\n\n\n\n#### How to use\n\n\n\n浏览器 API\n\n```typescript\n\n\n\n// 编码\n\nlet encodedData = window.btoa(\"Hello, world\");  // 此时 encodedData = 'SGVsbG8sIHdvcmxk'\n\n\n\n// 解码\n\nlet decodedData = window.atob(encodedData);    // 此时 decodedData = ‘Hello, world’\n\n\n\n```\n\n\n\n#### Advanced\n\n\n\n对于常见的 ASCII 可以解析，那么对于图片，自然有另外的方法：\n\n\n\n**法一： 通过 fetch 图片的 response.arrayBuffer() 来获取二进制缓冲流来进行编码。**\n\n\n\n```typescript\n\nconst image = `https://www.xxxxx.xxxx/abc.png`;\n\nfetch(image).then(response => response.buffer())\n\n            .then(buffer => buffer.toString(\"base64\"));\n\n```\n\n目前 NPM 上最活跃的 imageToBase64 中, 是这么写的： [imageToBase64](https://github.com/renanbastos93/image-to-base64/blob/master/image-to-base64.js#L43)\n\n\n\n\n**法二：通过 Canvas**\n\n\n\n```javascript\n\n// 大致思路:\n\ndocument.querySelector('canvas').getContext('webgl').canvas.toDataURL('image/jpeg', 0.5);\n\n```\n\n第一种，通过图片 url 来获取 base64\n\n\n\n```javascript\n\nfunction getUrlBase64(url, ext, callback) {\n\n    let canvas = document.createElement(\"canvas\");\n\n    const ctx = canvas.getContext(\"2d\");\n\n    const img = new Image;\n\n    img.crossOrigin = 'Anonymous';\n\n    img.src = url;\n\n    img.onload = function () {\n\n        canvas.height = 60;\n\n        canvas.width = 85;\n\n        ctx.drawImage(img, 0, 0, 60, 85);\n\n        const dataURL = canvas.toDataURL(\"image/\" + ext);\n\n        callback.call(this, dataURL);\n\n        canvas = null;\n\n    };\n\n}\n\n```\n\n\n\n第二种，parameter 直接是 image\n\n\n\n```javascript\n\nfunction getImageBase64(img, ext) {\n\n    var canvas = document.createElement(\"canvas\");   //创建canvas DOM元素，并设置其宽高和图片一样\n\n    canvas.width = img.width;\n\n    canvas.height = img.height;\n\n    var ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(img, 0, 0, img.width, img.height); //使用画布画图\n\n    var dataURL = canvas.toDataURL(\"image/\" + ext);  //返回的是一串Base64编码的URL并指定格式\n\n    canvas = null; //释放\n\n    return dataURL;\n\n}\n\n```","slug":"base64-encode-decode","published":1,"updated":"2019-12-13T12:33:42.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavr000xckuf467omzia","content":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/100583761\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/100583761</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近在修福报，深深觉得，一个程序员或者成年人，最大的敌人就是时间，没有时间，就会陷入焦虑的怪圈，一直出不来。</p>\n<h4 id=\"What-is-Base64\"><a href=\"#What-is-Base64\" class=\"headerlink\" title=\"What is Base64\"></a>What is Base64</h4><p>Base64 是一组相似的二进制到文本（binary-to-text）的编码规则，使得二进制数据在解释成 radix-64 的表现形式后能够用 ASCII 字符串的格式表示出来。Base64 这个词出自一种 MIME 数据传输编码。 —– from <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\" target=\"_blank\" rel=\"noopener\">mdn</a></p>\n<p>对于前端而言，Base64 使用范围广泛，可以对 ASCII 码进行编码，也是作为 雪碧图 的一种备选方案，即增加运行时的体积，但是减少了静态资源的请求数。对图片的 Base64 编码见 <a href=\"#Advanced\">Advanced</a></p>\n<h4 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use\"></a>How to use</h4><p>浏览器 API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> encodedData = <span class=\"built_in\">window</span>.btoa(<span class=\"string\">\"Hello, world\"</span>);  <span class=\"comment\">// 此时 encodedData = 'SGVsbG8sIHdvcmxk'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> decodedData = <span class=\"built_in\">window</span>.atob(encodedData);    <span class=\"comment\">// 此时 decodedData = ‘Hello, world’</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Advanced\"><a href=\"#Advanced\" class=\"headerlink\" title=\"Advanced\"></a>Advanced</h4><p>对于常见的 ASCII 可以解析，那么对于图片，自然有另外的方法：</p>\n<p><strong>法一： 通过 fetch 图片的 response.arrayBuffer() 来获取二进制缓冲流来进行编码。</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> image = <span class=\"string\">`https://www.xxxxx.xxxx/abc.png`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(image).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.buffer())</span><br><span class=\"line\"></span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">buffer</span> =&gt;</span> buffer.toString(<span class=\"string\">\"base64\"</span>));</span><br></pre></td></tr></table></figure>\n<p>目前 NPM 上最活跃的 imageToBase64 中, 是这么写的： <a href=\"https://github.com/renanbastos93/image-to-base64/blob/master/image-to-base64.js#L43\" target=\"_blank\" rel=\"noopener\">imageToBase64</a></p>\n<p><strong>法二：通过 Canvas</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 大致思路:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'webgl'</span>).canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>, <span class=\"number\">0.5</span>);</span><br></pre></td></tr></table></figure>\n<p>第一种，通过图片 url 来获取 base64</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlBase64</span>(<span class=\"params\">url, ext, callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image;</span><br><span class=\"line\"></span><br><span class=\"line\">    img.crossOrigin = <span class=\"string\">'Anonymous'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    img.src = url;</span><br><span class=\"line\"></span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas.height = <span class=\"number\">60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas.width = <span class=\"number\">85</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">85</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> dataURL = canvas.toDataURL(<span class=\"string\">\"image/\"</span> + ext);</span><br><span class=\"line\"></span><br><span class=\"line\">        callback.call(<span class=\"keyword\">this</span>, dataURL);</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种，parameter 直接是 image</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImageBase64</span>(<span class=\"params\">img, ext</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);   <span class=\"comment\">//创建canvas DOM元素，并设置其宽高和图片一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.width = img.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.height = img.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, img.width, img.height); <span class=\"comment\">//使用画布画图</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataURL = canvas.toDataURL(<span class=\"string\">\"image/\"</span> + ext);  <span class=\"comment\">//返回的是一串Base64编码的URL并指定格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas = <span class=\"literal\">null</span>; <span class=\"comment\">//释放</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataURL;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/100583761\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/100583761</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近在修福报，深深觉得，一个程序员或者成年人，最大的敌人就是时间，没有时间，就会陷入焦虑的怪圈，一直出不来。</p>\n<h4 id=\"What-is-Base64\"><a href=\"#What-is-Base64\" class=\"headerlink\" title=\"What is Base64\"></a>What is Base64</h4><p>Base64 是一组相似的二进制到文本（binary-to-text）的编码规则，使得二进制数据在解释成 radix-64 的表现形式后能够用 ASCII 字符串的格式表示出来。Base64 这个词出自一种 MIME 数据传输编码。 —– from <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\" target=\"_blank\" rel=\"noopener\">mdn</a></p>\n<p>对于前端而言，Base64 使用范围广泛，可以对 ASCII 码进行编码，也是作为 雪碧图 的一种备选方案，即增加运行时的体积，但是减少了静态资源的请求数。对图片的 Base64 编码见 <a href=\"#Advanced\">Advanced</a></p>\n<h4 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use\"></a>How to use</h4><p>浏览器 API</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> encodedData = <span class=\"built_in\">window</span>.btoa(<span class=\"string\">\"Hello, world\"</span>);  <span class=\"comment\">// 此时 encodedData = 'SGVsbG8sIHdvcmxk'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> decodedData = <span class=\"built_in\">window</span>.atob(encodedData);    <span class=\"comment\">// 此时 decodedData = ‘Hello, world’</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Advanced\"><a href=\"#Advanced\" class=\"headerlink\" title=\"Advanced\"></a>Advanced</h4><p>对于常见的 ASCII 可以解析，那么对于图片，自然有另外的方法：</p>\n<p><strong>法一： 通过 fetch 图片的 response.arrayBuffer() 来获取二进制缓冲流来进行编码。</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> image = <span class=\"string\">`https://www.xxxxx.xxxx/abc.png`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fetch(image).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.buffer())</span><br><span class=\"line\"></span><br><span class=\"line\">            .then(<span class=\"function\"><span class=\"params\">buffer</span> =&gt;</span> buffer.toString(<span class=\"string\">\"base64\"</span>));</span><br></pre></td></tr></table></figure>\n<p>目前 NPM 上最活跃的 imageToBase64 中, 是这么写的： <a href=\"https://github.com/renanbastos93/image-to-base64/blob/master/image-to-base64.js#L43\" target=\"_blank\" rel=\"noopener\">imageToBase64</a></p>\n<p><strong>法二：通过 Canvas</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 大致思路:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'canvas'</span>).getContext(<span class=\"string\">'webgl'</span>).canvas.toDataURL(<span class=\"string\">'image/jpeg'</span>, <span class=\"number\">0.5</span>);</span><br></pre></td></tr></table></figure>\n<p>第一种，通过图片 url 来获取 base64</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlBase64</span>(<span class=\"params\">url, ext, callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> Image;</span><br><span class=\"line\"></span><br><span class=\"line\">    img.crossOrigin = <span class=\"string\">'Anonymous'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    img.src = url;</span><br><span class=\"line\"></span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas.height = <span class=\"number\">60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas.width = <span class=\"number\">85</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">85</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> dataURL = canvas.toDataURL(<span class=\"string\">\"image/\"</span> + ext);</span><br><span class=\"line\"></span><br><span class=\"line\">        callback.call(<span class=\"keyword\">this</span>, dataURL);</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种，parameter 直接是 image</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getImageBase64</span>(<span class=\"params\">img, ext</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"canvas\"</span>);   <span class=\"comment\">//创建canvas DOM元素，并设置其宽高和图片一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.width = img.width;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.height = img.height;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, img.width, img.height); <span class=\"comment\">//使用画布画图</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataURL = canvas.toDataURL(<span class=\"string\">\"image/\"</span> + ext);  <span class=\"comment\">//返回的是一串Base64编码的URL并指定格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    canvas = <span class=\"literal\">null</span>; <span class=\"comment\">//释放</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataURL;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Cookie、Session、Token","date":"2018-08-26T15:57:08.000Z","reward":true,"comment":true,"_content":"\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://mp.csdn.net/postedit/82085958)\n\nCookie 是比较早的服务端和客户端验证身份的方法。\n因为 http 是无状态的，因此，每次 http 请求，服务端不知道是谁在来访，因此，对于每次来访，回传字段中会设置 set-cookie 字段，浏览器会将 cookie 保存在本地，等下次 http 请求，再发送给这个域名的服务器。\n\n\n\nCookie 可以由服务端来设置生命周期。\n\n\n\nCookie 存储在客户端本地 。\n\n\n\nCookie 挂载在 Document 对象下，可以用 js 修改，因此有安全风险，所以后面又引入 Session 来补全不足。\n\n\n\n一般情况， cookie 直接写入请求头。\n\n\n\nFor eg:\n\n\n\n```javascript\n\n// 首次访问\n\nclient => 访问 www.example.com\n\nserver => 收到来访，在回传字段中，包含 set-cookie 字段：\n\n{ set-cookie: username=uuidtest123;Domail=.example.com ... }\n\n// 第二次访问\n\nclient => 判断访问的域名，检查是否存在该域名的 cookie, 有的话就带上一起请求\n\nserver => 收到来访，并含有 cookie ，回传不用再加新 cookie 了。\n\n```\n\n\n\n\n\nSession 一般通过 set-cookie 一起传过来，配合 cookie 保存会话信息。\n\n\nSession 的出现是为了保持用户的连接状态而做出的努力。\n\n\n\n比如有一个场景，用户登录了 a.com ，如果登陆 a.com/profile ，查看一下个人资料，难道还要用户重新登陆吗?不合适吧？\n\n\n\n用户判断 Cookie 所在的客户端是否还“在线”，每次客户端进行请求(动作)，都会刷新 Session 的时间值。\n\n\n\nFor eg:\n\n\n\n```javascript\n\n// 首次访问\n\nclient => 访问 www.example.com\n\nserver => 收到来访，在回传字段中，包含 set-cookie 字段：\n\n{ set-cookie: username=uuidtest123;Domail=.example.com;sessionId=xxx;sessionFresh=30min;}\n\n// 第二次访问\n\nclient => 访问 www.example.com ，并自动携带 session\n\nserver => 收到来访，刷新 session 的新鲜值，并通过 set-cookie 回传给客户端。\n\n如果在限定的时间内（此处是30分钟）， session 新鲜值没有被刷新，就会被销毁。\n\n```\n\n\n\n\n其中 cookie 的作用就是为了解决HTTP协议无状态的现状所作出的努力。至于 session 机制则是又一种在客户端与服务器之间保持状态的解决方案。 \n\n\n\n简而言之， cookie 是辨别来访者，session 是看该来访者是否保持连接\n\n\n\n​​​​​\ntoken 和 session 很像，也是为了保持状态，一般是登陆以后，后端会返回 sessinId ,其实就是 token=> 用户唯一标识，通过 Cookie 来传给后台。\n\n\ntoken 在前端传给后端时，直接写入请求体，当做普通参数缀在后面即可。\n\n\n\n参考： https://zhuanlan.zhihu.com/p/27736893\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n\n","source":"_posts/cookie,session,token.md","raw":"---\ntitle: Cookie、Session、Token\ndate: 2018-08-26 23:57:08\ntags: http\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://mp.csdn.net/postedit/82085958)\n\nCookie 是比较早的服务端和客户端验证身份的方法。\n因为 http 是无状态的，因此，每次 http 请求，服务端不知道是谁在来访，因此，对于每次来访，回传字段中会设置 set-cookie 字段，浏览器会将 cookie 保存在本地，等下次 http 请求，再发送给这个域名的服务器。\n\n\n\nCookie 可以由服务端来设置生命周期。\n\n\n\nCookie 存储在客户端本地 。\n\n\n\nCookie 挂载在 Document 对象下，可以用 js 修改，因此有安全风险，所以后面又引入 Session 来补全不足。\n\n\n\n一般情况， cookie 直接写入请求头。\n\n\n\nFor eg:\n\n\n\n```javascript\n\n// 首次访问\n\nclient => 访问 www.example.com\n\nserver => 收到来访，在回传字段中，包含 set-cookie 字段：\n\n{ set-cookie: username=uuidtest123;Domail=.example.com ... }\n\n// 第二次访问\n\nclient => 判断访问的域名，检查是否存在该域名的 cookie, 有的话就带上一起请求\n\nserver => 收到来访，并含有 cookie ，回传不用再加新 cookie 了。\n\n```\n\n\n\n\n\nSession 一般通过 set-cookie 一起传过来，配合 cookie 保存会话信息。\n\n\nSession 的出现是为了保持用户的连接状态而做出的努力。\n\n\n\n比如有一个场景，用户登录了 a.com ，如果登陆 a.com/profile ，查看一下个人资料，难道还要用户重新登陆吗?不合适吧？\n\n\n\n用户判断 Cookie 所在的客户端是否还“在线”，每次客户端进行请求(动作)，都会刷新 Session 的时间值。\n\n\n\nFor eg:\n\n\n\n```javascript\n\n// 首次访问\n\nclient => 访问 www.example.com\n\nserver => 收到来访，在回传字段中，包含 set-cookie 字段：\n\n{ set-cookie: username=uuidtest123;Domail=.example.com;sessionId=xxx;sessionFresh=30min;}\n\n// 第二次访问\n\nclient => 访问 www.example.com ，并自动携带 session\n\nserver => 收到来访，刷新 session 的新鲜值，并通过 set-cookie 回传给客户端。\n\n如果在限定的时间内（此处是30分钟）， session 新鲜值没有被刷新，就会被销毁。\n\n```\n\n\n\n\n其中 cookie 的作用就是为了解决HTTP协议无状态的现状所作出的努力。至于 session 机制则是又一种在客户端与服务器之间保持状态的解决方案。 \n\n\n\n简而言之， cookie 是辨别来访者，session 是看该来访者是否保持连接\n\n\n\n​​​​​\ntoken 和 session 很像，也是为了保持状态，一般是登陆以后，后端会返回 sessinId ,其实就是 token=> 用户唯一标识，通过 Cookie 来传给后台。\n\n\ntoken 在前端传给后端时，直接写入请求体，当做普通参数缀在后面即可。\n\n\n\n参考： https://zhuanlan.zhihu.com/p/27736893\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n\n","slug":"cookie,session,token","published":1,"updated":"2019-05-14T14:30:28.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavs000zckufycmkjc55","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://mp.csdn.net/postedit/82085958\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>Cookie 是比较早的服务端和客户端验证身份的方法。<br>因为 http 是无状态的，因此，每次 http 请求，服务端不知道是谁在来访，因此，对于每次来访，回传字段中会设置 set-cookie 字段，浏览器会将 cookie 保存在本地，等下次 http 请求，再发送给这个域名的服务器。</p>\n<p>Cookie 可以由服务端来设置生命周期。</p>\n<p>Cookie 存储在客户端本地 。</p>\n<p>Cookie 挂载在 Document 对象下，可以用 js 修改，因此有安全风险，所以后面又引入 Session 来补全不足。</p>\n<p>一般情况， cookie 直接写入请求头。</p>\n<p>For eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首次访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">client =&gt; 访问 www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">server =&gt; 收到来访，在回传字段中，包含 set-cookie 字段：</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; set-cookie: username=uuidtest123;Domail=.example.com ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">client =&gt; 判断访问的域名，检查是否存在该域名的 cookie, 有的话就带上一起请求</span><br><span class=\"line\"></span><br><span class=\"line\">server =&gt; 收到来访，并含有 cookie ，回传不用再加新 cookie 了。</span><br></pre></td></tr></table></figure>\n<p>Session 一般通过 set-cookie 一起传过来，配合 cookie 保存会话信息。</p>\n<p>Session 的出现是为了保持用户的连接状态而做出的努力。</p>\n<p>比如有一个场景，用户登录了 a.com ，如果登陆 a.com/profile ，查看一下个人资料，难道还要用户重新登陆吗?不合适吧？</p>\n<p>用户判断 Cookie 所在的客户端是否还“在线”，每次客户端进行请求(动作)，都会刷新 Session 的时间值。</p>\n<p>For eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首次访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">client =&gt; 访问 www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">server =&gt; 收到来访，在回传字段中，包含 set-cookie 字段：</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; set-cookie: username=uuidtest123;Domail=.example.com;sessionId=xxx;sessionFresh=<span class=\"number\">30</span>min;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">client =&gt; 访问 www.example.com ，并自动携带 session</span><br><span class=\"line\"></span><br><span class=\"line\">server =&gt; 收到来访，刷新 session 的新鲜值，并通过 set-cookie 回传给客户端。</span><br><span class=\"line\"></span><br><span class=\"line\">如果在限定的时间内（此处是<span class=\"number\">30</span>分钟）， session 新鲜值没有被刷新，就会被销毁。</span><br></pre></td></tr></table></figure>\n<p>其中 cookie 的作用就是为了解决HTTP协议无状态的现状所作出的努力。至于 session 机制则是又一种在客户端与服务器之间保持状态的解决方案。 </p>\n<p>简而言之， cookie 是辨别来访者，session 是看该来访者是否保持连接</p>\n<p>​​​​​<br>token 和 session 很像，也是为了保持状态，一般是登陆以后，后端会返回 sessinId ,其实就是 token=&gt; 用户唯一标识，通过 Cookie 来传给后台。</p>\n<p>token 在前端传给后端时，直接写入请求体，当做普通参数缀在后面即可。</p>\n<p>参考： <a href=\"https://zhuanlan.zhihu.com/p/27736893\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27736893</a></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://mp.csdn.net/postedit/82085958\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>Cookie 是比较早的服务端和客户端验证身份的方法。<br>因为 http 是无状态的，因此，每次 http 请求，服务端不知道是谁在来访，因此，对于每次来访，回传字段中会设置 set-cookie 字段，浏览器会将 cookie 保存在本地，等下次 http 请求，再发送给这个域名的服务器。</p>\n<p>Cookie 可以由服务端来设置生命周期。</p>\n<p>Cookie 存储在客户端本地 。</p>\n<p>Cookie 挂载在 Document 对象下，可以用 js 修改，因此有安全风险，所以后面又引入 Session 来补全不足。</p>\n<p>一般情况， cookie 直接写入请求头。</p>\n<p>For eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首次访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">client =&gt; 访问 www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">server =&gt; 收到来访，在回传字段中，包含 set-cookie 字段：</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; set-cookie: username=uuidtest123;Domail=.example.com ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">client =&gt; 判断访问的域名，检查是否存在该域名的 cookie, 有的话就带上一起请求</span><br><span class=\"line\"></span><br><span class=\"line\">server =&gt; 收到来访，并含有 cookie ，回传不用再加新 cookie 了。</span><br></pre></td></tr></table></figure>\n<p>Session 一般通过 set-cookie 一起传过来，配合 cookie 保存会话信息。</p>\n<p>Session 的出现是为了保持用户的连接状态而做出的努力。</p>\n<p>比如有一个场景，用户登录了 a.com ，如果登陆 a.com/profile ，查看一下个人资料，难道还要用户重新登陆吗?不合适吧？</p>\n<p>用户判断 Cookie 所在的客户端是否还“在线”，每次客户端进行请求(动作)，都会刷新 Session 的时间值。</p>\n<p>For eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首次访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">client =&gt; 访问 www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">server =&gt; 收到来访，在回传字段中，包含 set-cookie 字段：</span><br><span class=\"line\"></span><br><span class=\"line\">&#123; set-cookie: username=uuidtest123;Domail=.example.com;sessionId=xxx;sessionFresh=<span class=\"number\">30</span>min;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">client =&gt; 访问 www.example.com ，并自动携带 session</span><br><span class=\"line\"></span><br><span class=\"line\">server =&gt; 收到来访，刷新 session 的新鲜值，并通过 set-cookie 回传给客户端。</span><br><span class=\"line\"></span><br><span class=\"line\">如果在限定的时间内（此处是<span class=\"number\">30</span>分钟）， session 新鲜值没有被刷新，就会被销毁。</span><br></pre></td></tr></table></figure>\n<p>其中 cookie 的作用就是为了解决HTTP协议无状态的现状所作出的努力。至于 session 机制则是又一种在客户端与服务器之间保持状态的解决方案。 </p>\n<p>简而言之， cookie 是辨别来访者，session 是看该来访者是否保持连接</p>\n<p>​​​​​<br>token 和 session 很像，也是为了保持状态，一般是登陆以后，后端会返回 sessinId ,其实就是 token=&gt; 用户唯一标识，通过 Cookie 来传给后台。</p>\n<p>token 在前端传给后端时，直接写入请求体，当做普通参数缀在后面即可。</p>\n<p>参考： <a href=\"https://zhuanlan.zhihu.com/p/27736893\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/27736893</a></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"http 发展进程 与 编码方式的发展 进程","date":"2019-06-01T14:14:12.000Z","reward":true,"comment":true,"_content":"本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/90734157](https://blog.csdn.net/qq_20264891/article/details/90734157.html)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n## 广义上我们口中的 http\n我们口中常说的 http 应该是指 http 1.1\nhttp0.9中，每次通信完成后，都会断开tcp连接，造成资源浪费。\nhttp1.0可以在header中加入keep alive来确保长连接，但还是有点麻烦。\n于是，http1.1 默认可以 keep alive，并且引入管道机制(pipeline)，客户端可以发送多个请求，但是服务端按照顺序来一一回复。这也是HTTP1.1的设计缺点，多个请求过来时，队列容易被大型缓慢得请求堵塞，尽管前端可以优化请求数量，例如雪碧图，合并脚本和样式表等。\n\n后来，谷歌开发出一种新的通信协议，并在Chrome试水成功，名为：spdy(撕破腚眼)，后来大多数 feature 都在 http2 中得到继承，例如 head 头中的元数据信息不再限制为仅支持 ASCII 编码的字符集，并且还支持二进制编码，以便于将来高级应用的解析。并且，每次通信的过程中，不会再有队列堵塞的情况发生，一个请求太大，执行多少就先返回多少，在执行下一个任务，等下一个执行完，接着处理上一个。另外，可以中途取消某个通信帧，还可以给每个请求标注 level 让服务器按照 level优先级处理。还有服务器和客户端都会维护一张表，将重复的头部元数据都塞到表里，每次通信，发送表的索引，提升通信效率。\n\n除此以外，服务端可以强推送，例如，客户端请求某个 html，服务器可以显而易见的知道里面有很多图片及脚本文件，不用浏览器请求，就会自动推送给浏览器。\n\n前面也说到字符集的编码标准。下面来捋一下:\n1. 计算机开始普及时，为了让大多数的信息都可以被计算机识别，人们建立了一套 “阿拉伯数字 + 英语 + 常用符号” 的编码标准来映射对应的字符，从而让计算机更好的识别，处理这些字符。这个字符集定义了 从 a-z A-z 0-9 , . ? / [ ] 等常用的字符。该标准成为： ASCII 编码。\n2. 后来，使用计算机的人越来越多，比如中国，但是 ASCII 码没有定义中文字符，于是，中国有了一套 gb2312 字符编码标准，同理，大多数国家都应该有一套自己的文字编码标准，后来被统一为 unicode 编码。 unicode 编码定义了绝大多数的文字、符号等。\n3. utf-8, utf-16 的诞生，是为了提升编码的效率，避免浪费位存。\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/http-history.md","raw":"---\ntitle: http 发展进程 与 编码方式的发展 进程 #标题\ndate: 2019-06-01 22:14:12 #创建时间\ntags: [http] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/90734157](https://blog.csdn.net/qq_20264891/article/details/90734157.html)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n## 广义上我们口中的 http\n我们口中常说的 http 应该是指 http 1.1\nhttp0.9中，每次通信完成后，都会断开tcp连接，造成资源浪费。\nhttp1.0可以在header中加入keep alive来确保长连接，但还是有点麻烦。\n于是，http1.1 默认可以 keep alive，并且引入管道机制(pipeline)，客户端可以发送多个请求，但是服务端按照顺序来一一回复。这也是HTTP1.1的设计缺点，多个请求过来时，队列容易被大型缓慢得请求堵塞，尽管前端可以优化请求数量，例如雪碧图，合并脚本和样式表等。\n\n后来，谷歌开发出一种新的通信协议，并在Chrome试水成功，名为：spdy(撕破腚眼)，后来大多数 feature 都在 http2 中得到继承，例如 head 头中的元数据信息不再限制为仅支持 ASCII 编码的字符集，并且还支持二进制编码，以便于将来高级应用的解析。并且，每次通信的过程中，不会再有队列堵塞的情况发生，一个请求太大，执行多少就先返回多少，在执行下一个任务，等下一个执行完，接着处理上一个。另外，可以中途取消某个通信帧，还可以给每个请求标注 level 让服务器按照 level优先级处理。还有服务器和客户端都会维护一张表，将重复的头部元数据都塞到表里，每次通信，发送表的索引，提升通信效率。\n\n除此以外，服务端可以强推送，例如，客户端请求某个 html，服务器可以显而易见的知道里面有很多图片及脚本文件，不用浏览器请求，就会自动推送给浏览器。\n\n前面也说到字符集的编码标准。下面来捋一下:\n1. 计算机开始普及时，为了让大多数的信息都可以被计算机识别，人们建立了一套 “阿拉伯数字 + 英语 + 常用符号” 的编码标准来映射对应的字符，从而让计算机更好的识别，处理这些字符。这个字符集定义了 从 a-z A-z 0-9 , . ? / [ ] 等常用的字符。该标准成为： ASCII 编码。\n2. 后来，使用计算机的人越来越多，比如中国，但是 ASCII 码没有定义中文字符，于是，中国有了一套 gb2312 字符编码标准，同理，大多数国家都应该有一套自己的文字编码标准，后来被统一为 unicode 编码。 unicode 编码定义了绝大多数的文字、符号等。\n3. utf-8, utf-16 的诞生，是为了提升编码的效率，避免浪费位存。\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"http-history","published":1,"updated":"2019-06-01T14:18:30.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavv0011ckuf9k47fwvc","content":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/90734157.html\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/90734157</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"广义上我们口中的-http\"><a href=\"#广义上我们口中的-http\" class=\"headerlink\" title=\"广义上我们口中的 http\"></a>广义上我们口中的 http</h2><p>我们口中常说的 http 应该是指 http 1.1<br>http0.9中，每次通信完成后，都会断开tcp连接，造成资源浪费。<br>http1.0可以在header中加入keep alive来确保长连接，但还是有点麻烦。<br>于是，http1.1 默认可以 keep alive，并且引入管道机制(pipeline)，客户端可以发送多个请求，但是服务端按照顺序来一一回复。这也是HTTP1.1的设计缺点，多个请求过来时，队列容易被大型缓慢得请求堵塞，尽管前端可以优化请求数量，例如雪碧图，合并脚本和样式表等。</p>\n<p>后来，谷歌开发出一种新的通信协议，并在Chrome试水成功，名为：spdy(撕破腚眼)，后来大多数 feature 都在 http2 中得到继承，例如 head 头中的元数据信息不再限制为仅支持 ASCII 编码的字符集，并且还支持二进制编码，以便于将来高级应用的解析。并且，每次通信的过程中，不会再有队列堵塞的情况发生，一个请求太大，执行多少就先返回多少，在执行下一个任务，等下一个执行完，接着处理上一个。另外，可以中途取消某个通信帧，还可以给每个请求标注 level 让服务器按照 level优先级处理。还有服务器和客户端都会维护一张表，将重复的头部元数据都塞到表里，每次通信，发送表的索引，提升通信效率。</p>\n<p>除此以外，服务端可以强推送，例如，客户端请求某个 html，服务器可以显而易见的知道里面有很多图片及脚本文件，不用浏览器请求，就会自动推送给浏览器。</p>\n<p>前面也说到字符集的编码标准。下面来捋一下:</p>\n<ol>\n<li>计算机开始普及时，为了让大多数的信息都可以被计算机识别，人们建立了一套 “阿拉伯数字 + 英语 + 常用符号” 的编码标准来映射对应的字符，从而让计算机更好的识别，处理这些字符。这个字符集定义了 从 a-z A-z 0-9 , . ? / [ ] 等常用的字符。该标准成为： ASCII 编码。</li>\n<li>后来，使用计算机的人越来越多，比如中国，但是 ASCII 码没有定义中文字符，于是，中国有了一套 gb2312 字符编码标准，同理，大多数国家都应该有一套自己的文字编码标准，后来被统一为 unicode 编码。 unicode 编码定义了绝大多数的文字、符号等。</li>\n<li>utf-8, utf-16 的诞生，是为了提升编码的效率，避免浪费位存。</li>\n</ol>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/90734157.html\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/90734157</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"广义上我们口中的-http\"><a href=\"#广义上我们口中的-http\" class=\"headerlink\" title=\"广义上我们口中的 http\"></a>广义上我们口中的 http</h2><p>我们口中常说的 http 应该是指 http 1.1<br>http0.9中，每次通信完成后，都会断开tcp连接，造成资源浪费。<br>http1.0可以在header中加入keep alive来确保长连接，但还是有点麻烦。<br>于是，http1.1 默认可以 keep alive，并且引入管道机制(pipeline)，客户端可以发送多个请求，但是服务端按照顺序来一一回复。这也是HTTP1.1的设计缺点，多个请求过来时，队列容易被大型缓慢得请求堵塞，尽管前端可以优化请求数量，例如雪碧图，合并脚本和样式表等。</p>\n<p>后来，谷歌开发出一种新的通信协议，并在Chrome试水成功，名为：spdy(撕破腚眼)，后来大多数 feature 都在 http2 中得到继承，例如 head 头中的元数据信息不再限制为仅支持 ASCII 编码的字符集，并且还支持二进制编码，以便于将来高级应用的解析。并且，每次通信的过程中，不会再有队列堵塞的情况发生，一个请求太大，执行多少就先返回多少，在执行下一个任务，等下一个执行完，接着处理上一个。另外，可以中途取消某个通信帧，还可以给每个请求标注 level 让服务器按照 level优先级处理。还有服务器和客户端都会维护一张表，将重复的头部元数据都塞到表里，每次通信，发送表的索引，提升通信效率。</p>\n<p>除此以外，服务端可以强推送，例如，客户端请求某个 html，服务器可以显而易见的知道里面有很多图片及脚本文件，不用浏览器请求，就会自动推送给浏览器。</p>\n<p>前面也说到字符集的编码标准。下面来捋一下:</p>\n<ol>\n<li>计算机开始普及时，为了让大多数的信息都可以被计算机识别，人们建立了一套 “阿拉伯数字 + 英语 + 常用符号” 的编码标准来映射对应的字符，从而让计算机更好的识别，处理这些字符。这个字符集定义了 从 a-z A-z 0-9 , . ? / [ ] 等常用的字符。该标准成为： ASCII 编码。</li>\n<li>后来，使用计算机的人越来越多，比如中国，但是 ASCII 码没有定义中文字符，于是，中国有了一套 gb2312 字符编码标准，同理，大多数国家都应该有一套自己的文字编码标准，后来被统一为 unicode 编码。 unicode 编码定义了绝大多数的文字、符号等。</li>\n<li>utf-8, utf-16 的诞生，是为了提升编码的效率，避免浪费位存。</li>\n</ol>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"javascript Dom拖动 插件 putThere.js","date":"2018-03-05T16:00:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79171972)\n\n\n\n## 开源地址： ##\n跪求各位看官给我点star吧 T.T，谢谢！\n[https://github.com/ZQ-jhon/putThere.js](https://github.com/ZQ-jhon/putThere.js)\n\n## 原理及构想 ##\n关于拖动，如果不用html5的原生事件，怎样实现呢？\n不妨先设想一下整个拖动的流程：\n\n 1. 点击一个元素，鼠标按下，这个元素其实已经脱离了正常的定位，变成了绝对定位absolute\n 2. 当鼠标移动到目标位置的时候，我们来捕获鼠标当前的坐标值clientX,clientY(相对于浏览器视口位置的相对值)\n 3. 当松开鼠标，将鼠标的坐标值赋值给元素的left及top属性，如果此时，鼠标坐标值大于元素的left，或者top，说明元素在向右下角移动，反之同理。\n\n## 代码 ##\n想好其中的原理，代码也就不那么难写了。\n```javascript\n//window监听\n               window.onmousedown=function(obj){\n               \n\t/*鼠标按下，dom元素脱离位置，变成绝对定位*/\n\tobj.style.position='absolute';\n\t\n}\n\nwindow.onmouseup=function(event){\n      var event = window.event||event;\n\t\t//获取鼠标距离浏览器边界的距离\n\t\tvar x = event.clientX;\n\t\t\n\t\tvar y = event.clientY;\n\t\t\n\t\t\n\t\tconsole.log('鼠标距离浏览器边界(0,0)的距离('+x+','+y+')')\n\t\t\n\t\t/*获取dom元素距离浏览器边界的x,y值*/\n\t\tvar left = obj.style.left;\n\t\t\n\t\tvar top = obj.style.top;\n\t\t\n\t\tconsole.log('Dom元素距离浏览器边界(0,0)的距离('+left+','+top+')')\n\t\t\n\t\t\n\t\t/*判断鼠标拖动的方向。x小于left，说明在向左拖动;y小于top，说明向上拖动。反之同理*/\n\t\tif(left>x||top>y){\n\t\t\n\t\t\tx=-x;\n\t\t\t\n\t\t\ty=-y;\n\t\t\t\n\t\t}\n\t\t\n\t\tobj.style.left = x+'px'; \n\t\t\n\t\tobj.style.top = y+'px';\n\t\t\n\t}\n};\n\n\n}\n```\n我将它封装成一个函数，调用的时候，形式如下：\n\n```javascript\nvar div = document.getElementById('div');\n\nputThere(div);\n\n此时，div元素可以在document中任意的拖动，改变位置。\n```\n## 效果预览： ##\n\n鼠标拖动div效果如下：\n![Demo效果预览](http://img.blog.csdn.net/20180126140231318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可以看到，基本上实现了【指哪打哪】的功能，鼠标的松开的坐标，就是div元素左上角定点的落点，其实刚开始封装插件的时候还想再加一个参数，用于选择元素的落点为左上角顶点或者中心位置，但是想了一下，似乎没有什么实际意义，遂放弃。\n## 兼容程度 ##\n实测 兼容 IE9及以上\n\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/javascript Dom拖动 插件 putThere.js.md","raw":"---\ntitle:  javascript Dom拖动 插件 putThere.js\ndate: 2018-03-06 00:00:00\ntags: [javascript , plug-in]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79171972)\n\n\n\n## 开源地址： ##\n跪求各位看官给我点star吧 T.T，谢谢！\n[https://github.com/ZQ-jhon/putThere.js](https://github.com/ZQ-jhon/putThere.js)\n\n## 原理及构想 ##\n关于拖动，如果不用html5的原生事件，怎样实现呢？\n不妨先设想一下整个拖动的流程：\n\n 1. 点击一个元素，鼠标按下，这个元素其实已经脱离了正常的定位，变成了绝对定位absolute\n 2. 当鼠标移动到目标位置的时候，我们来捕获鼠标当前的坐标值clientX,clientY(相对于浏览器视口位置的相对值)\n 3. 当松开鼠标，将鼠标的坐标值赋值给元素的left及top属性，如果此时，鼠标坐标值大于元素的left，或者top，说明元素在向右下角移动，反之同理。\n\n## 代码 ##\n想好其中的原理，代码也就不那么难写了。\n```javascript\n//window监听\n               window.onmousedown=function(obj){\n               \n\t/*鼠标按下，dom元素脱离位置，变成绝对定位*/\n\tobj.style.position='absolute';\n\t\n}\n\nwindow.onmouseup=function(event){\n      var event = window.event||event;\n\t\t//获取鼠标距离浏览器边界的距离\n\t\tvar x = event.clientX;\n\t\t\n\t\tvar y = event.clientY;\n\t\t\n\t\t\n\t\tconsole.log('鼠标距离浏览器边界(0,0)的距离('+x+','+y+')')\n\t\t\n\t\t/*获取dom元素距离浏览器边界的x,y值*/\n\t\tvar left = obj.style.left;\n\t\t\n\t\tvar top = obj.style.top;\n\t\t\n\t\tconsole.log('Dom元素距离浏览器边界(0,0)的距离('+left+','+top+')')\n\t\t\n\t\t\n\t\t/*判断鼠标拖动的方向。x小于left，说明在向左拖动;y小于top，说明向上拖动。反之同理*/\n\t\tif(left>x||top>y){\n\t\t\n\t\t\tx=-x;\n\t\t\t\n\t\t\ty=-y;\n\t\t\t\n\t\t}\n\t\t\n\t\tobj.style.left = x+'px'; \n\t\t\n\t\tobj.style.top = y+'px';\n\t\t\n\t}\n};\n\n\n}\n```\n我将它封装成一个函数，调用的时候，形式如下：\n\n```javascript\nvar div = document.getElementById('div');\n\nputThere(div);\n\n此时，div元素可以在document中任意的拖动，改变位置。\n```\n## 效果预览： ##\n\n鼠标拖动div效果如下：\n![Demo效果预览](http://img.blog.csdn.net/20180126140231318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可以看到，基本上实现了【指哪打哪】的功能，鼠标的松开的坐标，就是div元素左上角定点的落点，其实刚开始封装插件的时候还想再加一个参数，用于选择元素的落点为左上角顶点或者中心位置，但是想了一下，似乎没有什么实际意义，遂放弃。\n## 兼容程度 ##\n实测 兼容 IE9及以上\n\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"javascript Dom拖动 插件 putThere.js","published":1,"updated":"2019-05-14T14:30:28.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsavy0014ckuflafirplr","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79171972\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"开源地址：\"><a href=\"#开源地址：\" class=\"headerlink\" title=\"开源地址：\"></a>开源地址：</h2><p>跪求各位看官给我点star吧 T.T，谢谢！<br><a href=\"https://github.com/ZQ-jhon/putThere.js\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/putThere.js</a></p>\n<h2 id=\"原理及构想\"><a href=\"#原理及构想\" class=\"headerlink\" title=\"原理及构想\"></a>原理及构想</h2><p>关于拖动，如果不用html5的原生事件，怎样实现呢？<br>不妨先设想一下整个拖动的流程：</p>\n<ol>\n<li>点击一个元素，鼠标按下，这个元素其实已经脱离了正常的定位，变成了绝对定位absolute</li>\n<li>当鼠标移动到目标位置的时候，我们来捕获鼠标当前的坐标值clientX,clientY(相对于浏览器视口位置的相对值)</li>\n<li>当松开鼠标，将鼠标的坐标值赋值给元素的left及top属性，如果此时，鼠标坐标值大于元素的left，或者top，说明元素在向右下角移动，反之同理。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>想好其中的原理，代码也就不那么难写了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//window监听</span></span><br><span class=\"line\">               <span class=\"built_in\">window</span>.onmousedown=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">\t<span class=\"comment\">/*鼠标按下，dom元素脱离位置，变成绝对定位*/</span></span><br><span class=\"line\">\tobj.style.position=<span class=\"string\">'absolute'</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onmouseup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> event = <span class=\"built_in\">window</span>.event||event;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取鼠标距离浏览器边界的距离</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> x = event.clientX;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> y = event.clientY;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'鼠标距离浏览器边界(0,0)的距离('</span>+x+<span class=\"string\">','</span>+y+<span class=\"string\">')'</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*获取dom元素距离浏览器边界的x,y值*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> left = obj.style.left;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> top = obj.style.top;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Dom元素距离浏览器边界(0,0)的距离('</span>+left+<span class=\"string\">','</span>+top+<span class=\"string\">')'</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*判断鼠标拖动的方向。x小于left，说明在向左拖动;y小于top，说明向上拖动。反之同理*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(left&gt;x||top&gt;y)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tx=-x;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\ty=-y;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tobj.style.left = x+<span class=\"string\">'px'</span>; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tobj.style.top = y+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我将它封装成一个函数，调用的时候，形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">putThere(div);</span><br><span class=\"line\"></span><br><span class=\"line\">此时，div元素可以在<span class=\"built_in\">document</span>中任意的拖动，改变位置。</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果预览：\"><a href=\"#效果预览：\" class=\"headerlink\" title=\"效果预览：\"></a>效果预览：</h2><p>鼠标拖动div效果如下：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180126140231318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Demo效果预览\" title=\"\" class=\"\">\n                <p>Demo效果预览</p>\n            </figure><br>可以看到，基本上实现了【指哪打哪】的功能，鼠标的松开的坐标，就是div元素左上角定点的落点，其实刚开始封装插件的时候还想再加一个参数，用于选择元素的落点为左上角顶点或者中心位置，但是想了一下，似乎没有什么实际意义，遂放弃。</p>\n<h2 id=\"兼容程度\"><a href=\"#兼容程度\" class=\"headerlink\" title=\"兼容程度\"></a>兼容程度</h2><p>实测 兼容 IE9及以上</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79171972\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"开源地址：\"><a href=\"#开源地址：\" class=\"headerlink\" title=\"开源地址：\"></a>开源地址：</h2><p>跪求各位看官给我点star吧 T.T，谢谢！<br><a href=\"https://github.com/ZQ-jhon/putThere.js\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/putThere.js</a></p>\n<h2 id=\"原理及构想\"><a href=\"#原理及构想\" class=\"headerlink\" title=\"原理及构想\"></a>原理及构想</h2><p>关于拖动，如果不用html5的原生事件，怎样实现呢？<br>不妨先设想一下整个拖动的流程：</p>\n<ol>\n<li>点击一个元素，鼠标按下，这个元素其实已经脱离了正常的定位，变成了绝对定位absolute</li>\n<li>当鼠标移动到目标位置的时候，我们来捕获鼠标当前的坐标值clientX,clientY(相对于浏览器视口位置的相对值)</li>\n<li>当松开鼠标，将鼠标的坐标值赋值给元素的left及top属性，如果此时，鼠标坐标值大于元素的left，或者top，说明元素在向右下角移动，反之同理。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>想好其中的原理，代码也就不那么难写了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//window监听</span></span><br><span class=\"line\">               <span class=\"built_in\">window</span>.onmousedown=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">\t<span class=\"comment\">/*鼠标按下，dom元素脱离位置，变成绝对定位*/</span></span><br><span class=\"line\">\tobj.style.position=<span class=\"string\">'absolute'</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onmouseup=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> event = <span class=\"built_in\">window</span>.event||event;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取鼠标距离浏览器边界的距离</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> x = event.clientX;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> y = event.clientY;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'鼠标距离浏览器边界(0,0)的距离('</span>+x+<span class=\"string\">','</span>+y+<span class=\"string\">')'</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*获取dom元素距离浏览器边界的x,y值*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> left = obj.style.left;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> top = obj.style.top;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Dom元素距离浏览器边界(0,0)的距离('</span>+left+<span class=\"string\">','</span>+top+<span class=\"string\">')'</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*判断鼠标拖动的方向。x小于left，说明在向左拖动;y小于top，说明向上拖动。反之同理*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(left&gt;x||top&gt;y)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tx=-x;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\ty=-y;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tobj.style.left = x+<span class=\"string\">'px'</span>; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tobj.style.top = y+<span class=\"string\">'px'</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我将它封装成一个函数，调用的时候，形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">putThere(div);</span><br><span class=\"line\"></span><br><span class=\"line\">此时，div元素可以在<span class=\"built_in\">document</span>中任意的拖动，改变位置。</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果预览：\"><a href=\"#效果预览：\" class=\"headerlink\" title=\"效果预览：\"></a>效果预览：</h2><p>鼠标拖动div效果如下：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180126140231318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Demo效果预览\" title=\"\" class=\"\">\n                <p>Demo效果预览</p>\n            </figure><br>可以看到，基本上实现了【指哪打哪】的功能，鼠标的松开的坐标，就是div元素左上角定点的落点，其实刚开始封装插件的时候还想再加一个参数，用于选择元素的落点为左上角顶点或者中心位置，但是想了一下，似乎没有什么实际意义，遂放弃。</p>\n<h2 id=\"兼容程度\"><a href=\"#兼容程度\" class=\"headerlink\" title=\"兼容程度\"></a>兼容程度</h2><p>实测 兼容 IE9及以上</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"koa-2","date":"2019-05-16T15:38:20.000Z","reward":true,"comment":true,"repo":"zq-jhon | koa-starter","_content":"本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/90274428](https://blog.csdn.net/qq_20264891/article/details/90274428)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n## MVC 分层\n代码地址： https://github.com/ZQ-jhon/koa-starter\n MVC 是个老生常谈的概念了。\n M = Model， V = View , C = Controller ，  angularjs 就是典型的 MVC 框架。\n 在 `Angular` （指Angular 2+， 下同） 中，C 被拆分成 ViewModel ，因此称之为 MVVM 框架：\n M = model 数据，驱动渲染的能源\n V = View 视图层，指代用户可以看到的前端界面\n ViewModel = 处理数据和视图之间的关系\n \n 那么，在 KOA 中， MVC 指代的又是什么呢? \n ### C，Controller 层\n 先不急着回答，把上一次的代码捋一捋，进一步优化一下。\n 由于之前所有的对于请求参数和数据的处理都放在 APP.js ，随着需求的增加，导致难以维护，先让我们给代码分层：\n ```javascript\n /** app.js 中新增 `router.js`，专门用来处理路由相关的东西 \n *   router.js\n *  \n */\nconst router = require('koa-router')();\nmodule.exports = (app) => {\n    app.use(async (ctx, next) => {\n        ctx.body = `\n          <form action=\"/submit\" method=\"post\">\n            <input name=\"account\" type=\"text\"> 账号\n            <br/>\n            <input name=\"password\" type=\"password\"> 密码\n            <br/>\n            <button>提交</button>\n          </form>\n        `;\n        await next();\n    });\n    app.use(async (ctx, next) => {\n        if (ctx.request.url === '/submit') {\n            ctx.response.type = 'application/json';\n            ctx.response.body = ctx.request.body;\n        }\n        await next();\n    });\n\n    // add router middleware:\n    app.use(router.routes())\n}\n}\n ```\n整个 `router` 也被编写并导出为一个函数，接受 koa 的实例 app，来进行中间件的使用。\n\n还不够完美，router 中仍然存在大量的与路由无关的代码，我们进一步分层:\n\n```javascript\n/**\n* 新建 index.controller.js\n* index.controller.js 的职责就是：一旦收到命令，就渲染并返回表单页面\n*/\n\nmodule.exports =  async (ctx, next) => {\n  ctx.response.type = 'text/html';\n  ctx.body = `\n      <form action=\"/submit\" method=\"post\">\n        <input name=\"account\" type=\"text\"> 账号\n        <br/>\n        <input name=\"password\" type=\"password\"> 密码\n        <br/>\n        <button>提交</button>\n      </form>\n    `;\n  await next();\n}\n\n/**\n* 同理，新建 post.controller.js\n* post.controller.js 的职责是：收到命令，就解析 body 中传来的数据，并渲染返回给前端\n*/\n\nmodule.exports = async (ctx, next) => {\n    ctx.response.type = 'application/json';\n    ctx.response.body = ctx.request.body;\n}\n\n```\n现在的文件结构应该如下：\n```text\n|--node_modules\n|--package.json\n|--app.js\n|--index.controller.js\n|--post.controller.js\n|--router.controller.js\n```\n*（如果读者嫌乱，可以增加 controllers 文件夹 和 routers 文件夹，将对应后缀的文件丢到对应的目录，并更新文件的引用路径。）*\n\n我们现在更新目录：\n```text\n|--node_modules\n|--package.json\n|--app.js\n|--contollers\n    |--index.controller.js\n    |--post.controller.js\n|--routers\n    |--routers.controller.js\n```\nVSCODE 提示更新引用，NICE。\n{% asset_image vscode.png vscode vscode vscode %}\n\n通过上面的代码可以看到，两个新建的 controller 文件，都是在处理自己的业务职责，即渲染并返回对应的数据，他们不关心路由是不是命中了自己，做到了职责单一。\n\n我们现在在 CMD 中输入 `node app.js` 发现程序还是按照预期来执行，这里就不贴图了。\n\n现在，按照 MVC 框架的思想来理解，业务处理的部分就是 C => controller ，我们已经完成了。\n\n下面来看 View 层是啥？\n假设我们现在有 100 个不同的路由来处理请求，并且每个路由要返回不同的页面，我们肯定不希望手写 100 个 html ，代码量太大了。\n为了解放生产力，我们不得不使用模板引擎，例如 ejs , jade，nunjucks 等等，由于 [nunjucks ](https://mozilla.github.io/nunjucks/) 是 mozilla 开发的，就用它吧！（官方文档支持中文：[官方文档](https://mozilla.github.io/nunjucks/cn/api.html)）\n```javacsript\n// 安装 及 使用\n// 随便在哪新建一个 js 文件\nconst nunjucks = require('nunjucks');\nconst result = nunjucks.renderString(`hello, ${name}`, {name: 123});\n// fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行\nconsole.log(result);\n```\n\n// 通过 node.js 执行\n{% asset_image result.png result result result %}\n\n**如果你写过 Angular，Nunjucks 的东西简直是跟 Angular 的模板语法一毛一样**\n支持管道，双花括号取值 ,逻辑判断，循环，继承，还有：\n **防止 XSS 攻击，支持可配置的转义 消毒(sanitizer)**\n\n```javascript\nconst nunjucks = require('nunjucks');\nnunjucks.configure('./', {autoescape: true});\n// 默认对当前文件夹下的文件进行转义过滤，消毒处理\n```\n脏活都被 nunjucks 干完了。\n\n### 使用 nunjucks\n下面，我们将 默认 路由下，返回 post 页面的代码，用 nunjucks 来进行重构\n\n在 controller 层同级下，新建 views 目录，然后\n新建 from.html 模板文件\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>form</title>\n</head>\n<body>\n<!--注意，这里使用了 name 变量，看看待会怎么使用它！\n\n // fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行\n\n -->\n    <h1>{fuck{  name  }fuck}</h1>\n    <form action=\"/submit\" method=\"post\">\n        <input name=\"account\" type=\"text\"> 账号\n        <br/>\n        <input name=\"password\" type=\"password\"> 密码\n        <br/>\n        <button>提交</button>\n      </form>\n</body>\n</html>\n```\n\n接着在 renderers 下新建  renderForm.js\n```javascript\nconst nunjucks = require('nunjucks');\nnunjucks.configure('views', { autoescape: true });\nconst htmlRenderFn = (object) => nunjucks.render(`form.html`, object);\nmodule.exports = htmlRenderFn;\n```\n接着，修改原本在 index.controller.js 中渲染的函数\n```javascript\nconst renderForm = require('../views/renderForm');\nmodule.exports =  async (ctx, next) => {\n  ctx.response.type = 'text/html';\n  ctx.body = renderForm({name: 'Hello, nunjucks'});\n  await next();\n}\n\n```\n 回到第二个标题抛出的问题，我的理解是，KOA 中的 MVC ：\n M = 泛指整个通信过程中所有的数据，包括但不限于 http 请求中传递的数据或者路由参数、query 参数、post body 体，甚至 view 层 中 nunjucks 渲染的数据来源。\n V =  view，返回给前端的视图\n C = controller 控制器\n\n未完待续...\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/koa-2.md","raw":"---\ntitle: \"koa-2\"\ndate: 2019-05-16 23:38:20\ntags: [koa] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\nrepo: zq-jhon | koa-starter #用户名 | 仓库名\n---\n本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/90274428](https://blog.csdn.net/qq_20264891/article/details/90274428)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n## MVC 分层\n代码地址： https://github.com/ZQ-jhon/koa-starter\n MVC 是个老生常谈的概念了。\n M = Model， V = View , C = Controller ，  angularjs 就是典型的 MVC 框架。\n 在 `Angular` （指Angular 2+， 下同） 中，C 被拆分成 ViewModel ，因此称之为 MVVM 框架：\n M = model 数据，驱动渲染的能源\n V = View 视图层，指代用户可以看到的前端界面\n ViewModel = 处理数据和视图之间的关系\n \n 那么，在 KOA 中， MVC 指代的又是什么呢? \n ### C，Controller 层\n 先不急着回答，把上一次的代码捋一捋，进一步优化一下。\n 由于之前所有的对于请求参数和数据的处理都放在 APP.js ，随着需求的增加，导致难以维护，先让我们给代码分层：\n ```javascript\n /** app.js 中新增 `router.js`，专门用来处理路由相关的东西 \n *   router.js\n *  \n */\nconst router = require('koa-router')();\nmodule.exports = (app) => {\n    app.use(async (ctx, next) => {\n        ctx.body = `\n          <form action=\"/submit\" method=\"post\">\n            <input name=\"account\" type=\"text\"> 账号\n            <br/>\n            <input name=\"password\" type=\"password\"> 密码\n            <br/>\n            <button>提交</button>\n          </form>\n        `;\n        await next();\n    });\n    app.use(async (ctx, next) => {\n        if (ctx.request.url === '/submit') {\n            ctx.response.type = 'application/json';\n            ctx.response.body = ctx.request.body;\n        }\n        await next();\n    });\n\n    // add router middleware:\n    app.use(router.routes())\n}\n}\n ```\n整个 `router` 也被编写并导出为一个函数，接受 koa 的实例 app，来进行中间件的使用。\n\n还不够完美，router 中仍然存在大量的与路由无关的代码，我们进一步分层:\n\n```javascript\n/**\n* 新建 index.controller.js\n* index.controller.js 的职责就是：一旦收到命令，就渲染并返回表单页面\n*/\n\nmodule.exports =  async (ctx, next) => {\n  ctx.response.type = 'text/html';\n  ctx.body = `\n      <form action=\"/submit\" method=\"post\">\n        <input name=\"account\" type=\"text\"> 账号\n        <br/>\n        <input name=\"password\" type=\"password\"> 密码\n        <br/>\n        <button>提交</button>\n      </form>\n    `;\n  await next();\n}\n\n/**\n* 同理，新建 post.controller.js\n* post.controller.js 的职责是：收到命令，就解析 body 中传来的数据，并渲染返回给前端\n*/\n\nmodule.exports = async (ctx, next) => {\n    ctx.response.type = 'application/json';\n    ctx.response.body = ctx.request.body;\n}\n\n```\n现在的文件结构应该如下：\n```text\n|--node_modules\n|--package.json\n|--app.js\n|--index.controller.js\n|--post.controller.js\n|--router.controller.js\n```\n*（如果读者嫌乱，可以增加 controllers 文件夹 和 routers 文件夹，将对应后缀的文件丢到对应的目录，并更新文件的引用路径。）*\n\n我们现在更新目录：\n```text\n|--node_modules\n|--package.json\n|--app.js\n|--contollers\n    |--index.controller.js\n    |--post.controller.js\n|--routers\n    |--routers.controller.js\n```\nVSCODE 提示更新引用，NICE。\n{% asset_image vscode.png vscode vscode vscode %}\n\n通过上面的代码可以看到，两个新建的 controller 文件，都是在处理自己的业务职责，即渲染并返回对应的数据，他们不关心路由是不是命中了自己，做到了职责单一。\n\n我们现在在 CMD 中输入 `node app.js` 发现程序还是按照预期来执行，这里就不贴图了。\n\n现在，按照 MVC 框架的思想来理解，业务处理的部分就是 C => controller ，我们已经完成了。\n\n下面来看 View 层是啥？\n假设我们现在有 100 个不同的路由来处理请求，并且每个路由要返回不同的页面，我们肯定不希望手写 100 个 html ，代码量太大了。\n为了解放生产力，我们不得不使用模板引擎，例如 ejs , jade，nunjucks 等等，由于 [nunjucks ](https://mozilla.github.io/nunjucks/) 是 mozilla 开发的，就用它吧！（官方文档支持中文：[官方文档](https://mozilla.github.io/nunjucks/cn/api.html)）\n```javacsript\n// 安装 及 使用\n// 随便在哪新建一个 js 文件\nconst nunjucks = require('nunjucks');\nconst result = nunjucks.renderString(`hello, ${name}`, {name: 123});\n// fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行\nconsole.log(result);\n```\n\n// 通过 node.js 执行\n{% asset_image result.png result result result %}\n\n**如果你写过 Angular，Nunjucks 的东西简直是跟 Angular 的模板语法一毛一样**\n支持管道，双花括号取值 ,逻辑判断，循环，继承，还有：\n **防止 XSS 攻击，支持可配置的转义 消毒(sanitizer)**\n\n```javascript\nconst nunjucks = require('nunjucks');\nnunjucks.configure('./', {autoescape: true});\n// 默认对当前文件夹下的文件进行转义过滤，消毒处理\n```\n脏活都被 nunjucks 干完了。\n\n### 使用 nunjucks\n下面，我们将 默认 路由下，返回 post 页面的代码，用 nunjucks 来进行重构\n\n在 controller 层同级下，新建 views 目录，然后\n新建 from.html 模板文件\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>form</title>\n</head>\n<body>\n<!--注意，这里使用了 name 变量，看看待会怎么使用它！\n\n // fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行\n\n -->\n    <h1>{fuck{  name  }fuck}</h1>\n    <form action=\"/submit\" method=\"post\">\n        <input name=\"account\" type=\"text\"> 账号\n        <br/>\n        <input name=\"password\" type=\"password\"> 密码\n        <br/>\n        <button>提交</button>\n      </form>\n</body>\n</html>\n```\n\n接着在 renderers 下新建  renderForm.js\n```javascript\nconst nunjucks = require('nunjucks');\nnunjucks.configure('views', { autoescape: true });\nconst htmlRenderFn = (object) => nunjucks.render(`form.html`, object);\nmodule.exports = htmlRenderFn;\n```\n接着，修改原本在 index.controller.js 中渲染的函数\n```javascript\nconst renderForm = require('../views/renderForm');\nmodule.exports =  async (ctx, next) => {\n  ctx.response.type = 'text/html';\n  ctx.body = renderForm({name: 'Hello, nunjucks'});\n  await next();\n}\n\n```\n 回到第二个标题抛出的问题，我的理解是，KOA 中的 MVC ：\n M = 泛指整个通信过程中所有的数据，包括但不限于 http 请求中传递的数据或者路由参数、query 参数、post body 体，甚至 view 层 中 nunjucks 渲染的数据来源。\n V =  view，返回给前端的视图\n C = controller 控制器\n\n未完待续...\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"koa-2","published":1,"updated":"2019-05-16T15:39:22.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaw00015ckuf089l8i91","content":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/90274428\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/90274428</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"MVC-分层\"><a href=\"#MVC-分层\" class=\"headerlink\" title=\"MVC 分层\"></a>MVC 分层</h2><p>代码地址： <a href=\"https://github.com/ZQ-jhon/koa-starter\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/koa-starter</a><br> MVC 是个老生常谈的概念了。<br> M = Model， V = View , C = Controller ，  angularjs 就是典型的 MVC 框架。<br> 在 <code>Angular</code> （指Angular 2+， 下同） 中，C 被拆分成 ViewModel ，因此称之为 MVVM 框架：<br> M = model 数据，驱动渲染的能源<br> V = View 视图层，指代用户可以看到的前端界面<br> ViewModel = 处理数据和视图之间的关系</p>\n<p> 那么，在 KOA 中， MVC 指代的又是什么呢? </p>\n<h3 id=\"C，Controller-层\"><a href=\"#C，Controller-层\" class=\"headerlink\" title=\"C，Controller 层\"></a>C，Controller 层</h3><p> 先不急着回答，把上一次的代码捋一捋，进一步优化一下。<br> 由于之前所有的对于请求参数和数据的处理都放在 APP.js ，随着需求的增加，导致难以维护，先让我们给代码分层：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/** app.js 中新增 `router.js`，专门用来处理路由相关的东西 </span></span><br><span class=\"line\"><span class=\"comment\"> *   router.js</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">        ctx.body = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">          &lt;form action=\"/submit\" method=\"post\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;input name=\"account\" type=\"text\"&gt; 账号</span></span><br><span class=\"line\"><span class=\"string\">            &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;input name=\"password\" type=\"password\"&gt; 密码</span></span><br><span class=\"line\"><span class=\"string\">            &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctx.request.url === <span class=\"string\">'/submit'</span>) &#123;</span><br><span class=\"line\">            ctx.response.type = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">            ctx.response.body = ctx.request.body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// add router middleware:</span></span><br><span class=\"line\">    app.use(router.routes())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>整个 <code>router</code> 也被编写并导出为一个函数，接受 koa 的实例 app，来进行中间件的使用。</p>\n<p>还不够完美，router 中仍然存在大量的与路由无关的代码，我们进一步分层:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 新建 index.controller.js</span></span><br><span class=\"line\"><span class=\"comment\">* index.controller.js 的职责就是：一旦收到命令，就渲染并返回表单页面</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =  <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.type = <span class=\"string\">'text/html'</span>;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;form action=\"/submit\" method=\"post\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input name=\"account\" type=\"text\"&gt; 账号</span></span><br><span class=\"line\"><span class=\"string\">        &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input name=\"password\" type=\"password\"&gt; 密码</span></span><br><span class=\"line\"><span class=\"string\">        &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 同理，新建 post.controller.js</span></span><br><span class=\"line\"><span class=\"comment\">* post.controller.js 的职责是：收到命令，就解析 body 中传来的数据，并渲染返回给前端</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.response.type = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">    ctx.response.body = ctx.request.body;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在的文件结构应该如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--node_modules</span><br><span class=\"line\">|--package.json</span><br><span class=\"line\">|--app.js</span><br><span class=\"line\">|--index.controller.js</span><br><span class=\"line\">|--post.controller.js</span><br><span class=\"line\">|--router.controller.js</span><br></pre></td></tr></table></figure></p>\n<p><em>（如果读者嫌乱，可以增加 controllers 文件夹 和 routers 文件夹，将对应后缀的文件丢到对应的目录，并更新文件的引用路径。）</em></p>\n<p>我们现在更新目录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--node_modules</span><br><span class=\"line\">|--package.json</span><br><span class=\"line\">|--app.js</span><br><span class=\"line\">|--contollers</span><br><span class=\"line\">    |--index.controller.js</span><br><span class=\"line\">    |--post.controller.js</span><br><span class=\"line\">|--routers</span><br><span class=\"line\">    |--routers.controller.js</span><br></pre></td></tr></table></figure></p>\n<p>VSCODE 提示更新引用，NICE。<br><img src=\"/2019/05/16/koa-2/vscode.png\" title=\"vscode vscode vscode\"></p>\n<p>通过上面的代码可以看到，两个新建的 controller 文件，都是在处理自己的业务职责，即渲染并返回对应的数据，他们不关心路由是不是命中了自己，做到了职责单一。</p>\n<p>我们现在在 CMD 中输入 <code>node app.js</code> 发现程序还是按照预期来执行，这里就不贴图了。</p>\n<p>现在，按照 MVC 框架的思想来理解，业务处理的部分就是 C =&gt; controller ，我们已经完成了。</p>\n<p>下面来看 View 层是啥？<br>假设我们现在有 100 个不同的路由来处理请求，并且每个路由要返回不同的页面，我们肯定不希望手写 100 个 html ，代码量太大了。<br>为了解放生产力，我们不得不使用模板引擎，例如 ejs , jade，nunjucks 等等，由于 <a href=\"https://mozilla.github.io/nunjucks/\" target=\"_blank\" rel=\"noopener\">nunjucks </a> 是 mozilla 开发的，就用它吧！（官方文档支持中文：<a href=\"https://mozilla.github.io/nunjucks/cn/api.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装 及 使用</span><br><span class=\"line\">// 随便在哪新建一个 js 文件</span><br><span class=\"line\">const nunjucks = require(&apos;nunjucks&apos;);</span><br><span class=\"line\">const result = nunjucks.renderString(`hello, $&#123;name&#125;`, &#123;name: 123&#125;);</span><br><span class=\"line\">// fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行</span><br><span class=\"line\">console.log(result);</span><br></pre></td></tr></table></figure></p>\n<p>// 通过 node.js 执行<br><img src=\"/2019/05/16/koa-2/result.png\" title=\"result result result\"></p>\n<p><strong>如果你写过 Angular，Nunjucks 的东西简直是跟 Angular 的模板语法一毛一样</strong><br>支持管道，双花括号取值 ,逻辑判断，循环，继承，还有：<br> <strong>防止 XSS 攻击，支持可配置的转义 消毒(sanitizer)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nunjucks = <span class=\"built_in\">require</span>(<span class=\"string\">'nunjucks'</span>);</span><br><span class=\"line\">nunjucks.configure(<span class=\"string\">'./'</span>, &#123;<span class=\"attr\">autoescape</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 默认对当前文件夹下的文件进行转义过滤，消毒处理</span></span><br></pre></td></tr></table></figure>\n<p>脏活都被 nunjucks 干完了。</p>\n<h3 id=\"使用-nunjucks\"><a href=\"#使用-nunjucks\" class=\"headerlink\" title=\"使用 nunjucks\"></a>使用 nunjucks</h3><p>下面，我们将 默认 路由下，返回 post 页面的代码，用 nunjucks 来进行重构</p>\n<p>在 controller 层同级下，新建 views 目录，然后<br>新建 from.html 模板文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>form<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--注意，这里使用了 name 变量，看看待会怎么使用它！</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> // fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;fuck&#123;  name  &#125;fuck&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/submit\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"account\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span> 账号</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span>&gt;</span> 密码</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>接着在 renderers 下新建  renderForm.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nunjucks = <span class=\"built_in\">require</span>(<span class=\"string\">'nunjucks'</span>);</span><br><span class=\"line\">nunjucks.configure(<span class=\"string\">'views'</span>, &#123; <span class=\"attr\">autoescape</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlRenderFn = <span class=\"function\">(<span class=\"params\">object</span>) =&gt;</span> nunjucks.render(<span class=\"string\">`form.html`</span>, object);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = htmlRenderFn;</span><br></pre></td></tr></table></figure></p>\n<p>接着，修改原本在 index.controller.js 中渲染的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> renderForm = <span class=\"built_in\">require</span>(<span class=\"string\">'../views/renderForm'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =  <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.type = <span class=\"string\">'text/html'</span>;</span><br><span class=\"line\">  ctx.body = renderForm(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Hello, nunjucks'</span>&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 回到第二个标题抛出的问题，我的理解是，KOA 中的 MVC ：<br> M = 泛指整个通信过程中所有的数据，包括但不限于 http 请求中传递的数据或者路由参数、query 参数、post body 体，甚至 view 层 中 nunjucks 渲染的数据来源。<br> V =  view，返回给前端的视图<br> C = controller 控制器</p>\n<p>未完待续…</p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/90274428\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/90274428</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"MVC-分层\"><a href=\"#MVC-分层\" class=\"headerlink\" title=\"MVC 分层\"></a>MVC 分层</h2><p>代码地址： <a href=\"https://github.com/ZQ-jhon/koa-starter\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/koa-starter</a><br> MVC 是个老生常谈的概念了。<br> M = Model， V = View , C = Controller ，  angularjs 就是典型的 MVC 框架。<br> 在 <code>Angular</code> （指Angular 2+， 下同） 中，C 被拆分成 ViewModel ，因此称之为 MVVM 框架：<br> M = model 数据，驱动渲染的能源<br> V = View 视图层，指代用户可以看到的前端界面<br> ViewModel = 处理数据和视图之间的关系</p>\n<p> 那么，在 KOA 中， MVC 指代的又是什么呢? </p>\n<h3 id=\"C，Controller-层\"><a href=\"#C，Controller-层\" class=\"headerlink\" title=\"C，Controller 层\"></a>C，Controller 层</h3><p> 先不急着回答，把上一次的代码捋一捋，进一步优化一下。<br> 由于之前所有的对于请求参数和数据的处理都放在 APP.js ，随着需求的增加，导致难以维护，先让我们给代码分层：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/** app.js 中新增 `router.js`，专门用来处理路由相关的东西 </span></span><br><span class=\"line\"><span class=\"comment\"> *   router.js</span></span><br><span class=\"line\"><span class=\"comment\"> *  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">        ctx.body = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">          &lt;form action=\"/submit\" method=\"post\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;input name=\"account\" type=\"text\"&gt; 账号</span></span><br><span class=\"line\"><span class=\"string\">            &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;input name=\"password\" type=\"password\"&gt; 密码</span></span><br><span class=\"line\"><span class=\"string\">            &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">        `</span>;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctx.request.url === <span class=\"string\">'/submit'</span>) &#123;</span><br><span class=\"line\">            ctx.response.type = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">            ctx.response.body = ctx.request.body;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// add router middleware:</span></span><br><span class=\"line\">    app.use(router.routes())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>整个 <code>router</code> 也被编写并导出为一个函数，接受 koa 的实例 app，来进行中间件的使用。</p>\n<p>还不够完美，router 中仍然存在大量的与路由无关的代码，我们进一步分层:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 新建 index.controller.js</span></span><br><span class=\"line\"><span class=\"comment\">* index.controller.js 的职责就是：一旦收到命令，就渲染并返回表单页面</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =  <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.type = <span class=\"string\">'text/html'</span>;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;form action=\"/submit\" method=\"post\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input name=\"account\" type=\"text\"&gt; 账号</span></span><br><span class=\"line\"><span class=\"string\">        &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input name=\"password\" type=\"password\"&gt; 密码</span></span><br><span class=\"line\"><span class=\"string\">        &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 同理，新建 post.controller.js</span></span><br><span class=\"line\"><span class=\"comment\">* post.controller.js 的职责是：收到命令，就解析 body 中传来的数据，并渲染返回给前端</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.response.type = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">    ctx.response.body = ctx.request.body;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在的文件结构应该如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--node_modules</span><br><span class=\"line\">|--package.json</span><br><span class=\"line\">|--app.js</span><br><span class=\"line\">|--index.controller.js</span><br><span class=\"line\">|--post.controller.js</span><br><span class=\"line\">|--router.controller.js</span><br></pre></td></tr></table></figure></p>\n<p><em>（如果读者嫌乱，可以增加 controllers 文件夹 和 routers 文件夹，将对应后缀的文件丢到对应的目录，并更新文件的引用路径。）</em></p>\n<p>我们现在更新目录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--node_modules</span><br><span class=\"line\">|--package.json</span><br><span class=\"line\">|--app.js</span><br><span class=\"line\">|--contollers</span><br><span class=\"line\">    |--index.controller.js</span><br><span class=\"line\">    |--post.controller.js</span><br><span class=\"line\">|--routers</span><br><span class=\"line\">    |--routers.controller.js</span><br></pre></td></tr></table></figure></p>\n<p>VSCODE 提示更新引用，NICE。<br><img src=\"/2019/05/16/koa-2/vscode.png\" title=\"vscode vscode vscode\"></p>\n<p>通过上面的代码可以看到，两个新建的 controller 文件，都是在处理自己的业务职责，即渲染并返回对应的数据，他们不关心路由是不是命中了自己，做到了职责单一。</p>\n<p>我们现在在 CMD 中输入 <code>node app.js</code> 发现程序还是按照预期来执行，这里就不贴图了。</p>\n<p>现在，按照 MVC 框架的思想来理解，业务处理的部分就是 C =&gt; controller ，我们已经完成了。</p>\n<p>下面来看 View 层是啥？<br>假设我们现在有 100 个不同的路由来处理请求，并且每个路由要返回不同的页面，我们肯定不希望手写 100 个 html ，代码量太大了。<br>为了解放生产力，我们不得不使用模板引擎，例如 ejs , jade，nunjucks 等等，由于 <a href=\"https://mozilla.github.io/nunjucks/\" target=\"_blank\" rel=\"noopener\">nunjucks </a> 是 mozilla 开发的，就用它吧！（官方文档支持中文：<a href=\"https://mozilla.github.io/nunjucks/cn/api.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装 及 使用</span><br><span class=\"line\">// 随便在哪新建一个 js 文件</span><br><span class=\"line\">const nunjucks = require(&apos;nunjucks&apos;);</span><br><span class=\"line\">const result = nunjucks.renderString(`hello, $&#123;name&#125;`, &#123;name: 123&#125;);</span><br><span class=\"line\">// fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行</span><br><span class=\"line\">console.log(result);</span><br></pre></td></tr></table></figure></p>\n<p>// 通过 node.js 执行<br><img src=\"/2019/05/16/koa-2/result.png\" title=\"result result result\"></p>\n<p><strong>如果你写过 Angular，Nunjucks 的东西简直是跟 Angular 的模板语法一毛一样</strong><br>支持管道，双花括号取值 ,逻辑判断，循环，继承，还有：<br> <strong>防止 XSS 攻击，支持可配置的转义 消毒(sanitizer)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nunjucks = <span class=\"built_in\">require</span>(<span class=\"string\">'nunjucks'</span>);</span><br><span class=\"line\">nunjucks.configure(<span class=\"string\">'./'</span>, &#123;<span class=\"attr\">autoescape</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 默认对当前文件夹下的文件进行转义过滤，消毒处理</span></span><br></pre></td></tr></table></figure>\n<p>脏活都被 nunjucks 干完了。</p>\n<h3 id=\"使用-nunjucks\"><a href=\"#使用-nunjucks\" class=\"headerlink\" title=\"使用 nunjucks\"></a>使用 nunjucks</h3><p>下面，我们将 默认 路由下，返回 post 页面的代码，用 nunjucks 来进行重构</p>\n<p>在 controller 层同级下，新建 views 目录，然后<br>新建 from.html 模板文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>form<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--注意，这里使用了 name 变量，看看待会怎么使用它！</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> // fuck, 这里 双花括号跟 hexo 模板语法冲突了，意思大家明白就行</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;fuck&#123;  name  &#125;fuck&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/submit\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"account\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span> 账号</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span>&gt;</span> 密码</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>接着在 renderers 下新建  renderForm.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nunjucks = <span class=\"built_in\">require</span>(<span class=\"string\">'nunjucks'</span>);</span><br><span class=\"line\">nunjucks.configure(<span class=\"string\">'views'</span>, &#123; <span class=\"attr\">autoescape</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlRenderFn = <span class=\"function\">(<span class=\"params\">object</span>) =&gt;</span> nunjucks.render(<span class=\"string\">`form.html`</span>, object);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = htmlRenderFn;</span><br></pre></td></tr></table></figure></p>\n<p>接着，修改原本在 index.controller.js 中渲染的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> renderForm = <span class=\"built_in\">require</span>(<span class=\"string\">'../views/renderForm'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports =  <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.type = <span class=\"string\">'text/html'</span>;</span><br><span class=\"line\">  ctx.body = renderForm(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'Hello, nunjucks'</span>&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 回到第二个标题抛出的问题，我的理解是，KOA 中的 MVC ：<br> M = 泛指整个通信过程中所有的数据，包括但不限于 http 请求中传递的数据或者路由参数、query 参数、post body 体，甚至 view 层 中 nunjucks 渲染的数据来源。<br> V =  view，返回给前端的视图<br> C = controller 控制器</p>\n<p>未完待续…</p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"koa-1","date":"2019-05-14T14:35:20.000Z","reward":true,"comment":true,"repo":"zq-jhon | koa-starter","_content":"本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/90216585](https://blog.csdn.net/qq_20264891/article/details/90216585)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n## 为什么要学 `Koa`，不学 `Express` ？\n\n因为不想写回调，日常开发习惯 `async await` 处理异步流程，因此选择 `Koa 2`。(以下简称 Koa)\n\n## Koa2 核心概念\n\n洋葱模型 其实就是 `async await` 执行流程，在 `koa` 每次调用中间件时，回调函数中 `next` 会吧执行权递交给下一个回调函数。按笔者通俗的解释为：洋葱先从外侧切到内侧，再从内测切到另一边的外侧。其实也就是回调函数被 `async await` 化了而已。\n`ctx(context)` 上下文，`request`, `response` 都被合并封装到 `ctx` 中，方便每个中间件进行操作，调用。\n{% asset_image context.png context context context %}\n\n打印一下 `ctx`，可见，`ctx` 描述的是，每个完整的 `http` 所包含的信息，包括但不限于 请求方法(`method`)，url(`request url`)，响应码(`status`), 响应信息 `message`, `header` 等。\n\n路由 路由的处理也是包含在中间件中的。路由的概念并不陌生，`Angular` 中除了基本的 Router 路由器让你处理跳转路由之外，还有 `Activeted` 路由，来处理不同的 `Url` 和接受 `query` 等。 在我看来，这里 `Koa` 的路由，其实跟 `Angular Activeted` 的概念很像。代码：\n\n```javascript\n// 根路由\napp.use(async (ctx, next) => {\n  if (ctx.request.path === \"/\") {\n    ctx.response.body = \"<h1>index Router</h1>\";\n  } else {\n    await next();\n  }\n});\n\n// todo 路由\napp.use(async (ctx, next) => {\n  if (ctx.request.path === \"/todo\") {\n    ctx.response.body = \"<h1>Todo Router</h1>\";\n  } else {\n    await next();\n  }\n});\n```\n\n完事。 Demo:\n{% asset_image demo.gif %}\n但官方已经有更好的中间件了：`koa-router`\n\n```javascript\nconst Koa = require(\"koa\");\nconst app = new Koa();\nconst router = require(\"koa-router\")();\n\n// 根路由\nrouter.get(\"/\", async (ctx, next) => {\n  ctx.response.body = \"<h1>index Router</h1>\";\n});\n\n// todo 路由\nrouter.get(\"/todo\", async (ctx, next) => {\n  ctx.response.body = \"<h1>Todo Router</h1>\";\n});\n\napp.use(router.routes());\n```\n\n具名路由：\n\n```javascript\n// 给路由起个名字，便于复用\n\nrouter.get(\"user\", \"users/:id\", async (ctx, next) => {\n  ctx.response.body = `你要访问的是 ： ${ctx.response.path}`;\n});\n```\n\n**query param 以及 param 对象**\n\n```javascript\n\n// params\nrouter.get('/home/:id', async (ctx,next) => {\nctx.response.type = 'application/json';\nctx.response.body = ctx.params;\n});\n\n// query-params\nrouter.get('/home' async (ctx, next) => {\nctx.response.type = 'application/json';\nctx.response.body = `${ctx.request.query}`;\n});\n```\n\nparams:-object:\n{% asset_image params-object.png params-object params-object params-object %}\nquery-params:\n{% asset_image query-params.png query-params query-params query-params %}\n拿 `Angular` 中的路由做一下类比：\n\n```javascript\n// 形如 /home/:id\nthis.activitedRoute.paramMap.subscribe(param => console.log(param)); // {\"id\": \"4\"}\n\n// 形如 /home?a=1&b=2\nthis.route.queryParamMap.subscribe(res => console.log(res)); // map<string,number> = new Map({a: 1, b:2});\n```\n\n都是根据浏览器的 `urlParamsMap` 来实现的。\n\n## body-parser\n\n上述的所有请求， 都是基于 `GET` 请求的，那么如果客户端发来 `post` 请求，怎么解析 send 过来的数据呢？通过路由吗？做不到啊！所以还是得借助 ctx 上挂着的的对象来进行解析，因为 post 请求接受 `form Data` 也是异步的，所以要给 `ctx.request` 绑定监听：\n\n```javascript\nconst Koa = require(\"koa\");\nconst router = require(\"koa-router\")();\nconst app = new Koa();\n\n// 通用路由，直接给出 form 表单，诱导进一步的 post 操作\napp.use(async (ctx, next) => {\n  ctx.body = `\n    <form action=\"/submit\" method=\"post\">\n      <input name=\"account\" type=\"text\"> 账号\n      <br/>\n      <input name=\"password\" type=\"password\"> 密码\n      <br/>\n      <button>提交</button>\n    </form>\n  `;\n  await next();\n});\n\n// 进行 post 操作时的 middleware\napp.use(async (ctx, next) => {\n  if (ctx.request.url === \"/submit\") {\n    // ctx.response.type = 'application/json';\n    const data = await parseData(ctx);\n    ctx.response.body = data;\n  }\n  await next();\n});\n\n// 接收上下文，通过 事件监听 和 promise 来达到解析数据的目的\nfunction parseData(ctx) {\n  return new Promise((resolve, reject) => {\n    try {\n      let str = \"\";\n      ctx.req.on(\"data\", data => {\n        str += data;\n      });\n      ctx.req.addListener(\"end\", () => {\n        resolve(str);\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n// add router middleware:\napp.use(router.routes());\n\napp.listen(3000, () => {\n  console.log(\"server is running at http://localhost:3000\");\n});\n```\n\n\nDemo: {% asset_image post.gif post post post %}\n\nBut， 不用这么麻烦，有对应的轮子了: `koa-bodyparser` 该中间件，会将 post 的数据，全部解析进 `ctx.request.body` 中\n核心代码：\n\n```javascript\nconst bodyparser = require(\"koa-bodyparser\");\n// 直接使用中间件\napp.use(bodyparser());\n\napp.use(async (ctx, next) => {\n  ctx.body = `\n    <form action=\"/submit\" method=\"post\">\n      <input name=\"account\" type=\"text\"> 账号\n      <br/>\n      <input name=\"password\" type=\"password\"> 密码\n      <br/>\n      <button>提交</button>\n    </form>\n  `;\n  await next();\n});\n\napp.use(async (ctx, next) => {\n  if (ctx.request.url === \"/submit\") {\n    // ctx.response.type = 'application/json';\n\n    ctx.response.body = ctx.request.body;\n  }\n  await next();\n});\n```\n\n来试试效果吧！\n{% asset_image body-parser.gif body-parser body-parser body-parser%}\n搞定了。\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/koa-1.md","raw":"---\ntitle: \"koa-1\"\ndate: 2019-05-14 22:35:20\ntags: [koa] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\nrepo: zq-jhon | koa-starter #用户名 | 仓库名\n---\n本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/90216585](https://blog.csdn.net/qq_20264891/article/details/90216585)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n## 为什么要学 `Koa`，不学 `Express` ？\n\n因为不想写回调，日常开发习惯 `async await` 处理异步流程，因此选择 `Koa 2`。(以下简称 Koa)\n\n## Koa2 核心概念\n\n洋葱模型 其实就是 `async await` 执行流程，在 `koa` 每次调用中间件时，回调函数中 `next` 会吧执行权递交给下一个回调函数。按笔者通俗的解释为：洋葱先从外侧切到内侧，再从内测切到另一边的外侧。其实也就是回调函数被 `async await` 化了而已。\n`ctx(context)` 上下文，`request`, `response` 都被合并封装到 `ctx` 中，方便每个中间件进行操作，调用。\n{% asset_image context.png context context context %}\n\n打印一下 `ctx`，可见，`ctx` 描述的是，每个完整的 `http` 所包含的信息，包括但不限于 请求方法(`method`)，url(`request url`)，响应码(`status`), 响应信息 `message`, `header` 等。\n\n路由 路由的处理也是包含在中间件中的。路由的概念并不陌生，`Angular` 中除了基本的 Router 路由器让你处理跳转路由之外，还有 `Activeted` 路由，来处理不同的 `Url` 和接受 `query` 等。 在我看来，这里 `Koa` 的路由，其实跟 `Angular Activeted` 的概念很像。代码：\n\n```javascript\n// 根路由\napp.use(async (ctx, next) => {\n  if (ctx.request.path === \"/\") {\n    ctx.response.body = \"<h1>index Router</h1>\";\n  } else {\n    await next();\n  }\n});\n\n// todo 路由\napp.use(async (ctx, next) => {\n  if (ctx.request.path === \"/todo\") {\n    ctx.response.body = \"<h1>Todo Router</h1>\";\n  } else {\n    await next();\n  }\n});\n```\n\n完事。 Demo:\n{% asset_image demo.gif %}\n但官方已经有更好的中间件了：`koa-router`\n\n```javascript\nconst Koa = require(\"koa\");\nconst app = new Koa();\nconst router = require(\"koa-router\")();\n\n// 根路由\nrouter.get(\"/\", async (ctx, next) => {\n  ctx.response.body = \"<h1>index Router</h1>\";\n});\n\n// todo 路由\nrouter.get(\"/todo\", async (ctx, next) => {\n  ctx.response.body = \"<h1>Todo Router</h1>\";\n});\n\napp.use(router.routes());\n```\n\n具名路由：\n\n```javascript\n// 给路由起个名字，便于复用\n\nrouter.get(\"user\", \"users/:id\", async (ctx, next) => {\n  ctx.response.body = `你要访问的是 ： ${ctx.response.path}`;\n});\n```\n\n**query param 以及 param 对象**\n\n```javascript\n\n// params\nrouter.get('/home/:id', async (ctx,next) => {\nctx.response.type = 'application/json';\nctx.response.body = ctx.params;\n});\n\n// query-params\nrouter.get('/home' async (ctx, next) => {\nctx.response.type = 'application/json';\nctx.response.body = `${ctx.request.query}`;\n});\n```\n\nparams:-object:\n{% asset_image params-object.png params-object params-object params-object %}\nquery-params:\n{% asset_image query-params.png query-params query-params query-params %}\n拿 `Angular` 中的路由做一下类比：\n\n```javascript\n// 形如 /home/:id\nthis.activitedRoute.paramMap.subscribe(param => console.log(param)); // {\"id\": \"4\"}\n\n// 形如 /home?a=1&b=2\nthis.route.queryParamMap.subscribe(res => console.log(res)); // map<string,number> = new Map({a: 1, b:2});\n```\n\n都是根据浏览器的 `urlParamsMap` 来实现的。\n\n## body-parser\n\n上述的所有请求， 都是基于 `GET` 请求的，那么如果客户端发来 `post` 请求，怎么解析 send 过来的数据呢？通过路由吗？做不到啊！所以还是得借助 ctx 上挂着的的对象来进行解析，因为 post 请求接受 `form Data` 也是异步的，所以要给 `ctx.request` 绑定监听：\n\n```javascript\nconst Koa = require(\"koa\");\nconst router = require(\"koa-router\")();\nconst app = new Koa();\n\n// 通用路由，直接给出 form 表单，诱导进一步的 post 操作\napp.use(async (ctx, next) => {\n  ctx.body = `\n    <form action=\"/submit\" method=\"post\">\n      <input name=\"account\" type=\"text\"> 账号\n      <br/>\n      <input name=\"password\" type=\"password\"> 密码\n      <br/>\n      <button>提交</button>\n    </form>\n  `;\n  await next();\n});\n\n// 进行 post 操作时的 middleware\napp.use(async (ctx, next) => {\n  if (ctx.request.url === \"/submit\") {\n    // ctx.response.type = 'application/json';\n    const data = await parseData(ctx);\n    ctx.response.body = data;\n  }\n  await next();\n});\n\n// 接收上下文，通过 事件监听 和 promise 来达到解析数据的目的\nfunction parseData(ctx) {\n  return new Promise((resolve, reject) => {\n    try {\n      let str = \"\";\n      ctx.req.on(\"data\", data => {\n        str += data;\n      });\n      ctx.req.addListener(\"end\", () => {\n        resolve(str);\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n// add router middleware:\napp.use(router.routes());\n\napp.listen(3000, () => {\n  console.log(\"server is running at http://localhost:3000\");\n});\n```\n\n\nDemo: {% asset_image post.gif post post post %}\n\nBut， 不用这么麻烦，有对应的轮子了: `koa-bodyparser` 该中间件，会将 post 的数据，全部解析进 `ctx.request.body` 中\n核心代码：\n\n```javascript\nconst bodyparser = require(\"koa-bodyparser\");\n// 直接使用中间件\napp.use(bodyparser());\n\napp.use(async (ctx, next) => {\n  ctx.body = `\n    <form action=\"/submit\" method=\"post\">\n      <input name=\"account\" type=\"text\"> 账号\n      <br/>\n      <input name=\"password\" type=\"password\"> 密码\n      <br/>\n      <button>提交</button>\n    </form>\n  `;\n  await next();\n});\n\napp.use(async (ctx, next) => {\n  if (ctx.request.url === \"/submit\") {\n    // ctx.response.type = 'application/json';\n\n    ctx.response.body = ctx.request.body;\n  }\n  await next();\n});\n```\n\n来试试效果吧！\n{% asset_image body-parser.gif body-parser body-parser body-parser%}\n搞定了。\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"koa-1","published":1,"updated":"2019-05-16T15:39:24.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaw20017ckufhuqdxz2f","content":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/90216585\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/90216585</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"为什么要学-Koa，不学-Express-？\"><a href=\"#为什么要学-Koa，不学-Express-？\" class=\"headerlink\" title=\"为什么要学 Koa，不学 Express ？\"></a>为什么要学 <code>Koa</code>，不学 <code>Express</code> ？</h2><p>因为不想写回调，日常开发习惯 <code>async await</code> 处理异步流程，因此选择 <code>Koa 2</code>。(以下简称 Koa)</p>\n<h2 id=\"Koa2-核心概念\"><a href=\"#Koa2-核心概念\" class=\"headerlink\" title=\"Koa2 核心概念\"></a>Koa2 核心概念</h2><p>洋葱模型 其实就是 <code>async await</code> 执行流程，在 <code>koa</code> 每次调用中间件时，回调函数中 <code>next</code> 会吧执行权递交给下一个回调函数。按笔者通俗的解释为：洋葱先从外侧切到内侧，再从内测切到另一边的外侧。其实也就是回调函数被 <code>async await</code> 化了而已。<br><code>ctx(context)</code> 上下文，<code>request</code>, <code>response</code> 都被合并封装到 <code>ctx</code> 中，方便每个中间件进行操作，调用。<br><img src=\"/2019/05/14/koa-1/context.png\" title=\"context context context\"></p>\n<p>打印一下 <code>ctx</code>，可见，<code>ctx</code> 描述的是，每个完整的 <code>http</code> 所包含的信息，包括但不限于 请求方法(<code>method</code>)，url(<code>request url</code>)，响应码(<code>status</code>), 响应信息 <code>message</code>, <code>header</code> 等。</p>\n<p>路由 路由的处理也是包含在中间件中的。路由的概念并不陌生，<code>Angular</code> 中除了基本的 Router 路由器让你处理跳转路由之外，还有 <code>Activeted</code> 路由，来处理不同的 <code>Url</code> 和接受 <code>query</code> 等。 在我看来，这里 <code>Koa</code> 的路由，其实跟 <code>Angular Activeted</code> 的概念很像。代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根路由</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.path === <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    ctx.response.body = <span class=\"string\">\"&lt;h1&gt;index Router&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// todo 路由</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.path === <span class=\"string\">\"/todo\"</span>) &#123;</span><br><span class=\"line\">    ctx.response.body = <span class=\"string\">\"&lt;h1&gt;Todo Router&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完事。 Demo:<br><img src=\"/2019/05/14/koa-1/demo.gif\"><br>但官方已经有更好的中间件了：<code>koa-router</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-router\"</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根路由</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.body = <span class=\"string\">\"&lt;h1&gt;index Router&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// todo 路由</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/todo\"</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.body = <span class=\"string\">\"&lt;h1&gt;Todo Router&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(router.routes());</span><br></pre></td></tr></table></figure>\n<p>具名路由：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给路由起个名字，便于复用</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"users/:id\"</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.body = <span class=\"string\">`你要访问的是 ： <span class=\"subst\">$&#123;ctx.response.path&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>query param 以及 param 对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// params</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/home/:id'</span>, <span class=\"keyword\">async</span> (ctx,next) =&gt; &#123;</span><br><span class=\"line\">ctx.response.type = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">ctx.response.body = ctx.params;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// query-params</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/home'</span> <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">ctx.response.type = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">ctx.response.body = <span class=\"string\">`<span class=\"subst\">$&#123;ctx.request.query&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>params:-object:<br><img src=\"/2019/05/14/koa-1/params-object.png\" title=\"params-object params-object params-object\"><br>query-params:<br><img src=\"/2019/05/14/koa-1/query-params.png\" title=\"query-params query-params query-params\"><br>拿 <code>Angular</code> 中的路由做一下类比：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 形如 /home/:id</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.activitedRoute.paramMap.subscribe(<span class=\"function\"><span class=\"params\">param</span> =&gt;</span> <span class=\"built_in\">console</span>.log(param)); <span class=\"comment\">// &#123;\"id\": \"4\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 形如 /home?a=1&amp;b=2</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.route.queryParamMap.subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res)); <span class=\"comment\">// map&lt;string,number&gt; = new Map(&#123;a: 1, b:2&#125;);</span></span><br></pre></td></tr></table></figure>\n<p>都是根据浏览器的 <code>urlParamsMap</code> 来实现的。</p>\n<h2 id=\"body-parser\"><a href=\"#body-parser\" class=\"headerlink\" title=\"body-parser\"></a>body-parser</h2><p>上述的所有请求， 都是基于 <code>GET</code> 请求的，那么如果客户端发来 <code>post</code> 请求，怎么解析 send 过来的数据呢？通过路由吗？做不到啊！所以还是得借助 ctx 上挂着的的对象来进行解析，因为 post 请求接受 <code>form Data</code> 也是异步的，所以要给 <code>ctx.request</code> 绑定监听：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-router\"</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通用路由，直接给出 form 表单，诱导进一步的 post 操作</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;form action=\"/submit\" method=\"post\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input name=\"account\" type=\"text\"&gt; 账号</span></span><br><span class=\"line\"><span class=\"string\">      &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input name=\"password\" type=\"password\"&gt; 密码</span></span><br><span class=\"line\"><span class=\"string\">      &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进行 post 操作时的 middleware</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.url === <span class=\"string\">\"/submit\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ctx.response.type = 'application/json';</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> parseData(ctx);</span><br><span class=\"line\">    ctx.response.body = data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收上下文，通过 事件监听 和 promise 来达到解析数据的目的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseData</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      ctx.req.on(<span class=\"string\">\"data\"</span>, data =&gt; &#123;</span><br><span class=\"line\">        str += data;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      ctx.req.addListener(<span class=\"string\">\"end\"</span>, () =&gt; &#123;</span><br><span class=\"line\">        resolve(str);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add router middleware:</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"server is running at http://localhost:3000\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Demo: <img src=\"/2019/05/14/koa-1/post.gif\" title=\"post post post\"></p>\n<p>But， 不用这么麻烦，有对应的轮子了: <code>koa-bodyparser</code> 该中间件，会将 post 的数据，全部解析进 <code>ctx.request.body</code> 中<br>核心代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bodyparser = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-bodyparser\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 直接使用中间件</span></span><br><span class=\"line\">app.use(bodyparser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;form action=\"/submit\" method=\"post\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input name=\"account\" type=\"text\"&gt; 账号</span></span><br><span class=\"line\"><span class=\"string\">      &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input name=\"password\" type=\"password\"&gt; 密码</span></span><br><span class=\"line\"><span class=\"string\">      &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.url === <span class=\"string\">\"/submit\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ctx.response.type = 'application/json';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.response.body = ctx.request.body;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>来试试效果吧！<br><img src=\"/2019/05/14/koa-1/body-parser.gif\" title=\"body-parser body-parser body-parser\"><br>搞定了。</p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/90216585\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/90216585</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"为什么要学-Koa，不学-Express-？\"><a href=\"#为什么要学-Koa，不学-Express-？\" class=\"headerlink\" title=\"为什么要学 Koa，不学 Express ？\"></a>为什么要学 <code>Koa</code>，不学 <code>Express</code> ？</h2><p>因为不想写回调，日常开发习惯 <code>async await</code> 处理异步流程，因此选择 <code>Koa 2</code>。(以下简称 Koa)</p>\n<h2 id=\"Koa2-核心概念\"><a href=\"#Koa2-核心概念\" class=\"headerlink\" title=\"Koa2 核心概念\"></a>Koa2 核心概念</h2><p>洋葱模型 其实就是 <code>async await</code> 执行流程，在 <code>koa</code> 每次调用中间件时，回调函数中 <code>next</code> 会吧执行权递交给下一个回调函数。按笔者通俗的解释为：洋葱先从外侧切到内侧，再从内测切到另一边的外侧。其实也就是回调函数被 <code>async await</code> 化了而已。<br><code>ctx(context)</code> 上下文，<code>request</code>, <code>response</code> 都被合并封装到 <code>ctx</code> 中，方便每个中间件进行操作，调用。<br><img src=\"/2019/05/14/koa-1/context.png\" title=\"context context context\"></p>\n<p>打印一下 <code>ctx</code>，可见，<code>ctx</code> 描述的是，每个完整的 <code>http</code> 所包含的信息，包括但不限于 请求方法(<code>method</code>)，url(<code>request url</code>)，响应码(<code>status</code>), 响应信息 <code>message</code>, <code>header</code> 等。</p>\n<p>路由 路由的处理也是包含在中间件中的。路由的概念并不陌生，<code>Angular</code> 中除了基本的 Router 路由器让你处理跳转路由之外，还有 <code>Activeted</code> 路由，来处理不同的 <code>Url</code> 和接受 <code>query</code> 等。 在我看来，这里 <code>Koa</code> 的路由，其实跟 <code>Angular Activeted</code> 的概念很像。代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根路由</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.path === <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">    ctx.response.body = <span class=\"string\">\"&lt;h1&gt;index Router&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// todo 路由</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.path === <span class=\"string\">\"/todo\"</span>) &#123;</span><br><span class=\"line\">    ctx.response.body = <span class=\"string\">\"&lt;h1&gt;Todo Router&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完事。 Demo:<br><img src=\"/2019/05/14/koa-1/demo.gif\"><br>但官方已经有更好的中间件了：<code>koa-router</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-router\"</span>)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根路由</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/\"</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.body = <span class=\"string\">\"&lt;h1&gt;index Router&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// todo 路由</span></span><br><span class=\"line\">router.get(<span class=\"string\">\"/todo\"</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.body = <span class=\"string\">\"&lt;h1&gt;Todo Router&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(router.routes());</span><br></pre></td></tr></table></figure>\n<p>具名路由：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给路由起个名字，便于复用</span></span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"users/:id\"</span>, <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.response.body = <span class=\"string\">`你要访问的是 ： <span class=\"subst\">$&#123;ctx.response.path&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>query param 以及 param 对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// params</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/home/:id'</span>, <span class=\"keyword\">async</span> (ctx,next) =&gt; &#123;</span><br><span class=\"line\">ctx.response.type = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">ctx.response.body = ctx.params;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// query-params</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/home'</span> <span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">ctx.response.type = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">ctx.response.body = <span class=\"string\">`<span class=\"subst\">$&#123;ctx.request.query&#125;</span>`</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>params:-object:<br><img src=\"/2019/05/14/koa-1/params-object.png\" title=\"params-object params-object params-object\"><br>query-params:<br><img src=\"/2019/05/14/koa-1/query-params.png\" title=\"query-params query-params query-params\"><br>拿 <code>Angular</code> 中的路由做一下类比：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 形如 /home/:id</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.activitedRoute.paramMap.subscribe(<span class=\"function\"><span class=\"params\">param</span> =&gt;</span> <span class=\"built_in\">console</span>.log(param)); <span class=\"comment\">// &#123;\"id\": \"4\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 形如 /home?a=1&amp;b=2</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.route.queryParamMap.subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res)); <span class=\"comment\">// map&lt;string,number&gt; = new Map(&#123;a: 1, b:2&#125;);</span></span><br></pre></td></tr></table></figure>\n<p>都是根据浏览器的 <code>urlParamsMap</code> 来实现的。</p>\n<h2 id=\"body-parser\"><a href=\"#body-parser\" class=\"headerlink\" title=\"body-parser\"></a>body-parser</h2><p>上述的所有请求， 都是基于 <code>GET</code> 请求的，那么如果客户端发来 <code>post</code> 请求，怎么解析 send 过来的数据呢？通过路由吗？做不到啊！所以还是得借助 ctx 上挂着的的对象来进行解析，因为 post 请求接受 <code>form Data</code> 也是异步的，所以要给 <code>ctx.request</code> 绑定监听：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-router\"</span>)();</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通用路由，直接给出 form 表单，诱导进一步的 post 操作</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;form action=\"/submit\" method=\"post\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input name=\"account\" type=\"text\"&gt; 账号</span></span><br><span class=\"line\"><span class=\"string\">      &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input name=\"password\" type=\"password\"&gt; 密码</span></span><br><span class=\"line\"><span class=\"string\">      &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进行 post 操作时的 middleware</span></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.url === <span class=\"string\">\"/submit\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ctx.response.type = 'application/json';</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> parseData(ctx);</span><br><span class=\"line\">    ctx.response.body = data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接收上下文，通过 事件监听 和 promise 来达到解析数据的目的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseData</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      ctx.req.on(<span class=\"string\">\"data\"</span>, data =&gt; &#123;</span><br><span class=\"line\">        str += data;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      ctx.req.addListener(<span class=\"string\">\"end\"</span>, () =&gt; &#123;</span><br><span class=\"line\">        resolve(str);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// add router middleware:</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"server is running at http://localhost:3000\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Demo: <img src=\"/2019/05/14/koa-1/post.gif\" title=\"post post post\"></p>\n<p>But， 不用这么麻烦，有对应的轮子了: <code>koa-bodyparser</code> 该中间件，会将 post 的数据，全部解析进 <code>ctx.request.body</code> 中<br>核心代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bodyparser = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-bodyparser\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 直接使用中间件</span></span><br><span class=\"line\">app.use(bodyparser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;form action=\"/submit\" method=\"post\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input name=\"account\" type=\"text\"&gt; 账号</span></span><br><span class=\"line\"><span class=\"string\">      &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input name=\"password\" type=\"password\"&gt; 密码</span></span><br><span class=\"line\"><span class=\"string\">      &lt;br/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button&gt;提交&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.url === <span class=\"string\">\"/submit\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ctx.response.type = 'application/json';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.response.body = ctx.request.body;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>来试试效果吧！<br><img src=\"/2019/05/14/koa-1/body-parser.gif\" title=\"body-parser body-parser body-parser\"><br>搞定了。</p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"ng英雄列表学习笔记(一) 概念、文件结构、指令、事件、单/双向绑定、组件通讯","date":"2018-03-24T16:00:00.000Z","reward":true,"comment":true,"_content":"\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/80698441)\n## 为什么要学angualr(4.0+)？##\n1. 无论是轮子也好、库也好、框架也好，很大一部分初衷就是为了改善开发体验，提升开发效率，并且让代码更加优美，易于维护。从而节省出时间，将开发人员从繁忙的业务中解放。\n2. 微软收购了github，还不赶紧学ts？\n\n本文参考博客/资料：\n----------\n\n1.https://blog.csdn.net/u012967849/article/details/78767294/ （ng父子组件如何传值）\n2.https://www.angular.cn/ （ng中文官网）\n3.https://www.jianshu.com/p/a2b625a99c8d （ng的class和interface区别）\n\n本篇笔记所用环境及NG版本一览：\n----------------\n\n![NG版本](https://img-blog.csdn.net/20180614211344486?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n## 文件目录 ##\n**1.组件的文件形式/结构：**\n形如：![components](https://img-blog.csdn.net/20180614211811858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n跟单文件的.vue不一样，文件目录比较多，但是也易于查询和解耦。\n**2.打包入口：**\n app.moudle.ts为主要入口，负责装载所有的组件，以及声明一些第三方依赖的库。\n![moudle](https://img-blog.csdn.net/20180614211620198?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n如图：\n在头部 import 声明了所有组件及依赖的原生组件(from @angular/core)。\n在@NgMoudle中，import则声明了使用的第三方库。\n在 declarations 中注册了子组件。\n**app目录不仅作为整个项目的打包入口，其本身也是一个根组件**。\n**3.模块划分：**\n 1. 根组件/模块 appMoudle\n 2. 英雄列表 => heroes 组件\n 3. 当前选择的英雄=> hero-detail组件\n\n ## 新的ng语法 ##\nng新语法:\n```\n\t*代表ng指令  不用ng-if,ng-for，类似于驼峰 ngFor ngIf \n\t()代表绑定事件   原生事件绑定直接写在括号里 (click) (keydown)\n\t[]单向绑定  代表绑定属性   [name] = 'jobs' \n\t[()] 双向绑定<input [(value=\"someValue\")] type=\"text\"/> \n\t\n```\n*官方称双向绑定写法叫盒子里的香蕉？？？？？？？*\n## 父子组件状态传递  ##\n\nStep1: 父组件想要引用子组件时，不需要在ts逻辑中引用，因为本身没有像Vue那样，有 components:[ ] 这样的选项。\nStep2: 父组件中引用子组件的模版，并且单向绑定一个hero属性，这个属性来源于父组件的一个变量值。\nStep2如图所示：\n![Step2](https://img-blog.csdn.net/20180614212726956?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\nStep3: 在子组件中，通过@Input来申请接收从 父组件中传递过来的属性。直接通过@Input() varitible 来声明/初始化即可。\nStep3如图所示：\n![Step3](https://img-blog.csdn.net/20180614213345167?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n在Vue中，通常是这样做的：\n子组件声明一个props数组，来表明接收了哪几个值，然后为己所用。\nangular其实也是同理，子组件通过标签来单向绑定一个属性，并且在逻辑文件中申请接收/初始化这个属性。\n## 组件 运作/执行流程 的文字描述 ##\n\n - 列表组件渲染出Mock的数组 (列表组件 heroes 负责)\n - 为每一个渲染出的项，绑定事件，并传参 (同上)\n - 在列表组件heroes 的模版加入`<app-hero-detail [hero]=\"selectedHero\"></app-hero-detail>`，这样父组件的值已经通过单向绑定至子组件，**但接收与使用，决定权在于子组件**。（同上）\n - hero-detail组件接收父组件传递过来的数值，并在内部`import {Input} from '@angular/core'`（hero-detail组件负责）\n - 接着在export语句中，使用装饰器来声明+初始化 得到的属性` @Input() hero: Hero;`然后就可以用啦！  （hero-detail组件负责）\n\n## 整体逻辑代码 步骤 ##\n**Step 1**\n创建列表组件，使用`*ngFor`来渲染出组件，并且每个组件绑定一个点击事件，传递的值为当前循环的每一个currentValue。\n\n```\n<li \n    *ngFor=\"let thisHero of heroes\" \n    (click)=\"onSelect(thisHero)\"\n>\n</li>\n```\n在对应的.ts文件中，这个方法为：\n\n```\n//方法\n\n /*定义参数类型为Hero类型，即从hero.ts导出的类：\n   export class Hero {\n    id: number;\n    name: string;\n  }\n  并且，设定该方法没有返回值。\n  */\nonSelect(hero: Hero): void {\n\n  //动态赋值\n  this.selectedHero = hero; \n  \n //业务逻辑相关\n  this.bool = !this.bool;\n  this.isSelected =  {\n\t\t   'badge':!this.bool,\n\t\t\t'selected':this.bool\n   }\n}\n```\n这样，每个循环出的item，在点击的时候，会把自己的值传递给该方法，从而进行后续业务逻辑处理。\n**Step 2**\n在列表渲染组件（父组件）中，引入子组件模版，并且通过单向绑定传值：\n```\n<app-hero-detail [hero]=\"selectedHero\"></app-hero-detail>\n```\n把值绑定到子组件模版，这样，父组件的使命就结束了。\n**Step 3**\n子组件如何接收并使用父组件传来的值呢？\n首先，引入内置的接收装饰器模型（不知道这种叫法是否严谨）\n`import {Input} from '@angular/core'`\n接着，装饰器来申请接收传进来值，声明+初始化二连：\n```\n  @Input() hero: Hero;\n```\n哦，完事了。\n\n此时，这个hero相当于一个变量，存在于子组件中，并且，通过单向绑定，动态的与父组件同步。\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/ng英雄列表学习笔记(一) 概念、文件结构、指令、事件、单双向绑定、组件通讯.md","raw":"---\ntitle:  ng英雄列表学习笔记(一) 概念、文件结构、指令、事件、单/双向绑定、组件通讯\ndate: 2018-03-25 00:00:00\ntags: [angular] \nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/80698441)\n## 为什么要学angualr(4.0+)？##\n1. 无论是轮子也好、库也好、框架也好，很大一部分初衷就是为了改善开发体验，提升开发效率，并且让代码更加优美，易于维护。从而节省出时间，将开发人员从繁忙的业务中解放。\n2. 微软收购了github，还不赶紧学ts？\n\n本文参考博客/资料：\n----------\n\n1.https://blog.csdn.net/u012967849/article/details/78767294/ （ng父子组件如何传值）\n2.https://www.angular.cn/ （ng中文官网）\n3.https://www.jianshu.com/p/a2b625a99c8d （ng的class和interface区别）\n\n本篇笔记所用环境及NG版本一览：\n----------------\n\n![NG版本](https://img-blog.csdn.net/20180614211344486?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n## 文件目录 ##\n**1.组件的文件形式/结构：**\n形如：![components](https://img-blog.csdn.net/20180614211811858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n跟单文件的.vue不一样，文件目录比较多，但是也易于查询和解耦。\n**2.打包入口：**\n app.moudle.ts为主要入口，负责装载所有的组件，以及声明一些第三方依赖的库。\n![moudle](https://img-blog.csdn.net/20180614211620198?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n如图：\n在头部 import 声明了所有组件及依赖的原生组件(from @angular/core)。\n在@NgMoudle中，import则声明了使用的第三方库。\n在 declarations 中注册了子组件。\n**app目录不仅作为整个项目的打包入口，其本身也是一个根组件**。\n**3.模块划分：**\n 1. 根组件/模块 appMoudle\n 2. 英雄列表 => heroes 组件\n 3. 当前选择的英雄=> hero-detail组件\n\n ## 新的ng语法 ##\nng新语法:\n```\n\t*代表ng指令  不用ng-if,ng-for，类似于驼峰 ngFor ngIf \n\t()代表绑定事件   原生事件绑定直接写在括号里 (click) (keydown)\n\t[]单向绑定  代表绑定属性   [name] = 'jobs' \n\t[()] 双向绑定<input [(value=\"someValue\")] type=\"text\"/> \n\t\n```\n*官方称双向绑定写法叫盒子里的香蕉？？？？？？？*\n## 父子组件状态传递  ##\n\nStep1: 父组件想要引用子组件时，不需要在ts逻辑中引用，因为本身没有像Vue那样，有 components:[ ] 这样的选项。\nStep2: 父组件中引用子组件的模版，并且单向绑定一个hero属性，这个属性来源于父组件的一个变量值。\nStep2如图所示：\n![Step2](https://img-blog.csdn.net/20180614212726956?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\nStep3: 在子组件中，通过@Input来申请接收从 父组件中传递过来的属性。直接通过@Input() varitible 来声明/初始化即可。\nStep3如图所示：\n![Step3](https://img-blog.csdn.net/20180614213345167?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n在Vue中，通常是这样做的：\n子组件声明一个props数组，来表明接收了哪几个值，然后为己所用。\nangular其实也是同理，子组件通过标签来单向绑定一个属性，并且在逻辑文件中申请接收/初始化这个属性。\n## 组件 运作/执行流程 的文字描述 ##\n\n - 列表组件渲染出Mock的数组 (列表组件 heroes 负责)\n - 为每一个渲染出的项，绑定事件，并传参 (同上)\n - 在列表组件heroes 的模版加入`<app-hero-detail [hero]=\"selectedHero\"></app-hero-detail>`，这样父组件的值已经通过单向绑定至子组件，**但接收与使用，决定权在于子组件**。（同上）\n - hero-detail组件接收父组件传递过来的数值，并在内部`import {Input} from '@angular/core'`（hero-detail组件负责）\n - 接着在export语句中，使用装饰器来声明+初始化 得到的属性` @Input() hero: Hero;`然后就可以用啦！  （hero-detail组件负责）\n\n## 整体逻辑代码 步骤 ##\n**Step 1**\n创建列表组件，使用`*ngFor`来渲染出组件，并且每个组件绑定一个点击事件，传递的值为当前循环的每一个currentValue。\n\n```\n<li \n    *ngFor=\"let thisHero of heroes\" \n    (click)=\"onSelect(thisHero)\"\n>\n</li>\n```\n在对应的.ts文件中，这个方法为：\n\n```\n//方法\n\n /*定义参数类型为Hero类型，即从hero.ts导出的类：\n   export class Hero {\n    id: number;\n    name: string;\n  }\n  并且，设定该方法没有返回值。\n  */\nonSelect(hero: Hero): void {\n\n  //动态赋值\n  this.selectedHero = hero; \n  \n //业务逻辑相关\n  this.bool = !this.bool;\n  this.isSelected =  {\n\t\t   'badge':!this.bool,\n\t\t\t'selected':this.bool\n   }\n}\n```\n这样，每个循环出的item，在点击的时候，会把自己的值传递给该方法，从而进行后续业务逻辑处理。\n**Step 2**\n在列表渲染组件（父组件）中，引入子组件模版，并且通过单向绑定传值：\n```\n<app-hero-detail [hero]=\"selectedHero\"></app-hero-detail>\n```\n把值绑定到子组件模版，这样，父组件的使命就结束了。\n**Step 3**\n子组件如何接收并使用父组件传来的值呢？\n首先，引入内置的接收装饰器模型（不知道这种叫法是否严谨）\n`import {Input} from '@angular/core'`\n接着，装饰器来申请接收传进来值，声明+初始化二连：\n```\n  @Input() hero: Hero;\n```\n哦，完事了。\n\n此时，这个hero相当于一个变量，存在于子组件中，并且，通过单向绑定，动态的与父组件同步。\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"ng英雄列表学习笔记(一) 概念、文件结构、指令、事件、单双向绑定、组件通讯","published":1,"updated":"2019-05-14T14:30:28.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaw40019ckuf8mdev2ry","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/80698441\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"为什么要学angualr-4-0-？\"><a href=\"#为什么要学angualr-4-0-？\" class=\"headerlink\" title=\"为什么要学angualr(4.0+)？\"></a>为什么要学angualr(4.0+)？</h2><ol>\n<li>无论是轮子也好、库也好、框架也好，很大一部分初衷就是为了改善开发体验，提升开发效率，并且让代码更加优美，易于维护。从而节省出时间，将开发人员从繁忙的业务中解放。</li>\n<li>微软收购了github，还不赶紧学ts？</li>\n</ol>\n<h2 id=\"本文参考博客-资料：\"><a href=\"#本文参考博客-资料：\" class=\"headerlink\" title=\"本文参考博客/资料：\"></a>本文参考博客/资料：</h2><p>1.<a href=\"https://blog.csdn.net/u012967849/article/details/78767294/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012967849/article/details/78767294/</a> （ng父子组件如何传值）<br>2.<a href=\"https://www.angular.cn/\" target=\"_blank\" rel=\"noopener\">https://www.angular.cn/</a> （ng中文官网）<br>3.<a href=\"https://www.jianshu.com/p/a2b625a99c8d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a2b625a99c8d</a> （ng的class和interface区别）</p>\n<h2 id=\"本篇笔记所用环境及NG版本一览：\"><a href=\"#本篇笔记所用环境及NG版本一览：\" class=\"headerlink\" title=\"本篇笔记所用环境及NG版本一览：\"></a>本篇笔记所用环境及NG版本一览：</h2><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614211344486?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"NG版本\" title=\"\" class=\"\">\n                <p>NG版本</p>\n            </figure>\n<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p><strong>1.组件的文件形式/结构：</strong><br>形如：<figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614211811858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"components\" title=\"\" class=\"\">\n                <p>components</p>\n            </figure><br>跟单文件的.vue不一样，文件目录比较多，但是也易于查询和解耦。<br><strong>2.打包入口：</strong><br> app.moudle.ts为主要入口，负责装载所有的组件，以及声明一些第三方依赖的库。<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614211620198?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"moudle\" title=\"\" class=\"\">\n                <p>moudle</p>\n            </figure><br>如图：<br>在头部 import 声明了所有组件及依赖的原生组件(from @angular/core)。<br>在@NgMoudle中，import则声明了使用的第三方库。<br>在 declarations 中注册了子组件。<br><strong>app目录不仅作为整个项目的打包入口，其本身也是一个根组件</strong>。<br><strong>3.模块划分：</strong></p>\n<ol>\n<li>根组件/模块 appMoudle</li>\n<li>英雄列表 =&gt; heroes 组件</li>\n<li><p>当前选择的英雄=&gt; hero-detail组件</p>\n<h2 id=\"新的ng语法\"><a href=\"#新的ng语法\" class=\"headerlink\" title=\"新的ng语法\"></a>新的ng语法</h2><p>ng新语法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*代表ng指令  不用ng-if,ng-for，类似于驼峰 ngFor ngIf </span><br><span class=\"line\">()代表绑定事件   原生事件绑定直接写在括号里 (click) (keydown)</span><br><span class=\"line\">[]单向绑定  代表绑定属性   [name] = &apos;jobs&apos; </span><br><span class=\"line\">[()] 双向绑定&lt;input [(value=&quot;someValue&quot;)] type=&quot;text&quot;/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>官方称双向绑定写法叫盒子里的香蕉？？？？？？？</em></p>\n<h2 id=\"父子组件状态传递\"><a href=\"#父子组件状态传递\" class=\"headerlink\" title=\"父子组件状态传递\"></a>父子组件状态传递</h2><p>Step1: 父组件想要引用子组件时，不需要在ts逻辑中引用，因为本身没有像Vue那样，有 components:[ ] 这样的选项。<br>Step2: 父组件中引用子组件的模版，并且单向绑定一个hero属性，这个属性来源于父组件的一个变量值。<br>Step2如图所示：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614212726956?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"Step2\" title=\"\" class=\"\">\n                <p>Step2</p>\n            </figure><br>Step3: 在子组件中，通过@Input来申请接收从 父组件中传递过来的属性。直接通过@Input() varitible 来声明/初始化即可。<br>Step3如图所示：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614213345167?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"Step3\" title=\"\" class=\"\">\n                <p>Step3</p>\n            </figure></p>\n<p>在Vue中，通常是这样做的：<br>子组件声明一个props数组，来表明接收了哪几个值，然后为己所用。<br>angular其实也是同理，子组件通过标签来单向绑定一个属性，并且在逻辑文件中申请接收/初始化这个属性。</p>\n<h2 id=\"组件-运作-执行流程-的文字描述\"><a href=\"#组件-运作-执行流程-的文字描述\" class=\"headerlink\" title=\"组件 运作/执行流程 的文字描述\"></a>组件 运作/执行流程 的文字描述</h2><ul>\n<li>列表组件渲染出Mock的数组 (列表组件 heroes 负责)</li>\n<li>为每一个渲染出的项，绑定事件，并传参 (同上)</li>\n<li>在列表组件heroes 的模版加入<code>&lt;app-hero-detail [hero]=&quot;selectedHero&quot;&gt;&lt;/app-hero-detail&gt;</code>，这样父组件的值已经通过单向绑定至子组件，<strong>但接收与使用，决定权在于子组件</strong>。（同上）</li>\n<li>hero-detail组件接收父组件传递过来的数值，并在内部<code>import {Input} from &#39;@angular/core&#39;</code>（hero-detail组件负责）</li>\n<li>接着在export语句中，使用装饰器来声明+初始化 得到的属性<code>@Input() hero: Hero;</code>然后就可以用啦！  （hero-detail组件负责）</li>\n</ul>\n<h2 id=\"整体逻辑代码-步骤\"><a href=\"#整体逻辑代码-步骤\" class=\"headerlink\" title=\"整体逻辑代码 步骤\"></a>整体逻辑代码 步骤</h2><p><strong>Step 1</strong><br>创建列表组件，使用<code>*ngFor</code>来渲染出组件，并且每个组件绑定一个点击事件，传递的值为当前循环的每一个currentValue。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li </span><br><span class=\"line\">    *ngFor=&quot;let thisHero of heroes&quot; </span><br><span class=\"line\">    (click)=&quot;onSelect(thisHero)&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n<p>在对应的.ts文件中，这个方法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//方法</span><br><span class=\"line\"></span><br><span class=\"line\"> /*定义参数类型为Hero类型，即从hero.ts导出的类：</span><br><span class=\"line\">   export class Hero &#123;</span><br><span class=\"line\">    id: number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  并且，设定该方法没有返回值。</span><br><span class=\"line\">  */</span><br><span class=\"line\">onSelect(hero: Hero): void &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  //动态赋值</span><br><span class=\"line\">  this.selectedHero = hero; </span><br><span class=\"line\">  </span><br><span class=\"line\"> //业务逻辑相关</span><br><span class=\"line\">  this.bool = !this.bool;</span><br><span class=\"line\">  this.isSelected =  &#123;</span><br><span class=\"line\">\t\t   &apos;badge&apos;:!this.bool,</span><br><span class=\"line\">\t\t\t&apos;selected&apos;:this.bool</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，每个循环出的item，在点击的时候，会把自己的值传递给该方法，从而进行后续业务逻辑处理。<br><strong>Step 2</strong><br>在列表渲染组件（父组件）中，引入子组件模版，并且通过单向绑定传值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;app-hero-detail [hero]=&quot;selectedHero&quot;&gt;&lt;/app-hero-detail&gt;</span><br></pre></td></tr></table></figure></p>\n<p>把值绑定到子组件模版，这样，父组件的使命就结束了。<br><strong>Step 3</strong><br>子组件如何接收并使用父组件传来的值呢？<br>首先，引入内置的接收装饰器模型（不知道这种叫法是否严谨）<br><code>import {Input} from &#39;@angular/core&#39;</code><br>接着，装饰器来申请接收传进来值，声明+初始化二连：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Input() hero: Hero;</span><br></pre></td></tr></table></figure></p>\n<p>哦，完事了。</p>\n<p>此时，这个hero相当于一个变量，存在于子组件中，并且，通过单向绑定，动态的与父组件同步。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/80698441\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"为什么要学angualr-4-0-？\"><a href=\"#为什么要学angualr-4-0-？\" class=\"headerlink\" title=\"为什么要学angualr(4.0+)？\"></a>为什么要学angualr(4.0+)？</h2><ol>\n<li>无论是轮子也好、库也好、框架也好，很大一部分初衷就是为了改善开发体验，提升开发效率，并且让代码更加优美，易于维护。从而节省出时间，将开发人员从繁忙的业务中解放。</li>\n<li>微软收购了github，还不赶紧学ts？</li>\n</ol>\n<h2 id=\"本文参考博客-资料：\"><a href=\"#本文参考博客-资料：\" class=\"headerlink\" title=\"本文参考博客/资料：\"></a>本文参考博客/资料：</h2><p>1.<a href=\"https://blog.csdn.net/u012967849/article/details/78767294/\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012967849/article/details/78767294/</a> （ng父子组件如何传值）<br>2.<a href=\"https://www.angular.cn/\" target=\"_blank\" rel=\"noopener\">https://www.angular.cn/</a> （ng中文官网）<br>3.<a href=\"https://www.jianshu.com/p/a2b625a99c8d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a2b625a99c8d</a> （ng的class和interface区别）</p>\n<h2 id=\"本篇笔记所用环境及NG版本一览：\"><a href=\"#本篇笔记所用环境及NG版本一览：\" class=\"headerlink\" title=\"本篇笔记所用环境及NG版本一览：\"></a>本篇笔记所用环境及NG版本一览：</h2><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614211344486?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"NG版本\" title=\"\" class=\"\">\n                <p>NG版本</p>\n            </figure>\n<h2 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h2><p><strong>1.组件的文件形式/结构：</strong><br>形如：<figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614211811858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"components\" title=\"\" class=\"\">\n                <p>components</p>\n            </figure><br>跟单文件的.vue不一样，文件目录比较多，但是也易于查询和解耦。<br><strong>2.打包入口：</strong><br> app.moudle.ts为主要入口，负责装载所有的组件，以及声明一些第三方依赖的库。<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614211620198?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"moudle\" title=\"\" class=\"\">\n                <p>moudle</p>\n            </figure><br>如图：<br>在头部 import 声明了所有组件及依赖的原生组件(from @angular/core)。<br>在@NgMoudle中，import则声明了使用的第三方库。<br>在 declarations 中注册了子组件。<br><strong>app目录不仅作为整个项目的打包入口，其本身也是一个根组件</strong>。<br><strong>3.模块划分：</strong></p>\n<ol>\n<li>根组件/模块 appMoudle</li>\n<li>英雄列表 =&gt; heroes 组件</li>\n<li><p>当前选择的英雄=&gt; hero-detail组件</p>\n<h2 id=\"新的ng语法\"><a href=\"#新的ng语法\" class=\"headerlink\" title=\"新的ng语法\"></a>新的ng语法</h2><p>ng新语法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*代表ng指令  不用ng-if,ng-for，类似于驼峰 ngFor ngIf </span><br><span class=\"line\">()代表绑定事件   原生事件绑定直接写在括号里 (click) (keydown)</span><br><span class=\"line\">[]单向绑定  代表绑定属性   [name] = &apos;jobs&apos; </span><br><span class=\"line\">[()] 双向绑定&lt;input [(value=&quot;someValue&quot;)] type=&quot;text&quot;/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>官方称双向绑定写法叫盒子里的香蕉？？？？？？？</em></p>\n<h2 id=\"父子组件状态传递\"><a href=\"#父子组件状态传递\" class=\"headerlink\" title=\"父子组件状态传递\"></a>父子组件状态传递</h2><p>Step1: 父组件想要引用子组件时，不需要在ts逻辑中引用，因为本身没有像Vue那样，有 components:[ ] 这样的选项。<br>Step2: 父组件中引用子组件的模版，并且单向绑定一个hero属性，这个属性来源于父组件的一个变量值。<br>Step2如图所示：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614212726956?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"Step2\" title=\"\" class=\"\">\n                <p>Step2</p>\n            </figure><br>Step3: 在子组件中，通过@Input来申请接收从 父组件中传递过来的属性。直接通过@Input() varitible 来声明/初始化即可。<br>Step3如图所示：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180614213345167?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"Step3\" title=\"\" class=\"\">\n                <p>Step3</p>\n            </figure></p>\n<p>在Vue中，通常是这样做的：<br>子组件声明一个props数组，来表明接收了哪几个值，然后为己所用。<br>angular其实也是同理，子组件通过标签来单向绑定一个属性，并且在逻辑文件中申请接收/初始化这个属性。</p>\n<h2 id=\"组件-运作-执行流程-的文字描述\"><a href=\"#组件-运作-执行流程-的文字描述\" class=\"headerlink\" title=\"组件 运作/执行流程 的文字描述\"></a>组件 运作/执行流程 的文字描述</h2><ul>\n<li>列表组件渲染出Mock的数组 (列表组件 heroes 负责)</li>\n<li>为每一个渲染出的项，绑定事件，并传参 (同上)</li>\n<li>在列表组件heroes 的模版加入<code>&lt;app-hero-detail [hero]=&quot;selectedHero&quot;&gt;&lt;/app-hero-detail&gt;</code>，这样父组件的值已经通过单向绑定至子组件，<strong>但接收与使用，决定权在于子组件</strong>。（同上）</li>\n<li>hero-detail组件接收父组件传递过来的数值，并在内部<code>import {Input} from &#39;@angular/core&#39;</code>（hero-detail组件负责）</li>\n<li>接着在export语句中，使用装饰器来声明+初始化 得到的属性<code>@Input() hero: Hero;</code>然后就可以用啦！  （hero-detail组件负责）</li>\n</ul>\n<h2 id=\"整体逻辑代码-步骤\"><a href=\"#整体逻辑代码-步骤\" class=\"headerlink\" title=\"整体逻辑代码 步骤\"></a>整体逻辑代码 步骤</h2><p><strong>Step 1</strong><br>创建列表组件，使用<code>*ngFor</code>来渲染出组件，并且每个组件绑定一个点击事件，传递的值为当前循环的每一个currentValue。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li </span><br><span class=\"line\">    *ngFor=&quot;let thisHero of heroes&quot; </span><br><span class=\"line\">    (click)=&quot;onSelect(thisHero)&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n<p>在对应的.ts文件中，这个方法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//方法</span><br><span class=\"line\"></span><br><span class=\"line\"> /*定义参数类型为Hero类型，即从hero.ts导出的类：</span><br><span class=\"line\">   export class Hero &#123;</span><br><span class=\"line\">    id: number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  并且，设定该方法没有返回值。</span><br><span class=\"line\">  */</span><br><span class=\"line\">onSelect(hero: Hero): void &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  //动态赋值</span><br><span class=\"line\">  this.selectedHero = hero; </span><br><span class=\"line\">  </span><br><span class=\"line\"> //业务逻辑相关</span><br><span class=\"line\">  this.bool = !this.bool;</span><br><span class=\"line\">  this.isSelected =  &#123;</span><br><span class=\"line\">\t\t   &apos;badge&apos;:!this.bool,</span><br><span class=\"line\">\t\t\t&apos;selected&apos;:this.bool</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，每个循环出的item，在点击的时候，会把自己的值传递给该方法，从而进行后续业务逻辑处理。<br><strong>Step 2</strong><br>在列表渲染组件（父组件）中，引入子组件模版，并且通过单向绑定传值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;app-hero-detail [hero]=&quot;selectedHero&quot;&gt;&lt;/app-hero-detail&gt;</span><br></pre></td></tr></table></figure></p>\n<p>把值绑定到子组件模版，这样，父组件的使命就结束了。<br><strong>Step 3</strong><br>子组件如何接收并使用父组件传来的值呢？<br>首先，引入内置的接收装饰器模型（不知道这种叫法是否严谨）<br><code>import {Input} from &#39;@angular/core&#39;</code><br>接着，装饰器来申请接收传进来值，声明+初始化二连：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Input() hero: Hero;</span><br></pre></td></tr></table></figure></p>\n<p>哦，完事了。</p>\n<p>此时，这个hero相当于一个变量，存在于子组件中，并且，通过单向绑定，动态的与父组件同步。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"rx.js将二维数据拍扁(平)","date":"2018-09-26T12:00:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/82858004)\n\n\n```javascript\n        /** \n         * 从后台返回如下格式数据 \n         * \n         * 期望数据结构： [...{ index:'', name: '', age: '' }]  该数据类型的长度为 9 (所有数据拆开的总长度)\n         */\n        const response = {\n            content: [\n                [{ index: 0, name: 'aa1', age: 11 }, { index: 0, name: 'aa2', age: 11 }, { index: 0, name: 'aa3', age: 11 }],\n                [{ index: 1, name: 'bb1', age: 12 }, { index: 1, name: 'bb2', age: 12 }, { index: 1, name: 'bb3', age: 12 }],\n                [{ index: 2, name: 'cc1', age: 13 }, { index: 2, name: 'cc2', age: 13 }, { index: 2, name: 'cc3', age: 13 }]\n \n            ],\n        };\n \n// 使用 Rx.js\n \n        of(response).pipe(\n            map(res => res.content),\n            mergeMap(arr => from(arr)),\n            mergeMap(arr => from(arr)),\n            toArray(),\n        ).subscribe(res => console.log(res));\n\n```\n最终结果：\n\n<img src=\"https://img-blog.csdn.net/20180926193747185?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"/>\n\n说明：无论嵌套多复杂，嵌套几层，都能用 opreator 给拍平，这就是纯函数强大的地方，指责单一，功能明确，代码量小。\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/rx.js将二维数据拍扁(平).md","raw":"---\ntitle:  rx.js将二维数据拍扁(平)\ndate: 2018-09-26 20:00:00\ntags: rxjs\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/82858004)\n\n\n```javascript\n        /** \n         * 从后台返回如下格式数据 \n         * \n         * 期望数据结构： [...{ index:'', name: '', age: '' }]  该数据类型的长度为 9 (所有数据拆开的总长度)\n         */\n        const response = {\n            content: [\n                [{ index: 0, name: 'aa1', age: 11 }, { index: 0, name: 'aa2', age: 11 }, { index: 0, name: 'aa3', age: 11 }],\n                [{ index: 1, name: 'bb1', age: 12 }, { index: 1, name: 'bb2', age: 12 }, { index: 1, name: 'bb3', age: 12 }],\n                [{ index: 2, name: 'cc1', age: 13 }, { index: 2, name: 'cc2', age: 13 }, { index: 2, name: 'cc3', age: 13 }]\n \n            ],\n        };\n \n// 使用 Rx.js\n \n        of(response).pipe(\n            map(res => res.content),\n            mergeMap(arr => from(arr)),\n            mergeMap(arr => from(arr)),\n            toArray(),\n        ).subscribe(res => console.log(res));\n\n```\n最终结果：\n\n<img src=\"https://img-blog.csdn.net/20180926193747185?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"/>\n\n说明：无论嵌套多复杂，嵌套几层，都能用 opreator 给拍平，这就是纯函数强大的地方，指责单一，功能明确，代码量小。\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"rx.js将二维数据拍扁(平)","published":1,"updated":"2019-05-14T14:30:28.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaw7001bckufgrs9rsu6","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/82858004\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">         * 从后台返回如下格式数据 </span></span><br><span class=\"line\"><span class=\"comment\">         * </span></span><br><span class=\"line\"><span class=\"comment\">         * 期望数据结构： [...&#123; index:'', name: '', age: '' &#125;]  该数据类型的长度为 9 (所有数据拆开的总长度)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> response = &#123;</span><br><span class=\"line\">            content: [</span><br><span class=\"line\">                [&#123; <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'aa1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">11</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'aa2'</span>, <span class=\"attr\">age</span>: <span class=\"number\">11</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'aa3'</span>, <span class=\"attr\">age</span>: <span class=\"number\">11</span> &#125;],</span><br><span class=\"line\">                [&#123; <span class=\"attr\">index</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'bb1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'bb2'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'bb3'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125;],</span><br><span class=\"line\">                [&#123; <span class=\"attr\">index</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'cc1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'cc2'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'cc3'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span> &#125;]</span><br><span class=\"line\"> </span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 使用 Rx.js</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">of</span>(response).pipe(</span><br><span class=\"line\">            map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.content),</span><br><span class=\"line\">            mergeMap(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"keyword\">from</span>(arr)),</span><br><span class=\"line\">            mergeMap(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"keyword\">from</span>(arr)),</span><br><span class=\"line\">            toArray(),</span><br><span class=\"line\">        ).subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res));</span><br></pre></td></tr></table></figure>\n<p>最终结果：</p>\n<p><img src=\"https://img-blog.csdn.net/20180926193747185?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n<p>说明：无论嵌套多复杂，嵌套几层，都能用 opreator 给拍平，这就是纯函数强大的地方，指责单一，功能明确，代码量小。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/82858004\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">         * 从后台返回如下格式数据 </span></span><br><span class=\"line\"><span class=\"comment\">         * </span></span><br><span class=\"line\"><span class=\"comment\">         * 期望数据结构： [...&#123; index:'', name: '', age: '' &#125;]  该数据类型的长度为 9 (所有数据拆开的总长度)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> response = &#123;</span><br><span class=\"line\">            content: [</span><br><span class=\"line\">                [&#123; <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'aa1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">11</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'aa2'</span>, <span class=\"attr\">age</span>: <span class=\"number\">11</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'aa3'</span>, <span class=\"attr\">age</span>: <span class=\"number\">11</span> &#125;],</span><br><span class=\"line\">                [&#123; <span class=\"attr\">index</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'bb1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'bb2'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'bb3'</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125;],</span><br><span class=\"line\">                [&#123; <span class=\"attr\">index</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'cc1'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'cc2'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span> &#125;, &#123; <span class=\"attr\">index</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'cc3'</span>, <span class=\"attr\">age</span>: <span class=\"number\">13</span> &#125;]</span><br><span class=\"line\"> </span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 使用 Rx.js</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">of</span>(response).pipe(</span><br><span class=\"line\">            map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.content),</span><br><span class=\"line\">            mergeMap(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"keyword\">from</span>(arr)),</span><br><span class=\"line\">            mergeMap(<span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> <span class=\"keyword\">from</span>(arr)),</span><br><span class=\"line\">            toArray(),</span><br><span class=\"line\">        ).subscribe(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"built_in\">console</span>.log(res));</span><br></pre></td></tr></table></figure>\n<p>最终结果：</p>\n<p><img src=\"https://img-blog.csdn.net/20180926193747185?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n<p>说明：无论嵌套多复杂，嵌套几层，都能用 opreator 给拍平，这就是纯函数强大的地方，指责单一，功能明确，代码量小。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"正则复习","date":"2019-06-20T11:56:27.000Z","reward":true,"comment":true,"_content":"本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/92743420](https://blog.csdn.net/qq_20264891/article/details/92743420)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n### 前言\n一直发现我是个野路子，在学完 TS 和 Express 后，才回过头来想巩固一下 正则 的知识，不过话说回来，有了 TS 一些可选参数，以及 后端框架的路由匹配机制后，其实对于正则的理解是有一定作用的。类比这些概念时，发现有太多太多的相似之处，下面将会例举。\n所以说，贴近标准，跟随标准（世界大厂）是最最最重要的，像小程序这样反 URL 透明可见的精神的产物，站在非商业的角度来看，确实没有任何价值。扯远了。。。\n下面开始用自己的话来进行盘点：\n### 量词\n我们在匹配字符串中某个 子段 时，需要有足够的数量去进行限制，这样才能保证匹配到的结果足够准确。\n常见的量词有：\n\n 1. **?**    => 意思为：可选 0 或者 1 ，跟 ts 函数的可选参数一样\n 2. **\\+**  => 意思为： 1个或者多个 \n 3. **\\***  =>   意思为：通配符，0个或者任意个\n \n### Range 区间 \n例如，我想匹配 1~5 个 'a' ， 用 【量词】中的哪个都不合适，这时候就应该有一个区间的概念来进行约束：\n```javascript\nconst reg = /^a{1,5}/i;\n'a'.match(reg);  // 匹配 1 个 a , [\"a\", index: 0, input: \"a\", groups: undefined]\n...\nreg.test('aaaaa'); // 匹配 5 个 ,[\"aaaaa\", index: 0, input: \"aaaaa\", groups: undefined]\nreg.test('aaaaaa'); // 只能匹配到 5 个 [\"aaaaa\", index: 0, input: \"aaaaaaaaa\", groups: undefined]\n\n```\n可见，{ } 中的边界，是数学定义上的 **左右闭合区间。**\n\n另外，还有一种区间，先看下实例：\n[a-z] 代表匹配 a-z 的小写字母，[A-Z] 匹配 A 的大写字母。这些用 “-” 来表示的字符集，都是通过 **ASCII 码** 来进行排序的。\n举个 🌰：\n```javascript\nconst reg = /([a-z][A-Z]){1,2}/;\nreg.test('aZ'); // true\nreg.test('aBcccadsadsad') // true 匹配到了一个\n```\n### 反向字符集\n例如 `[a-z]` 是匹配 a-z 的字母， 那么 `[^a-z]` 相当于不匹配小写字母。\n举个例子：\n```javascript\nconst str = `abcdef`;\n\nconst reg = /[abcde]/;   => 匹配 `abcde`， 没 `f`\nconst reg2 = /[abcde]/   => 只匹配 `f`\n```\n### 内置特殊匹配器\n为了不让广大开发者写出太过于雷人的代码，也是内置了许多匹配器：\n\n 1. \\b 匹配单词边界 \\B 匹配非单词边界\n 2. \\w 匹配字母 \\W 匹配非字母\n 3. \\d 匹配数字 \\D 匹配非数字\n 4. 其他制表符和换行符等,例如 \\r, \\t ,\\v 等\n\n\n### 贪婪和非贪婪匹配\n贪婪顾名思义，就是尽可能多的匹配。\n```javascript\n// 不贪婪\nconst exampleStr = `RegExp is very interesting!`;\n/[a-zA-Z]+?/  => 只匹配 'R'\n\n\n// 缺省则为贪婪模式\n/[a-zA-Z]+/ => 匹配 'RegExp'\n\n```\n\n\n### 四个 flag\n1. g 全局\n2. m 多行\n3. i 不分大小写\n4. y 粘性(sticky) \n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/regExp.md","raw":"---\ntitle: 正则复习 #标题\ndate: 2019-06-20 19:56:27 #创建时间\ntags: [正则] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/92743420](https://blog.csdn.net/qq_20264891/article/details/92743420)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n### 前言\n一直发现我是个野路子，在学完 TS 和 Express 后，才回过头来想巩固一下 正则 的知识，不过话说回来，有了 TS 一些可选参数，以及 后端框架的路由匹配机制后，其实对于正则的理解是有一定作用的。类比这些概念时，发现有太多太多的相似之处，下面将会例举。\n所以说，贴近标准，跟随标准（世界大厂）是最最最重要的，像小程序这样反 URL 透明可见的精神的产物，站在非商业的角度来看，确实没有任何价值。扯远了。。。\n下面开始用自己的话来进行盘点：\n### 量词\n我们在匹配字符串中某个 子段 时，需要有足够的数量去进行限制，这样才能保证匹配到的结果足够准确。\n常见的量词有：\n\n 1. **?**    => 意思为：可选 0 或者 1 ，跟 ts 函数的可选参数一样\n 2. **\\+**  => 意思为： 1个或者多个 \n 3. **\\***  =>   意思为：通配符，0个或者任意个\n \n### Range 区间 \n例如，我想匹配 1~5 个 'a' ， 用 【量词】中的哪个都不合适，这时候就应该有一个区间的概念来进行约束：\n```javascript\nconst reg = /^a{1,5}/i;\n'a'.match(reg);  // 匹配 1 个 a , [\"a\", index: 0, input: \"a\", groups: undefined]\n...\nreg.test('aaaaa'); // 匹配 5 个 ,[\"aaaaa\", index: 0, input: \"aaaaa\", groups: undefined]\nreg.test('aaaaaa'); // 只能匹配到 5 个 [\"aaaaa\", index: 0, input: \"aaaaaaaaa\", groups: undefined]\n\n```\n可见，{ } 中的边界，是数学定义上的 **左右闭合区间。**\n\n另外，还有一种区间，先看下实例：\n[a-z] 代表匹配 a-z 的小写字母，[A-Z] 匹配 A 的大写字母。这些用 “-” 来表示的字符集，都是通过 **ASCII 码** 来进行排序的。\n举个 🌰：\n```javascript\nconst reg = /([a-z][A-Z]){1,2}/;\nreg.test('aZ'); // true\nreg.test('aBcccadsadsad') // true 匹配到了一个\n```\n### 反向字符集\n例如 `[a-z]` 是匹配 a-z 的字母， 那么 `[^a-z]` 相当于不匹配小写字母。\n举个例子：\n```javascript\nconst str = `abcdef`;\n\nconst reg = /[abcde]/;   => 匹配 `abcde`， 没 `f`\nconst reg2 = /[abcde]/   => 只匹配 `f`\n```\n### 内置特殊匹配器\n为了不让广大开发者写出太过于雷人的代码，也是内置了许多匹配器：\n\n 1. \\b 匹配单词边界 \\B 匹配非单词边界\n 2. \\w 匹配字母 \\W 匹配非字母\n 3. \\d 匹配数字 \\D 匹配非数字\n 4. 其他制表符和换行符等,例如 \\r, \\t ,\\v 等\n\n\n### 贪婪和非贪婪匹配\n贪婪顾名思义，就是尽可能多的匹配。\n```javascript\n// 不贪婪\nconst exampleStr = `RegExp is very interesting!`;\n/[a-zA-Z]+?/  => 只匹配 'R'\n\n\n// 缺省则为贪婪模式\n/[a-zA-Z]+/ => 匹配 'RegExp'\n\n```\n\n\n### 四个 flag\n1. g 全局\n2. m 多行\n3. i 不分大小写\n4. y 粘性(sticky) \n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"regExp","published":1,"updated":"2019-12-13T12:33:42.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaw9001dckuf6mmk7pz5","content":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/92743420\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/92743420</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一直发现我是个野路子，在学完 TS 和 Express 后，才回过头来想巩固一下 正则 的知识，不过话说回来，有了 TS 一些可选参数，以及 后端框架的路由匹配机制后，其实对于正则的理解是有一定作用的。类比这些概念时，发现有太多太多的相似之处，下面将会例举。<br>所以说，贴近标准，跟随标准（世界大厂）是最最最重要的，像小程序这样反 URL 透明可见的精神的产物，站在非商业的角度来看，确实没有任何价值。扯远了。。。<br>下面开始用自己的话来进行盘点：</p>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p>我们在匹配字符串中某个 子段 时，需要有足够的数量去进行限制，这样才能保证匹配到的结果足够准确。<br>常见的量词有：</p>\n<ol>\n<li><strong>?</strong>    =&gt; 意思为：可选 0 或者 1 ，跟 ts 函数的可选参数一样</li>\n<li><strong>+</strong>  =&gt; 意思为： 1个或者多个 </li>\n<li><strong>*</strong>  =&gt;   意思为：通配符，0个或者任意个</li>\n</ol>\n<h3 id=\"Range-区间\"><a href=\"#Range-区间\" class=\"headerlink\" title=\"Range 区间\"></a>Range 区间</h3><p>例如，我想匹配 1~5 个 ‘a’ ， 用 【量词】中的哪个都不合适，这时候就应该有一个区间的概念来进行约束：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^a&#123;1,5&#125;/i</span>;</span><br><span class=\"line\"><span class=\"string\">'a'</span>.match(reg);  <span class=\"comment\">// 匹配 1 个 a , [\"a\", index: 0, input: \"a\", groups: undefined]</span></span><br><span class=\"line\">...</span><br><span class=\"line\">reg.test(<span class=\"string\">'aaaaa'</span>); <span class=\"comment\">// 匹配 5 个 ,[\"aaaaa\", index: 0, input: \"aaaaa\", groups: undefined]</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'aaaaaa'</span>); <span class=\"comment\">// 只能匹配到 5 个 [\"aaaaa\", index: 0, input: \"aaaaaaaaa\", groups: undefined]</span></span><br></pre></td></tr></table></figure></p>\n<p>可见，{ } 中的边界，是数学定义上的 <strong>左右闭合区间。</strong></p>\n<p>另外，还有一种区间，先看下实例：<br>[a-z] 代表匹配 a-z 的小写字母，[A-Z] 匹配 A 的大写字母。这些用 “-” 来表示的字符集，都是通过 <strong>ASCII 码</strong> 来进行排序的。<br>举个 🌰：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/([a-z][A-Z])&#123;1,2&#125;/</span>;</span><br><span class=\"line\">reg.test(<span class=\"string\">'aZ'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'aBcccadsadsad'</span>) <span class=\"comment\">// true 匹配到了一个</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"反向字符集\"><a href=\"#反向字符集\" class=\"headerlink\" title=\"反向字符集\"></a>反向字符集</h3><p>例如 <code>[a-z]</code> 是匹配 a-z 的字母， 那么 <code>[^a-z]</code> 相当于不匹配小写字母。<br>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">`abcdef`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/[abcde]/</span>;   =&gt; 匹配 <span class=\"string\">`abcde`</span>， 没 <span class=\"string\">`f`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reg2 = <span class=\"regexp\">/[abcde]/</span>   =&gt; 只匹配 <span class=\"string\">`f`</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"内置特殊匹配器\"><a href=\"#内置特殊匹配器\" class=\"headerlink\" title=\"内置特殊匹配器\"></a>内置特殊匹配器</h3><p>为了不让广大开发者写出太过于雷人的代码，也是内置了许多匹配器：</p>\n<ol>\n<li>\\b 匹配单词边界 \\B 匹配非单词边界</li>\n<li>\\w 匹配字母 \\W 匹配非字母</li>\n<li>\\d 匹配数字 \\D 匹配非数字</li>\n<li>其他制表符和换行符等,例如 \\r, \\t ,\\v 等</li>\n</ol>\n<h3 id=\"贪婪和非贪婪匹配\"><a href=\"#贪婪和非贪婪匹配\" class=\"headerlink\" title=\"贪婪和非贪婪匹配\"></a>贪婪和非贪婪匹配</h3><p>贪婪顾名思义，就是尽可能多的匹配。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不贪婪</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> exampleStr = <span class=\"string\">`RegExp is very interesting!`</span>;</span><br><span class=\"line\">/[a-zA-Z]+?<span class=\"regexp\">/  =&gt; 只匹配 'R'</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 缺省则为贪婪模式</span></span><br><span class=\"line\"><span class=\"regexp\">/</span>[a-zA-Z]+<span class=\"regexp\">/ =&gt; 匹配 'RegExp'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四个-flag\"><a href=\"#四个-flag\" class=\"headerlink\" title=\"四个 flag\"></a>四个 flag</h3><ol>\n<li>g 全局</li>\n<li>m 多行</li>\n<li>i 不分大小写</li>\n<li>y 粘性(sticky) </li>\n</ol>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/92743420\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/92743420</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一直发现我是个野路子，在学完 TS 和 Express 后，才回过头来想巩固一下 正则 的知识，不过话说回来，有了 TS 一些可选参数，以及 后端框架的路由匹配机制后，其实对于正则的理解是有一定作用的。类比这些概念时，发现有太多太多的相似之处，下面将会例举。<br>所以说，贴近标准，跟随标准（世界大厂）是最最最重要的，像小程序这样反 URL 透明可见的精神的产物，站在非商业的角度来看，确实没有任何价值。扯远了。。。<br>下面开始用自己的话来进行盘点：</p>\n<h3 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h3><p>我们在匹配字符串中某个 子段 时，需要有足够的数量去进行限制，这样才能保证匹配到的结果足够准确。<br>常见的量词有：</p>\n<ol>\n<li><strong>?</strong>    =&gt; 意思为：可选 0 或者 1 ，跟 ts 函数的可选参数一样</li>\n<li><strong>+</strong>  =&gt; 意思为： 1个或者多个 </li>\n<li><strong>*</strong>  =&gt;   意思为：通配符，0个或者任意个</li>\n</ol>\n<h3 id=\"Range-区间\"><a href=\"#Range-区间\" class=\"headerlink\" title=\"Range 区间\"></a>Range 区间</h3><p>例如，我想匹配 1~5 个 ‘a’ ， 用 【量词】中的哪个都不合适，这时候就应该有一个区间的概念来进行约束：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/^a&#123;1,5&#125;/i</span>;</span><br><span class=\"line\"><span class=\"string\">'a'</span>.match(reg);  <span class=\"comment\">// 匹配 1 个 a , [\"a\", index: 0, input: \"a\", groups: undefined]</span></span><br><span class=\"line\">...</span><br><span class=\"line\">reg.test(<span class=\"string\">'aaaaa'</span>); <span class=\"comment\">// 匹配 5 个 ,[\"aaaaa\", index: 0, input: \"aaaaa\", groups: undefined]</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'aaaaaa'</span>); <span class=\"comment\">// 只能匹配到 5 个 [\"aaaaa\", index: 0, input: \"aaaaaaaaa\", groups: undefined]</span></span><br></pre></td></tr></table></figure></p>\n<p>可见，{ } 中的边界，是数学定义上的 <strong>左右闭合区间。</strong></p>\n<p>另外，还有一种区间，先看下实例：<br>[a-z] 代表匹配 a-z 的小写字母，[A-Z] 匹配 A 的大写字母。这些用 “-” 来表示的字符集，都是通过 <strong>ASCII 码</strong> 来进行排序的。<br>举个 🌰：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/([a-z][A-Z])&#123;1,2&#125;/</span>;</span><br><span class=\"line\">reg.test(<span class=\"string\">'aZ'</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">reg.test(<span class=\"string\">'aBcccadsadsad'</span>) <span class=\"comment\">// true 匹配到了一个</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"反向字符集\"><a href=\"#反向字符集\" class=\"headerlink\" title=\"反向字符集\"></a>反向字符集</h3><p>例如 <code>[a-z]</code> 是匹配 a-z 的字母， 那么 <code>[^a-z]</code> 相当于不匹配小写字母。<br>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">`abcdef`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reg = <span class=\"regexp\">/[abcde]/</span>;   =&gt; 匹配 <span class=\"string\">`abcde`</span>， 没 <span class=\"string\">`f`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reg2 = <span class=\"regexp\">/[abcde]/</span>   =&gt; 只匹配 <span class=\"string\">`f`</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"内置特殊匹配器\"><a href=\"#内置特殊匹配器\" class=\"headerlink\" title=\"内置特殊匹配器\"></a>内置特殊匹配器</h3><p>为了不让广大开发者写出太过于雷人的代码，也是内置了许多匹配器：</p>\n<ol>\n<li>\\b 匹配单词边界 \\B 匹配非单词边界</li>\n<li>\\w 匹配字母 \\W 匹配非字母</li>\n<li>\\d 匹配数字 \\D 匹配非数字</li>\n<li>其他制表符和换行符等,例如 \\r, \\t ,\\v 等</li>\n</ol>\n<h3 id=\"贪婪和非贪婪匹配\"><a href=\"#贪婪和非贪婪匹配\" class=\"headerlink\" title=\"贪婪和非贪婪匹配\"></a>贪婪和非贪婪匹配</h3><p>贪婪顾名思义，就是尽可能多的匹配。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不贪婪</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> exampleStr = <span class=\"string\">`RegExp is very interesting!`</span>;</span><br><span class=\"line\">/[a-zA-Z]+?<span class=\"regexp\">/  =&gt; 只匹配 'R'</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 缺省则为贪婪模式</span></span><br><span class=\"line\"><span class=\"regexp\">/</span>[a-zA-Z]+<span class=\"regexp\">/ =&gt; 匹配 'RegExp'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四个-flag\"><a href=\"#四个-flag\" class=\"headerlink\" title=\"四个 flag\"></a>四个 flag</h3><ol>\n<li>g 全局</li>\n<li>m 多行</li>\n<li>i 不分大小写</li>\n<li>y 粘性(sticky) </li>\n</ol>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"使用 Travis-CI 持续集成部署 HEXO 博客项目","date":"2018-08-29T07:21:08.000Z","reward":true,"comment":true,"_content":"\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/82183614)\n\n## 持续集成的概念 ##\n现在前端项目都是模块化开发，需要大量的 npm install ,编译等环节，除去在开发环节中使用诸如 webpack 这样的自动化工具，在部署的时候，也可以使用 Travis 来提升部署效率。\n持续集成，相当于将环境搭建在云端，每次只需提交代码到对应的分支，就会触发 CI 自动构建，其中构建过程中的指令都可以指定。\n\n## 准备工作 ##\n\n - **已经有 HEXO 搭建的博客，并且源码存放在 HEXO 项目的分支上(分支名字随便起，不是 master 就行)。**\n 如图：\n   ![部署](https://img-blog.csdn.net/20180829150457739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n   \n - **熟悉 HEXO 的用法及基本指令，例如**\n\n```\n$ hexo g // 构建\n$ hexo clean // 清除已构建的资源\n$ hexo s // 起服务\n```\n## 持续集成部署 ##\n\n - 登录[https://travis-ci.org/](https://travis-ci.org/)，使用github账号登录。\n   \n - 找到自己的 HEXO 项目：\n   ![HEXO项目](https://img-blog.csdn.net/20180829150920443?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n - 设置选项\n\n在github添加Access Token，在右上角账号的settings->Personal access tokens.点击generate new token来生成新token\n选择仓库权限就可以。\n![get token](https://img-blog.csdn.net/20180829151058290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n除了 “删库”。其他权限都给上：\n![权限分配](https://img-blog.csdn.net/20180829151158858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n*(生成之后一定要保存好，因为只会出现一次，丢失了就只能再重新生成了。)*\n\n - 回到Travis官网，在设置中填入刚复制的token，取一个名字，这个名字需要写到下面的配置文件中\n![添加 token](https://img-blog.csdn.net/20180829151351186?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n - 在你的hexo项目的 **分支中** 添加配置文件.travis.yml，并且**放在 HEXO 源码分支的根目录下**如下：\n \n![.travis.yml](https://img-blog.csdn.net/20180829153110581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n```\nlanguage: node_js\nnode_js: stable\n\ninstall:\n  - npm install\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  - git init\n  - git config user.name \"ZQ-jhon\"\n  - git config user.email \"350037310@qq.com\"\n  - git add .\n  - git commit -m \"Update docs with TRAVIS-CI.\"\n  - `git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master`\n  \nbranches:\n  only:\n    - hexo\nenv:\n global:\n   - GH_REF: github.com/ZQ-jhon/ZQ-jhon.github.io.git\n             ```\n\n你需要修改的是 user.name，user.email，以及在 GH_REF 中填写你自己的仓库中该项目的地址( 浏览器 url 自己找规律 )。\n要使用https协议的仓库地址，使用ssh仓库地址会失败。\n注意这一行`git push --force --quiet \"https://${githubblog}@${GH_REF}\"` 中的githubblog就是你刚在token那里取的 Token 字段，key 要对应上。\n\n配置完成后推送到仓库中，我们就能看到网站中在部署了。\n\n - 展示：\n   我push了一个新文件，触发了自动构建，这里可以看到构建过程，其实跟我们本地跑 npm install ... 那些流程是一样的：\n   ![构建过程](https://img-blog.csdn.net/20180829152604244?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n ![部署成功](https://img-blog.csdn.net/20180829151945335?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n \n - 参考：\n [https://www.jianshu.com/p/5691815b81b6](https://www.jianshu.com/p/5691815b81b6)\n [https://blog.csdn.net/woblog/article/details/51319364](https://blog.csdn.net/woblog/article/details\n <b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/使用 Travis-CI 持续集成部署 HEXO 博客项目.md","raw":"\n---\ntitle: 使用 Travis-CI 持续集成部署 HEXO 博客项目\ndate: 2018-08-29 15:21:08\ntags: [Travis-CI, Hexo]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/82183614)\n\n## 持续集成的概念 ##\n现在前端项目都是模块化开发，需要大量的 npm install ,编译等环节，除去在开发环节中使用诸如 webpack 这样的自动化工具，在部署的时候，也可以使用 Travis 来提升部署效率。\n持续集成，相当于将环境搭建在云端，每次只需提交代码到对应的分支，就会触发 CI 自动构建，其中构建过程中的指令都可以指定。\n\n## 准备工作 ##\n\n - **已经有 HEXO 搭建的博客，并且源码存放在 HEXO 项目的分支上(分支名字随便起，不是 master 就行)。**\n 如图：\n   ![部署](https://img-blog.csdn.net/20180829150457739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n   \n - **熟悉 HEXO 的用法及基本指令，例如**\n\n```\n$ hexo g // 构建\n$ hexo clean // 清除已构建的资源\n$ hexo s // 起服务\n```\n## 持续集成部署 ##\n\n - 登录[https://travis-ci.org/](https://travis-ci.org/)，使用github账号登录。\n   \n - 找到自己的 HEXO 项目：\n   ![HEXO项目](https://img-blog.csdn.net/20180829150920443?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n - 设置选项\n\n在github添加Access Token，在右上角账号的settings->Personal access tokens.点击generate new token来生成新token\n选择仓库权限就可以。\n![get token](https://img-blog.csdn.net/20180829151058290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n除了 “删库”。其他权限都给上：\n![权限分配](https://img-blog.csdn.net/20180829151158858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n*(生成之后一定要保存好，因为只会出现一次，丢失了就只能再重新生成了。)*\n\n - 回到Travis官网，在设置中填入刚复制的token，取一个名字，这个名字需要写到下面的配置文件中\n![添加 token](https://img-blog.csdn.net/20180829151351186?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n - 在你的hexo项目的 **分支中** 添加配置文件.travis.yml，并且**放在 HEXO 源码分支的根目录下**如下：\n \n![.travis.yml](https://img-blog.csdn.net/20180829153110581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n```\nlanguage: node_js\nnode_js: stable\n\ninstall:\n  - npm install\n\nscript:\n  - hexo g\n\nafter_script:\n  - cd ./public\n  - git init\n  - git config user.name \"ZQ-jhon\"\n  - git config user.email \"350037310@qq.com\"\n  - git add .\n  - git commit -m \"Update docs with TRAVIS-CI.\"\n  - `git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master`\n  \nbranches:\n  only:\n    - hexo\nenv:\n global:\n   - GH_REF: github.com/ZQ-jhon/ZQ-jhon.github.io.git\n             ```\n\n你需要修改的是 user.name，user.email，以及在 GH_REF 中填写你自己的仓库中该项目的地址( 浏览器 url 自己找规律 )。\n要使用https协议的仓库地址，使用ssh仓库地址会失败。\n注意这一行`git push --force --quiet \"https://${githubblog}@${GH_REF}\"` 中的githubblog就是你刚在token那里取的 Token 字段，key 要对应上。\n\n配置完成后推送到仓库中，我们就能看到网站中在部署了。\n\n - 展示：\n   我push了一个新文件，触发了自动构建，这里可以看到构建过程，其实跟我们本地跑 npm install ... 那些流程是一样的：\n   ![构建过程](https://img-blog.csdn.net/20180829152604244?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n ![部署成功](https://img-blog.csdn.net/20180829151945335?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n \n - 参考：\n [https://www.jianshu.com/p/5691815b81b6](https://www.jianshu.com/p/5691815b81b6)\n [https://blog.csdn.net/woblog/article/details/51319364](https://blog.csdn.net/woblog/article/details\n <b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"使用 Travis-CI 持续集成部署 HEXO 博客项目","published":1,"updated":"2019-12-13T12:33:42.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawb001fckufuc7zvf9f","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/82183614\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"持续集成的概念\"><a href=\"#持续集成的概念\" class=\"headerlink\" title=\"持续集成的概念\"></a>持续集成的概念</h2><p>现在前端项目都是模块化开发，需要大量的 npm install ,编译等环节，除去在开发环节中使用诸如 webpack 这样的自动化工具，在部署的时候，也可以使用 Travis 来提升部署效率。<br>持续集成，相当于将环境搭建在云端，每次只需提交代码到对应的分支，就会触发 CI 自动构建，其中构建过程中的指令都可以指定。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><p><strong>已经有 HEXO 搭建的博客，并且源码存放在 HEXO 项目的分支上(分支名字随便起，不是 master 就行)。</strong><br>如图：<br><img src=\"https://img-blog.csdn.net/20180829150457739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"部署\"></p>\n</li>\n<li><p><strong>熟悉 HEXO 的用法及基本指令，例如</strong></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g // 构建</span><br><span class=\"line\">$ hexo clean // 清除已构建的资源</span><br><span class=\"line\">$ hexo s // 起服务</span><br></pre></td></tr></table></figure>\n<h2 id=\"持续集成部署\"><a href=\"#持续集成部署\" class=\"headerlink\" title=\"持续集成部署\"></a>持续集成部署</h2><ul>\n<li><p>登录<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">https://travis-ci.org/</a>，使用github账号登录。</p>\n</li>\n<li><p>找到自己的 HEXO 项目：<br><img src=\"https://img-blog.csdn.net/20180829150920443?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"HEXO项目\"></p>\n</li>\n<li>设置选项</li>\n</ul>\n<p>在github添加Access Token，在右上角账号的settings-&gt;Personal access tokens.点击generate new token来生成新token<br>选择仓库权限就可以。<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180829151058290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"get token\" title=\"\" class=\"\">\n                <p>get token</p>\n            </figure></p>\n<p>除了 “删库”。其他权限都给上：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180829151158858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"权限分配\" title=\"\" class=\"\">\n                <p>权限分配</p>\n            </figure></p>\n<p><em>(生成之后一定要保存好，因为只会出现一次，丢失了就只能再重新生成了。)</em></p>\n<ul>\n<li>回到Travis官网，在设置中填入刚复制的token，取一个名字，这个名字需要写到下面的配置文件中<figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180829151351186?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"添加 token\" title=\"\" class=\"\">\n                <p>添加 token</p>\n            </figure></li>\n<li>在你的hexo项目的 <strong>分支中</strong> 添加配置文件.travis.yml，并且<strong>放在 HEXO 源码分支的根目录下</strong>如下：</li>\n</ul>\n<p><img src=\"https://img-blog.csdn.net/20180829153110581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\".travis.yml\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js: stable</span><br><span class=\"line\"></span><br><span class=\"line\">install:</span><br><span class=\"line\">  - npm install</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  - cd ./public</span><br><span class=\"line\">  - git init</span><br><span class=\"line\">  - git config user.name &quot;ZQ-jhon&quot;</span><br><span class=\"line\">  - git config user.email &quot;350037310@qq.com&quot;</span><br><span class=\"line\">  - git add .</span><br><span class=\"line\">  - git commit -m &quot;Update docs with TRAVIS-CI.&quot;</span><br><span class=\"line\">  - `git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master`</span><br><span class=\"line\">  </span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - hexo</span><br><span class=\"line\">env:</span><br><span class=\"line\"> global:</span><br><span class=\"line\">   - GH_REF: github.com/ZQ-jhon/ZQ-jhon.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>你需要修改的是 user.name，user.email，以及在 GH_REF 中填写你自己的仓库中该项目的地址( 浏览器 url 自己找规律 )。<br>要使用https协议的仓库地址，使用ssh仓库地址会失败。<br>注意这一行<code>git push --force --quiet &quot;https://${githubblog}@${GH_REF}&quot;</code> 中的githubblog就是你刚在token那里取的 Token 字段，key 要对应上。</p>\n<p>配置完成后推送到仓库中，我们就能看到网站中在部署了。</p>\n<ul>\n<li><p>展示：<br>我push了一个新文件，触发了自动构建，这里可以看到构建过程，其实跟我们本地跑 npm install … 那些流程是一样的：<br><img src=\"https://img-blog.csdn.net/20180829152604244?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"构建过程\"></p>\n<figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180829151945335?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"部署成功\" title=\"\" class=\"\">\n                <p>部署成功</p>\n            </figure>\n</li>\n<li><p>参考：<br><a href=\"https://www.jianshu.com/p/5691815b81b6\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5691815b81b6</a><br>[<a href=\"https://blog.csdn.net/woblog/article/details/51319364]\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/woblog/article/details/51319364]</a>(<a href=\"https://blog.csdn.net/woblog/article/details\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/woblog/article/details</a><br><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/82183614\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"持续集成的概念\"><a href=\"#持续集成的概念\" class=\"headerlink\" title=\"持续集成的概念\"></a>持续集成的概念</h2><p>现在前端项目都是模块化开发，需要大量的 npm install ,编译等环节，除去在开发环节中使用诸如 webpack 这样的自动化工具，在部署的时候，也可以使用 Travis 来提升部署效率。<br>持续集成，相当于将环境搭建在云端，每次只需提交代码到对应的分支，就会触发 CI 自动构建，其中构建过程中的指令都可以指定。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><p><strong>已经有 HEXO 搭建的博客，并且源码存放在 HEXO 项目的分支上(分支名字随便起，不是 master 就行)。</strong><br>如图：<br><img src=\"https://img-blog.csdn.net/20180829150457739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"部署\"></p>\n</li>\n<li><p><strong>熟悉 HEXO 的用法及基本指令，例如</strong></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g // 构建</span><br><span class=\"line\">$ hexo clean // 清除已构建的资源</span><br><span class=\"line\">$ hexo s // 起服务</span><br></pre></td></tr></table></figure>\n<h2 id=\"持续集成部署\"><a href=\"#持续集成部署\" class=\"headerlink\" title=\"持续集成部署\"></a>持续集成部署</h2><ul>\n<li><p>登录<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">https://travis-ci.org/</a>，使用github账号登录。</p>\n</li>\n<li><p>找到自己的 HEXO 项目：<br><img src=\"https://img-blog.csdn.net/20180829150920443?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"HEXO项目\"></p>\n</li>\n<li>设置选项</li>\n</ul>\n<p>在github添加Access Token，在右上角账号的settings-&gt;Personal access tokens.点击generate new token来生成新token<br>选择仓库权限就可以。<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180829151058290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"get token\" title=\"\" class=\"\">\n                <p>get token</p>\n            </figure></p>\n<p>除了 “删库”。其他权限都给上：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180829151158858?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"权限分配\" title=\"\" class=\"\">\n                <p>权限分配</p>\n            </figure></p>\n<p><em>(生成之后一定要保存好，因为只会出现一次，丢失了就只能再重新生成了。)</em></p>\n<ul>\n<li>回到Travis官网，在设置中填入刚复制的token，取一个名字，这个名字需要写到下面的配置文件中<figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180829151351186?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"添加 token\" title=\"\" class=\"\">\n                <p>添加 token</p>\n            </figure></li>\n<li>在你的hexo项目的 <strong>分支中</strong> 添加配置文件.travis.yml，并且<strong>放在 HEXO 源码分支的根目录下</strong>如下：</li>\n</ul>\n<p><img src=\"https://img-blog.csdn.net/20180829153110581?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\".travis.yml\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js: stable</span><br><span class=\"line\"></span><br><span class=\"line\">install:</span><br><span class=\"line\">  - npm install</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  - cd ./public</span><br><span class=\"line\">  - git init</span><br><span class=\"line\">  - git config user.name &quot;ZQ-jhon&quot;</span><br><span class=\"line\">  - git config user.email &quot;350037310@qq.com&quot;</span><br><span class=\"line\">  - git add .</span><br><span class=\"line\">  - git commit -m &quot;Update docs with TRAVIS-CI.&quot;</span><br><span class=\"line\">  - `git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master`</span><br><span class=\"line\">  </span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - hexo</span><br><span class=\"line\">env:</span><br><span class=\"line\"> global:</span><br><span class=\"line\">   - GH_REF: github.com/ZQ-jhon/ZQ-jhon.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>你需要修改的是 user.name，user.email，以及在 GH_REF 中填写你自己的仓库中该项目的地址( 浏览器 url 自己找规律 )。<br>要使用https协议的仓库地址，使用ssh仓库地址会失败。<br>注意这一行<code>git push --force --quiet &quot;https://${githubblog}@${GH_REF}&quot;</code> 中的githubblog就是你刚在token那里取的 Token 字段，key 要对应上。</p>\n<p>配置完成后推送到仓库中，我们就能看到网站中在部署了。</p>\n<ul>\n<li><p>展示：<br>我push了一个新文件，触发了自动构建，这里可以看到构建过程，其实跟我们本地跑 npm install … 那些流程是一样的：<br><img src=\"https://img-blog.csdn.net/20180829152604244?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"构建过程\"></p>\n<figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180829151945335?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"部署成功\" title=\"\" class=\"\">\n                <p>部署成功</p>\n            </figure>\n</li>\n<li><p>参考：<br><a href=\"https://www.jianshu.com/p/5691815b81b6\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5691815b81b6</a><br>[<a href=\"https://blog.csdn.net/woblog/article/details/51319364]\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/woblog/article/details/51319364]</a>(<a href=\"https://blog.csdn.net/woblog/article/details\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/woblog/article/details</a><br><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n</li>\n</ul>\n"},{"title":"关于jQuery中scrollTop中的一些兼容问题。","date":"2017-12-13T05:25:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78790869)\n\n最近在做一个响应式的页面，需要有按钮来实现点击回到页头及点击回到页尾的功能。\n在使用\n\n```\n$('#btn').click(function(){\n   $(body).animate({\n\t scrollTop:0\n   },speed);\n});\n\n//发现，该功能只在IE与FireFox下有用，Chrome内核无效。\n\n```\n![这里写图片描述](http://files.jb51.net/file_images/article/201512/2015123120741782.png?201511312749)\n即：\n\n选择器为body时：FireFox无效，Chrome有效 \n选择器为html时：Chrome有效，FireFox无效\n\n因此，在编写代码的时候，只要进行双重选择即可兼容：\n\n```\n$('#btn').on('click', function() {\n\t\t\t\tvar speed = 400; //滑动的速度\n\t\t\t\t$('html,body').animate({\n\t\t\t\t\tscrollTop: 0\n\t\t\t\t}, speed);\n\t\t\t\treturn false;\n\t\t\t});\n```\n经测试，在IE(9及以上),FireFox及Chome浏览器下，均能正常使用该功能。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/关于jQuery中scrollTop中的一些兼容问题.md","raw":"---\ntitle: 关于jQuery中scrollTop中的一些兼容问题。\ndate: 2017-12-13 13:25:00\ntags: jquery\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78790869)\n\n最近在做一个响应式的页面，需要有按钮来实现点击回到页头及点击回到页尾的功能。\n在使用\n\n```\n$('#btn').click(function(){\n   $(body).animate({\n\t scrollTop:0\n   },speed);\n});\n\n//发现，该功能只在IE与FireFox下有用，Chrome内核无效。\n\n```\n![这里写图片描述](http://files.jb51.net/file_images/article/201512/2015123120741782.png?201511312749)\n即：\n\n选择器为body时：FireFox无效，Chrome有效 \n选择器为html时：Chrome有效，FireFox无效\n\n因此，在编写代码的时候，只要进行双重选择即可兼容：\n\n```\n$('#btn').on('click', function() {\n\t\t\t\tvar speed = 400; //滑动的速度\n\t\t\t\t$('html,body').animate({\n\t\t\t\t\tscrollTop: 0\n\t\t\t\t}, speed);\n\t\t\t\treturn false;\n\t\t\t});\n```\n经测试，在IE(9及以上),FireFox及Chome浏览器下，均能正常使用该功能。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"关于jQuery中scrollTop中的一些兼容问题","published":1,"updated":"2019-05-14T14:30:28.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawc001hckuf35t6q00e","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78790869\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>最近在做一个响应式的页面，需要有按钮来实现点击回到页头及点击回到页尾的功能。<br>在使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#btn&apos;).click(function()&#123;</span><br><span class=\"line\">   $(body).animate(&#123;</span><br><span class=\"line\">\t scrollTop:0</span><br><span class=\"line\">   &#125;,speed);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//发现，该功能只在IE与FireFox下有用，Chrome内核无效。</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://files.jb51.net/file_images/article/201512/2015123120741782.png?201511312749\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>即：</p>\n<p>选择器为body时：FireFox无效，Chrome有效<br>选择器为html时：Chrome有效，FireFox无效</p>\n<p>因此，在编写代码的时候，只要进行双重选择即可兼容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#btn&apos;).on(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">\t\t\t\tvar speed = 400; //滑动的速度</span><br><span class=\"line\">\t\t\t\t$(&apos;html,body&apos;).animate(&#123;</span><br><span class=\"line\">\t\t\t\t\tscrollTop: 0</span><br><span class=\"line\">\t\t\t\t&#125;, speed);</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">\t\t\t&#125;);</span><br></pre></td></tr></table></figure>\n<p>经测试，在IE(9及以上),FireFox及Chome浏览器下，均能正常使用该功能。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78790869\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>最近在做一个响应式的页面，需要有按钮来实现点击回到页头及点击回到页尾的功能。<br>在使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#btn&apos;).click(function()&#123;</span><br><span class=\"line\">   $(body).animate(&#123;</span><br><span class=\"line\">\t scrollTop:0</span><br><span class=\"line\">   &#125;,speed);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//发现，该功能只在IE与FireFox下有用，Chrome内核无效。</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://files.jb51.net/file_images/article/201512/2015123120741782.png?201511312749\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>即：</p>\n<p>选择器为body时：FireFox无效，Chrome有效<br>选择器为html时：Chrome有效，FireFox无效</p>\n<p>因此，在编写代码的时候，只要进行双重选择即可兼容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#btn&apos;).on(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">\t\t\t\tvar speed = 400; //滑动的速度</span><br><span class=\"line\">\t\t\t\t$(&apos;html,body&apos;).animate(&#123;</span><br><span class=\"line\">\t\t\t\t\tscrollTop: 0</span><br><span class=\"line\">\t\t\t\t&#125;, speed);</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">\t\t\t&#125;);</span><br></pre></td></tr></table></figure>\n<p>经测试，在IE(9及以上),FireFox及Chome浏览器下，均能正常使用该功能。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"关于CSS3呼吸效果的探究","date":"2018-01-17T03:18:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78949964)\n\n## 一、效果预览 ##\n![这里写图片描述](http://img.blog.csdn.net/20180102103428658?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如图所示，鼠标移动上去，图片会向右上角抖动，鼠标离开，图片恢复原状。\n\n## 二、方案选择 ##\n刚刚接触到这个效果的时候，我还以为是采用放大效果来实现的，即scale:1.2诸如此类的代码，结果不然。\n\n这个效果的实现，如果采用jquery的方案，直接写个动画即可。\n\n```\n//先设定好position:relative;\n$('img:hover').animate({'left':'10px','bottom':'10px'});\n```\n假如追根溯源，还是使用的CSS3的动画。\n首先自定义一个动画：\n\n```\n@keyframes testAnimate{\n\nfrom{position: relative;bottom: 0;left: 0;}\n\nto{position: relative;bottom: 20px;left: 30px;border: 5px solid #999;}\n\n}\n```\n这个动画定义了一个名为：testAnimate的位置过渡动画，从相对位置(0,0)，变到相对位置 (30px,20px)，且终态时，增加了一个5px的边框。\n\n接着，我们在测试的图片用例上来引入动画：\n\n```\nimg:hover{\nanimation:testAnimate 1s;\n-webkit-animation:testAnimate  1s;\n-moz-animation:testAnimate  1s;\n-o-animation:testAnimate  1s;\n-ms-animation:testAnimate 1s;\n}\n//整个动画1s完成，并设置了浏览器兼容\n```\n效果如下：\n![这里写图片描述](http://img.blog.csdn.net/20180102110628693?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可能在网页上显示的不尽人意，这里面存在一个问题，当鼠标移入图片，并且悬停不动时，图片会自动回复到动画之前的状态，这就感觉像拖动一个东西，拖到一半，东西自己滑走了，好在CSS3里面有了现成的解决方案：\n\n```\nimg:hover{\nanimation-fill-mode: forwards;\n-ms-animation-fill-mode:forwards;//兼容IE  xxxxxx  \n-webkit-animation-fill-mode:forwards;//兼容Chrome xxxxxx\n-moz-animation-fill-mode:forwards;//兼容FireFox xxxxx\n-o-animation-fill-mode:forwards;//兼容opear xxxxxx\n}\n```\n这样，当鼠标移入，只要不松开，图片就会停留在动画的100%状态，而不会回滚到动画为0%的状态；当鼠标移出图片，动画结束，方回到初始状态。\n## 三、分析归纳 ##\n众所周知，jquery封装的js库，其中的动画部分来源于CSS3，作为原生的CSS，其功能不可小觑，而且相当于jquery的实现方法，这种方法定义起来更加的个性化，而且不用引入额外的js库，很省带宽。但缺点就是兼容性差，比起第三方封装的Animation.js库，兼容性不行\n\n预览效果参见：news.lanzhou.cn/system/2017/12/29/011485365.shtml 其中的【微说图解】栏目。\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/关于CSS3呼吸效果的探究.md","raw":"---\ntitle: 关于CSS3呼吸效果的探究 \ndate: 2018-01-17 11:18:00\ntags: css3\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78949964)\n\n## 一、效果预览 ##\n![这里写图片描述](http://img.blog.csdn.net/20180102103428658?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如图所示，鼠标移动上去，图片会向右上角抖动，鼠标离开，图片恢复原状。\n\n## 二、方案选择 ##\n刚刚接触到这个效果的时候，我还以为是采用放大效果来实现的，即scale:1.2诸如此类的代码，结果不然。\n\n这个效果的实现，如果采用jquery的方案，直接写个动画即可。\n\n```\n//先设定好position:relative;\n$('img:hover').animate({'left':'10px','bottom':'10px'});\n```\n假如追根溯源，还是使用的CSS3的动画。\n首先自定义一个动画：\n\n```\n@keyframes testAnimate{\n\nfrom{position: relative;bottom: 0;left: 0;}\n\nto{position: relative;bottom: 20px;left: 30px;border: 5px solid #999;}\n\n}\n```\n这个动画定义了一个名为：testAnimate的位置过渡动画，从相对位置(0,0)，变到相对位置 (30px,20px)，且终态时，增加了一个5px的边框。\n\n接着，我们在测试的图片用例上来引入动画：\n\n```\nimg:hover{\nanimation:testAnimate 1s;\n-webkit-animation:testAnimate  1s;\n-moz-animation:testAnimate  1s;\n-o-animation:testAnimate  1s;\n-ms-animation:testAnimate 1s;\n}\n//整个动画1s完成，并设置了浏览器兼容\n```\n效果如下：\n![这里写图片描述](http://img.blog.csdn.net/20180102110628693?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可能在网页上显示的不尽人意，这里面存在一个问题，当鼠标移入图片，并且悬停不动时，图片会自动回复到动画之前的状态，这就感觉像拖动一个东西，拖到一半，东西自己滑走了，好在CSS3里面有了现成的解决方案：\n\n```\nimg:hover{\nanimation-fill-mode: forwards;\n-ms-animation-fill-mode:forwards;//兼容IE  xxxxxx  \n-webkit-animation-fill-mode:forwards;//兼容Chrome xxxxxx\n-moz-animation-fill-mode:forwards;//兼容FireFox xxxxx\n-o-animation-fill-mode:forwards;//兼容opear xxxxxx\n}\n```\n这样，当鼠标移入，只要不松开，图片就会停留在动画的100%状态，而不会回滚到动画为0%的状态；当鼠标移出图片，动画结束，方回到初始状态。\n## 三、分析归纳 ##\n众所周知，jquery封装的js库，其中的动画部分来源于CSS3，作为原生的CSS，其功能不可小觑，而且相当于jquery的实现方法，这种方法定义起来更加的个性化，而且不用引入额外的js库，很省带宽。但缺点就是兼容性差，比起第三方封装的Animation.js库，兼容性不行\n\n预览效果参见：news.lanzhou.cn/system/2017/12/29/011485365.shtml 其中的【微说图解】栏目。\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"关于CSS3呼吸效果的探究","published":1,"updated":"2019-05-14T14:30:28.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawe001jckufclla7w1d","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78949964\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"一、效果预览\"><a href=\"#一、效果预览\" class=\"headerlink\" title=\"一、效果预览\"></a>一、效果预览</h2><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180102103428658?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>如图所示，鼠标移动上去，图片会向右上角抖动，鼠标离开，图片恢复原状。</p>\n<h2 id=\"二、方案选择\"><a href=\"#二、方案选择\" class=\"headerlink\" title=\"二、方案选择\"></a>二、方案选择</h2><p>刚刚接触到这个效果的时候，我还以为是采用放大效果来实现的，即scale:1.2诸如此类的代码，结果不然。</p>\n<p>这个效果的实现，如果采用jquery的方案，直接写个动画即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先设定好position:relative;</span><br><span class=\"line\">$(&apos;img:hover&apos;).animate(&#123;&apos;left&apos;:&apos;10px&apos;,&apos;bottom&apos;:&apos;10px&apos;&#125;);</span><br></pre></td></tr></table></figure>\n<p>假如追根溯源，还是使用的CSS3的动画。<br>首先自定义一个动画：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes testAnimate&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">from&#123;position: relative;bottom: 0;left: 0;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">to&#123;position: relative;bottom: 20px;left: 30px;border: 5px solid #999;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个动画定义了一个名为：testAnimate的位置过渡动画，从相对位置(0,0)，变到相对位置 (30px,20px)，且终态时，增加了一个5px的边框。</p>\n<p>接着，我们在测试的图片用例上来引入动画：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img:hover&#123;</span><br><span class=\"line\">animation:testAnimate 1s;</span><br><span class=\"line\">-webkit-animation:testAnimate  1s;</span><br><span class=\"line\">-moz-animation:testAnimate  1s;</span><br><span class=\"line\">-o-animation:testAnimate  1s;</span><br><span class=\"line\">-ms-animation:testAnimate 1s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//整个动画1s完成，并设置了浏览器兼容</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180102110628693?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>可能在网页上显示的不尽人意，这里面存在一个问题，当鼠标移入图片，并且悬停不动时，图片会自动回复到动画之前的状态，这就感觉像拖动一个东西，拖到一半，东西自己滑走了，好在CSS3里面有了现成的解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img:hover&#123;</span><br><span class=\"line\">animation-fill-mode: forwards;</span><br><span class=\"line\">-ms-animation-fill-mode:forwards;//兼容IE  xxxxxx  </span><br><span class=\"line\">-webkit-animation-fill-mode:forwards;//兼容Chrome xxxxxx</span><br><span class=\"line\">-moz-animation-fill-mode:forwards;//兼容FireFox xxxxx</span><br><span class=\"line\">-o-animation-fill-mode:forwards;//兼容opear xxxxxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，当鼠标移入，只要不松开，图片就会停留在动画的100%状态，而不会回滚到动画为0%的状态；当鼠标移出图片，动画结束，方回到初始状态。</p>\n<h2 id=\"三、分析归纳\"><a href=\"#三、分析归纳\" class=\"headerlink\" title=\"三、分析归纳\"></a>三、分析归纳</h2><p>众所周知，jquery封装的js库，其中的动画部分来源于CSS3，作为原生的CSS，其功能不可小觑，而且相当于jquery的实现方法，这种方法定义起来更加的个性化，而且不用引入额外的js库，很省带宽。但缺点就是兼容性差，比起第三方封装的Animation.js库，兼容性不行</p>\n<p>预览效果参见：news.lanzhou.cn/system/2017/12/29/011485365.shtml 其中的【微说图解】栏目。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78949964\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"一、效果预览\"><a href=\"#一、效果预览\" class=\"headerlink\" title=\"一、效果预览\"></a>一、效果预览</h2><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180102103428658?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>如图所示，鼠标移动上去，图片会向右上角抖动，鼠标离开，图片恢复原状。</p>\n<h2 id=\"二、方案选择\"><a href=\"#二、方案选择\" class=\"headerlink\" title=\"二、方案选择\"></a>二、方案选择</h2><p>刚刚接触到这个效果的时候，我还以为是采用放大效果来实现的，即scale:1.2诸如此类的代码，结果不然。</p>\n<p>这个效果的实现，如果采用jquery的方案，直接写个动画即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先设定好position:relative;</span><br><span class=\"line\">$(&apos;img:hover&apos;).animate(&#123;&apos;left&apos;:&apos;10px&apos;,&apos;bottom&apos;:&apos;10px&apos;&#125;);</span><br></pre></td></tr></table></figure>\n<p>假如追根溯源，还是使用的CSS3的动画。<br>首先自定义一个动画：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes testAnimate&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">from&#123;position: relative;bottom: 0;left: 0;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">to&#123;position: relative;bottom: 20px;left: 30px;border: 5px solid #999;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个动画定义了一个名为：testAnimate的位置过渡动画，从相对位置(0,0)，变到相对位置 (30px,20px)，且终态时，增加了一个5px的边框。</p>\n<p>接着，我们在测试的图片用例上来引入动画：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img:hover&#123;</span><br><span class=\"line\">animation:testAnimate 1s;</span><br><span class=\"line\">-webkit-animation:testAnimate  1s;</span><br><span class=\"line\">-moz-animation:testAnimate  1s;</span><br><span class=\"line\">-o-animation:testAnimate  1s;</span><br><span class=\"line\">-ms-animation:testAnimate 1s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//整个动画1s完成，并设置了浏览器兼容</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180102110628693?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>可能在网页上显示的不尽人意，这里面存在一个问题，当鼠标移入图片，并且悬停不动时，图片会自动回复到动画之前的状态，这就感觉像拖动一个东西，拖到一半，东西自己滑走了，好在CSS3里面有了现成的解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img:hover&#123;</span><br><span class=\"line\">animation-fill-mode: forwards;</span><br><span class=\"line\">-ms-animation-fill-mode:forwards;//兼容IE  xxxxxx  </span><br><span class=\"line\">-webkit-animation-fill-mode:forwards;//兼容Chrome xxxxxx</span><br><span class=\"line\">-moz-animation-fill-mode:forwards;//兼容FireFox xxxxx</span><br><span class=\"line\">-o-animation-fill-mode:forwards;//兼容opear xxxxxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，当鼠标移入，只要不松开，图片就会停留在动画的100%状态，而不会回滚到动画为0%的状态；当鼠标移出图片，动画结束，方回到初始状态。</p>\n<h2 id=\"三、分析归纳\"><a href=\"#三、分析归纳\" class=\"headerlink\" title=\"三、分析归纳\"></a>三、分析归纳</h2><p>众所周知，jquery封装的js库，其中的动画部分来源于CSS3，作为原生的CSS，其功能不可小觑，而且相当于jquery的实现方法，这种方法定义起来更加的个性化，而且不用引入额外的js库，很省带宽。但缺点就是兼容性差，比起第三方封装的Animation.js库，兼容性不行</p>\n<p>预览效果参见：news.lanzhou.cn/system/2017/12/29/011485365.shtml 其中的【微说图解】栏目。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"函数式编程与响应式编程之己见","date":"2018-07-22T13:00:08.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/81157232)\n\n## 1. what is 函数式编程？ ##\n函数，在编程中，通常体现为： 输入 => 执行 => 结果。他不是命令式的，而是对一段操作进行逻辑封装，拿到输入，就能产出结果。通常来说，满足函数式编程的特性的“函数”应该有如下特点:\n\n函数必须有入参，并且函数的产出会根据入参的不同而变化。\n函数执行的整个流程中，不会对全局变量、外部属性等产生影响。\n函数式编程代码量小，干净。\n举个例子：\n\n```javascript\nvar arr = [1,2,3,4,5];\n\nfunction addOne (array) {\n\n    for(var i=0;i<array.length;i++){\n        array[i] += 1;\n    }\n\n    return array;\n}\n\naddOne(arr); // 2,3,4,5,6\n```\n写了一个方法，接受一个数组，产出数组每个成员+1，但这段代码的不足之处在于：\n\n难以复用，如果需求提出 addTwo,addThree方法，需要不断修改函数名和内部逻辑。\n内部的代码很啰嗦， for 循环很low。\n·函数式编程改进版：\n\n```javascript\nlet arr = [1,2,3,4,5];\narr.map(item=> item+1); // 3,4,5,6,7\n```\n\n \n这里，改进使用了原生的 Array.prototype.map 方法，代码量缩小了很多不说，而且复用性进一步提升。整个函数做的事情现在非常直观，入参 => 每项参数 + 1 => 返回新数组，由此，可以说，map()方法是一个纯函数(pure function)。\n\n## 2. 响应式编程 ##\n前端中也有一个概念叫响应式，bootstrap 。这里当然说的不是这个，对于响应式编程的概念，我想提及Vue或者 angular的双向绑定来阐述：\n```javascript\n// template: \n\ni'am {{ name }}\n\n// js:\n\nname = 'jhon';\n```\n\n在前端MVVM的框架中，都有一个数据双向绑定的概念，这里的模版中的变量，实时反映了数据中的 name 变量的 value，而且，如果此时我修改了 name 的值，那么模版中对应的值也会跟着修改。数据 <=> 视图 是同时发生，同时改变的，因为模版就是对数据的一个映射。\n\n再举个例子：\n\nc的值，是通过 a + b 来赋值的，如果ab不是固定的，而是变化的值，那么 c 的值也不会固定为3。 \n```javascript\nlet a = 1,b=2;\n\nlet c = a + b; // 3\n```\n\n不难看出，响应式编程特点：\n\n 同步发生，结果会随着修改参数而实时、动态地变化。\n存在固定的映射关系。","source":"_posts/函数式编程与响应式编程之己见.md","raw":"---\ntitle:  函数式编程与响应式编程之己见 \ndate: 2018-07-22 21:00:08\ntags: javascript\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/81157232)\n\n## 1. what is 函数式编程？ ##\n函数，在编程中，通常体现为： 输入 => 执行 => 结果。他不是命令式的，而是对一段操作进行逻辑封装，拿到输入，就能产出结果。通常来说，满足函数式编程的特性的“函数”应该有如下特点:\n\n函数必须有入参，并且函数的产出会根据入参的不同而变化。\n函数执行的整个流程中，不会对全局变量、外部属性等产生影响。\n函数式编程代码量小，干净。\n举个例子：\n\n```javascript\nvar arr = [1,2,3,4,5];\n\nfunction addOne (array) {\n\n    for(var i=0;i<array.length;i++){\n        array[i] += 1;\n    }\n\n    return array;\n}\n\naddOne(arr); // 2,3,4,5,6\n```\n写了一个方法，接受一个数组，产出数组每个成员+1，但这段代码的不足之处在于：\n\n难以复用，如果需求提出 addTwo,addThree方法，需要不断修改函数名和内部逻辑。\n内部的代码很啰嗦， for 循环很low。\n·函数式编程改进版：\n\n```javascript\nlet arr = [1,2,3,4,5];\narr.map(item=> item+1); // 3,4,5,6,7\n```\n\n \n这里，改进使用了原生的 Array.prototype.map 方法，代码量缩小了很多不说，而且复用性进一步提升。整个函数做的事情现在非常直观，入参 => 每项参数 + 1 => 返回新数组，由此，可以说，map()方法是一个纯函数(pure function)。\n\n## 2. 响应式编程 ##\n前端中也有一个概念叫响应式，bootstrap 。这里当然说的不是这个，对于响应式编程的概念，我想提及Vue或者 angular的双向绑定来阐述：\n```javascript\n// template: \n\ni'am {{ name }}\n\n// js:\n\nname = 'jhon';\n```\n\n在前端MVVM的框架中，都有一个数据双向绑定的概念，这里的模版中的变量，实时反映了数据中的 name 变量的 value，而且，如果此时我修改了 name 的值，那么模版中对应的值也会跟着修改。数据 <=> 视图 是同时发生，同时改变的，因为模版就是对数据的一个映射。\n\n再举个例子：\n\nc的值，是通过 a + b 来赋值的，如果ab不是固定的，而是变化的值，那么 c 的值也不会固定为3。 \n```javascript\nlet a = 1,b=2;\n\nlet c = a + b; // 3\n```\n\n不难看出，响应式编程特点：\n\n 同步发生，结果会随着修改参数而实时、动态地变化。\n存在固定的映射关系。","slug":"函数式编程与响应式编程之己见","published":1,"updated":"2019-05-14T14:30:28.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawf001lckuffachibqo","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/81157232\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"1-what-is-函数式编程？\"><a href=\"#1-what-is-函数式编程？\" class=\"headerlink\" title=\"1. what is 函数式编程？\"></a>1. what is 函数式编程？</h2><p>函数，在编程中，通常体现为： 输入 =&gt; 执行 =&gt; 结果。他不是命令式的，而是对一段操作进行逻辑封装，拿到输入，就能产出结果。通常来说，满足函数式编程的特性的“函数”应该有如下特点:</p>\n<p>函数必须有入参，并且函数的产出会根据入参的不同而变化。<br>函数执行的整个流程中，不会对全局变量、外部属性等产生影响。<br>函数式编程代码量小，干净。<br>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addOne</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++)&#123;</span><br><span class=\"line\">        array[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addOne(arr); <span class=\"comment\">// 2,3,4,5,6</span></span><br></pre></td></tr></table></figure>\n<p>写了一个方法，接受一个数组，产出数组每个成员+1，但这段代码的不足之处在于：</p>\n<p>难以复用，如果需求提出 addTwo,addThree方法，需要不断修改函数名和内部逻辑。<br>内部的代码很啰嗦， for 循环很low。<br>·函数式编程改进版：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">arr.map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span> item+<span class=\"number\">1</span>); <span class=\"comment\">// 3,4,5,6,7</span></span><br></pre></td></tr></table></figure>\n<p>这里，改进使用了原生的 Array.prototype.map 方法，代码量缩小了很多不说，而且复用性进一步提升。整个函数做的事情现在非常直观，入参 =&gt; 每项参数 + 1 =&gt; 返回新数组，由此，可以说，map()方法是一个纯函数(pure function)。</p>\n<h2 id=\"2-响应式编程\"><a href=\"#2-响应式编程\" class=\"headerlink\" title=\"2. 响应式编程\"></a>2. 响应式编程</h2><p>前端中也有一个概念叫响应式，bootstrap 。这里当然说的不是这个，对于响应式编程的概念，我想提及Vue或者 angular的双向绑定来阐述：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// template: </span></span><br><span class=\"line\"></span><br><span class=\"line\">i<span class=\"string\">'am &#123;&#123; name &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">// js:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">name = '</span>jhon<span class=\"string\">';</span></span><br></pre></td></tr></table></figure></p>\n<p>在前端MVVM的框架中，都有一个数据双向绑定的概念，这里的模版中的变量，实时反映了数据中的 name 变量的 value，而且，如果此时我修改了 name 的值，那么模版中对应的值也会跟着修改。数据 &lt;=&gt; 视图 是同时发生，同时改变的，因为模版就是对数据的一个映射。</p>\n<p>再举个例子：</p>\n<p>c的值，是通过 a + b 来赋值的，如果ab不是固定的，而是变化的值，那么 c 的值也不会固定为3。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = a + b; <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></p>\n<p>不难看出，响应式编程特点：</p>\n<p> 同步发生，结果会随着修改参数而实时、动态地变化。<br>存在固定的映射关系。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/81157232\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"1-what-is-函数式编程？\"><a href=\"#1-what-is-函数式编程？\" class=\"headerlink\" title=\"1. what is 函数式编程？\"></a>1. what is 函数式编程？</h2><p>函数，在编程中，通常体现为： 输入 =&gt; 执行 =&gt; 结果。他不是命令式的，而是对一段操作进行逻辑封装，拿到输入，就能产出结果。通常来说，满足函数式编程的特性的“函数”应该有如下特点:</p>\n<p>函数必须有入参，并且函数的产出会根据入参的不同而变化。<br>函数执行的整个流程中，不会对全局变量、外部属性等产生影响。<br>函数式编程代码量小，干净。<br>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addOne</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++)&#123;</span><br><span class=\"line\">        array[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addOne(arr); <span class=\"comment\">// 2,3,4,5,6</span></span><br></pre></td></tr></table></figure>\n<p>写了一个方法，接受一个数组，产出数组每个成员+1，但这段代码的不足之处在于：</p>\n<p>难以复用，如果需求提出 addTwo,addThree方法，需要不断修改函数名和内部逻辑。<br>内部的代码很啰嗦， for 循环很low。<br>·函数式编程改进版：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">arr.map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span> item+<span class=\"number\">1</span>); <span class=\"comment\">// 3,4,5,6,7</span></span><br></pre></td></tr></table></figure>\n<p>这里，改进使用了原生的 Array.prototype.map 方法，代码量缩小了很多不说，而且复用性进一步提升。整个函数做的事情现在非常直观，入参 =&gt; 每项参数 + 1 =&gt; 返回新数组，由此，可以说，map()方法是一个纯函数(pure function)。</p>\n<h2 id=\"2-响应式编程\"><a href=\"#2-响应式编程\" class=\"headerlink\" title=\"2. 响应式编程\"></a>2. 响应式编程</h2><p>前端中也有一个概念叫响应式，bootstrap 。这里当然说的不是这个，对于响应式编程的概念，我想提及Vue或者 angular的双向绑定来阐述：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// template: </span></span><br><span class=\"line\"></span><br><span class=\"line\">i<span class=\"string\">'am &#123;&#123; name &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">// js:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">name = '</span>jhon<span class=\"string\">';</span></span><br></pre></td></tr></table></figure></p>\n<p>在前端MVVM的框架中，都有一个数据双向绑定的概念，这里的模版中的变量，实时反映了数据中的 name 变量的 value，而且，如果此时我修改了 name 的值，那么模版中对应的值也会跟着修改。数据 &lt;=&gt; 视图 是同时发生，同时改变的，因为模版就是对数据的一个映射。</p>\n<p>再举个例子：</p>\n<p>c的值，是通过 a + b 来赋值的，如果ab不是固定的，而是变化的值，那么 c 的值也不会固定为3。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>,b=<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = a + b; <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></p>\n<p>不难看出，响应式编程特点：</p>\n<p> 同步发生，结果会随着修改参数而实时、动态地变化。<br>存在固定的映射关系。</p>\n"},{"title":"基于bootstrap特殊分辨率页面的实现思路","date":"2018-04-14T15:11:09.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/79945485)\n\n## 前言 ##\n很久没更新博客，这段时间刚刚找到工作，会立即（从今天起）恢复更新博客的频率。罗马不是一天建成的，希望自己保持良好的学习和做笔记的习惯，笔耕不缀，他日可期！\n## 1.Boostrap重构传统固定px的页面 ##\n在第一次接手重构任务后，有点懵逼。可能是因为自己很久没有写代码了，忘了以前做的响应式的一些细节，所以又开始不断的调试，总算是把坑补上了，于是在此做一下记录。\nPSD需求图：\n![这里写图片描述](https://img-blog.csdn.net/20180414231532595?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)整个需求其实蛮简单的，就是一个固定1122px的页面，里面有些图片，图片在pc端需要留出固定margin（需要像素级还原PSD稿）。想了想，自己以前做的响应式都是根据 .container类的默认宽度来写的，于是想了一会便有答案，整体思路如下：\n\n 1. 给整个页面给一个 container类，并且限制 max-width 为1122px。\n 2. 页面中右侧的小兔，因为所有图片都是从后台接口调取，一旦设定img-responsive，那么默认的max-width就是100%(想象一下，如果后台传来一个1000宽的图，用户网络慢点，基本上就GG了)，只能按照原图比例来缩放，何况每个图片的容器都是动态高度的...所以，每张图片的宽高，尽可能的去用js动态设定。\n 3. 尽量使用Rem，设定好body的font-size，然后各部分的font-size都根据rem去取，例如 0.8rem,0.6rem等等。\n 3. 布局方面，左侧的长图固定的，非接口调取，宽高固定的。在整个页面中，缩放的比例完全是以此图片作为参照物。因此给此图片加上img-responsive以及col-lg-3 col-md-3 col-sm-6 col-xs-6类，然后动态的让单个盒子容器的高度取 左侧长图的高度，这样会让盒子完美的呈现，不会留有内边距，也不会让box-shadow很难看。\n右侧的6张小图，每纵向的两个图使用一个列容器来包裹，设定 col-lg-3  col-md-3  col-sm-6 col-xs-6，这样就可以达到在手机端的显示效果，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20180414231323872?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n## 2.核心逻辑代码 ##\n\n```\n//动态设置每个box-shadow 容器的高度，为imgLong的高度\nvar h = $('#imgLong').first().height();\n\n$('.box').each(function(){\n\t$(this).css({\n\t\theight:h\n\t});\n});\n$(window).resize(function(){\n\tvar h=$(\"#imgLong\").first().height();$(\".box\").each(function(){$(this).css({height:h})});\n});\n\t\t\t\t\t\n//限制h4标签文本长度\n\t$('.imgTitle').each(function(){\n\t//这里由于后台Trs模版获取的标题，前面有N个空格，因此需要前端来消化一下字数，故进行“空格剔除”，所以用  .split(' ').join('')\n\tvar txt = $(this).text().split(' ').join('');\n\tif(txt.length>20){\t\t\n\t\n\t//其实真正的标题就10个字，但是前面有10个空格\n\t\t\t                             $(this).text(txt.substring(0,19)+'...');\n\t\t}\n    });\n\t\t\t\t\t\n//为所有调用的imgShort图片增加CLASS\n\t\t\t\t\t\n$('.imgShortParent img').each(function(){\n\t\t\t$(this).addClass('imgShort');\n});\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n//动态设定每个单列容器的宽度 = imgLong的宽度，高度 = imgLong的高度，以此来保证图片不会溢出 box-shadow。\nvar h = $('.imgLong').first().height();\nvar w = $('.imgLong').first().width();\n\n$('.col-box').each(function(){\n   $(this).width(w).height(h);\n});\n\n$(window).resize(function(){\n//页面缩放时，动态获取宽高，并赋值给 col-box 列容器。\n  $('.col-box').each(function(){\n   $(this).width(w).height(h);\n})\n\n})\n```\n## 3.不足与改进思路 ##\n3.1 页面性能不足，重绘过多，网速慢的时候，会有一瞬间发生：【图片突然很大，然后被缩放到正常比例】的恐怖现象。。。\n解决方案：\n可以为每张小图(250*165)包裹一层div，设置max-height与max-width，overflow:hidden，来解决。\n\n3.2 实际上，整个项目我写了两套html骨架（由于项目紧，刚接手，长时间没写代码比较陌生），pc一套，mobile一套，感到非常罪过，不配成为一个前端工程师。。。但是话说回来，原先的项目也写的太TM乱了，一个注释都没有，而且一个页面中script标签不下20个。。。\n解决方案：\n用我上述的思路去实现\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/基于bootstrap特殊分辨率页面的实现思路.md","raw":"---\ntitle: 基于bootstrap特殊分辨率页面的实现思路 \ndate: 2018-04-14 23:11:09\ntags: bootstrap\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/79945485)\n\n## 前言 ##\n很久没更新博客，这段时间刚刚找到工作，会立即（从今天起）恢复更新博客的频率。罗马不是一天建成的，希望自己保持良好的学习和做笔记的习惯，笔耕不缀，他日可期！\n## 1.Boostrap重构传统固定px的页面 ##\n在第一次接手重构任务后，有点懵逼。可能是因为自己很久没有写代码了，忘了以前做的响应式的一些细节，所以又开始不断的调试，总算是把坑补上了，于是在此做一下记录。\nPSD需求图：\n![这里写图片描述](https://img-blog.csdn.net/20180414231532595?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)整个需求其实蛮简单的，就是一个固定1122px的页面，里面有些图片，图片在pc端需要留出固定margin（需要像素级还原PSD稿）。想了想，自己以前做的响应式都是根据 .container类的默认宽度来写的，于是想了一会便有答案，整体思路如下：\n\n 1. 给整个页面给一个 container类，并且限制 max-width 为1122px。\n 2. 页面中右侧的小兔，因为所有图片都是从后台接口调取，一旦设定img-responsive，那么默认的max-width就是100%(想象一下，如果后台传来一个1000宽的图，用户网络慢点，基本上就GG了)，只能按照原图比例来缩放，何况每个图片的容器都是动态高度的...所以，每张图片的宽高，尽可能的去用js动态设定。\n 3. 尽量使用Rem，设定好body的font-size，然后各部分的font-size都根据rem去取，例如 0.8rem,0.6rem等等。\n 3. 布局方面，左侧的长图固定的，非接口调取，宽高固定的。在整个页面中，缩放的比例完全是以此图片作为参照物。因此给此图片加上img-responsive以及col-lg-3 col-md-3 col-sm-6 col-xs-6类，然后动态的让单个盒子容器的高度取 左侧长图的高度，这样会让盒子完美的呈现，不会留有内边距，也不会让box-shadow很难看。\n右侧的6张小图，每纵向的两个图使用一个列容器来包裹，设定 col-lg-3  col-md-3  col-sm-6 col-xs-6，这样就可以达到在手机端的显示效果，如图所示：\n![这里写图片描述](https://img-blog.csdn.net/20180414231323872?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n## 2.核心逻辑代码 ##\n\n```\n//动态设置每个box-shadow 容器的高度，为imgLong的高度\nvar h = $('#imgLong').first().height();\n\n$('.box').each(function(){\n\t$(this).css({\n\t\theight:h\n\t});\n});\n$(window).resize(function(){\n\tvar h=$(\"#imgLong\").first().height();$(\".box\").each(function(){$(this).css({height:h})});\n});\n\t\t\t\t\t\n//限制h4标签文本长度\n\t$('.imgTitle').each(function(){\n\t//这里由于后台Trs模版获取的标题，前面有N个空格，因此需要前端来消化一下字数，故进行“空格剔除”，所以用  .split(' ').join('')\n\tvar txt = $(this).text().split(' ').join('');\n\tif(txt.length>20){\t\t\n\t\n\t//其实真正的标题就10个字，但是前面有10个空格\n\t\t\t                             $(this).text(txt.substring(0,19)+'...');\n\t\t}\n    });\n\t\t\t\t\t\n//为所有调用的imgShort图片增加CLASS\n\t\t\t\t\t\n$('.imgShortParent img').each(function(){\n\t\t\t$(this).addClass('imgShort');\n});\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n//动态设定每个单列容器的宽度 = imgLong的宽度，高度 = imgLong的高度，以此来保证图片不会溢出 box-shadow。\nvar h = $('.imgLong').first().height();\nvar w = $('.imgLong').first().width();\n\n$('.col-box').each(function(){\n   $(this).width(w).height(h);\n});\n\n$(window).resize(function(){\n//页面缩放时，动态获取宽高，并赋值给 col-box 列容器。\n  $('.col-box').each(function(){\n   $(this).width(w).height(h);\n})\n\n})\n```\n## 3.不足与改进思路 ##\n3.1 页面性能不足，重绘过多，网速慢的时候，会有一瞬间发生：【图片突然很大，然后被缩放到正常比例】的恐怖现象。。。\n解决方案：\n可以为每张小图(250*165)包裹一层div，设置max-height与max-width，overflow:hidden，来解决。\n\n3.2 实际上，整个项目我写了两套html骨架（由于项目紧，刚接手，长时间没写代码比较陌生），pc一套，mobile一套，感到非常罪过，不配成为一个前端工程师。。。但是话说回来，原先的项目也写的太TM乱了，一个注释都没有，而且一个页面中script标签不下20个。。。\n解决方案：\n用我上述的思路去实现\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"基于bootstrap特殊分辨率页面的实现思路","published":1,"updated":"2019-05-14T14:30:28.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawg001nckufjhbpayep","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/79945485\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很久没更新博客，这段时间刚刚找到工作，会立即（从今天起）恢复更新博客的频率。罗马不是一天建成的，希望自己保持良好的学习和做笔记的习惯，笔耕不缀，他日可期！</p>\n<h2 id=\"1-Boostrap重构传统固定px的页面\"><a href=\"#1-Boostrap重构传统固定px的页面\" class=\"headerlink\" title=\"1.Boostrap重构传统固定px的页面\"></a>1.Boostrap重构传统固定px的页面</h2><p>在第一次接手重构任务后，有点懵逼。可能是因为自己很久没有写代码了，忘了以前做的响应式的一些细节，所以又开始不断的调试，总算是把坑补上了，于是在此做一下记录。<br>PSD需求图：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180414231532595?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>整个需求其实蛮简单的，就是一个固定1122px的页面，里面有些图片，图片在pc端需要留出固定margin（需要像素级还原PSD稿）。想了想，自己以前做的响应式都是根据 .container类的默认宽度来写的，于是想了一会便有答案，整体思路如下：</p>\n<ol>\n<li>给整个页面给一个 container类，并且限制 max-width 为1122px。</li>\n<li>页面中右侧的小兔，因为所有图片都是从后台接口调取，一旦设定img-responsive，那么默认的max-width就是100%(想象一下，如果后台传来一个1000宽的图，用户网络慢点，基本上就GG了)，只能按照原图比例来缩放，何况每个图片的容器都是动态高度的…所以，每张图片的宽高，尽可能的去用js动态设定。</li>\n<li>尽量使用Rem，设定好body的font-size，然后各部分的font-size都根据rem去取，例如 0.8rem,0.6rem等等。</li>\n<li>布局方面，左侧的长图固定的，非接口调取，宽高固定的。在整个页面中，缩放的比例完全是以此图片作为参照物。因此给此图片加上img-responsive以及col-lg-3 col-md-3 col-sm-6 col-xs-6类，然后动态的让单个盒子容器的高度取 左侧长图的高度，这样会让盒子完美的呈现，不会留有内边距，也不会让box-shadow很难看。<br>右侧的6张小图，每纵向的两个图使用一个列容器来包裹，设定 col-lg-3  col-md-3  col-sm-6 col-xs-6，这样就可以达到在手机端的显示效果，如图所示：<figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180414231323872?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<h2 id=\"2-核心逻辑代码\"><a href=\"#2-核心逻辑代码\" class=\"headerlink\" title=\"2.核心逻辑代码\"></a>2.核心逻辑代码</h2></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//动态设置每个box-shadow 容器的高度，为imgLong的高度</span><br><span class=\"line\">var h = $(&apos;#imgLong&apos;).first().height();</span><br><span class=\"line\"></span><br><span class=\"line\">$(&apos;.box&apos;).each(function()&#123;</span><br><span class=\"line\">\t$(this).css(&#123;</span><br><span class=\"line\">\t\theight:h</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(window).resize(function()&#123;</span><br><span class=\"line\">\tvar h=$(&quot;#imgLong&quot;).first().height();$(&quot;.box&quot;).each(function()&#123;$(this).css(&#123;height:h&#125;)&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">//限制h4标签文本长度</span><br><span class=\"line\">\t$(&apos;.imgTitle&apos;).each(function()&#123;</span><br><span class=\"line\">\t//这里由于后台Trs模版获取的标题，前面有N个空格，因此需要前端来消化一下字数，故进行“空格剔除”，所以用  .split(&apos; &apos;).join(&apos;&apos;)</span><br><span class=\"line\">\tvar txt = $(this).text().split(&apos; &apos;).join(&apos;&apos;);</span><br><span class=\"line\">\tif(txt.length&gt;20)&#123;\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//其实真正的标题就10个字，但是前面有10个空格</span><br><span class=\"line\">\t\t\t                             $(this).text(txt.substring(0,19)+&apos;...&apos;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">//为所有调用的imgShort图片增加CLASS</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">$(&apos;.imgShortParent img&apos;).each(function()&#123;</span><br><span class=\"line\">\t\t\t$(this).addClass(&apos;imgShort&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">//动态设定每个单列容器的宽度 = imgLong的宽度，高度 = imgLong的高度，以此来保证图片不会溢出 box-shadow。</span><br><span class=\"line\">var h = $(&apos;.imgLong&apos;).first().height();</span><br><span class=\"line\">var w = $(&apos;.imgLong&apos;).first().width();</span><br><span class=\"line\"></span><br><span class=\"line\">$(&apos;.col-box&apos;).each(function()&#123;</span><br><span class=\"line\">   $(this).width(w).height(h);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(window).resize(function()&#123;</span><br><span class=\"line\">//页面缩放时，动态获取宽高，并赋值给 col-box 列容器。</span><br><span class=\"line\">  $(&apos;.col-box&apos;).each(function()&#123;</span><br><span class=\"line\">   $(this).width(w).height(h);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-不足与改进思路\"><a href=\"#3-不足与改进思路\" class=\"headerlink\" title=\"3.不足与改进思路\"></a>3.不足与改进思路</h2><p>3.1 页面性能不足，重绘过多，网速慢的时候，会有一瞬间发生：【图片突然很大，然后被缩放到正常比例】的恐怖现象。。。<br>解决方案：<br>可以为每张小图(250*165)包裹一层div，设置max-height与max-width，overflow:hidden，来解决。</p>\n<p>3.2 实际上，整个项目我写了两套html骨架（由于项目紧，刚接手，长时间没写代码比较陌生），pc一套，mobile一套，感到非常罪过，不配成为一个前端工程师。。。但是话说回来，原先的项目也写的太TM乱了，一个注释都没有，而且一个页面中script标签不下20个。。。<br>解决方案：<br>用我上述的思路去实现</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/79945485\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很久没更新博客，这段时间刚刚找到工作，会立即（从今天起）恢复更新博客的频率。罗马不是一天建成的，希望自己保持良好的学习和做笔记的习惯，笔耕不缀，他日可期！</p>\n<h2 id=\"1-Boostrap重构传统固定px的页面\"><a href=\"#1-Boostrap重构传统固定px的页面\" class=\"headerlink\" title=\"1.Boostrap重构传统固定px的页面\"></a>1.Boostrap重构传统固定px的页面</h2><p>在第一次接手重构任务后，有点懵逼。可能是因为自己很久没有写代码了，忘了以前做的响应式的一些细节，所以又开始不断的调试，总算是把坑补上了，于是在此做一下记录。<br>PSD需求图：<br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180414231532595?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>整个需求其实蛮简单的，就是一个固定1122px的页面，里面有些图片，图片在pc端需要留出固定margin（需要像素级还原PSD稿）。想了想，自己以前做的响应式都是根据 .container类的默认宽度来写的，于是想了一会便有答案，整体思路如下：</p>\n<ol>\n<li>给整个页面给一个 container类，并且限制 max-width 为1122px。</li>\n<li>页面中右侧的小兔，因为所有图片都是从后台接口调取，一旦设定img-responsive，那么默认的max-width就是100%(想象一下，如果后台传来一个1000宽的图，用户网络慢点，基本上就GG了)，只能按照原图比例来缩放，何况每个图片的容器都是动态高度的…所以，每张图片的宽高，尽可能的去用js动态设定。</li>\n<li>尽量使用Rem，设定好body的font-size，然后各部分的font-size都根据rem去取，例如 0.8rem,0.6rem等等。</li>\n<li>布局方面，左侧的长图固定的，非接口调取，宽高固定的。在整个页面中，缩放的比例完全是以此图片作为参照物。因此给此图片加上img-responsive以及col-lg-3 col-md-3 col-sm-6 col-xs-6类，然后动态的让单个盒子容器的高度取 左侧长图的高度，这样会让盒子完美的呈现，不会留有内边距，也不会让box-shadow很难看。<br>右侧的6张小图，每纵向的两个图使用一个列容器来包裹，设定 col-lg-3  col-md-3  col-sm-6 col-xs-6，这样就可以达到在手机端的显示效果，如图所示：<figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180414231323872?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMjY0ODkx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<h2 id=\"2-核心逻辑代码\"><a href=\"#2-核心逻辑代码\" class=\"headerlink\" title=\"2.核心逻辑代码\"></a>2.核心逻辑代码</h2></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//动态设置每个box-shadow 容器的高度，为imgLong的高度</span><br><span class=\"line\">var h = $(&apos;#imgLong&apos;).first().height();</span><br><span class=\"line\"></span><br><span class=\"line\">$(&apos;.box&apos;).each(function()&#123;</span><br><span class=\"line\">\t$(this).css(&#123;</span><br><span class=\"line\">\t\theight:h</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(window).resize(function()&#123;</span><br><span class=\"line\">\tvar h=$(&quot;#imgLong&quot;).first().height();$(&quot;.box&quot;).each(function()&#123;$(this).css(&#123;height:h&#125;)&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">//限制h4标签文本长度</span><br><span class=\"line\">\t$(&apos;.imgTitle&apos;).each(function()&#123;</span><br><span class=\"line\">\t//这里由于后台Trs模版获取的标题，前面有N个空格，因此需要前端来消化一下字数，故进行“空格剔除”，所以用  .split(&apos; &apos;).join(&apos;&apos;)</span><br><span class=\"line\">\tvar txt = $(this).text().split(&apos; &apos;).join(&apos;&apos;);</span><br><span class=\"line\">\tif(txt.length&gt;20)&#123;\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//其实真正的标题就10个字，但是前面有10个空格</span><br><span class=\"line\">\t\t\t                             $(this).text(txt.substring(0,19)+&apos;...&apos;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">//为所有调用的imgShort图片增加CLASS</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">$(&apos;.imgShortParent img&apos;).each(function()&#123;</span><br><span class=\"line\">\t\t\t$(this).addClass(&apos;imgShort&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">//动态设定每个单列容器的宽度 = imgLong的宽度，高度 = imgLong的高度，以此来保证图片不会溢出 box-shadow。</span><br><span class=\"line\">var h = $(&apos;.imgLong&apos;).first().height();</span><br><span class=\"line\">var w = $(&apos;.imgLong&apos;).first().width();</span><br><span class=\"line\"></span><br><span class=\"line\">$(&apos;.col-box&apos;).each(function()&#123;</span><br><span class=\"line\">   $(this).width(w).height(h);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(window).resize(function()&#123;</span><br><span class=\"line\">//页面缩放时，动态获取宽高，并赋值给 col-box 列容器。</span><br><span class=\"line\">  $(&apos;.col-box&apos;).each(function()&#123;</span><br><span class=\"line\">   $(this).width(w).height(h);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-不足与改进思路\"><a href=\"#3-不足与改进思路\" class=\"headerlink\" title=\"3.不足与改进思路\"></a>3.不足与改进思路</h2><p>3.1 页面性能不足，重绘过多，网速慢的时候，会有一瞬间发生：【图片突然很大，然后被缩放到正常比例】的恐怖现象。。。<br>解决方案：<br>可以为每张小图(250*165)包裹一层div，设置max-height与max-width，overflow:hidden，来解决。</p>\n<p>3.2 实际上，整个项目我写了两套html骨架（由于项目紧，刚接手，长时间没写代码比较陌生），pc一套，mobile一套，感到非常罪过，不配成为一个前端工程师。。。但是话说回来，原先的项目也写的太TM乱了，一个注释都没有，而且一个页面中script标签不下20个。。。<br>解决方案：<br>用我上述的思路去实现</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"基于HEXO的个人博客图文搭建详尽过程，看不懂算我输","date":"2018-01-18T08:08:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79096846)\n\n\n\n\n## 前言 ##\n**须知：**\n*1.最终生成的博客地址必须是： ZQ-jhon.github.io  即用户名.github.io*\n*2.本地的HEXO仓库，命名必须也为 ZQ-jhon.github.io ，HEXO项目放置于该目录之下。*\n\n昨天经过一番折腾，终于将HEXO部署上线了，以下对于昨天整个搭建的过程做一个详细的回顾。\n\nHEXO是基于NODE的一款博客框架，有很多丰富的主题可以选择，配合GIT来使用。\n\nGit回顾：[本地仓](http://blog.csdn.net/qq_20264891/article/details/78773371)、[远程仓](http://blog.csdn.net/qq_20264891/article/details/78774208)\n\n## 安装 ##\n\n整个安装过程我是参考一位博主：[HEXO系列教程](http://www.chenyijun.net/2016/06/04/hexo_teach_1/)\n\n以下用自己的理解来做一番梳理与归纳：\n\n*先介绍HEXO中的4个命令：\n\n```\n$ hexo g #完整命令为hexo generate，用于生成静态文件  \n$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览  \n$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上  \n$ hexo n #完整命令为hexo new，用于新建一篇文章\n```\n\n首先，确保本地Git公钥与Github公钥相匹配，参照：[Git本地仓](http://blog.csdn.net/qq_20264891/article/details/78773371)\n\n确认匹配后，新建Repository，命名的时候，规范为：\n\ngithub名字.github.io\n\n因此，这里的新仓库名字应该为： ZQ-jhon.github.io\n\n![这里写图片描述](http://img.blog.csdn.net/20180118155548420?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n同样的，在本地新建一个同名的目录：ZQ-jhon.github.io  ，然后打开目录，文件夹是空的\n\n\n**此时，在项目目录下右键打开Gitbash here**\n\n1.`$ cnpm install hexo-cli -g`&nbsp; &nbsp; &nbsp; 使用淘宝镜像安装hexo-cli\n\n2.`npm install hexo-deployer-git --save`&nbsp;&nbsp;&nbsp; 模块安装到开发目录\n\n3.`$ hexo init`&nbsp;&nbsp;&nbsp;初始化\n\n4.`$cnpm install`&nbsp;&nbsp;&nbsp;安装依赖\n\n（PS：中途如果出现问题，可以 `cnpm install hexo-deployer-git --save 安装GIT的PUSH插件）\n`\n5.`$hexo g && hexo s` 构建(genereater)并启动服务(server)，在locallhost:4000下即可预览效果\n\n![这里写图片描述](http://img.blog.csdn.net/20180118154519905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n## 远程部署 ##\n\n本地的文件我们已经在locallhost:4000端口预览的非常满意了，如何部署到站点(github)上呢？\n\n1.首先，找到HEXO目录下的 __yml文件，在最下面修改如下：\n\n```\ndeploy: \n  type: git\n  repository: git@github.com:ZQ-jhon/ZQ-jhon.github.io.git\n  branch: master\n```\n\n![](http://img.blog.csdn.net/20180118154939998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n***注意：如下图所示，这里的repository地址就是Github download时弹出的项目地址，但是最好不要用HTTPS协议，走SSH协议，昨天因为这个问题，调试了一下午！！！***\n\n![这里写图片描述](http://img.blog.csdn.net/20180118155710430?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2.布置好以后，我们来Ping一下Github，看能否有响应：\n\n```\n$ ssh -T git@github.com\n```\n![这里写图片描述](http://img.blog.csdn.net/20180118155238282?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n欢迎了一波，很稳。\n\n此时，直接把Server   Ctrl + C\n \n然后 `$HEXO D`&nbsp;&nbsp;&nbsp;直接推送，稍等片刻，打开Github仓库，看看文件是否上传成功\n\n如果上传成功，大功告成，打开 [https:ZQ-jhon.github.io](https:ZQ-jhon.github.io)即可访问博客页面了。\n\n ## 文章新建与MarkDown语法 ##\n\n   \n新建文章 `$hexo n filename`\n    \n这个比较简单，建完文件，也别秀骚操作了，老老实实去source文件夹的_post文件夹里面，去用一个好点的编辑器，修改文本文档，保存为UTF-8格式，并且修改后缀名为.md，保存类型为所有类型，否则上线部署会产生乱码。\n\n值得一提的是，CSDN的在线文档编辑器就采用的是MarkDown语法，而且该种语法与标签语言完全兼容，因此，可以将HTML代码原封不动的全被拷贝近.md文件。\n\n##主题更换与配置##\n\n在我们HEXO根目录下，有一个themes文件夹，里面存放的都是各式各样的主题，默认的是landscape，我们可以去官网，HEXO的THEME分类下下载更多精美的主题，然后解压缩，将文件夹放在themes下，另外稍微修改 __yml文件下，theme:lanscape 即可。\n\n![这里写图片描述](http://img.blog.csdn.net/20180118160508595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n相关的配置，我们可以follow官方推荐作者的github去看看人家的wiki或者code，都有详尽的说明，甚至可以加QQ咨询......\n\n![这里写图片描述](http://img.blog.csdn.net/20180118160644506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 最终效果与总结 ##\nWelcome to the ZQ-jhon.github.io wiki!\n![基本效果预览](http://img.blog.csdn.net/20180118163837782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![文章详情预览](http://img.blog.csdn.net/20180118163853108?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![搜索模块预览](http://img.blog.csdn.net/20180118163911153?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n不得不说GITHUB开源生态真的非常强大，感谢这些开发者带来的精美主题。\n\n感谢主题作者Miachel.Lu[HEXO-Mellow-theme  点击查看该项目](https://github.com/codefine/hexo-theme-mellow)\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/基于HEXO的个人博客图文搭建详尽过程，看不懂算我输.md","raw":"---\ntitle:  基于HEXO的个人博客图文搭建详尽过程，看不懂算我输\ndate: 2018-01-18 16:08:00\ntags: [HEXO,动态部署]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79096846)\n\n\n\n\n## 前言 ##\n**须知：**\n*1.最终生成的博客地址必须是： ZQ-jhon.github.io  即用户名.github.io*\n*2.本地的HEXO仓库，命名必须也为 ZQ-jhon.github.io ，HEXO项目放置于该目录之下。*\n\n昨天经过一番折腾，终于将HEXO部署上线了，以下对于昨天整个搭建的过程做一个详细的回顾。\n\nHEXO是基于NODE的一款博客框架，有很多丰富的主题可以选择，配合GIT来使用。\n\nGit回顾：[本地仓](http://blog.csdn.net/qq_20264891/article/details/78773371)、[远程仓](http://blog.csdn.net/qq_20264891/article/details/78774208)\n\n## 安装 ##\n\n整个安装过程我是参考一位博主：[HEXO系列教程](http://www.chenyijun.net/2016/06/04/hexo_teach_1/)\n\n以下用自己的理解来做一番梳理与归纳：\n\n*先介绍HEXO中的4个命令：\n\n```\n$ hexo g #完整命令为hexo generate，用于生成静态文件  \n$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览  \n$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上  \n$ hexo n #完整命令为hexo new，用于新建一篇文章\n```\n\n首先，确保本地Git公钥与Github公钥相匹配，参照：[Git本地仓](http://blog.csdn.net/qq_20264891/article/details/78773371)\n\n确认匹配后，新建Repository，命名的时候，规范为：\n\ngithub名字.github.io\n\n因此，这里的新仓库名字应该为： ZQ-jhon.github.io\n\n![这里写图片描述](http://img.blog.csdn.net/20180118155548420?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n同样的，在本地新建一个同名的目录：ZQ-jhon.github.io  ，然后打开目录，文件夹是空的\n\n\n**此时，在项目目录下右键打开Gitbash here**\n\n1.`$ cnpm install hexo-cli -g`&nbsp; &nbsp; &nbsp; 使用淘宝镜像安装hexo-cli\n\n2.`npm install hexo-deployer-git --save`&nbsp;&nbsp;&nbsp; 模块安装到开发目录\n\n3.`$ hexo init`&nbsp;&nbsp;&nbsp;初始化\n\n4.`$cnpm install`&nbsp;&nbsp;&nbsp;安装依赖\n\n（PS：中途如果出现问题，可以 `cnpm install hexo-deployer-git --save 安装GIT的PUSH插件）\n`\n5.`$hexo g && hexo s` 构建(genereater)并启动服务(server)，在locallhost:4000下即可预览效果\n\n![这里写图片描述](http://img.blog.csdn.net/20180118154519905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n## 远程部署 ##\n\n本地的文件我们已经在locallhost:4000端口预览的非常满意了，如何部署到站点(github)上呢？\n\n1.首先，找到HEXO目录下的 __yml文件，在最下面修改如下：\n\n```\ndeploy: \n  type: git\n  repository: git@github.com:ZQ-jhon/ZQ-jhon.github.io.git\n  branch: master\n```\n\n![](http://img.blog.csdn.net/20180118154939998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n***注意：如下图所示，这里的repository地址就是Github download时弹出的项目地址，但是最好不要用HTTPS协议，走SSH协议，昨天因为这个问题，调试了一下午！！！***\n\n![这里写图片描述](http://img.blog.csdn.net/20180118155710430?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2.布置好以后，我们来Ping一下Github，看能否有响应：\n\n```\n$ ssh -T git@github.com\n```\n![这里写图片描述](http://img.blog.csdn.net/20180118155238282?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n欢迎了一波，很稳。\n\n此时，直接把Server   Ctrl + C\n \n然后 `$HEXO D`&nbsp;&nbsp;&nbsp;直接推送，稍等片刻，打开Github仓库，看看文件是否上传成功\n\n如果上传成功，大功告成，打开 [https:ZQ-jhon.github.io](https:ZQ-jhon.github.io)即可访问博客页面了。\n\n ## 文章新建与MarkDown语法 ##\n\n   \n新建文章 `$hexo n filename`\n    \n这个比较简单，建完文件，也别秀骚操作了，老老实实去source文件夹的_post文件夹里面，去用一个好点的编辑器，修改文本文档，保存为UTF-8格式，并且修改后缀名为.md，保存类型为所有类型，否则上线部署会产生乱码。\n\n值得一提的是，CSDN的在线文档编辑器就采用的是MarkDown语法，而且该种语法与标签语言完全兼容，因此，可以将HTML代码原封不动的全被拷贝近.md文件。\n\n##主题更换与配置##\n\n在我们HEXO根目录下，有一个themes文件夹，里面存放的都是各式各样的主题，默认的是landscape，我们可以去官网，HEXO的THEME分类下下载更多精美的主题，然后解压缩，将文件夹放在themes下，另外稍微修改 __yml文件下，theme:lanscape 即可。\n\n![这里写图片描述](http://img.blog.csdn.net/20180118160508595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n相关的配置，我们可以follow官方推荐作者的github去看看人家的wiki或者code，都有详尽的说明，甚至可以加QQ咨询......\n\n![这里写图片描述](http://img.blog.csdn.net/20180118160644506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 最终效果与总结 ##\nWelcome to the ZQ-jhon.github.io wiki!\n![基本效果预览](http://img.blog.csdn.net/20180118163837782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![文章详情预览](http://img.blog.csdn.net/20180118163853108?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![搜索模块预览](http://img.blog.csdn.net/20180118163911153?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n不得不说GITHUB开源生态真的非常强大，感谢这些开发者带来的精美主题。\n\n感谢主题作者Miachel.Lu[HEXO-Mellow-theme  点击查看该项目](https://github.com/codefine/hexo-theme-mellow)\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"基于HEXO的个人博客图文搭建详尽过程，看不懂算我输","published":1,"updated":"2019-05-14T14:30:28.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawh001ockufdvn488my","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79096846\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>须知：</strong><br><em>1.最终生成的博客地址必须是： ZQ-jhon.github.io  即用户名.github.io</em><br><em>2.本地的HEXO仓库，命名必须也为 ZQ-jhon.github.io ，HEXO项目放置于该目录之下。</em></p>\n<p>昨天经过一番折腾，终于将HEXO部署上线了，以下对于昨天整个搭建的过程做一个详细的回顾。</p>\n<p>HEXO是基于NODE的一款博客框架，有很多丰富的主题可以选择，配合GIT来使用。</p>\n<p>Git回顾：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78773371\" target=\"_blank\" rel=\"noopener\">本地仓</a>、<a href=\"http://blog.csdn.net/qq_20264891/article/details/78774208\" target=\"_blank\" rel=\"noopener\">远程仓</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>整个安装过程我是参考一位博主：<a href=\"http://www.chenyijun.net/2016/06/04/hexo_teach_1/\" target=\"_blank\" rel=\"noopener\">HEXO系列教程</a></p>\n<p>以下用自己的理解来做一番梳理与归纳：</p>\n<p>*先介绍HEXO中的4个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g #完整命令为hexo generate，用于生成静态文件  </span><br><span class=\"line\">$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览  </span><br><span class=\"line\">$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上  </span><br><span class=\"line\">$ hexo n #完整命令为hexo new，用于新建一篇文章</span><br></pre></td></tr></table></figure>\n<p>首先，确保本地Git公钥与Github公钥相匹配，参照：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78773371\" target=\"_blank\" rel=\"noopener\">Git本地仓</a></p>\n<p>确认匹配后，新建Repository，命名的时候，规范为：</p>\n<p>github名字.github.io</p>\n<p>因此，这里的新仓库名字应该为： ZQ-jhon.github.io</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118155548420?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>同样的，在本地新建一个同名的目录：ZQ-jhon.github.io  ，然后打开目录，文件夹是空的</p>\n<p><strong>此时，在项目目录下右键打开Gitbash here</strong></p>\n<p>1.<code>$ cnpm install hexo-cli -g</code>&nbsp; &nbsp; &nbsp; 使用淘宝镜像安装hexo-cli</p>\n<p>2.<code>npm install hexo-deployer-git --save</code>&nbsp;&nbsp;&nbsp; 模块安装到开发目录</p>\n<p>3.<code>$ hexo init</code>&nbsp;&nbsp;&nbsp;初始化</p>\n<p>4.<code>$cnpm install</code>&nbsp;&nbsp;&nbsp;安装依赖</p>\n<p>（PS：中途如果出现问题，可以 <code>cnpm install hexo-deployer-git --save 安装GIT的PUSH插件）</code><br>5.<code>$hexo g &amp;&amp; hexo s</code> 构建(genereater)并启动服务(server)，在locallhost:4000下即可预览效果</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118154519905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<h2 id=\"远程部署\"><a href=\"#远程部署\" class=\"headerlink\" title=\"远程部署\"></a>远程部署</h2><p>本地的文件我们已经在locallhost:4000端口预览的非常满意了，如何部署到站点(github)上呢？</p>\n<p>1.首先，找到HEXO目录下的 __yml文件，在最下面修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:ZQ-jhon/ZQ-jhon.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118154939998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n<p><strong><em>注意：如下图所示，这里的repository地址就是Github download时弹出的项目地址，但是最好不要用HTTPS协议，走SSH协议，昨天因为这个问题，调试了一下午！！！</em></strong></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118155710430?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>2.布置好以后，我们来Ping一下Github，看能否有响应：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118155238282?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>欢迎了一波，很稳。</p>\n<p>此时，直接把Server   Ctrl + C</p>\n<p>然后 <code>$HEXO D</code>&nbsp;&nbsp;&nbsp;直接推送，稍等片刻，打开Github仓库，看看文件是否上传成功</p>\n<p>如果上传成功，大功告成，打开 <a href=\"https:ZQ-jhon.github.io\" target=\"_blank\" rel=\"noopener\">https:ZQ-jhon.github.io</a>即可访问博客页面了。</p>\n<h2 id=\"文章新建与MarkDown语法\"><a href=\"#文章新建与MarkDown语法\" class=\"headerlink\" title=\"文章新建与MarkDown语法\"></a>文章新建与MarkDown语法</h2><p>新建文章 <code>$hexo n filename</code></p>\n<p>这个比较简单，建完文件，也别秀骚操作了，老老实实去source文件夹的_post文件夹里面，去用一个好点的编辑器，修改文本文档，保存为UTF-8格式，并且修改后缀名为.md，保存类型为所有类型，否则上线部署会产生乱码。</p>\n<p>值得一提的是，CSDN的在线文档编辑器就采用的是MarkDown语法，而且该种语法与标签语言完全兼容，因此，可以将HTML代码原封不动的全被拷贝近.md文件。</p>\n<p>##主题更换与配置##</p>\n<p>在我们HEXO根目录下，有一个themes文件夹，里面存放的都是各式各样的主题，默认的是landscape，我们可以去官网，HEXO的THEME分类下下载更多精美的主题，然后解压缩，将文件夹放在themes下，另外稍微修改 __yml文件下，theme:lanscape 即可。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118160508595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>相关的配置，我们可以follow官方推荐作者的github去看看人家的wiki或者code，都有详尽的说明，甚至可以加QQ咨询……</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118160644506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<h2 id=\"最终效果与总结\"><a href=\"#最终效果与总结\" class=\"headerlink\" title=\"最终效果与总结\"></a>最终效果与总结</h2><p>Welcome to the ZQ-jhon.github.io wiki!<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118163837782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"基本效果预览\" title=\"\" class=\"\">\n                <p>基本效果预览</p>\n            </figure><br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118163853108?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"文章详情预览\" title=\"\" class=\"\">\n                <p>文章详情预览</p>\n            </figure><br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118163911153?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"搜索模块预览\" title=\"\" class=\"\">\n                <p>搜索模块预览</p>\n            </figure></p>\n<p>不得不说GITHUB开源生态真的非常强大，感谢这些开发者带来的精美主题。</p>\n<p>感谢主题作者Miachel.Lu<a href=\"https://github.com/codefine/hexo-theme-mellow\" target=\"_blank\" rel=\"noopener\">HEXO-Mellow-theme  点击查看该项目</a></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79096846\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>须知：</strong><br><em>1.最终生成的博客地址必须是： ZQ-jhon.github.io  即用户名.github.io</em><br><em>2.本地的HEXO仓库，命名必须也为 ZQ-jhon.github.io ，HEXO项目放置于该目录之下。</em></p>\n<p>昨天经过一番折腾，终于将HEXO部署上线了，以下对于昨天整个搭建的过程做一个详细的回顾。</p>\n<p>HEXO是基于NODE的一款博客框架，有很多丰富的主题可以选择，配合GIT来使用。</p>\n<p>Git回顾：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78773371\" target=\"_blank\" rel=\"noopener\">本地仓</a>、<a href=\"http://blog.csdn.net/qq_20264891/article/details/78774208\" target=\"_blank\" rel=\"noopener\">远程仓</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>整个安装过程我是参考一位博主：<a href=\"http://www.chenyijun.net/2016/06/04/hexo_teach_1/\" target=\"_blank\" rel=\"noopener\">HEXO系列教程</a></p>\n<p>以下用自己的理解来做一番梳理与归纳：</p>\n<p>*先介绍HEXO中的4个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g #完整命令为hexo generate，用于生成静态文件  </span><br><span class=\"line\">$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览  </span><br><span class=\"line\">$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上  </span><br><span class=\"line\">$ hexo n #完整命令为hexo new，用于新建一篇文章</span><br></pre></td></tr></table></figure>\n<p>首先，确保本地Git公钥与Github公钥相匹配，参照：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78773371\" target=\"_blank\" rel=\"noopener\">Git本地仓</a></p>\n<p>确认匹配后，新建Repository，命名的时候，规范为：</p>\n<p>github名字.github.io</p>\n<p>因此，这里的新仓库名字应该为： ZQ-jhon.github.io</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118155548420?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>同样的，在本地新建一个同名的目录：ZQ-jhon.github.io  ，然后打开目录，文件夹是空的</p>\n<p><strong>此时，在项目目录下右键打开Gitbash here</strong></p>\n<p>1.<code>$ cnpm install hexo-cli -g</code>&nbsp; &nbsp; &nbsp; 使用淘宝镜像安装hexo-cli</p>\n<p>2.<code>npm install hexo-deployer-git --save</code>&nbsp;&nbsp;&nbsp; 模块安装到开发目录</p>\n<p>3.<code>$ hexo init</code>&nbsp;&nbsp;&nbsp;初始化</p>\n<p>4.<code>$cnpm install</code>&nbsp;&nbsp;&nbsp;安装依赖</p>\n<p>（PS：中途如果出现问题，可以 <code>cnpm install hexo-deployer-git --save 安装GIT的PUSH插件）</code><br>5.<code>$hexo g &amp;&amp; hexo s</code> 构建(genereater)并启动服务(server)，在locallhost:4000下即可预览效果</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118154519905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<h2 id=\"远程部署\"><a href=\"#远程部署\" class=\"headerlink\" title=\"远程部署\"></a>远程部署</h2><p>本地的文件我们已经在locallhost:4000端口预览的非常满意了，如何部署到站点(github)上呢？</p>\n<p>1.首先，找到HEXO目录下的 __yml文件，在最下面修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:ZQ-jhon/ZQ-jhon.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118154939998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n<p><strong><em>注意：如下图所示，这里的repository地址就是Github download时弹出的项目地址，但是最好不要用HTTPS协议，走SSH协议，昨天因为这个问题，调试了一下午！！！</em></strong></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118155710430?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>2.布置好以后，我们来Ping一下Github，看能否有响应：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118155238282?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>欢迎了一波，很稳。</p>\n<p>此时，直接把Server   Ctrl + C</p>\n<p>然后 <code>$HEXO D</code>&nbsp;&nbsp;&nbsp;直接推送，稍等片刻，打开Github仓库，看看文件是否上传成功</p>\n<p>如果上传成功，大功告成，打开 <a href=\"https:ZQ-jhon.github.io\" target=\"_blank\" rel=\"noopener\">https:ZQ-jhon.github.io</a>即可访问博客页面了。</p>\n<h2 id=\"文章新建与MarkDown语法\"><a href=\"#文章新建与MarkDown语法\" class=\"headerlink\" title=\"文章新建与MarkDown语法\"></a>文章新建与MarkDown语法</h2><p>新建文章 <code>$hexo n filename</code></p>\n<p>这个比较简单，建完文件，也别秀骚操作了，老老实实去source文件夹的_post文件夹里面，去用一个好点的编辑器，修改文本文档，保存为UTF-8格式，并且修改后缀名为.md，保存类型为所有类型，否则上线部署会产生乱码。</p>\n<p>值得一提的是，CSDN的在线文档编辑器就采用的是MarkDown语法，而且该种语法与标签语言完全兼容，因此，可以将HTML代码原封不动的全被拷贝近.md文件。</p>\n<p>##主题更换与配置##</p>\n<p>在我们HEXO根目录下，有一个themes文件夹，里面存放的都是各式各样的主题，默认的是landscape，我们可以去官网，HEXO的THEME分类下下载更多精美的主题，然后解压缩，将文件夹放在themes下，另外稍微修改 __yml文件下，theme:lanscape 即可。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118160508595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>相关的配置，我们可以follow官方推荐作者的github去看看人家的wiki或者code，都有详尽的说明，甚至可以加QQ咨询……</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118160644506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<h2 id=\"最终效果与总结\"><a href=\"#最终效果与总结\" class=\"headerlink\" title=\"最终效果与总结\"></a>最终效果与总结</h2><p>Welcome to the ZQ-jhon.github.io wiki!<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118163837782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"基本效果预览\" title=\"\" class=\"\">\n                <p>基本效果预览</p>\n            </figure><br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118163853108?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"文章详情预览\" title=\"\" class=\"\">\n                <p>文章详情预览</p>\n            </figure><br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180118163911153?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"搜索模块预览\" title=\"\" class=\"\">\n                <p>搜索模块预览</p>\n            </figure></p>\n<p>不得不说GITHUB开源生态真的非常强大，感谢这些开发者带来的精美主题。</p>\n<p>感谢主题作者Miachel.Lu<a href=\"https://github.com/codefine/hexo-theme-mellow\" target=\"_blank\" rel=\"noopener\">HEXO-Mellow-theme  点击查看该项目</a></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"用原生js制作一个动态简历(多动症简历)及在线预览部署过程","date":"2018-01-29T09:18:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79197651)\n\n\n\n本项目Fork地址(欢迎Star)：\n--\n[https://github.com/ZQ-jhon/resume](https://github.com/ZQ-jhon/resume)\n\n\n本项目预览地址(Preview Address)\n--\nPreview :  [多动症简历](https://zq-jhon.github.io/resume/)\n\n项目起因\n--\n因为在网上看到一个大神做的动态简历，如连接所示：\n\n[http://strml.net/](http://strml.net/)\n\n炫不炫？酷不酷？其实这个项目其实很简单，整个代码中，js的API超不过10个。\n\n引用的第三方库\n--\n1.jQuery  实际用到的地方只有1%\n\n2.prism   代码高亮库。用到30%\n\n3.marked.js markdown语法转html的库，实际用到20%\n\n技术概要\n--\n通篇中使用的技术难度并不大，主要有：\n\n\n - **核心原理：**同时向一个style标签和pre标签吐代码，pre中显示源码，而style中直接可以变成样式。\n \n - 字符串提取、拼接。\n \n - setInterval定时器控制整个代码的吞吐节奏/速率。\n \n - 在setInterval中设定一些if，用来控制总字符串的吞吐位置。\n \n 避坑指南\n--\n**1.注意字符串拼接 ： 要注意字符串拼接的时候，往styleTag里面吐的代码，一旦包含注释/**/，要对/进行转义，如下`\\/*这里填写你的内容*\\/。**\n\n**2.字符串的命名一定要切实合理： 如图所示：**\n\n![字符串的命名](http://img.blog.csdn.net/20180129213013960?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**3.代码高亮渲染 ： 中途加入代码高亮渲染的时候，通过判定字符串循环的 n ++ 达到多少，从而用if(n>123&&n<321)这种方法来进行区域渲染。prism的渲染代码如下：**\n\n```\n\n官方js库地址：[http://prismjs.com/](http://prismjs.com/)\n\n语法:prism.heihlight(渲染的字符串,渲染的代码格式)\n\nPrism.highlight(str.substring(0,n), Prism.languages.css);\n\n```\n\n\n**4.MarkDown ⇒ HTML渲染 ：  同样根据n的值，来使用if()来进行循环。**\n\nmarked.js官方库地址：[https://www.npmjs.com/package/marked](https://www.npmjs.com/package/marked)\n\n渲染代码如下:\n\n`drawBoard.innerHTML =marked(str.substring(929,1885));`\n\n**5.动态创建Pre标签（id=\"drawBoard\"）  ：  CSS代码版是一开始写在HTML的，但是之后的简历板子（id=\"drawBoard\"，本质上是个pre标签）是通过判断n的值，来动态创建的，如图所示：**\n\n![动态创建drawBoard](http://img.blog.csdn.net/20180129214532614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**6.已经创建的元素无法在另外的循环中获取 ：**\n **在刚才的【5】中，动态创建的pre标签(id=\"drawBoard\")会在if()的区域内无法document.getElementById('drawBoard')，此时需要在if里面再次获取并且赋值，如图所示：**\n\n\n![再次赋值](http://img.blog.csdn.net/20180129214929626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n**7.动态下拉   同样通过n的值来让元素的溢出自动下拉**\n\n如图：\n\n![动态下拉](http://img.blog.csdn.net/20180129215552841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**8. 动态简历最后的魔术环节  ：   还是通过n的值来进行判断，从而渲染 **\n\n其实这个环节就是故弄玄虚，通过判断CSS代码板 的 最后结尾字符串的n值，来进行渲染。\n\n\n代码如图：\n\n\n![魔术效果实现](http://img.blog.csdn.net/20180129215916887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n核心原理代码\n--\n\n```\n//注意事项，往style标签里面吐字符串时，要注意对/**/注释标签进行转义\n\nvar styleTag = document.getElementById('styleTag');\n\nvar sourceBoard = document.getElementById('sourceBoard');\n\nvar str = '\\/*大家好...今天我给大家做一个在线简历...\\/*';\n\n\nvar n = 0;\nwindow.setInterval(function(){\n   n++;\n   styleTag.innerHTML = str.substring(0,n);\n    \n   sourceBoard.innerHTML = str.substring(0,n);\n\n\n},100);\n\n//此时，用户观看字符串轮番出现的同时，程序也已经向style标签吐了代码，这样，当用户看完一个CSS样式结束后，对应的样式可以立马通过浏览器渲染出来。\n```\n Demo部署到GitHub详细过程\n--\n本来还不知道Demo可以直接在Github上预览。。。直到发现这样的功能：\n\n![gh-pages预览项目](http://img.blog.csdn.net/20180129220933667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在Demo的仓库里，点击Settings，然后找到GitHub Pages，设置源为master主分支（此项目只有一个分支，所以也没得选），点击Save保存，即可出现预览地址，一般保存后会稍有延迟。\n\n整个部署的环节大致如下：\n\n 1. 在本地的项目根目录下，`$ git init`\n\n 2. 加入当前所有文件到暂存区 `$ git add .`(后面有个“·”，代表全部文件)\n\n 3. 连接远程仓库  `$ git remote add origin \"your repository address\"`\n\n 4. 提交所有文件到git版本控制系统 `$ git commit -m \"create Demo resume\"`\n\n 5. push到你的远程仓库 `$ git push origin master`\n\n 6. 打开浏览器，进入这个目录的respository，点击settings,设置GitHub pages为 master,稍等片刻，即可预览。\n \n PS:学会这个骚操作，我把以前做的好多Demo都给部署了一遍，目前都可以预览，感谢GitHub\n\n 反思与不足\n--\n\n\n 1. 在快速预览模式下，例如，将setInterval的间隔时间设为0，整个页面跑完，容易出现两个代码版的下拉滚动条“假死”,拉不动，但是将间隔时间设定为正常的90ms或者100ms，整个页面跑完没有任何问题。我初步总结的原因是，因为每次下拉的值是1000，这个下拉的动作很可能重复几百次，几千次。所以当间隔时间极小，重复次数极高，下拉值极大，那么这种现象就越容易出现。\n\n\n 2. 我在向一些前端前辈请教这个Demo的不足之处时，大神告诉我：面试官只关心页面上的信息，而不是如何呈现，更不能忍受长达200s的等待。这个Demo算是炫技，但是又没有什么核心的技术点，还不如老老实实的写一份干净清爽的简历实在。\n\n 我的反思是，这个Demo由于大量的字符串以及转义字符拼接，因而没有像原作者：[http://strml.net/](http://strml.net/)的页面那样，呈现的美轮美奂，这也是我在写Demo之初没有全局考虑的结果，导致现在如果加一些CSS代码，会带来极大的工作量。\n 3. 整个页面没有加速或者暂停的功能，其实这个倒是简单，设置三个按钮：慢，中速，快速，在setInterval中的if里，对点击事件进行监听，一旦点击，就修改setInterval的时间间隔，然后return当前的n值。\n \n \n 4. 整个Demo代码过于混乱，没有进行封装，因为自己现在对面向对象还是有些手生，希望以后进行封装，以便提高运行效率，以及复用。\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/用原生js制作一个动态简历(多动症简历)及在线预览部署过程.md","raw":"---\ntitle:  用原生js制作一个动态简历(多动症简历)及在线预览部署过程 \ndate: 2018-01-29 17:18:00\ntags: [动态简历,Github部署]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79197651)\n\n\n\n本项目Fork地址(欢迎Star)：\n--\n[https://github.com/ZQ-jhon/resume](https://github.com/ZQ-jhon/resume)\n\n\n本项目预览地址(Preview Address)\n--\nPreview :  [多动症简历](https://zq-jhon.github.io/resume/)\n\n项目起因\n--\n因为在网上看到一个大神做的动态简历，如连接所示：\n\n[http://strml.net/](http://strml.net/)\n\n炫不炫？酷不酷？其实这个项目其实很简单，整个代码中，js的API超不过10个。\n\n引用的第三方库\n--\n1.jQuery  实际用到的地方只有1%\n\n2.prism   代码高亮库。用到30%\n\n3.marked.js markdown语法转html的库，实际用到20%\n\n技术概要\n--\n通篇中使用的技术难度并不大，主要有：\n\n\n - **核心原理：**同时向一个style标签和pre标签吐代码，pre中显示源码，而style中直接可以变成样式。\n \n - 字符串提取、拼接。\n \n - setInterval定时器控制整个代码的吞吐节奏/速率。\n \n - 在setInterval中设定一些if，用来控制总字符串的吞吐位置。\n \n 避坑指南\n--\n**1.注意字符串拼接 ： 要注意字符串拼接的时候，往styleTag里面吐的代码，一旦包含注释/**/，要对/进行转义，如下`\\/*这里填写你的内容*\\/。**\n\n**2.字符串的命名一定要切实合理： 如图所示：**\n\n![字符串的命名](http://img.blog.csdn.net/20180129213013960?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**3.代码高亮渲染 ： 中途加入代码高亮渲染的时候，通过判定字符串循环的 n ++ 达到多少，从而用if(n>123&&n<321)这种方法来进行区域渲染。prism的渲染代码如下：**\n\n```\n\n官方js库地址：[http://prismjs.com/](http://prismjs.com/)\n\n语法:prism.heihlight(渲染的字符串,渲染的代码格式)\n\nPrism.highlight(str.substring(0,n), Prism.languages.css);\n\n```\n\n\n**4.MarkDown ⇒ HTML渲染 ：  同样根据n的值，来使用if()来进行循环。**\n\nmarked.js官方库地址：[https://www.npmjs.com/package/marked](https://www.npmjs.com/package/marked)\n\n渲染代码如下:\n\n`drawBoard.innerHTML =marked(str.substring(929,1885));`\n\n**5.动态创建Pre标签（id=\"drawBoard\"）  ：  CSS代码版是一开始写在HTML的，但是之后的简历板子（id=\"drawBoard\"，本质上是个pre标签）是通过判断n的值，来动态创建的，如图所示：**\n\n![动态创建drawBoard](http://img.blog.csdn.net/20180129214532614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**6.已经创建的元素无法在另外的循环中获取 ：**\n **在刚才的【5】中，动态创建的pre标签(id=\"drawBoard\")会在if()的区域内无法document.getElementById('drawBoard')，此时需要在if里面再次获取并且赋值，如图所示：**\n\n\n![再次赋值](http://img.blog.csdn.net/20180129214929626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n**7.动态下拉   同样通过n的值来让元素的溢出自动下拉**\n\n如图：\n\n![动态下拉](http://img.blog.csdn.net/20180129215552841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**8. 动态简历最后的魔术环节  ：   还是通过n的值来进行判断，从而渲染 **\n\n其实这个环节就是故弄玄虚，通过判断CSS代码板 的 最后结尾字符串的n值，来进行渲染。\n\n\n代码如图：\n\n\n![魔术效果实现](http://img.blog.csdn.net/20180129215916887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n核心原理代码\n--\n\n```\n//注意事项，往style标签里面吐字符串时，要注意对/**/注释标签进行转义\n\nvar styleTag = document.getElementById('styleTag');\n\nvar sourceBoard = document.getElementById('sourceBoard');\n\nvar str = '\\/*大家好...今天我给大家做一个在线简历...\\/*';\n\n\nvar n = 0;\nwindow.setInterval(function(){\n   n++;\n   styleTag.innerHTML = str.substring(0,n);\n    \n   sourceBoard.innerHTML = str.substring(0,n);\n\n\n},100);\n\n//此时，用户观看字符串轮番出现的同时，程序也已经向style标签吐了代码，这样，当用户看完一个CSS样式结束后，对应的样式可以立马通过浏览器渲染出来。\n```\n Demo部署到GitHub详细过程\n--\n本来还不知道Demo可以直接在Github上预览。。。直到发现这样的功能：\n\n![gh-pages预览项目](http://img.blog.csdn.net/20180129220933667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在Demo的仓库里，点击Settings，然后找到GitHub Pages，设置源为master主分支（此项目只有一个分支，所以也没得选），点击Save保存，即可出现预览地址，一般保存后会稍有延迟。\n\n整个部署的环节大致如下：\n\n 1. 在本地的项目根目录下，`$ git init`\n\n 2. 加入当前所有文件到暂存区 `$ git add .`(后面有个“·”，代表全部文件)\n\n 3. 连接远程仓库  `$ git remote add origin \"your repository address\"`\n\n 4. 提交所有文件到git版本控制系统 `$ git commit -m \"create Demo resume\"`\n\n 5. push到你的远程仓库 `$ git push origin master`\n\n 6. 打开浏览器，进入这个目录的respository，点击settings,设置GitHub pages为 master,稍等片刻，即可预览。\n \n PS:学会这个骚操作，我把以前做的好多Demo都给部署了一遍，目前都可以预览，感谢GitHub\n\n 反思与不足\n--\n\n\n 1. 在快速预览模式下，例如，将setInterval的间隔时间设为0，整个页面跑完，容易出现两个代码版的下拉滚动条“假死”,拉不动，但是将间隔时间设定为正常的90ms或者100ms，整个页面跑完没有任何问题。我初步总结的原因是，因为每次下拉的值是1000，这个下拉的动作很可能重复几百次，几千次。所以当间隔时间极小，重复次数极高，下拉值极大，那么这种现象就越容易出现。\n\n\n 2. 我在向一些前端前辈请教这个Demo的不足之处时，大神告诉我：面试官只关心页面上的信息，而不是如何呈现，更不能忍受长达200s的等待。这个Demo算是炫技，但是又没有什么核心的技术点，还不如老老实实的写一份干净清爽的简历实在。\n\n 我的反思是，这个Demo由于大量的字符串以及转义字符拼接，因而没有像原作者：[http://strml.net/](http://strml.net/)的页面那样，呈现的美轮美奂，这也是我在写Demo之初没有全局考虑的结果，导致现在如果加一些CSS代码，会带来极大的工作量。\n 3. 整个页面没有加速或者暂停的功能，其实这个倒是简单，设置三个按钮：慢，中速，快速，在setInterval中的if里，对点击事件进行监听，一旦点击，就修改setInterval的时间间隔，然后return当前的n值。\n \n \n 4. 整个Demo代码过于混乱，没有进行封装，因为自己现在对面向对象还是有些手生，希望以后进行封装，以便提高运行效率，以及复用。\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"用原生js制作一个动态简历(多动症简历)及在线预览部署过程","published":1,"updated":"2019-05-14T14:30:28.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawi001pckufrze9b0mr","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79197651\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"本项目Fork地址-欢迎Star-：\"><a href=\"#本项目Fork地址-欢迎Star-：\" class=\"headerlink\" title=\"本项目Fork地址(欢迎Star)：\"></a>本项目Fork地址(欢迎Star)：</h2><p><a href=\"https://github.com/ZQ-jhon/resume\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/resume</a></p>\n<h2 id=\"本项目预览地址-Preview-Address\"><a href=\"#本项目预览地址-Preview-Address\" class=\"headerlink\" title=\"本项目预览地址(Preview Address)\"></a>本项目预览地址(Preview Address)</h2><p>Preview :  <a href=\"https://zq-jhon.github.io/resume/\" target=\"_blank\" rel=\"noopener\">多动症简历</a></p>\n<h2 id=\"项目起因\"><a href=\"#项目起因\" class=\"headerlink\" title=\"项目起因\"></a>项目起因</h2><p>因为在网上看到一个大神做的动态简历，如连接所示：</p>\n<p><a href=\"http://strml.net/\" target=\"_blank\" rel=\"noopener\">http://strml.net/</a></p>\n<p>炫不炫？酷不酷？其实这个项目其实很简单，整个代码中，js的API超不过10个。</p>\n<h2 id=\"引用的第三方库\"><a href=\"#引用的第三方库\" class=\"headerlink\" title=\"引用的第三方库\"></a>引用的第三方库</h2><p>1.jQuery  实际用到的地方只有1%</p>\n<p>2.prism   代码高亮库。用到30%</p>\n<p>3.marked.js markdown语法转html的库，实际用到20%</p>\n<h2 id=\"技术概要\"><a href=\"#技术概要\" class=\"headerlink\" title=\"技术概要\"></a>技术概要</h2><p>通篇中使用的技术难度并不大，主要有：</p>\n<ul>\n<li><p><strong>核心原理：</strong>同时向一个style标签和pre标签吐代码，pre中显示源码，而style中直接可以变成样式。</p>\n</li>\n<li><p>字符串提取、拼接。</p>\n</li>\n<li><p>setInterval定时器控制整个代码的吞吐节奏/速率。</p>\n</li>\n<li><p>在setInterval中设定一些if，用来控制总字符串的吞吐位置。</p>\n<h2 id=\"避坑指南\"><a href=\"#避坑指南\" class=\"headerlink\" title=\"避坑指南\"></a>避坑指南</h2><p><strong>1.注意字符串拼接 ： 要注意字符串拼接的时候，往styleTag里面吐的代码，一旦包含注释/</strong>/，要对/进行转义，如下`\\/<em>这里填写你的内容</em>\\/。**</p>\n</li>\n</ul>\n<p><strong>2.字符串的命名一定要切实合理： 如图所示：</strong></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180129213013960?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"字符串的命名\" title=\"\" class=\"\">\n                <p>字符串的命名</p>\n            </figure>\n<p><strong>3.代码高亮渲染 ： 中途加入代码高亮渲染的时候，通过判定字符串循环的 n ++ 达到多少，从而用if(n&gt;123&amp;&amp;n&lt;321)这种方法来进行区域渲染。prism的渲染代码如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">官方js库地址：[http://prismjs.com/](http://prismjs.com/)</span><br><span class=\"line\"></span><br><span class=\"line\">语法:prism.heihlight(渲染的字符串,渲染的代码格式)</span><br><span class=\"line\"></span><br><span class=\"line\">Prism.highlight(str.substring(0,n), Prism.languages.css);</span><br></pre></td></tr></table></figure>\n<p><strong>4.MarkDown ⇒ HTML渲染 ：  同样根据n的值，来使用if()来进行循环。</strong></p>\n<p>marked.js官方库地址：<a href=\"https://www.npmjs.com/package/marked\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/marked</a></p>\n<p>渲染代码如下:</p>\n<p><code>drawBoard.innerHTML =marked(str.substring(929,1885));</code></p>\n<p><strong>5.动态创建Pre标签（id=”drawBoard”）  ：  CSS代码版是一开始写在HTML的，但是之后的简历板子（id=”drawBoard”，本质上是个pre标签）是通过判断n的值，来动态创建的，如图所示：</strong></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180129214532614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"动态创建drawBoard\" title=\"\" class=\"\">\n                <p>动态创建drawBoard</p>\n            </figure>\n<p><strong>6.已经创建的元素无法在另外的循环中获取 ：</strong><br> <strong>在刚才的【5】中，动态创建的pre标签(id=”drawBoard”)会在if()的区域内无法document.getElementById(‘drawBoard’)，此时需要在if里面再次获取并且赋值，如图所示：</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20180129214929626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"再次赋值\"></p>\n<p><strong>7.动态下拉   同样通过n的值来让元素的溢出自动下拉</strong></p>\n<p>如图：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180129215552841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"动态下拉\" title=\"\" class=\"\">\n                <p>动态下拉</p>\n            </figure>\n<p><strong>8. 动态简历最后的魔术环节  ：   还是通过n的值来进行判断，从而渲染 </strong></p>\n<p>其实这个环节就是故弄玄虚，通过判断CSS代码板 的 最后结尾字符串的n值，来进行渲染。</p>\n<p>代码如图：</p>\n<p><img src=\"http://img.blog.csdn.net/20180129215916887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"魔术效果实现\"></p>\n<h2 id=\"核心原理代码\"><a href=\"#核心原理代码\" class=\"headerlink\" title=\"核心原理代码\"></a>核心原理代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意事项，往style标签里面吐字符串时，要注意对/**/注释标签进行转义</span><br><span class=\"line\"></span><br><span class=\"line\">var styleTag = document.getElementById(&apos;styleTag&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var sourceBoard = document.getElementById(&apos;sourceBoard&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var str = &apos;\\/*大家好...今天我给大家做一个在线简历...\\/*&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var n = 0;</span><br><span class=\"line\">window.setInterval(function()&#123;</span><br><span class=\"line\">   n++;</span><br><span class=\"line\">   styleTag.innerHTML = str.substring(0,n);</span><br><span class=\"line\">    </span><br><span class=\"line\">   sourceBoard.innerHTML = str.substring(0,n);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,100);</span><br><span class=\"line\"></span><br><span class=\"line\">//此时，用户观看字符串轮番出现的同时，程序也已经向style标签吐了代码，这样，当用户看完一个CSS样式结束后，对应的样式可以立马通过浏览器渲染出来。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Demo部署到GitHub详细过程\"><a href=\"#Demo部署到GitHub详细过程\" class=\"headerlink\" title=\" Demo部署到GitHub详细过程\"></a> Demo部署到GitHub详细过程</h2><p>本来还不知道Demo可以直接在Github上预览。。。直到发现这样的功能：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180129220933667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gh-pages预览项目\" title=\"\" class=\"\">\n                <p>gh-pages预览项目</p>\n            </figure>\n<p>在Demo的仓库里，点击Settings，然后找到GitHub Pages，设置源为master主分支（此项目只有一个分支，所以也没得选），点击Save保存，即可出现预览地址，一般保存后会稍有延迟。</p>\n<p>整个部署的环节大致如下：</p>\n<ol>\n<li><p>在本地的项目根目录下，<code>$ git init</code></p>\n</li>\n<li><p>加入当前所有文件到暂存区 <code>$ git add .</code>(后面有个“·”，代表全部文件)</p>\n</li>\n<li><p>连接远程仓库  <code>$ git remote add origin &quot;your repository address&quot;</code></p>\n</li>\n<li><p>提交所有文件到git版本控制系统 <code>$ git commit -m &quot;create Demo resume&quot;</code></p>\n</li>\n<li><p>push到你的远程仓库 <code>$ git push origin master</code></p>\n</li>\n<li><p>打开浏览器，进入这个目录的respository，点击settings,设置GitHub pages为 master,稍等片刻，即可预览。</p>\n<p>PS:学会这个骚操作，我把以前做的好多Demo都给部署了一遍，目前都可以预览，感谢GitHub</p>\n<h2 id=\"反思与不足\"><a href=\"#反思与不足\" class=\"headerlink\" title=\"反思与不足\"></a>反思与不足</h2></li>\n</ol>\n<ol>\n<li>在快速预览模式下，例如，将setInterval的间隔时间设为0，整个页面跑完，容易出现两个代码版的下拉滚动条“假死”,拉不动，但是将间隔时间设定为正常的90ms或者100ms，整个页面跑完没有任何问题。我初步总结的原因是，因为每次下拉的值是1000，这个下拉的动作很可能重复几百次，几千次。所以当间隔时间极小，重复次数极高，下拉值极大，那么这种现象就越容易出现。</li>\n</ol>\n<ol start=\"2\">\n<li><p>我在向一些前端前辈请教这个Demo的不足之处时，大神告诉我：面试官只关心页面上的信息，而不是如何呈现，更不能忍受长达200s的等待。这个Demo算是炫技，但是又没有什么核心的技术点，还不如老老实实的写一份干净清爽的简历实在。</p>\n<p>我的反思是，这个Demo由于大量的字符串以及转义字符拼接，因而没有像原作者：<a href=\"http://strml.net/\" target=\"_blank\" rel=\"noopener\">http://strml.net/</a>的页面那样，呈现的美轮美奂，这也是我在写Demo之初没有全局考虑的结果，导致现在如果加一些CSS代码，会带来极大的工作量。</p>\n</li>\n<li>整个页面没有加速或者暂停的功能，其实这个倒是简单，设置三个按钮：慢，中速，快速，在setInterval中的if里，对点击事件进行监听，一旦点击，就修改setInterval的时间间隔，然后return当前的n值。</li>\n</ol>\n<ol start=\"4\">\n<li>整个Demo代码过于混乱，没有进行封装，因为自己现在对面向对象还是有些手生，希望以后进行封装，以便提高运行效率，以及复用。</li>\n</ol>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79197651\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"本项目Fork地址-欢迎Star-：\"><a href=\"#本项目Fork地址-欢迎Star-：\" class=\"headerlink\" title=\"本项目Fork地址(欢迎Star)：\"></a>本项目Fork地址(欢迎Star)：</h2><p><a href=\"https://github.com/ZQ-jhon/resume\" target=\"_blank\" rel=\"noopener\">https://github.com/ZQ-jhon/resume</a></p>\n<h2 id=\"本项目预览地址-Preview-Address\"><a href=\"#本项目预览地址-Preview-Address\" class=\"headerlink\" title=\"本项目预览地址(Preview Address)\"></a>本项目预览地址(Preview Address)</h2><p>Preview :  <a href=\"https://zq-jhon.github.io/resume/\" target=\"_blank\" rel=\"noopener\">多动症简历</a></p>\n<h2 id=\"项目起因\"><a href=\"#项目起因\" class=\"headerlink\" title=\"项目起因\"></a>项目起因</h2><p>因为在网上看到一个大神做的动态简历，如连接所示：</p>\n<p><a href=\"http://strml.net/\" target=\"_blank\" rel=\"noopener\">http://strml.net/</a></p>\n<p>炫不炫？酷不酷？其实这个项目其实很简单，整个代码中，js的API超不过10个。</p>\n<h2 id=\"引用的第三方库\"><a href=\"#引用的第三方库\" class=\"headerlink\" title=\"引用的第三方库\"></a>引用的第三方库</h2><p>1.jQuery  实际用到的地方只有1%</p>\n<p>2.prism   代码高亮库。用到30%</p>\n<p>3.marked.js markdown语法转html的库，实际用到20%</p>\n<h2 id=\"技术概要\"><a href=\"#技术概要\" class=\"headerlink\" title=\"技术概要\"></a>技术概要</h2><p>通篇中使用的技术难度并不大，主要有：</p>\n<ul>\n<li><p><strong>核心原理：</strong>同时向一个style标签和pre标签吐代码，pre中显示源码，而style中直接可以变成样式。</p>\n</li>\n<li><p>字符串提取、拼接。</p>\n</li>\n<li><p>setInterval定时器控制整个代码的吞吐节奏/速率。</p>\n</li>\n<li><p>在setInterval中设定一些if，用来控制总字符串的吞吐位置。</p>\n<h2 id=\"避坑指南\"><a href=\"#避坑指南\" class=\"headerlink\" title=\"避坑指南\"></a>避坑指南</h2><p><strong>1.注意字符串拼接 ： 要注意字符串拼接的时候，往styleTag里面吐的代码，一旦包含注释/</strong>/，要对/进行转义，如下`\\/<em>这里填写你的内容</em>\\/。**</p>\n</li>\n</ul>\n<p><strong>2.字符串的命名一定要切实合理： 如图所示：</strong></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180129213013960?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"字符串的命名\" title=\"\" class=\"\">\n                <p>字符串的命名</p>\n            </figure>\n<p><strong>3.代码高亮渲染 ： 中途加入代码高亮渲染的时候，通过判定字符串循环的 n ++ 达到多少，从而用if(n&gt;123&amp;&amp;n&lt;321)这种方法来进行区域渲染。prism的渲染代码如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">官方js库地址：[http://prismjs.com/](http://prismjs.com/)</span><br><span class=\"line\"></span><br><span class=\"line\">语法:prism.heihlight(渲染的字符串,渲染的代码格式)</span><br><span class=\"line\"></span><br><span class=\"line\">Prism.highlight(str.substring(0,n), Prism.languages.css);</span><br></pre></td></tr></table></figure>\n<p><strong>4.MarkDown ⇒ HTML渲染 ：  同样根据n的值，来使用if()来进行循环。</strong></p>\n<p>marked.js官方库地址：<a href=\"https://www.npmjs.com/package/marked\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/marked</a></p>\n<p>渲染代码如下:</p>\n<p><code>drawBoard.innerHTML =marked(str.substring(929,1885));</code></p>\n<p><strong>5.动态创建Pre标签（id=”drawBoard”）  ：  CSS代码版是一开始写在HTML的，但是之后的简历板子（id=”drawBoard”，本质上是个pre标签）是通过判断n的值，来动态创建的，如图所示：</strong></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180129214532614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"动态创建drawBoard\" title=\"\" class=\"\">\n                <p>动态创建drawBoard</p>\n            </figure>\n<p><strong>6.已经创建的元素无法在另外的循环中获取 ：</strong><br> <strong>在刚才的【5】中，动态创建的pre标签(id=”drawBoard”)会在if()的区域内无法document.getElementById(‘drawBoard’)，此时需要在if里面再次获取并且赋值，如图所示：</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20180129214929626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"再次赋值\"></p>\n<p><strong>7.动态下拉   同样通过n的值来让元素的溢出自动下拉</strong></p>\n<p>如图：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180129215552841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"动态下拉\" title=\"\" class=\"\">\n                <p>动态下拉</p>\n            </figure>\n<p><strong>8. 动态简历最后的魔术环节  ：   还是通过n的值来进行判断，从而渲染 </strong></p>\n<p>其实这个环节就是故弄玄虚，通过判断CSS代码板 的 最后结尾字符串的n值，来进行渲染。</p>\n<p>代码如图：</p>\n<p><img src=\"http://img.blog.csdn.net/20180129215916887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"魔术效果实现\"></p>\n<h2 id=\"核心原理代码\"><a href=\"#核心原理代码\" class=\"headerlink\" title=\"核心原理代码\"></a>核心原理代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意事项，往style标签里面吐字符串时，要注意对/**/注释标签进行转义</span><br><span class=\"line\"></span><br><span class=\"line\">var styleTag = document.getElementById(&apos;styleTag&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var sourceBoard = document.getElementById(&apos;sourceBoard&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var str = &apos;\\/*大家好...今天我给大家做一个在线简历...\\/*&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var n = 0;</span><br><span class=\"line\">window.setInterval(function()&#123;</span><br><span class=\"line\">   n++;</span><br><span class=\"line\">   styleTag.innerHTML = str.substring(0,n);</span><br><span class=\"line\">    </span><br><span class=\"line\">   sourceBoard.innerHTML = str.substring(0,n);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,100);</span><br><span class=\"line\"></span><br><span class=\"line\">//此时，用户观看字符串轮番出现的同时，程序也已经向style标签吐了代码，这样，当用户看完一个CSS样式结束后，对应的样式可以立马通过浏览器渲染出来。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Demo部署到GitHub详细过程\"><a href=\"#Demo部署到GitHub详细过程\" class=\"headerlink\" title=\" Demo部署到GitHub详细过程\"></a> Demo部署到GitHub详细过程</h2><p>本来还不知道Demo可以直接在Github上预览。。。直到发现这样的功能：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180129220933667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gh-pages预览项目\" title=\"\" class=\"\">\n                <p>gh-pages预览项目</p>\n            </figure>\n<p>在Demo的仓库里，点击Settings，然后找到GitHub Pages，设置源为master主分支（此项目只有一个分支，所以也没得选），点击Save保存，即可出现预览地址，一般保存后会稍有延迟。</p>\n<p>整个部署的环节大致如下：</p>\n<ol>\n<li><p>在本地的项目根目录下，<code>$ git init</code></p>\n</li>\n<li><p>加入当前所有文件到暂存区 <code>$ git add .</code>(后面有个“·”，代表全部文件)</p>\n</li>\n<li><p>连接远程仓库  <code>$ git remote add origin &quot;your repository address&quot;</code></p>\n</li>\n<li><p>提交所有文件到git版本控制系统 <code>$ git commit -m &quot;create Demo resume&quot;</code></p>\n</li>\n<li><p>push到你的远程仓库 <code>$ git push origin master</code></p>\n</li>\n<li><p>打开浏览器，进入这个目录的respository，点击settings,设置GitHub pages为 master,稍等片刻，即可预览。</p>\n<p>PS:学会这个骚操作，我把以前做的好多Demo都给部署了一遍，目前都可以预览，感谢GitHub</p>\n<h2 id=\"反思与不足\"><a href=\"#反思与不足\" class=\"headerlink\" title=\"反思与不足\"></a>反思与不足</h2></li>\n</ol>\n<ol>\n<li>在快速预览模式下，例如，将setInterval的间隔时间设为0，整个页面跑完，容易出现两个代码版的下拉滚动条“假死”,拉不动，但是将间隔时间设定为正常的90ms或者100ms，整个页面跑完没有任何问题。我初步总结的原因是，因为每次下拉的值是1000，这个下拉的动作很可能重复几百次，几千次。所以当间隔时间极小，重复次数极高，下拉值极大，那么这种现象就越容易出现。</li>\n</ol>\n<ol start=\"2\">\n<li><p>我在向一些前端前辈请教这个Demo的不足之处时，大神告诉我：面试官只关心页面上的信息，而不是如何呈现，更不能忍受长达200s的等待。这个Demo算是炫技，但是又没有什么核心的技术点，还不如老老实实的写一份干净清爽的简历实在。</p>\n<p>我的反思是，这个Demo由于大量的字符串以及转义字符拼接，因而没有像原作者：<a href=\"http://strml.net/\" target=\"_blank\" rel=\"noopener\">http://strml.net/</a>的页面那样，呈现的美轮美奂，这也是我在写Demo之初没有全局考虑的结果，导致现在如果加一些CSS代码，会带来极大的工作量。</p>\n</li>\n<li>整个页面没有加速或者暂停的功能，其实这个倒是简单，设置三个按钮：慢，中速，快速，在setInterval中的if里，对点击事件进行监听，一旦点击，就修改setInterval的时间间隔，然后return当前的n值。</li>\n</ol>\n<ol start=\"4\">\n<li>整个Demo代码过于混乱，没有进行封装，因为自己现在对面向对象还是有些手生，希望以后进行封装，以便提高运行效率，以及复用。</li>\n</ol>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"谈一谈来北京后的工作节奏以及对前端的看法","date":"2018-05-23T14:12:52.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/80427169)\n\n\n\n\n\n\n\n## 为什么来北京 ##\n这个问题放在几个月之前，我肯定会踌躇满志的说：因为渴望技术，因为热爱coding（其实是因为贫穷）。\n那时候一味的认为北京物价高，对应工资高是理所应当的。结果直到我住到沙河，才明白，北京的物价没有我想像的那么夸张，工作也没有我在兰州那样简单和无趣。粗略的一算，来北京已经将近三个月了，除了发际线有点不受控制，其他方面可以说一直在走上坡路。\n下面，总结一下这三个月以来，关于工作，关于前端，关于生活方面的感悟和理解。\n## 工作 ##\n因为之前毕竟接到过腾讯和电信的面试邀请（但是因为太菜，挂了），所以信心满满，觉得自己也是前端界的人了。来北京找工作其实还是碰壁了很多次的，连续十几天，寄宿在我哥的出租屋里，每天早出晚归，一天面三家公司，无一例外都被发好人卡。几近心灰意冷的时候，才出现了转机。虽然现在在一个小公司里，但是也好歹算是稳定下来了。美中不足的是，误打误撞的进入了外包公司，每天基本上被业务填满，再加上住在沙河，明天上下班耗费我4个小时，晚上回家基本上学习一两个小时就要睡觉，没有大片空余的时间能够让我挥霍。\n虽然进入外包公司，但是收入方面让我挺满意的，相比于在兰州，基本上翻了3，4番，而且加班还有加班工资（外包界清流）。所以大多数时候，我会在双休日主动加班。为了整取加班工资，我已经丧心病狂，用我的发际线去交换货币，或是满足自己的虚荣心，或是为了快速成长，或者两种心理皆存。\n想了一想，自从大学遇见女朋友以后，我的工作一直在走上坡路，虽然在兰州的时候干的活简单，但是自己并没有松懈。现在拿的这个工资，勉强对得起自己去年一年的努力，但是还有不尽人意的地方。以后我得更加努力。\n## 前端 ##\n别看我博客里面写了很多看似高端的东西，其实很多并没有在实际的生产环节使用过。我的女朋友经常教导我，不要眼高手低，你虽然理论知识丰富，但是实际上手啥也不会，多做点项目，比啥都强。确实如此，在公司近乎两月的时间里，虽然没有在工程化方向迈进一步，但是好歹jQuery现在API用的十分熟练，也对一些比较常用的前端知识进行了实践。\n其实我这种学渣，学历不够光鲜，脑子不够灵活，唯一支撑我信念的是不甘平庸的心。\n两个月的时间里，虽然没有在深度方面前进，但是对于【前端工程师】的一些基本技能算是都过了一遍，这些技能包括但不限于：\n\n - 熟练地使用F12控制台去分析页面性能、请求结果、静态资源加载、调试等。\n - 对于前后端分离的项目进行实践，包括表单上传/文件上传，普通ajax请求，字段命名/接口约定等。\n - 对于一些团队协作工具上手操作，例如:GIT、SVN、GITLAB、石墨文档、WORKTITLE等等\n - 对于页面中一些常见Bug能快速定位，找到解决方案。例如：没有阻止冒泡导致事件重复执行、封装方法功能/逻辑解耦、重复数据过滤，HTTPS协议的页面请求HTTP协议的资源等等。\n - 能够快速上手一些简单的类库，例如layUi,ElementsUi,还有TRS系统，WCM系统等。\n其实，前端领域确实很杂，我也非常的懊悔，这么晚才来北京，如果早点来，我可能比现在更加专业，更符合【工程师】这个头衔。我给自己顶下的目标是3年内进一线大厂。我明白自己已经不再年轻了，脑力比不过刚毕业的小鲜肉，体力尚可，但看着腰上的肥肉，又担心自己的身体日渐衰退。\n其实我也蛮担心的，当时迫于生计，急需钱，没有思虑再三，进入外包公司，听说很多互联网企业一听外包的工作经验，都不愿意搭理。可能我更有体会吧，我做东西很愿意把时间花在细节上，但是做出来的产品就像在给别人家养娃，不是自己的，这或许就是我不愿意去外包公司的一个理由吧。每天被充实的业务需求填满，没有时间去思考如何做一个小而美的产品。\n但是话又说回来了，企业是要生存的。产品是有生命周期的，不会像自己心爱的积木一样，可以翻来覆去每天把玩，每天都搭不同样式的摩天大楼。所以希望自己以后能够有点大局观，站在产品的角度去看待整个项目。\n## 生活 ##\n来北京，确实感觉交通压力很大，每天出行就像打仗一样，用尽浑身解数才能上的了地铁。刚住沙河，上班的第一天，在沙河站等地铁，过去了4趟，硬是没有上去。。。后来学到了，反向坐到高教园比较容易上车（我真是太机智了）。\n在工作之余，我会自己做做饭，打扫打扫房间，毕竟房子是租来的，生活是自己的。有的时候手很痒，很想弹弹琴，但是又告诉自己，年纪不小了，该攒钱了，没钱啥也干不了。\n女朋友最近也抱怨，来北京，陪她聊天的时间越来越少，因为每天下班晚不说，回来我还得学习，或者有时候洗衣服，陪她的时间少之又少。突然很理解程序员为什么都没老婆了。。。\n最近晚上在看Vue和js基础，北京这边公司要求VUE的比较多，对于ng，似乎只在电信才用。\n总的来说，目前在北京，也算是勉强站住脚了，但是对于自己工作，还有一些需要改进的地方。对于程序员来说，时间和效率是最珍贵的财富，我目前甄需提高的就是自己的开发速度/效率，一方面需要自己不断的熟练技能，另一方面，需要去实际使用一些提升开发效率的工具，比如：WEBPACK、SASS，TypeScript等等，不能让这些学过的东西永远没有上手的机会。另外，对于工作中遇到的问题，一定要自己想方设法去解决（在不影响项目进度的前提下），实在搞不懂再开口问。\n很久没有写东西，思路比较乱，想到哪写到哪。\n\n<script type=\"text/javascript\">\nconst password = 'tycho';\nif(window.prompt('请输入密码')==password){\n\nalert('password success')\n\n}else{\nalert('password error');window.history.back(-1);\n}          \n</script>","source":"_posts/谈一谈来北京的工作节奏以及对前端的看法.md","raw":"---\ntitle:  谈一谈来北京后的工作节奏以及对前端的看法\ndate: 2018-05-23 22:12:52\ntags: [杂谈]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](https://blog.csdn.net/qq_20264891/article/details/80427169)\n\n\n\n\n\n\n\n## 为什么来北京 ##\n这个问题放在几个月之前，我肯定会踌躇满志的说：因为渴望技术，因为热爱coding（其实是因为贫穷）。\n那时候一味的认为北京物价高，对应工资高是理所应当的。结果直到我住到沙河，才明白，北京的物价没有我想像的那么夸张，工作也没有我在兰州那样简单和无趣。粗略的一算，来北京已经将近三个月了，除了发际线有点不受控制，其他方面可以说一直在走上坡路。\n下面，总结一下这三个月以来，关于工作，关于前端，关于生活方面的感悟和理解。\n## 工作 ##\n因为之前毕竟接到过腾讯和电信的面试邀请（但是因为太菜，挂了），所以信心满满，觉得自己也是前端界的人了。来北京找工作其实还是碰壁了很多次的，连续十几天，寄宿在我哥的出租屋里，每天早出晚归，一天面三家公司，无一例外都被发好人卡。几近心灰意冷的时候，才出现了转机。虽然现在在一个小公司里，但是也好歹算是稳定下来了。美中不足的是，误打误撞的进入了外包公司，每天基本上被业务填满，再加上住在沙河，明天上下班耗费我4个小时，晚上回家基本上学习一两个小时就要睡觉，没有大片空余的时间能够让我挥霍。\n虽然进入外包公司，但是收入方面让我挺满意的，相比于在兰州，基本上翻了3，4番，而且加班还有加班工资（外包界清流）。所以大多数时候，我会在双休日主动加班。为了整取加班工资，我已经丧心病狂，用我的发际线去交换货币，或是满足自己的虚荣心，或是为了快速成长，或者两种心理皆存。\n想了一想，自从大学遇见女朋友以后，我的工作一直在走上坡路，虽然在兰州的时候干的活简单，但是自己并没有松懈。现在拿的这个工资，勉强对得起自己去年一年的努力，但是还有不尽人意的地方。以后我得更加努力。\n## 前端 ##\n别看我博客里面写了很多看似高端的东西，其实很多并没有在实际的生产环节使用过。我的女朋友经常教导我，不要眼高手低，你虽然理论知识丰富，但是实际上手啥也不会，多做点项目，比啥都强。确实如此，在公司近乎两月的时间里，虽然没有在工程化方向迈进一步，但是好歹jQuery现在API用的十分熟练，也对一些比较常用的前端知识进行了实践。\n其实我这种学渣，学历不够光鲜，脑子不够灵活，唯一支撑我信念的是不甘平庸的心。\n两个月的时间里，虽然没有在深度方面前进，但是对于【前端工程师】的一些基本技能算是都过了一遍，这些技能包括但不限于：\n\n - 熟练地使用F12控制台去分析页面性能、请求结果、静态资源加载、调试等。\n - 对于前后端分离的项目进行实践，包括表单上传/文件上传，普通ajax请求，字段命名/接口约定等。\n - 对于一些团队协作工具上手操作，例如:GIT、SVN、GITLAB、石墨文档、WORKTITLE等等\n - 对于页面中一些常见Bug能快速定位，找到解决方案。例如：没有阻止冒泡导致事件重复执行、封装方法功能/逻辑解耦、重复数据过滤，HTTPS协议的页面请求HTTP协议的资源等等。\n - 能够快速上手一些简单的类库，例如layUi,ElementsUi,还有TRS系统，WCM系统等。\n其实，前端领域确实很杂，我也非常的懊悔，这么晚才来北京，如果早点来，我可能比现在更加专业，更符合【工程师】这个头衔。我给自己顶下的目标是3年内进一线大厂。我明白自己已经不再年轻了，脑力比不过刚毕业的小鲜肉，体力尚可，但看着腰上的肥肉，又担心自己的身体日渐衰退。\n其实我也蛮担心的，当时迫于生计，急需钱，没有思虑再三，进入外包公司，听说很多互联网企业一听外包的工作经验，都不愿意搭理。可能我更有体会吧，我做东西很愿意把时间花在细节上，但是做出来的产品就像在给别人家养娃，不是自己的，这或许就是我不愿意去外包公司的一个理由吧。每天被充实的业务需求填满，没有时间去思考如何做一个小而美的产品。\n但是话又说回来了，企业是要生存的。产品是有生命周期的，不会像自己心爱的积木一样，可以翻来覆去每天把玩，每天都搭不同样式的摩天大楼。所以希望自己以后能够有点大局观，站在产品的角度去看待整个项目。\n## 生活 ##\n来北京，确实感觉交通压力很大，每天出行就像打仗一样，用尽浑身解数才能上的了地铁。刚住沙河，上班的第一天，在沙河站等地铁，过去了4趟，硬是没有上去。。。后来学到了，反向坐到高教园比较容易上车（我真是太机智了）。\n在工作之余，我会自己做做饭，打扫打扫房间，毕竟房子是租来的，生活是自己的。有的时候手很痒，很想弹弹琴，但是又告诉自己，年纪不小了，该攒钱了，没钱啥也干不了。\n女朋友最近也抱怨，来北京，陪她聊天的时间越来越少，因为每天下班晚不说，回来我还得学习，或者有时候洗衣服，陪她的时间少之又少。突然很理解程序员为什么都没老婆了。。。\n最近晚上在看Vue和js基础，北京这边公司要求VUE的比较多，对于ng，似乎只在电信才用。\n总的来说，目前在北京，也算是勉强站住脚了，但是对于自己工作，还有一些需要改进的地方。对于程序员来说，时间和效率是最珍贵的财富，我目前甄需提高的就是自己的开发速度/效率，一方面需要自己不断的熟练技能，另一方面，需要去实际使用一些提升开发效率的工具，比如：WEBPACK、SASS，TypeScript等等，不能让这些学过的东西永远没有上手的机会。另外，对于工作中遇到的问题，一定要自己想方设法去解决（在不影响项目进度的前提下），实在搞不懂再开口问。\n很久没有写东西，思路比较乱，想到哪写到哪。\n\n<script type=\"text/javascript\">\nconst password = 'tycho';\nif(window.prompt('请输入密码')==password){\n\nalert('password success')\n\n}else{\nalert('password error');window.history.back(-1);\n}          \n</script>","slug":"谈一谈来北京的工作节奏以及对前端的看法","published":1,"updated":"2019-05-14T14:30:28.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawk001sckufwfnl01bg","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/80427169\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"为什么来北京\"><a href=\"#为什么来北京\" class=\"headerlink\" title=\"为什么来北京\"></a>为什么来北京</h2><p>这个问题放在几个月之前，我肯定会踌躇满志的说：因为渴望技术，因为热爱coding（其实是因为贫穷）。<br>那时候一味的认为北京物价高，对应工资高是理所应当的。结果直到我住到沙河，才明白，北京的物价没有我想像的那么夸张，工作也没有我在兰州那样简单和无趣。粗略的一算，来北京已经将近三个月了，除了发际线有点不受控制，其他方面可以说一直在走上坡路。<br>下面，总结一下这三个月以来，关于工作，关于前端，关于生活方面的感悟和理解。</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>因为之前毕竟接到过腾讯和电信的面试邀请（但是因为太菜，挂了），所以信心满满，觉得自己也是前端界的人了。来北京找工作其实还是碰壁了很多次的，连续十几天，寄宿在我哥的出租屋里，每天早出晚归，一天面三家公司，无一例外都被发好人卡。几近心灰意冷的时候，才出现了转机。虽然现在在一个小公司里，但是也好歹算是稳定下来了。美中不足的是，误打误撞的进入了外包公司，每天基本上被业务填满，再加上住在沙河，明天上下班耗费我4个小时，晚上回家基本上学习一两个小时就要睡觉，没有大片空余的时间能够让我挥霍。<br>虽然进入外包公司，但是收入方面让我挺满意的，相比于在兰州，基本上翻了3，4番，而且加班还有加班工资（外包界清流）。所以大多数时候，我会在双休日主动加班。为了整取加班工资，我已经丧心病狂，用我的发际线去交换货币，或是满足自己的虚荣心，或是为了快速成长，或者两种心理皆存。<br>想了一想，自从大学遇见女朋友以后，我的工作一直在走上坡路，虽然在兰州的时候干的活简单，但是自己并没有松懈。现在拿的这个工资，勉强对得起自己去年一年的努力，但是还有不尽人意的地方。以后我得更加努力。</p>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><p>别看我博客里面写了很多看似高端的东西，其实很多并没有在实际的生产环节使用过。我的女朋友经常教导我，不要眼高手低，你虽然理论知识丰富，但是实际上手啥也不会，多做点项目，比啥都强。确实如此，在公司近乎两月的时间里，虽然没有在工程化方向迈进一步，但是好歹jQuery现在API用的十分熟练，也对一些比较常用的前端知识进行了实践。<br>其实我这种学渣，学历不够光鲜，脑子不够灵活，唯一支撑我信念的是不甘平庸的心。<br>两个月的时间里，虽然没有在深度方面前进，但是对于【前端工程师】的一些基本技能算是都过了一遍，这些技能包括但不限于：</p>\n<ul>\n<li>熟练地使用F12控制台去分析页面性能、请求结果、静态资源加载、调试等。</li>\n<li>对于前后端分离的项目进行实践，包括表单上传/文件上传，普通ajax请求，字段命名/接口约定等。</li>\n<li>对于一些团队协作工具上手操作，例如:GIT、SVN、GITLAB、石墨文档、WORKTITLE等等</li>\n<li>对于页面中一些常见Bug能快速定位，找到解决方案。例如：没有阻止冒泡导致事件重复执行、封装方法功能/逻辑解耦、重复数据过滤，HTTPS协议的页面请求HTTP协议的资源等等。</li>\n<li>能够快速上手一些简单的类库，例如layUi,ElementsUi,还有TRS系统，WCM系统等。<br>其实，前端领域确实很杂，我也非常的懊悔，这么晚才来北京，如果早点来，我可能比现在更加专业，更符合【工程师】这个头衔。我给自己顶下的目标是3年内进一线大厂。我明白自己已经不再年轻了，脑力比不过刚毕业的小鲜肉，体力尚可，但看着腰上的肥肉，又担心自己的身体日渐衰退。<br>其实我也蛮担心的，当时迫于生计，急需钱，没有思虑再三，进入外包公司，听说很多互联网企业一听外包的工作经验，都不愿意搭理。可能我更有体会吧，我做东西很愿意把时间花在细节上，但是做出来的产品就像在给别人家养娃，不是自己的，这或许就是我不愿意去外包公司的一个理由吧。每天被充实的业务需求填满，没有时间去思考如何做一个小而美的产品。<br>但是话又说回来了，企业是要生存的。产品是有生命周期的，不会像自己心爱的积木一样，可以翻来覆去每天把玩，每天都搭不同样式的摩天大楼。所以希望自己以后能够有点大局观，站在产品的角度去看待整个项目。<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2>来北京，确实感觉交通压力很大，每天出行就像打仗一样，用尽浑身解数才能上的了地铁。刚住沙河，上班的第一天，在沙河站等地铁，过去了4趟，硬是没有上去。。。后来学到了，反向坐到高教园比较容易上车（我真是太机智了）。<br>在工作之余，我会自己做做饭，打扫打扫房间，毕竟房子是租来的，生活是自己的。有的时候手很痒，很想弹弹琴，但是又告诉自己，年纪不小了，该攒钱了，没钱啥也干不了。<br>女朋友最近也抱怨，来北京，陪她聊天的时间越来越少，因为每天下班晚不说，回来我还得学习，或者有时候洗衣服，陪她的时间少之又少。突然很理解程序员为什么都没老婆了。。。<br>最近晚上在看Vue和js基础，北京这边公司要求VUE的比较多，对于ng，似乎只在电信才用。<br>总的来说，目前在北京，也算是勉强站住脚了，但是对于自己工作，还有一些需要改进的地方。对于程序员来说，时间和效率是最珍贵的财富，我目前甄需提高的就是自己的开发速度/效率，一方面需要自己不断的熟练技能，另一方面，需要去实际使用一些提升开发效率的工具，比如：WEBPACK、SASS，TypeScript等等，不能让这些学过的东西永远没有上手的机会。另外，对于工作中遇到的问题，一定要自己想方设法去解决（在不影响项目进度的前提下），实在搞不懂再开口问。<br>很久没有写东西，思路比较乱，想到哪写到哪。</li>\n</ul>\n<script type=\"text/javascript\">\nconst password = 'tycho';\nif(window.prompt('请输入密码')==password){\n\nalert('password success')\n\n}else{\nalert('password error');window.history.back(-1);\n}          \n</script>","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"https://blog.csdn.net/qq_20264891/article/details/80427169\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"为什么来北京\"><a href=\"#为什么来北京\" class=\"headerlink\" title=\"为什么来北京\"></a>为什么来北京</h2><p>这个问题放在几个月之前，我肯定会踌躇满志的说：因为渴望技术，因为热爱coding（其实是因为贫穷）。<br>那时候一味的认为北京物价高，对应工资高是理所应当的。结果直到我住到沙河，才明白，北京的物价没有我想像的那么夸张，工作也没有我在兰州那样简单和无趣。粗略的一算，来北京已经将近三个月了，除了发际线有点不受控制，其他方面可以说一直在走上坡路。<br>下面，总结一下这三个月以来，关于工作，关于前端，关于生活方面的感悟和理解。</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>因为之前毕竟接到过腾讯和电信的面试邀请（但是因为太菜，挂了），所以信心满满，觉得自己也是前端界的人了。来北京找工作其实还是碰壁了很多次的，连续十几天，寄宿在我哥的出租屋里，每天早出晚归，一天面三家公司，无一例外都被发好人卡。几近心灰意冷的时候，才出现了转机。虽然现在在一个小公司里，但是也好歹算是稳定下来了。美中不足的是，误打误撞的进入了外包公司，每天基本上被业务填满，再加上住在沙河，明天上下班耗费我4个小时，晚上回家基本上学习一两个小时就要睡觉，没有大片空余的时间能够让我挥霍。<br>虽然进入外包公司，但是收入方面让我挺满意的，相比于在兰州，基本上翻了3，4番，而且加班还有加班工资（外包界清流）。所以大多数时候，我会在双休日主动加班。为了整取加班工资，我已经丧心病狂，用我的发际线去交换货币，或是满足自己的虚荣心，或是为了快速成长，或者两种心理皆存。<br>想了一想，自从大学遇见女朋友以后，我的工作一直在走上坡路，虽然在兰州的时候干的活简单，但是自己并没有松懈。现在拿的这个工资，勉强对得起自己去年一年的努力，但是还有不尽人意的地方。以后我得更加努力。</p>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><p>别看我博客里面写了很多看似高端的东西，其实很多并没有在实际的生产环节使用过。我的女朋友经常教导我，不要眼高手低，你虽然理论知识丰富，但是实际上手啥也不会，多做点项目，比啥都强。确实如此，在公司近乎两月的时间里，虽然没有在工程化方向迈进一步，但是好歹jQuery现在API用的十分熟练，也对一些比较常用的前端知识进行了实践。<br>其实我这种学渣，学历不够光鲜，脑子不够灵活，唯一支撑我信念的是不甘平庸的心。<br>两个月的时间里，虽然没有在深度方面前进，但是对于【前端工程师】的一些基本技能算是都过了一遍，这些技能包括但不限于：</p>\n<ul>\n<li>熟练地使用F12控制台去分析页面性能、请求结果、静态资源加载、调试等。</li>\n<li>对于前后端分离的项目进行实践，包括表单上传/文件上传，普通ajax请求，字段命名/接口约定等。</li>\n<li>对于一些团队协作工具上手操作，例如:GIT、SVN、GITLAB、石墨文档、WORKTITLE等等</li>\n<li>对于页面中一些常见Bug能快速定位，找到解决方案。例如：没有阻止冒泡导致事件重复执行、封装方法功能/逻辑解耦、重复数据过滤，HTTPS协议的页面请求HTTP协议的资源等等。</li>\n<li>能够快速上手一些简单的类库，例如layUi,ElementsUi,还有TRS系统，WCM系统等。<br>其实，前端领域确实很杂，我也非常的懊悔，这么晚才来北京，如果早点来，我可能比现在更加专业，更符合【工程师】这个头衔。我给自己顶下的目标是3年内进一线大厂。我明白自己已经不再年轻了，脑力比不过刚毕业的小鲜肉，体力尚可，但看着腰上的肥肉，又担心自己的身体日渐衰退。<br>其实我也蛮担心的，当时迫于生计，急需钱，没有思虑再三，进入外包公司，听说很多互联网企业一听外包的工作经验，都不愿意搭理。可能我更有体会吧，我做东西很愿意把时间花在细节上，但是做出来的产品就像在给别人家养娃，不是自己的，这或许就是我不愿意去外包公司的一个理由吧。每天被充实的业务需求填满，没有时间去思考如何做一个小而美的产品。<br>但是话又说回来了，企业是要生存的。产品是有生命周期的，不会像自己心爱的积木一样，可以翻来覆去每天把玩，每天都搭不同样式的摩天大楼。所以希望自己以后能够有点大局观，站在产品的角度去看待整个项目。<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2>来北京，确实感觉交通压力很大，每天出行就像打仗一样，用尽浑身解数才能上的了地铁。刚住沙河，上班的第一天，在沙河站等地铁，过去了4趟，硬是没有上去。。。后来学到了，反向坐到高教园比较容易上车（我真是太机智了）。<br>在工作之余，我会自己做做饭，打扫打扫房间，毕竟房子是租来的，生活是自己的。有的时候手很痒，很想弹弹琴，但是又告诉自己，年纪不小了，该攒钱了，没钱啥也干不了。<br>女朋友最近也抱怨，来北京，陪她聊天的时间越来越少，因为每天下班晚不说，回来我还得学习，或者有时候洗衣服，陪她的时间少之又少。突然很理解程序员为什么都没老婆了。。。<br>最近晚上在看Vue和js基础，北京这边公司要求VUE的比较多，对于ng，似乎只在电信才用。<br>总的来说，目前在北京，也算是勉强站住脚了，但是对于自己工作，还有一些需要改进的地方。对于程序员来说，时间和效率是最珍贵的财富，我目前甄需提高的就是自己的开发速度/效率，一方面需要自己不断的熟练技能，另一方面，需要去实际使用一些提升开发效率的工具，比如：WEBPACK、SASS，TypeScript等等，不能让这些学过的东西永远没有上手的机会。另外，对于工作中遇到的问题，一定要自己想方设法去解决（在不影响项目进度的前提下），实在搞不懂再开口问。<br>很久没有写东西，思路比较乱，想到哪写到哪。</li>\n</ul>\n<script type=\"text/javascript\">\nconst password = 'tycho';\nif(window.prompt('请输入密码')==password){\n\nalert('password success')\n\n}else{\nalert('password error');window.history.back(-1);\n}          \n</script>"},{"title":"cvm-debug","date":"2020-02-11T09:52:27.000Z","reward":true,"comment":true,"_content":"\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n## ssh public key\n当重新 build 了 id_rsa.pub 为什么\n```bash\n$ git clone xxxx@github.git\n```\n还是会报 permission denied 或者 Please make sure you have the correct access rights and the repository exists 呢？\n\n于是，经过尝试:\n\n```bash\n$ eval \"$(ssh-agent -s)\"\n$ ssh-add ~/.ssh/id_rsa\n``` \n\n发现还是不对。\n\n## build 的姿势不对\n首先，在执行 git 相关的命令时，最好不要使用 sudo, github 官方也给出了指导 [https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey](https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey)\n\nso, 在 linux 环境下，最好的方式就是直接以 root 的身份来操作目录和 cli：\n\n```bash\n$ sudo passwd\n$ su root\n```\n这样，每次执行任何命令的时候，都不需要烦人的 sudo 了\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/cvm-debug.md","raw":"---\ntitle: cvm-debug\ndate: 2020-02-11 17:52:27 #创建时间\ntags: [ubuntu] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n## ssh public key\n当重新 build 了 id_rsa.pub 为什么\n```bash\n$ git clone xxxx@github.git\n```\n还是会报 permission denied 或者 Please make sure you have the correct access rights and the repository exists 呢？\n\n于是，经过尝试:\n\n```bash\n$ eval \"$(ssh-agent -s)\"\n$ ssh-add ~/.ssh/id_rsa\n``` \n\n发现还是不对。\n\n## build 的姿势不对\n首先，在执行 git 相关的命令时，最好不要使用 sudo, github 官方也给出了指导 [https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey](https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey)\n\nso, 在 linux 环境下，最好的方式就是直接以 root 的身份来操作目录和 cli：\n\n```bash\n$ sudo passwd\n$ su root\n```\n这样，每次执行任何命令的时候，都不需要烦人的 sudo 了\n\n\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"cvm-debug","published":1,"updated":"2020-02-11T09:59:34.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsawl001uckufolowzb1b","content":"<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"ssh-public-key\"><a href=\"#ssh-public-key\" class=\"headerlink\" title=\"ssh public key\"></a>ssh public key</h2><p>当重新 build 了 id_rsa.pub 为什么<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> xxxx@github.git</span><br></pre></td></tr></table></figure></p>\n<p>还是会报 permission denied 或者 Please make sure you have the correct access rights and the repository exists 呢？</p>\n<p>于是，经过尝试:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">发现还是不对。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## build 的姿势不对</span></span><br><span class=\"line\">首先，在执行 git 相关的命令时，最好不要使用 sudo, github 官方也给出了指导 [https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey](https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey)</span><br><span class=\"line\"></span><br><span class=\"line\">so, 在 linux 环境下，最好的方式就是直接以 root 的身份来操作目录和 cli：</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">$ sudo passwd</span><br><span class=\"line\">$ su root</span><br></pre></td></tr></table></figure>\n<p>这样，每次执行任何命令的时候，都不需要烦人的 sudo 了</p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"ssh-public-key\"><a href=\"#ssh-public-key\" class=\"headerlink\" title=\"ssh public key\"></a>ssh public key</h2><p>当重新 build 了 id_rsa.pub 为什么<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> xxxx@github.git</span><br></pre></td></tr></table></figure></p>\n<p>还是会报 permission denied 或者 Please make sure you have the correct access rights and the repository exists 呢？</p>\n<p>于是，经过尝试:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">$ ssh-add ~/.ssh/id_rsa</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">发现还是不对。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## build 的姿势不对</span></span><br><span class=\"line\">首先，在执行 git 相关的命令时，最好不要使用 sudo, github 官方也给出了指导 [https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey](https://help.github.com/en/github/authenticating-to-github/error-permission-denied-publickey)</span><br><span class=\"line\"></span><br><span class=\"line\">so, 在 linux 环境下，最好的方式就是直接以 root 的身份来操作目录和 cli：</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">$ sudo passwd</span><br><span class=\"line\">$ su root</span><br></pre></td></tr></table></figure>\n<p>这样，每次执行任何命令的时候，都不需要烦人的 sudo 了</p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"2018年1月23日腾讯SNG-IMWeb前端工程师 电话远程面试记录","date":"2018-01-24T16:00:00.000Z","reward":true,"comment":true,"_content":"\n\n\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79158495)\n\n\n\n## 前言 ##\n   2018年1月18日，突然接到一个来自深圳的电话，对方说从拉勾网上看到我投递腾讯SNG部门的IMWEB团队前端，简单询问了一下我的具体情况，包括前端的就职年限，过去的工作经历。其中有一点比较有意思的是，对方问我为什么2016年7月毕业直到2017年2月入职中国XX网，这之间的简历是空缺的？我回答他说因为刚毕业没有太好的就业选择和机会，错过了很多校招，所以在毕业的时候去一个艺术培训学校当了半年的吉他老师，因为觉得和前端的职业经历没有关系，因此没有把这段经历写在简历上。对方说，我觉得你应该把这段经历也写在简历上，我说好的谢谢。\n      接着问了他招聘的是什么职位，对方说是前端工程师，我说主要负责什么工作？他说主要负责腾讯课堂的一些前端工作，我跟对方说，我目前还在老家，可能无法及时的去深圳那边面试，问了他可不可以远程面试，遂对方跟我说，可以采用电话面试，并且约定了电话一面的时间，2018年1月23日。\n## 面试的过程及结果 ##\n从接到电话直到第一次面试的这段时间，我在网上大量的检索了关于腾讯电面的经验，并且深入的针对一些常用的考点，进行梳理和总结，例如：闭包、原型、作用域链、Ajax、http协议、盒模型、兼容问题、xss/csrf攻击、浏览器渲染（重绘重排）等。\n在1月23日的当天，5点多回家，还一直在看复习资料，饭也顾不上吃。\n7点，从深圳打来了一个熟悉的电话。整个电话持续了40分钟之久，基本上问的都是基本的原理，而后可能我的回答让面试官也比较满意，之后是1个半小时的远程监控编程环节，三道程序设计题，给一个半小时的时间，腾讯面试官远程QQ协助监控你的桌面，只允许用浏览器的console以及本地编辑器，不允许查询资料，在编程过程中，面试官还会试图针对一些有问题的地方给予提示。最后，我还是很遗憾的没有通过，因为三道编程题目，我磕磕巴巴基本上没做出来，所以挂了，把文件打包发送给面试官后。我问面试官，像我这样经历不丰富，简历不突出的，为什么会考虑我呢？面试官说，我们什么阶段的人选都会考虑，你入行前端一年，基础还是不错的，就是编码能力需要提高。。。\n面试完以后，大概有几个小时，一直沉浸在刚才的面试里，晚饭也忘了吃了，一直在反思自己哪些地方答的不够好，这几天的复习哪些地方有疏漏。\n我的互联网公司处女面就以失败告终了。但是回头想想，这次失败的经历是一面镜子，让我清楚的认识到自己几斤几两，督促我在今后的学习中一步一个脚印，脚踏实地，再去仰望星空。\n\n## 电话里问到的题目 ##\n接下来，根据我当天的通话录音，来对所问到的题目进行穷举：\n\n\n  **1.接你现在的工作主要是偏前端还是偏后端？我看你大学的课程主要是偏后端一点？**\n  \n A:大学课程修完以后，出来没找到工作，干了半年吉他老师，对自己就业比较迷茫。回        到老家以后，干前端、运维都有，但是主要是前端。\n \n **2.接触前端多久了？接触/学习的渠道是什么？**\n \n A：满打满算一年。刚开始是同事辅导，慢慢入手以后，在W3CSCHOOL、网易云课堂、腾讯课堂、慕课网学习。\n \n **3.Ajax发送请求的步骤？**\n \n   3.1 xhr.open()\n   \n   3.2 xhr.send()\n   \n   3.3 callback()\n   \n **4.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？**\n \n **5.事件代理，事件委托是什么意思？**\n \n **6.闭包是怎么回事？用在什么场景？**\n \n   6.1   变量常驻内存会带来什么问题？\n   \n   6.2   如何避免这种问题？\n   \n   6.3   怎么销毁？\n   \n**7.CALL和Apply是干嘛的？**\n\n**8.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？**\n\n   8.1.如何进行CORS跨域？需要什么条件？\n   \n   8.2 对服务器来说，返回json数据和JSONP数据有什么不一样？\n   \n   8.3 还有其他跨域方式吗？\n   \n**9.简单说一说盒模型，W3C和IE怪异盒模型。**\n\n**10.简要阐述XSS和CSRF攻击及防范**\n\n  10.1 XSS脚本劫持，如何截获？(ps.这里居然把CSRF的概念当做XSS的来回答....)\n  \n  10.2 CSRF域名劫持\n  \n**11.强类型语言有继承，在JS里面如何做到继承呢？(_proto_和prototype)**\n\n   11.1 例如构造函数有一个test()方法，prototype上也有一个test()，这两个方法有区别吗？\n   \n**12.页面性能优化有哪些方式？**\n\n   12.1 文件、脚本合并是如何优化的呢？\n   \n   12.2 重绘，重排是怎么回事？有什么区别？\n   \n   12.3 请举例说明重绘，什么情况下会重绘？\n   \n   12.4 你认为样式是会引起重绘的吗？什么样式会引起重绘/重排？什么属性会引起重绘/重排？\n   \n   **13.浏览器如何知道一个文件资源是否需要缓存？**\n   \n   \n   **14.HTTP状态码304,502,503**\n  \n   14.1 *1,2,3,4,5* 开头的状态码都表示什么？\n    \n  **15.Node、Vim、angular简述**\n  \n  15.1 Node上如何处理异常情况？（Ps.我回答的是开发调试。。。找js文件）\n 15.2 已经上线的项目，出问题，怎么样去处理异常？\n     \n   **16.构建工具除了Webpack，还接触过其他的吗？**\n   \n 16.1 Webpack的优点和应用场景？\n\n## 编程大题 ##\n\n 1、页面内有一个正方形元素A以及一个待放置区域B，实现对其拖拽和放下到B区域内，并且改变B区域背景颜色(不可用html5原生事件)。\n\n\n2、实现超出整数存储范围的两个大正整数相加 function add(a, b) 。\n注意：参数 a 和 b 以及函数的返回值都是字符串。\n\n\n3、页面内有一个input输入框，实现在数组arr查询命中词并和autocomplete效果。\n          \n这个环节基本上就知道自己GG了。。。\n\n第一题考基本功，DOM、事件、定位、jsAPI\n\n第二题考算法，基本逻辑\n\n第三题考原理，基础\n\n不得不说面试官的技术确实比较全面，腾讯的远程面试也是好狠，直接远程监控写代码的。。。鼠标和界面都不敢静止，静止可能就会被认为作弊（不知道他们是不是这样来判断的，反正我没有停下来过）。\n\n以下是做完所有题目后跟面试官的沟通记录。天真的我以为会被眷顾招入鹅厂，然鹅我想多了。。\n\n![图1](http://img.blog.csdn.net/20180125112701622?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![图2](http://img.blog.csdn.net/20180125112711300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![图3](http://img.blog.csdn.net/20180125112723206?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![图4](http://img.blog.csdn.net/20180125112738983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n \n \n\n\n\n\n\n\n\n<script type=\"text/javascript\">\nconst password = 'tycho';\nif(window.prompt('请输入密码')==123456){\n\nalert('password success')\n\n}else{\nalert('password error');window.history.back(-1);\n}          \n</script>\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/2018年1月23日腾讯SNG-IMWeb前端工程师 电话远程面试记录.md","raw":"---\ntitle:  2018年1月23日腾讯SNG-IMWeb前端工程师 电话远程面试记录\ndate: 2018-01-25 00:00:00\ntags: 腾讯SNG-IMWeb面试\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n\n\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79158495)\n\n\n\n## 前言 ##\n   2018年1月18日，突然接到一个来自深圳的电话，对方说从拉勾网上看到我投递腾讯SNG部门的IMWEB团队前端，简单询问了一下我的具体情况，包括前端的就职年限，过去的工作经历。其中有一点比较有意思的是，对方问我为什么2016年7月毕业直到2017年2月入职中国XX网，这之间的简历是空缺的？我回答他说因为刚毕业没有太好的就业选择和机会，错过了很多校招，所以在毕业的时候去一个艺术培训学校当了半年的吉他老师，因为觉得和前端的职业经历没有关系，因此没有把这段经历写在简历上。对方说，我觉得你应该把这段经历也写在简历上，我说好的谢谢。\n      接着问了他招聘的是什么职位，对方说是前端工程师，我说主要负责什么工作？他说主要负责腾讯课堂的一些前端工作，我跟对方说，我目前还在老家，可能无法及时的去深圳那边面试，问了他可不可以远程面试，遂对方跟我说，可以采用电话面试，并且约定了电话一面的时间，2018年1月23日。\n## 面试的过程及结果 ##\n从接到电话直到第一次面试的这段时间，我在网上大量的检索了关于腾讯电面的经验，并且深入的针对一些常用的考点，进行梳理和总结，例如：闭包、原型、作用域链、Ajax、http协议、盒模型、兼容问题、xss/csrf攻击、浏览器渲染（重绘重排）等。\n在1月23日的当天，5点多回家，还一直在看复习资料，饭也顾不上吃。\n7点，从深圳打来了一个熟悉的电话。整个电话持续了40分钟之久，基本上问的都是基本的原理，而后可能我的回答让面试官也比较满意，之后是1个半小时的远程监控编程环节，三道程序设计题，给一个半小时的时间，腾讯面试官远程QQ协助监控你的桌面，只允许用浏览器的console以及本地编辑器，不允许查询资料，在编程过程中，面试官还会试图针对一些有问题的地方给予提示。最后，我还是很遗憾的没有通过，因为三道编程题目，我磕磕巴巴基本上没做出来，所以挂了，把文件打包发送给面试官后。我问面试官，像我这样经历不丰富，简历不突出的，为什么会考虑我呢？面试官说，我们什么阶段的人选都会考虑，你入行前端一年，基础还是不错的，就是编码能力需要提高。。。\n面试完以后，大概有几个小时，一直沉浸在刚才的面试里，晚饭也忘了吃了，一直在反思自己哪些地方答的不够好，这几天的复习哪些地方有疏漏。\n我的互联网公司处女面就以失败告终了。但是回头想想，这次失败的经历是一面镜子，让我清楚的认识到自己几斤几两，督促我在今后的学习中一步一个脚印，脚踏实地，再去仰望星空。\n\n## 电话里问到的题目 ##\n接下来，根据我当天的通话录音，来对所问到的题目进行穷举：\n\n\n  **1.接你现在的工作主要是偏前端还是偏后端？我看你大学的课程主要是偏后端一点？**\n  \n A:大学课程修完以后，出来没找到工作，干了半年吉他老师，对自己就业比较迷茫。回        到老家以后，干前端、运维都有，但是主要是前端。\n \n **2.接触前端多久了？接触/学习的渠道是什么？**\n \n A：满打满算一年。刚开始是同事辅导，慢慢入手以后，在W3CSCHOOL、网易云课堂、腾讯课堂、慕课网学习。\n \n **3.Ajax发送请求的步骤？**\n \n   3.1 xhr.open()\n   \n   3.2 xhr.send()\n   \n   3.3 callback()\n   \n **4.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？**\n \n **5.事件代理，事件委托是什么意思？**\n \n **6.闭包是怎么回事？用在什么场景？**\n \n   6.1   变量常驻内存会带来什么问题？\n   \n   6.2   如何避免这种问题？\n   \n   6.3   怎么销毁？\n   \n**7.CALL和Apply是干嘛的？**\n\n**8.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？**\n\n   8.1.如何进行CORS跨域？需要什么条件？\n   \n   8.2 对服务器来说，返回json数据和JSONP数据有什么不一样？\n   \n   8.3 还有其他跨域方式吗？\n   \n**9.简单说一说盒模型，W3C和IE怪异盒模型。**\n\n**10.简要阐述XSS和CSRF攻击及防范**\n\n  10.1 XSS脚本劫持，如何截获？(ps.这里居然把CSRF的概念当做XSS的来回答....)\n  \n  10.2 CSRF域名劫持\n  \n**11.强类型语言有继承，在JS里面如何做到继承呢？(_proto_和prototype)**\n\n   11.1 例如构造函数有一个test()方法，prototype上也有一个test()，这两个方法有区别吗？\n   \n**12.页面性能优化有哪些方式？**\n\n   12.1 文件、脚本合并是如何优化的呢？\n   \n   12.2 重绘，重排是怎么回事？有什么区别？\n   \n   12.3 请举例说明重绘，什么情况下会重绘？\n   \n   12.4 你认为样式是会引起重绘的吗？什么样式会引起重绘/重排？什么属性会引起重绘/重排？\n   \n   **13.浏览器如何知道一个文件资源是否需要缓存？**\n   \n   \n   **14.HTTP状态码304,502,503**\n  \n   14.1 *1,2,3,4,5* 开头的状态码都表示什么？\n    \n  **15.Node、Vim、angular简述**\n  \n  15.1 Node上如何处理异常情况？（Ps.我回答的是开发调试。。。找js文件）\n 15.2 已经上线的项目，出问题，怎么样去处理异常？\n     \n   **16.构建工具除了Webpack，还接触过其他的吗？**\n   \n 16.1 Webpack的优点和应用场景？\n\n## 编程大题 ##\n\n 1、页面内有一个正方形元素A以及一个待放置区域B，实现对其拖拽和放下到B区域内，并且改变B区域背景颜色(不可用html5原生事件)。\n\n\n2、实现超出整数存储范围的两个大正整数相加 function add(a, b) 。\n注意：参数 a 和 b 以及函数的返回值都是字符串。\n\n\n3、页面内有一个input输入框，实现在数组arr查询命中词并和autocomplete效果。\n          \n这个环节基本上就知道自己GG了。。。\n\n第一题考基本功，DOM、事件、定位、jsAPI\n\n第二题考算法，基本逻辑\n\n第三题考原理，基础\n\n不得不说面试官的技术确实比较全面，腾讯的远程面试也是好狠，直接远程监控写代码的。。。鼠标和界面都不敢静止，静止可能就会被认为作弊（不知道他们是不是这样来判断的，反正我没有停下来过）。\n\n以下是做完所有题目后跟面试官的沟通记录。天真的我以为会被眷顾招入鹅厂，然鹅我想多了。。\n\n![图1](http://img.blog.csdn.net/20180125112701622?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![图2](http://img.blog.csdn.net/20180125112711300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![图3](http://img.blog.csdn.net/20180125112723206?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![图4](http://img.blog.csdn.net/20180125112738983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n \n \n\n\n\n\n\n\n\n<script type=\"text/javascript\">\nconst password = 'tycho';\nif(window.prompt('请输入密码')==123456){\n\nalert('password success')\n\n}else{\nalert('password error');window.history.back(-1);\n}          \n</script>\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"2018年1月23日腾讯SNG-IMWeb前端工程师 电话远程面试记录","published":1,"updated":"2019-05-14T14:30:28.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxd003ackufv6bri1tq","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79158495\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>   2018年1月18日，突然接到一个来自深圳的电话，对方说从拉勾网上看到我投递腾讯SNG部门的IMWEB团队前端，简单询问了一下我的具体情况，包括前端的就职年限，过去的工作经历。其中有一点比较有意思的是，对方问我为什么2016年7月毕业直到2017年2月入职中国XX网，这之间的简历是空缺的？我回答他说因为刚毕业没有太好的就业选择和机会，错过了很多校招，所以在毕业的时候去一个艺术培训学校当了半年的吉他老师，因为觉得和前端的职业经历没有关系，因此没有把这段经历写在简历上。对方说，我觉得你应该把这段经历也写在简历上，我说好的谢谢。<br>      接着问了他招聘的是什么职位，对方说是前端工程师，我说主要负责什么工作？他说主要负责腾讯课堂的一些前端工作，我跟对方说，我目前还在老家，可能无法及时的去深圳那边面试，问了他可不可以远程面试，遂对方跟我说，可以采用电话面试，并且约定了电话一面的时间，2018年1月23日。</p>\n<h2 id=\"面试的过程及结果\"><a href=\"#面试的过程及结果\" class=\"headerlink\" title=\"面试的过程及结果\"></a>面试的过程及结果</h2><p>从接到电话直到第一次面试的这段时间，我在网上大量的检索了关于腾讯电面的经验，并且深入的针对一些常用的考点，进行梳理和总结，例如：闭包、原型、作用域链、Ajax、http协议、盒模型、兼容问题、xss/csrf攻击、浏览器渲染（重绘重排）等。<br>在1月23日的当天，5点多回家，还一直在看复习资料，饭也顾不上吃。<br>7点，从深圳打来了一个熟悉的电话。整个电话持续了40分钟之久，基本上问的都是基本的原理，而后可能我的回答让面试官也比较满意，之后是1个半小时的远程监控编程环节，三道程序设计题，给一个半小时的时间，腾讯面试官远程QQ协助监控你的桌面，只允许用浏览器的console以及本地编辑器，不允许查询资料，在编程过程中，面试官还会试图针对一些有问题的地方给予提示。最后，我还是很遗憾的没有通过，因为三道编程题目，我磕磕巴巴基本上没做出来，所以挂了，把文件打包发送给面试官后。我问面试官，像我这样经历不丰富，简历不突出的，为什么会考虑我呢？面试官说，我们什么阶段的人选都会考虑，你入行前端一年，基础还是不错的，就是编码能力需要提高。。。<br>面试完以后，大概有几个小时，一直沉浸在刚才的面试里，晚饭也忘了吃了，一直在反思自己哪些地方答的不够好，这几天的复习哪些地方有疏漏。<br>我的互联网公司处女面就以失败告终了。但是回头想想，这次失败的经历是一面镜子，让我清楚的认识到自己几斤几两，督促我在今后的学习中一步一个脚印，脚踏实地，再去仰望星空。</p>\n<h2 id=\"电话里问到的题目\"><a href=\"#电话里问到的题目\" class=\"headerlink\" title=\"电话里问到的题目\"></a>电话里问到的题目</h2><p>接下来，根据我当天的通话录音，来对所问到的题目进行穷举：</p>\n<p>  <strong>1.接你现在的工作主要是偏前端还是偏后端？我看你大学的课程主要是偏后端一点？</strong></p>\n<p> A:大学课程修完以后，出来没找到工作，干了半年吉他老师，对自己就业比较迷茫。回        到老家以后，干前端、运维都有，但是主要是前端。</p>\n<p> <strong>2.接触前端多久了？接触/学习的渠道是什么？</strong></p>\n<p> A：满打满算一年。刚开始是同事辅导，慢慢入手以后，在W3CSCHOOL、网易云课堂、腾讯课堂、慕课网学习。</p>\n<p> <strong>3.Ajax发送请求的步骤？</strong></p>\n<p>   3.1 xhr.open()</p>\n<p>   3.2 xhr.send()</p>\n<p>   3.3 callback()</p>\n<p> <strong>4.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？</strong></p>\n<p> <strong>5.事件代理，事件委托是什么意思？</strong></p>\n<p> <strong>6.闭包是怎么回事？用在什么场景？</strong></p>\n<p>   6.1   变量常驻内存会带来什么问题？</p>\n<p>   6.2   如何避免这种问题？</p>\n<p>   6.3   怎么销毁？</p>\n<p><strong>7.CALL和Apply是干嘛的？</strong></p>\n<p><strong>8.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？</strong></p>\n<p>   8.1.如何进行CORS跨域？需要什么条件？</p>\n<p>   8.2 对服务器来说，返回json数据和JSONP数据有什么不一样？</p>\n<p>   8.3 还有其他跨域方式吗？</p>\n<p><strong>9.简单说一说盒模型，W3C和IE怪异盒模型。</strong></p>\n<p><strong>10.简要阐述XSS和CSRF攻击及防范</strong></p>\n<p>  10.1 XSS脚本劫持，如何截获？(ps.这里居然把CSRF的概念当做XSS的来回答….)</p>\n<p>  10.2 CSRF域名劫持</p>\n<p><strong>11.强类型语言有继承，在JS里面如何做到继承呢？(<em>proto</em>和prototype)</strong></p>\n<p>   11.1 例如构造函数有一个test()方法，prototype上也有一个test()，这两个方法有区别吗？</p>\n<p><strong>12.页面性能优化有哪些方式？</strong></p>\n<p>   12.1 文件、脚本合并是如何优化的呢？</p>\n<p>   12.2 重绘，重排是怎么回事？有什么区别？</p>\n<p>   12.3 请举例说明重绘，什么情况下会重绘？</p>\n<p>   12.4 你认为样式是会引起重绘的吗？什么样式会引起重绘/重排？什么属性会引起重绘/重排？</p>\n<p>   <strong>13.浏览器如何知道一个文件资源是否需要缓存？</strong></p>\n<p>   <strong>14.HTTP状态码304,502,503</strong></p>\n<p>   14.1 <em>1,2,3,4,5</em> 开头的状态码都表示什么？</p>\n<p>  <strong>15.Node、Vim、angular简述</strong></p>\n<p>  15.1 Node上如何处理异常情况？（Ps.我回答的是开发调试。。。找js文件）<br> 15.2 已经上线的项目，出问题，怎么样去处理异常？</p>\n<p>   <strong>16.构建工具除了Webpack，还接触过其他的吗？</strong></p>\n<p> 16.1 Webpack的优点和应用场景？</p>\n<h2 id=\"编程大题\"><a href=\"#编程大题\" class=\"headerlink\" title=\"编程大题\"></a>编程大题</h2><p> 1、页面内有一个正方形元素A以及一个待放置区域B，实现对其拖拽和放下到B区域内，并且改变B区域背景颜色(不可用html5原生事件)。</p>\n<p>2、实现超出整数存储范围的两个大正整数相加 function add(a, b) 。<br>注意：参数 a 和 b 以及函数的返回值都是字符串。</p>\n<p>3、页面内有一个input输入框，实现在数组arr查询命中词并和autocomplete效果。</p>\n<p>这个环节基本上就知道自己GG了。。。</p>\n<p>第一题考基本功，DOM、事件、定位、jsAPI</p>\n<p>第二题考算法，基本逻辑</p>\n<p>第三题考原理，基础</p>\n<p>不得不说面试官的技术确实比较全面，腾讯的远程面试也是好狠，直接远程监控写代码的。。。鼠标和界面都不敢静止，静止可能就会被认为作弊（不知道他们是不是这样来判断的，反正我没有停下来过）。</p>\n<p>以下是做完所有题目后跟面试官的沟通记录。天真的我以为会被眷顾招入鹅厂，然鹅我想多了。。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180125112701622?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图1\" title=\"\" class=\"\">\n                <p>图1</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180125112711300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图2\" title=\"\" class=\"\">\n                <p>图2</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180125112723206?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图3\" title=\"\" class=\"\">\n                <p>图3</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180125112738983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图4\" title=\"\" class=\"\">\n                <p>图4</p>\n            </figure>\n<script type=\"text/javascript\">\nconst password = 'tycho';\nif(window.prompt('请输入密码')==123456){\n\nalert('password success')\n\n}else{\nalert('password error');window.history.back(-1);\n}          \n</script>\n\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79158495\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>   2018年1月18日，突然接到一个来自深圳的电话，对方说从拉勾网上看到我投递腾讯SNG部门的IMWEB团队前端，简单询问了一下我的具体情况，包括前端的就职年限，过去的工作经历。其中有一点比较有意思的是，对方问我为什么2016年7月毕业直到2017年2月入职中国XX网，这之间的简历是空缺的？我回答他说因为刚毕业没有太好的就业选择和机会，错过了很多校招，所以在毕业的时候去一个艺术培训学校当了半年的吉他老师，因为觉得和前端的职业经历没有关系，因此没有把这段经历写在简历上。对方说，我觉得你应该把这段经历也写在简历上，我说好的谢谢。<br>      接着问了他招聘的是什么职位，对方说是前端工程师，我说主要负责什么工作？他说主要负责腾讯课堂的一些前端工作，我跟对方说，我目前还在老家，可能无法及时的去深圳那边面试，问了他可不可以远程面试，遂对方跟我说，可以采用电话面试，并且约定了电话一面的时间，2018年1月23日。</p>\n<h2 id=\"面试的过程及结果\"><a href=\"#面试的过程及结果\" class=\"headerlink\" title=\"面试的过程及结果\"></a>面试的过程及结果</h2><p>从接到电话直到第一次面试的这段时间，我在网上大量的检索了关于腾讯电面的经验，并且深入的针对一些常用的考点，进行梳理和总结，例如：闭包、原型、作用域链、Ajax、http协议、盒模型、兼容问题、xss/csrf攻击、浏览器渲染（重绘重排）等。<br>在1月23日的当天，5点多回家，还一直在看复习资料，饭也顾不上吃。<br>7点，从深圳打来了一个熟悉的电话。整个电话持续了40分钟之久，基本上问的都是基本的原理，而后可能我的回答让面试官也比较满意，之后是1个半小时的远程监控编程环节，三道程序设计题，给一个半小时的时间，腾讯面试官远程QQ协助监控你的桌面，只允许用浏览器的console以及本地编辑器，不允许查询资料，在编程过程中，面试官还会试图针对一些有问题的地方给予提示。最后，我还是很遗憾的没有通过，因为三道编程题目，我磕磕巴巴基本上没做出来，所以挂了，把文件打包发送给面试官后。我问面试官，像我这样经历不丰富，简历不突出的，为什么会考虑我呢？面试官说，我们什么阶段的人选都会考虑，你入行前端一年，基础还是不错的，就是编码能力需要提高。。。<br>面试完以后，大概有几个小时，一直沉浸在刚才的面试里，晚饭也忘了吃了，一直在反思自己哪些地方答的不够好，这几天的复习哪些地方有疏漏。<br>我的互联网公司处女面就以失败告终了。但是回头想想，这次失败的经历是一面镜子，让我清楚的认识到自己几斤几两，督促我在今后的学习中一步一个脚印，脚踏实地，再去仰望星空。</p>\n<h2 id=\"电话里问到的题目\"><a href=\"#电话里问到的题目\" class=\"headerlink\" title=\"电话里问到的题目\"></a>电话里问到的题目</h2><p>接下来，根据我当天的通话录音，来对所问到的题目进行穷举：</p>\n<p>  <strong>1.接你现在的工作主要是偏前端还是偏后端？我看你大学的课程主要是偏后端一点？</strong></p>\n<p> A:大学课程修完以后，出来没找到工作，干了半年吉他老师，对自己就业比较迷茫。回        到老家以后，干前端、运维都有，但是主要是前端。</p>\n<p> <strong>2.接触前端多久了？接触/学习的渠道是什么？</strong></p>\n<p> A：满打满算一年。刚开始是同事辅导，慢慢入手以后，在W3CSCHOOL、网易云课堂、腾讯课堂、慕课网学习。</p>\n<p> <strong>3.Ajax发送请求的步骤？</strong></p>\n<p>   3.1 xhr.open()</p>\n<p>   3.2 xhr.send()</p>\n<p>   3.3 callback()</p>\n<p> <strong>4.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？</strong></p>\n<p> <strong>5.事件代理，事件委托是什么意思？</strong></p>\n<p> <strong>6.闭包是怎么回事？用在什么场景？</strong></p>\n<p>   6.1   变量常驻内存会带来什么问题？</p>\n<p>   6.2   如何避免这种问题？</p>\n<p>   6.3   怎么销毁？</p>\n<p><strong>7.CALL和Apply是干嘛的？</strong></p>\n<p><strong>8.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？</strong></p>\n<p>   8.1.如何进行CORS跨域？需要什么条件？</p>\n<p>   8.2 对服务器来说，返回json数据和JSONP数据有什么不一样？</p>\n<p>   8.3 还有其他跨域方式吗？</p>\n<p><strong>9.简单说一说盒模型，W3C和IE怪异盒模型。</strong></p>\n<p><strong>10.简要阐述XSS和CSRF攻击及防范</strong></p>\n<p>  10.1 XSS脚本劫持，如何截获？(ps.这里居然把CSRF的概念当做XSS的来回答….)</p>\n<p>  10.2 CSRF域名劫持</p>\n<p><strong>11.强类型语言有继承，在JS里面如何做到继承呢？(<em>proto</em>和prototype)</strong></p>\n<p>   11.1 例如构造函数有一个test()方法，prototype上也有一个test()，这两个方法有区别吗？</p>\n<p><strong>12.页面性能优化有哪些方式？</strong></p>\n<p>   12.1 文件、脚本合并是如何优化的呢？</p>\n<p>   12.2 重绘，重排是怎么回事？有什么区别？</p>\n<p>   12.3 请举例说明重绘，什么情况下会重绘？</p>\n<p>   12.4 你认为样式是会引起重绘的吗？什么样式会引起重绘/重排？什么属性会引起重绘/重排？</p>\n<p>   <strong>13.浏览器如何知道一个文件资源是否需要缓存？</strong></p>\n<p>   <strong>14.HTTP状态码304,502,503</strong></p>\n<p>   14.1 <em>1,2,3,4,5</em> 开头的状态码都表示什么？</p>\n<p>  <strong>15.Node、Vim、angular简述</strong></p>\n<p>  15.1 Node上如何处理异常情况？（Ps.我回答的是开发调试。。。找js文件）<br> 15.2 已经上线的项目，出问题，怎么样去处理异常？</p>\n<p>   <strong>16.构建工具除了Webpack，还接触过其他的吗？</strong></p>\n<p> 16.1 Webpack的优点和应用场景？</p>\n<h2 id=\"编程大题\"><a href=\"#编程大题\" class=\"headerlink\" title=\"编程大题\"></a>编程大题</h2><p> 1、页面内有一个正方形元素A以及一个待放置区域B，实现对其拖拽和放下到B区域内，并且改变B区域背景颜色(不可用html5原生事件)。</p>\n<p>2、实现超出整数存储范围的两个大正整数相加 function add(a, b) 。<br>注意：参数 a 和 b 以及函数的返回值都是字符串。</p>\n<p>3、页面内有一个input输入框，实现在数组arr查询命中词并和autocomplete效果。</p>\n<p>这个环节基本上就知道自己GG了。。。</p>\n<p>第一题考基本功，DOM、事件、定位、jsAPI</p>\n<p>第二题考算法，基本逻辑</p>\n<p>第三题考原理，基础</p>\n<p>不得不说面试官的技术确实比较全面，腾讯的远程面试也是好狠，直接远程监控写代码的。。。鼠标和界面都不敢静止，静止可能就会被认为作弊（不知道他们是不是这样来判断的，反正我没有停下来过）。</p>\n<p>以下是做完所有题目后跟面试官的沟通记录。天真的我以为会被眷顾招入鹅厂，然鹅我想多了。。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180125112701622?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图1\" title=\"\" class=\"\">\n                <p>图1</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180125112711300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图2\" title=\"\" class=\"\">\n                <p>图2</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180125112723206?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图3\" title=\"\" class=\"\">\n                <p>图3</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180125112738983?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"图4\" title=\"\" class=\"\">\n                <p>图4</p>\n            </figure>\n<script type=\"text/javascript\">\nconst password = 'tycho';\nif(window.prompt('请输入密码')==123456){\n\nalert('password success')\n\n}else{\nalert('password error');window.history.back(-1);\n}          \n</script>\n\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"ES7 decorator 深入探析","date":"2019-06-13T14:23:00.000Z","reward":true,"comment":true,"_content":"本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/91357985](https://blog.csdn.net/qq_20264891/article/details/91357985)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n### 起因\n\n一直享受着  Anuglar 和 Nest 的红利，上来就是 `@Component(...) ` 或者 `@Controller(...)`，自己却没有实际的探究过背后的原理。于是今天想好好总结一下，沉淀沉淀。\n\n### 前置条件（es5 原理）\n之前看过红宝书，第六章提到过，js 对象的属性有几个特性：\n1. [[configurable]] 是否可配置 \n2. [[enumerable]] 是否可枚举\n3. [[writeble]] 是否可修改值\n4. [[value]] 写入的值是啥\n\n*四个配置项都为 boolean 类型。*\n这四个配置联合起来有一个名字，叫做**对象属性的描述符(descriptor)**\n其中，writeble 和 value 还有另外一个名字， `setter` 和 `getter` 访问器）。\n上代码：\n```javascript\nconst obj = { };\nObject.defineProperty(obj,'a', {\nvalue: 1,\nwriteble: false,\n});\nconsole.log(obj); // {a: 1}\nconsole.log(obj.a) // 1\nobj.a = 3; // 修改 a 属性的值\nconsole.log(obj.a) // 1\n\n/**====================另一种写法====================*/\nconst d = {};\nObject.defineProperty(d , 'name' {\nget: function() {return 1},\nset: function(value) {return false}\n});\n\nconsole.log(d) // {} 注意！！！！这里跟 writeble 和 value 不太一样，这里打印出来的对象，是没有显示 name 属性的！！！但是访问可以访问出来\nd.name; // 1\nd.name = 3; // 尝试修改 name 属性 \nd.name; // 1\n```\n我们发现，配置了可写入项为  false 时，我们就无法去修改对象属性的值了，有点像冻结的意思。刚好，JS 有个 `Object.freeze()`， 来看一下\n```javascript\nconst c = {name: 1};\nObject.freeze(c);\nc.name = 3;\nconsole.log(c) // {a: 1}\n```\n发现和我们自己去配置 `writeble: false` 效果相同。不信？来验证一下：\n```javascript\nObject.getOwnPropertyDescriptor(c);\n// 返回： \n{\n\t name: {\n\t configurable: false\n\t enumerable: true\n\t value: 1\n\t writable: false\n\t}\n}\n```\n### ES6 还要这么写吗？\n不用。直接用`装饰器 decorator`来写。\n#### 第一种，直接装饰 class，\n作用： 给类增加动态属性，该动态属性并不会被继承，只能作为 **被装饰类** 的 静态属性。\n注意： 给类添加静态属性的这种行为，是在 **编译时** 发生的！所以说：\n**装饰器的本质就是编译时运行的函数**\n```javascript\nfunction addFlag(object) {\nobject.flag = true;\n}\n\n@addFlag\nclass Foo(){}\nFoo.flag // true\n\n\n// 来个实例\nconst f1 = new Foo();\nf1.flag // undefined\n```\n\n#### 第二种，装饰属性\n装饰器会在 `Object.defineProperty` 之前执行，也就是拦截默认的访问修饰符。\n举个例子:\n```javascript\n// CSDN markdown 编辑器 为什么不支持 typescript 高亮？无语...\nfunction nameEqual3(object, key, descriptor: PropertyDescriptor) {\n    descriptor.value = 3;\n    descriptor.writable = false;\n}\nclass Person {\n\n    @nameEqual3\n    name() { }\n}\n\nconst p = new Person();\nconsole.log(p.name); // 3\n```\n可见其效果。\n也支持传参，如下代码所示，请仔细阅读注释：\n```javascript\n  // 装饰器函数 (用闭包来封装一下)\n  function sign(id) {\n    return function (target, name, descriptor) {\n      /**\n       *  这里的 value 在我看来，更像是一个 getter, 所以可以直接被赋值成一个函数\n       *  类似于：\n       *  descriptor = {\n       *     get: function(){ return this.value } \n       *  }\n       */\n      const oldValue = descriptor.value;\n      /**\n       * 这里的 args 实际上就是装饰器在运行时，挂载的函数的入参，下面的 log 日志会证明\n       */\n      descriptor.value = function (...args) {\n        console.log(`args =>`, args);\n        console.log(`标记 ${id}`);\n        return oldValue.apply(this, args);\n      };\n\n      return descriptor;\n    }\n  }\n\n  class Person {\n    @sign(1)\n    method(a, b) {\n      return a + b;\n    }\n  }\n\n  // 实例化和调用\n  const p1 = new Person();\n  p1.method(2, 4);\n  \n  // 输出：\n   args => [3,4]\n   标记 1\n```\n\n#### 第三种，装饰器的高级用法（链式调用, combine 以及 mixin)\n##### 1.链式（连续）\n首先来看链式（连续）调用，这次多加一个装饰器，并且继续通过打印的方式来查看下调用的顺序：\n```javascript\n\n// 装饰器函数 再 封装一层\nfunction mark(id) {\n  // 真正的装饰器函数以闭包形式返回\n  return (obj, target, descriptor) => {\n    // 不破坏原 getter 函数\n    const old = descriptor.value;\n    console.log(id);\n    return descriptor.value = () => old.apply(this, id);\n  }\n}\n\n\n\nclass Person {\n\n  @mark(1)\n  @mark(2)\n  method() { }\n}\n\n\nconst p1 = new Person();\n\np1.method();\n\n// 输出：\n2 \n1\n```\n\n咦？明明 `@mark(1) ` 在 `@mark(2)` 之前调用的啊，为什么 2 比 1 先执行了呢？\n让我们打开 如下地址，跟着我一起分析：\n[Type Script - Play ground](http://www.typescriptlang.org/play/#src=%0D%0A%2F%2F%20%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%20%E5%86%8D%20%E5%B0%81%E8%A3%85%E4%B8%80%E5%B1%82%0D%0Afunction%20mark(id)%20%7B%0D%0A%20%20%2F%2F%20%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%E4%BB%A5%E9%97%AD%E5%8C%85%E5%BD%A2%E5%BC%8F%E8%BF%94%E5%9B%9E%0D%0A%20%20return%20(obj%2C%20target%2C%20descriptor)%20%3D%3E%20%7B%0D%0A%20%20%20%20%2F%2F%20%E4%B8%8D%E7%A0%B4%E5%9D%8F%E5%8E%9F%20getter%20%E5%87%BD%E6%95%B0%0D%0A%20%20%20%20const%20old%20%3D%20descriptor.value%3B%0D%0A%20%20%20%20console.log(id)%3B%0D%0A%20%20%20%20return%20descriptor.value%20%3D%20()%20%3D%3E%20old.apply(this%2C%20id)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0A%0D%0Aclass%20Person%20%7B%0D%0A%0D%0A%20%20%40mark(1)%0D%0A%20%20%40mark(2)%0D%0A%20%20method()%20%7B%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0Aconst%20p1%20%3D%20new%20Person()%3B%0D%0A%0D%0Ap1.method()%3B%0D%0A%0D%0A%2F%2F%20%E8%BE%93%E5%87%BA%EF%BC%9A%0D%0A2%20%0D%0A1)\n 来看右边编译后的 javascript 代码，只看 var decorator 被编译成了啥，下面的不用看，跟源码差不多。**请仔细阅读注释**\n```javascript\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n// 判断函数真正的入参，如果小于 3 个，r = target 否则 继续判断 ，在该 对象 的属性（被装饰的属性）上原本的 descriptor 是不是 null ？ 如果是，则 desc 等于 当前对象被装饰属性的 descriptor ，否则 r = 当前对象被装饰属性的 descriptor\n// 这里的 d 用于缓存 下面遍历时 的 状态\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    // 这里的 Reflect 是 window 下的 全局对象，我们也知道， Reflect 对象根本没有 decorate 方法，所以， turthy 的分支并不会执行，而是走 falsy 分支.\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    /**********关键步骤************/\n    // 这里遍历的是入参的装饰器数组，并且，从右倒叙遍历（起始下标为 decorators.length - 1）\n    // d 是每次遍历的 装饰器返回的 descriptor, 通过 判断入参个数，来决定 r 的类型，以及是否通过 d(r) 来装饰某个对象。如果 入参 < 3 个，即 r 为 一个对象，执行 d(r) ； 否则如果 入参 > 3 个，即运行时传入了第四个参数 desc(descriptor) ， 此时的 r 其实就是 desc ，d(target, key, r) 意思是：用 入参的 desc 装饰对象 target 的 key 属性；否则 c < 4 ， 此时的 r  为 object 对象，d(target, key)；\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n/*************************下面这些先不用看***********************/\n\n// 装饰器函数 再 封装一层\nfunction mark(id) {\n    var _this = this;\n    // 真正的装饰器函数以闭包形式返回\n    return function (obj, target, descriptor) {\n        // 不破坏原 getter 函数\n        var old = descriptor.value;\n        console.log(id);\n        return descriptor.value = function () { return old.apply(_this, id); };\n    };\n}\nvar Person = /** @class */ (function () {\n    function Person() {\n    }\n    Person.prototype.method = function () { };\n    __decorate([\n        mark(1),\n        mark(2)\n    ], Person.prototype, \"method\", null);\n    return Person;\n}());\nvar p1 = new Person();\np1.method();\n```\n上面啰里啰唆的注释是啥意思呢？\n翻译成人话： 装饰器的执行顺序是个 栈， 后进先出。像极了... 爱情？不，像极了 **洋葱模型**。\n\n##### 2. combine (合并)\n合并指的是装饰器装饰某个类的属性的时候，同时应用多个装饰器的模式。（要跟下面的 `@mixin`）区分\n```javascript\n\nfunction eatApple(count) {\n  return (obj,target,descriptor) => {\n    const old = descriptor.value;\n    console.log(`吃了 ${count} 个 苹果`);\n    return old.apply(this);\n  }\n}\n\n\nfunction runMeter(long) {\n  return (obj,target,descriptor) => {\n    const old = descriptor.value;\n    console.log(`跑了 ${long} 米`);\n    return old.apply(this);\n  }\n}\n\n\nfunction combine(...descriptors) {\n  // 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟\n  return (obj, target, descriptor) => descriptors.forEach(d => d.apply(this, [obj, target, descriptor]));\n}\n\n\nclass Person {\n\n  @combine(eatApple(1), runMeter(9))\n  method() { }\n}\n\n\nconst p1 = new Person();\n\np1.method();\n\n// 输出：\n吃了一个苹果\n跑了 9 米\n```\n可见，在 `@combine()` 中传入的参数顺序，竟然跟最终的顺序 是一样的，咦？不是洋葱吗？这压根不是栈啊！\n脑子里回想一下刚才解析源码的过程，我再次望向了这次的源码：\n```javascript\nvar Person = /** @class */ (function () {\n    function Person() {\n    }\n    Person.prototype.method = function () { };\n    __decorate([\n        combine(eatApple(1), runMeter(9))\n    ], Person.prototype, \"method\", null);\n    return Person;\n```\n显而易见，这两个函数，直接是作为结果被传进去的，相当于栈里面只有 `mixin` 一个函数，无所谓是栈或者队列了，反正两个函数都在我内部执行，我让他怎么执行就怎么执行，为所欲为。所以这里的输出结果是同步的，完全就是因为栈里只有一个  member。\n不信验证一下：\n```javascript\n\nfunction eatApple(count) {\n  return (obj,target,descriptor) => {\n    const old = descriptor.value;\n    console.log(`吃了 ${count} 个 苹果`);\n    return old.apply(this);\n  }\n}\n\n\nfunction runMeter(long) {\n  return (obj,target,descriptor) => {\n    const old = descriptor.value;\n    console.log(`跑了 ${long} 米`);\n    return old.apply(this);\n  }\n}\n\n\nfunction combine(...descriptors) {\n  // 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟\n  return (obj, target, descriptor) => descriptors.forEach(d => d.apply(this, [obj, target, descriptor]));\n}\n\n\nclass Person {\n\n  @combine(eatApple(1), runMeter(9))\n  @combine(eatApple(5),runMeter(100))\n  method() { }\n}\n\n\nconst p1 = new Person();\n\np1.method();\n\n// 输出：\n吃了 5 个 苹果\n跑了 100 米\n吃了 1 个 苹果\n跑了 9 米\n```\n##### 3. mixin (混合) \nmixin 意为在一个对象之中混入另外一个对象的方法。\n```javascript\nfunction mixins(...list) {\n  return function (target) {\n  // Object.assign 可用于对象，即 编译后的 es3 runtime 指向 class.prototype\n    Object.assign(target.prototype, ...list);\n  };\n}\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // \"foo\"\n```\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/ES7 decorator 深入探析.md","raw":"---\ntitle: ES7 decorator 深入探析 #标题\ndate: 2019-06-13 22:23:00 #创建时间\ntags: [javascript, decorator] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/91357985](https://blog.csdn.net/qq_20264891/article/details/91357985)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n\n### 起因\n\n一直享受着  Anuglar 和 Nest 的红利，上来就是 `@Component(...) ` 或者 `@Controller(...)`，自己却没有实际的探究过背后的原理。于是今天想好好总结一下，沉淀沉淀。\n\n### 前置条件（es5 原理）\n之前看过红宝书，第六章提到过，js 对象的属性有几个特性：\n1. [[configurable]] 是否可配置 \n2. [[enumerable]] 是否可枚举\n3. [[writeble]] 是否可修改值\n4. [[value]] 写入的值是啥\n\n*四个配置项都为 boolean 类型。*\n这四个配置联合起来有一个名字，叫做**对象属性的描述符(descriptor)**\n其中，writeble 和 value 还有另外一个名字， `setter` 和 `getter` 访问器）。\n上代码：\n```javascript\nconst obj = { };\nObject.defineProperty(obj,'a', {\nvalue: 1,\nwriteble: false,\n});\nconsole.log(obj); // {a: 1}\nconsole.log(obj.a) // 1\nobj.a = 3; // 修改 a 属性的值\nconsole.log(obj.a) // 1\n\n/**====================另一种写法====================*/\nconst d = {};\nObject.defineProperty(d , 'name' {\nget: function() {return 1},\nset: function(value) {return false}\n});\n\nconsole.log(d) // {} 注意！！！！这里跟 writeble 和 value 不太一样，这里打印出来的对象，是没有显示 name 属性的！！！但是访问可以访问出来\nd.name; // 1\nd.name = 3; // 尝试修改 name 属性 \nd.name; // 1\n```\n我们发现，配置了可写入项为  false 时，我们就无法去修改对象属性的值了，有点像冻结的意思。刚好，JS 有个 `Object.freeze()`， 来看一下\n```javascript\nconst c = {name: 1};\nObject.freeze(c);\nc.name = 3;\nconsole.log(c) // {a: 1}\n```\n发现和我们自己去配置 `writeble: false` 效果相同。不信？来验证一下：\n```javascript\nObject.getOwnPropertyDescriptor(c);\n// 返回： \n{\n\t name: {\n\t configurable: false\n\t enumerable: true\n\t value: 1\n\t writable: false\n\t}\n}\n```\n### ES6 还要这么写吗？\n不用。直接用`装饰器 decorator`来写。\n#### 第一种，直接装饰 class，\n作用： 给类增加动态属性，该动态属性并不会被继承，只能作为 **被装饰类** 的 静态属性。\n注意： 给类添加静态属性的这种行为，是在 **编译时** 发生的！所以说：\n**装饰器的本质就是编译时运行的函数**\n```javascript\nfunction addFlag(object) {\nobject.flag = true;\n}\n\n@addFlag\nclass Foo(){}\nFoo.flag // true\n\n\n// 来个实例\nconst f1 = new Foo();\nf1.flag // undefined\n```\n\n#### 第二种，装饰属性\n装饰器会在 `Object.defineProperty` 之前执行，也就是拦截默认的访问修饰符。\n举个例子:\n```javascript\n// CSDN markdown 编辑器 为什么不支持 typescript 高亮？无语...\nfunction nameEqual3(object, key, descriptor: PropertyDescriptor) {\n    descriptor.value = 3;\n    descriptor.writable = false;\n}\nclass Person {\n\n    @nameEqual3\n    name() { }\n}\n\nconst p = new Person();\nconsole.log(p.name); // 3\n```\n可见其效果。\n也支持传参，如下代码所示，请仔细阅读注释：\n```javascript\n  // 装饰器函数 (用闭包来封装一下)\n  function sign(id) {\n    return function (target, name, descriptor) {\n      /**\n       *  这里的 value 在我看来，更像是一个 getter, 所以可以直接被赋值成一个函数\n       *  类似于：\n       *  descriptor = {\n       *     get: function(){ return this.value } \n       *  }\n       */\n      const oldValue = descriptor.value;\n      /**\n       * 这里的 args 实际上就是装饰器在运行时，挂载的函数的入参，下面的 log 日志会证明\n       */\n      descriptor.value = function (...args) {\n        console.log(`args =>`, args);\n        console.log(`标记 ${id}`);\n        return oldValue.apply(this, args);\n      };\n\n      return descriptor;\n    }\n  }\n\n  class Person {\n    @sign(1)\n    method(a, b) {\n      return a + b;\n    }\n  }\n\n  // 实例化和调用\n  const p1 = new Person();\n  p1.method(2, 4);\n  \n  // 输出：\n   args => [3,4]\n   标记 1\n```\n\n#### 第三种，装饰器的高级用法（链式调用, combine 以及 mixin)\n##### 1.链式（连续）\n首先来看链式（连续）调用，这次多加一个装饰器，并且继续通过打印的方式来查看下调用的顺序：\n```javascript\n\n// 装饰器函数 再 封装一层\nfunction mark(id) {\n  // 真正的装饰器函数以闭包形式返回\n  return (obj, target, descriptor) => {\n    // 不破坏原 getter 函数\n    const old = descriptor.value;\n    console.log(id);\n    return descriptor.value = () => old.apply(this, id);\n  }\n}\n\n\n\nclass Person {\n\n  @mark(1)\n  @mark(2)\n  method() { }\n}\n\n\nconst p1 = new Person();\n\np1.method();\n\n// 输出：\n2 \n1\n```\n\n咦？明明 `@mark(1) ` 在 `@mark(2)` 之前调用的啊，为什么 2 比 1 先执行了呢？\n让我们打开 如下地址，跟着我一起分析：\n[Type Script - Play ground](http://www.typescriptlang.org/play/#src=%0D%0A%2F%2F%20%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%20%E5%86%8D%20%E5%B0%81%E8%A3%85%E4%B8%80%E5%B1%82%0D%0Afunction%20mark(id)%20%7B%0D%0A%20%20%2F%2F%20%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%E4%BB%A5%E9%97%AD%E5%8C%85%E5%BD%A2%E5%BC%8F%E8%BF%94%E5%9B%9E%0D%0A%20%20return%20(obj%2C%20target%2C%20descriptor)%20%3D%3E%20%7B%0D%0A%20%20%20%20%2F%2F%20%E4%B8%8D%E7%A0%B4%E5%9D%8F%E5%8E%9F%20getter%20%E5%87%BD%E6%95%B0%0D%0A%20%20%20%20const%20old%20%3D%20descriptor.value%3B%0D%0A%20%20%20%20console.log(id)%3B%0D%0A%20%20%20%20return%20descriptor.value%20%3D%20()%20%3D%3E%20old.apply(this%2C%20id)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0A%0D%0Aclass%20Person%20%7B%0D%0A%0D%0A%20%20%40mark(1)%0D%0A%20%20%40mark(2)%0D%0A%20%20method()%20%7B%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0Aconst%20p1%20%3D%20new%20Person()%3B%0D%0A%0D%0Ap1.method()%3B%0D%0A%0D%0A%2F%2F%20%E8%BE%93%E5%87%BA%EF%BC%9A%0D%0A2%20%0D%0A1)\n 来看右边编译后的 javascript 代码，只看 var decorator 被编译成了啥，下面的不用看，跟源码差不多。**请仔细阅读注释**\n```javascript\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n// 判断函数真正的入参，如果小于 3 个，r = target 否则 继续判断 ，在该 对象 的属性（被装饰的属性）上原本的 descriptor 是不是 null ？ 如果是，则 desc 等于 当前对象被装饰属性的 descriptor ，否则 r = 当前对象被装饰属性的 descriptor\n// 这里的 d 用于缓存 下面遍历时 的 状态\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    // 这里的 Reflect 是 window 下的 全局对象，我们也知道， Reflect 对象根本没有 decorate 方法，所以， turthy 的分支并不会执行，而是走 falsy 分支.\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    /**********关键步骤************/\n    // 这里遍历的是入参的装饰器数组，并且，从右倒叙遍历（起始下标为 decorators.length - 1）\n    // d 是每次遍历的 装饰器返回的 descriptor, 通过 判断入参个数，来决定 r 的类型，以及是否通过 d(r) 来装饰某个对象。如果 入参 < 3 个，即 r 为 一个对象，执行 d(r) ； 否则如果 入参 > 3 个，即运行时传入了第四个参数 desc(descriptor) ， 此时的 r 其实就是 desc ，d(target, key, r) 意思是：用 入参的 desc 装饰对象 target 的 key 属性；否则 c < 4 ， 此时的 r  为 object 对象，d(target, key)；\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n/*************************下面这些先不用看***********************/\n\n// 装饰器函数 再 封装一层\nfunction mark(id) {\n    var _this = this;\n    // 真正的装饰器函数以闭包形式返回\n    return function (obj, target, descriptor) {\n        // 不破坏原 getter 函数\n        var old = descriptor.value;\n        console.log(id);\n        return descriptor.value = function () { return old.apply(_this, id); };\n    };\n}\nvar Person = /** @class */ (function () {\n    function Person() {\n    }\n    Person.prototype.method = function () { };\n    __decorate([\n        mark(1),\n        mark(2)\n    ], Person.prototype, \"method\", null);\n    return Person;\n}());\nvar p1 = new Person();\np1.method();\n```\n上面啰里啰唆的注释是啥意思呢？\n翻译成人话： 装饰器的执行顺序是个 栈， 后进先出。像极了... 爱情？不，像极了 **洋葱模型**。\n\n##### 2. combine (合并)\n合并指的是装饰器装饰某个类的属性的时候，同时应用多个装饰器的模式。（要跟下面的 `@mixin`）区分\n```javascript\n\nfunction eatApple(count) {\n  return (obj,target,descriptor) => {\n    const old = descriptor.value;\n    console.log(`吃了 ${count} 个 苹果`);\n    return old.apply(this);\n  }\n}\n\n\nfunction runMeter(long) {\n  return (obj,target,descriptor) => {\n    const old = descriptor.value;\n    console.log(`跑了 ${long} 米`);\n    return old.apply(this);\n  }\n}\n\n\nfunction combine(...descriptors) {\n  // 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟\n  return (obj, target, descriptor) => descriptors.forEach(d => d.apply(this, [obj, target, descriptor]));\n}\n\n\nclass Person {\n\n  @combine(eatApple(1), runMeter(9))\n  method() { }\n}\n\n\nconst p1 = new Person();\n\np1.method();\n\n// 输出：\n吃了一个苹果\n跑了 9 米\n```\n可见，在 `@combine()` 中传入的参数顺序，竟然跟最终的顺序 是一样的，咦？不是洋葱吗？这压根不是栈啊！\n脑子里回想一下刚才解析源码的过程，我再次望向了这次的源码：\n```javascript\nvar Person = /** @class */ (function () {\n    function Person() {\n    }\n    Person.prototype.method = function () { };\n    __decorate([\n        combine(eatApple(1), runMeter(9))\n    ], Person.prototype, \"method\", null);\n    return Person;\n```\n显而易见，这两个函数，直接是作为结果被传进去的，相当于栈里面只有 `mixin` 一个函数，无所谓是栈或者队列了，反正两个函数都在我内部执行，我让他怎么执行就怎么执行，为所欲为。所以这里的输出结果是同步的，完全就是因为栈里只有一个  member。\n不信验证一下：\n```javascript\n\nfunction eatApple(count) {\n  return (obj,target,descriptor) => {\n    const old = descriptor.value;\n    console.log(`吃了 ${count} 个 苹果`);\n    return old.apply(this);\n  }\n}\n\n\nfunction runMeter(long) {\n  return (obj,target,descriptor) => {\n    const old = descriptor.value;\n    console.log(`跑了 ${long} 米`);\n    return old.apply(this);\n  }\n}\n\n\nfunction combine(...descriptors) {\n  // 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟\n  return (obj, target, descriptor) => descriptors.forEach(d => d.apply(this, [obj, target, descriptor]));\n}\n\n\nclass Person {\n\n  @combine(eatApple(1), runMeter(9))\n  @combine(eatApple(5),runMeter(100))\n  method() { }\n}\n\n\nconst p1 = new Person();\n\np1.method();\n\n// 输出：\n吃了 5 个 苹果\n跑了 100 米\n吃了 1 个 苹果\n跑了 9 米\n```\n##### 3. mixin (混合) \nmixin 意为在一个对象之中混入另外一个对象的方法。\n```javascript\nfunction mixins(...list) {\n  return function (target) {\n  // Object.assign 可用于对象，即 编译后的 es3 runtime 指向 class.prototype\n    Object.assign(target.prototype, ...list);\n  };\n}\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // \"foo\"\n```\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"ES7 decorator 深入探析","published":1,"updated":"2019-06-14T14:10:38.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxf003bckufgnxvlnaj","content":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/91357985\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/91357985</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>一直享受着  Anuglar 和 Nest 的红利，上来就是 <code>@Component(...)</code> 或者 <code>@Controller(...)</code>，自己却没有实际的探究过背后的原理。于是今天想好好总结一下，沉淀沉淀。</p>\n<h3 id=\"前置条件（es5-原理）\"><a href=\"#前置条件（es5-原理）\" class=\"headerlink\" title=\"前置条件（es5 原理）\"></a>前置条件（es5 原理）</h3><p>之前看过红宝书，第六章提到过，js 对象的属性有几个特性：</p>\n<ol>\n<li>[[configurable]] 是否可配置 </li>\n<li>[[enumerable]] 是否可枚举</li>\n<li>[[writeble]] 是否可修改值</li>\n<li>[[value]] 写入的值是啥</li>\n</ol>\n<p><em>四个配置项都为 boolean 类型。</em><br>这四个配置联合起来有一个名字，叫做<strong>对象属性的描述符(descriptor)</strong><br>其中，writeble 和 value 还有另外一个名字， <code>setter</code> 和 <code>getter</code> 访问器）。<br>上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">value: <span class=\"number\">1</span>,</span><br><span class=\"line\">writeble: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;a: 1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a) <span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.a = <span class=\"number\">3</span>; <span class=\"comment\">// 修改 a 属性的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**====================另一种写法====================*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> d = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(d , <span class=\"string\">'name'</span> &#123;</span><br><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d) <span class=\"comment\">// &#123;&#125; 注意！！！！这里跟 writeble 和 value 不太一样，这里打印出来的对象，是没有显示 name 属性的！！！但是访问可以访问出来</span></span><br><span class=\"line\">d.name; <span class=\"comment\">// 1</span></span><br><span class=\"line\">d.name = <span class=\"number\">3</span>; <span class=\"comment\">// 尝试修改 name 属性 </span></span><br><span class=\"line\">d.name; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<p>我们发现，配置了可写入项为  false 时，我们就无法去修改对象属性的值了，有点像冻结的意思。刚好，JS 有个 <code>Object.freeze()</code>， 来看一下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> c = &#123;<span class=\"attr\">name</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.freeze(c);</span><br><span class=\"line\">c.name = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>发现和我们自己去配置 <code>writeble: false</code> 效果相同。不信？来验证一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(c);</span><br><span class=\"line\"><span class=\"comment\">// 返回： </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t name: &#123;</span><br><span class=\"line\">\t configurable: <span class=\"literal\">false</span></span><br><span class=\"line\">\t enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">\t value: <span class=\"number\">1</span></span><br><span class=\"line\">\t writable: <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ES6-还要这么写吗？\"><a href=\"#ES6-还要这么写吗？\" class=\"headerlink\" title=\"ES6 还要这么写吗？\"></a>ES6 还要这么写吗？</h3><p>不用。直接用<code>装饰器 decorator</code>来写。</p>\n<h4 id=\"第一种，直接装饰-class，\"><a href=\"#第一种，直接装饰-class，\" class=\"headerlink\" title=\"第一种，直接装饰 class，\"></a>第一种，直接装饰 class，</h4><p>作用： 给类增加动态属性，该动态属性并不会被继承，只能作为 <strong>被装饰类</strong> 的 静态属性。<br>注意： 给类添加静态属性的这种行为，是在 <strong>编译时</strong> 发生的！所以说：<br><strong>装饰器的本质就是编译时运行的函数</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addFlag</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">object.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@addFlag</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>()</span>&#123;&#125;</span><br><span class=\"line\">Foo.flag <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 来个实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> f1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">f1.flag <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第二种，装饰属性\"><a href=\"#第二种，装饰属性\" class=\"headerlink\" title=\"第二种，装饰属性\"></a>第二种，装饰属性</h4><p>装饰器会在 <code>Object.defineProperty</code> 之前执行，也就是拦截默认的访问修饰符。<br>举个例子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CSDN markdown 编辑器 为什么不支持 typescript 高亮？无语...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nameEqual3</span>(<span class=\"params\">object, key, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">    descriptor.value = <span class=\"number\">3</span>;</span><br><span class=\"line\">    descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @nameEqual3</span><br><span class=\"line\">    name() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></p>\n<p>可见其效果。<br>也支持传参，如下代码所示，请仔细阅读注释：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 装饰器函数 (用闭包来封装一下)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sign</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  这里的 value 在我看来，更像是一个 getter, 所以可以直接被赋值成一个函数</span></span><br><span class=\"line\"><span class=\"comment\">     *  类似于：</span></span><br><span class=\"line\"><span class=\"comment\">     *  descriptor = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     *     get: function()&#123; return this.value &#125; </span></span><br><span class=\"line\"><span class=\"comment\">     *  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldValue = descriptor.value;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里的 args 实际上就是装饰器在运行时，挂载的函数的入参，下面的 log 日志会证明</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`args =&gt;`</span>, args);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`标记 <span class=\"subst\">$&#123;id&#125;</span>`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> oldValue.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @sign(<span class=\"number\">1</span>)</span><br><span class=\"line\">  method(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化和调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p1.method(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"> args =&gt; [<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"> 标记 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第三种，装饰器的高级用法（链式调用-combine-以及-mixin\"><a href=\"#第三种，装饰器的高级用法（链式调用-combine-以及-mixin\" class=\"headerlink\" title=\"第三种，装饰器的高级用法（链式调用, combine 以及 mixin)\"></a>第三种，装饰器的高级用法（链式调用, combine 以及 mixin)</h4><h5 id=\"1-链式（连续）\"><a href=\"#1-链式（连续）\" class=\"headerlink\" title=\"1.链式（连续）\"></a>1.链式（连续）</h5><p>首先来看链式（连续）调用，这次多加一个装饰器，并且继续通过打印的方式来查看下调用的顺序：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 装饰器函数 再 封装一层</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mark</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 真正的装饰器函数以闭包形式返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj, target, descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不破坏原 getter 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor.value = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> old.apply(<span class=\"keyword\">this</span>, id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @mark(<span class=\"number\">1</span>)</span><br><span class=\"line\">  @mark(<span class=\"number\">2</span>)</span><br><span class=\"line\">  method() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">p1.method();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>咦？明明 <code>@mark(1)</code> 在 <code>@mark(2)</code> 之前调用的啊，为什么 2 比 1 先执行了呢？<br>让我们打开 如下地址，跟着我一起分析：<br><a href=\"http://www.typescriptlang.org/play/#src=%0D%0A%2F%2F%20%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%20%E5%86%8D%20%E5%B0%81%E8%A3%85%E4%B8%80%E5%B1%82%0D%0Afunction%20mark(id\" target=\"_blank\" rel=\"noopener\">Type Script - Play ground</a>%20%7B%0D%0A%20%20%2F%2F%20%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%E4%BB%A5%E9%97%AD%E5%8C%85%E5%BD%A2%E5%BC%8F%E8%BF%94%E5%9B%9E%0D%0A%20%20return%20(obj%2C%20target%2C%20descriptor)%20%3D%3E%20%7B%0D%0A%20%20%20%20%2F%2F%20%E4%B8%8D%E7%A0%B4%E5%9D%8F%E5%8E%9F%20getter%20%E5%87%BD%E6%95%B0%0D%0A%20%20%20%20const%20old%20%3D%20descriptor.value%3B%0D%0A%20%20%20%20console.log(id)%3B%0D%0A%20%20%20%20return%20descriptor.value%20%3D%20()%20%3D%3E%20old.apply(this%2C%20id)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0A%0D%0Aclass%20Person%20%7B%0D%0A%0D%0A%20%20%40mark(1)%0D%0A%20%20%40mark(2)%0D%0A%20%20method()%20%7B%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0Aconst%20p1%20%3D%20new%20Person()%3B%0D%0A%0D%0Ap1.method()%3B%0D%0A%0D%0A%2F%2F%20%E8%BE%93%E5%87%BA%EF%BC%9A%0D%0A2%20%0D%0A1)<br> 来看右边编译后的 javascript 代码，只看 var decorator 被编译成了啥，下面的不用看，跟源码差不多。<strong>请仔细阅读注释</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __decorate = (<span class=\"keyword\">this</span> &amp;&amp; <span class=\"keyword\">this</span>.__decorate) || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">decorators, target, key, desc</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 判断函数真正的入参，如果小于 3 个，r = target 否则 继续判断 ，在该 对象 的属性（被装饰的属性）上原本的 descriptor 是不是 null ？ 如果是，则 desc 等于 当前对象被装饰属性的 descriptor ，否则 r = 当前对象被装饰属性的 descriptor</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 d 用于缓存 下面遍历时 的 状态</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">arguments</span>.length, r = c &lt; <span class=\"number\">3</span> ? target : desc === <span class=\"literal\">null</span> ? desc = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(target, key) : desc, d;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的 Reflect 是 window 下的 全局对象，我们也知道， Reflect 对象根本没有 decorate 方法，所以， turthy 的分支并不会执行，而是走 falsy 分支.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Reflect</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Reflect</span>.decorate === <span class=\"string\">\"function\"</span>) r = <span class=\"built_in\">Reflect</span>.decorate(decorators, target, key, desc);</span><br><span class=\"line\">    <span class=\"comment\">/**********关键步骤************/</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里遍历的是入参的装饰器数组，并且，从右倒叙遍历（起始下标为 decorators.length - 1）</span></span><br><span class=\"line\">    <span class=\"comment\">// d 是每次遍历的 装饰器返回的 descriptor, 通过 判断入参个数，来决定 r 的类型，以及是否通过 d(r) 来装饰某个对象。如果 入参 &lt; 3 个，即 r 为 一个对象，执行 d(r) ； 否则如果 入参 &gt; 3 个，即运行时传入了第四个参数 desc(descriptor) ， 此时的 r 其实就是 desc ，d(target, key, r) 意思是：用 入参的 desc 装饰对象 target 的 key 属性；否则 c &lt; 4 ， 此时的 r  为 object 对象，d(target, key)；</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = decorators.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) <span class=\"keyword\">if</span> (d = decorators[i]) r = (c &lt; <span class=\"number\">3</span> ? d(r) : c &gt; <span class=\"number\">3</span> ? d(target, key, r) : d(target, key)) || r;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c &gt; <span class=\"number\">3</span> &amp;&amp; r &amp;&amp; <span class=\"built_in\">Object</span>.defineProperty(target, key, r), r;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************************下面这些先不用看***********************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 装饰器函数 再 封装一层</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mark</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 真正的装饰器函数以闭包形式返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, target, descriptor</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不破坏原 getter 函数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> old = descriptor.value;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> old.apply(_this, id); &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"comment\">/** @class */</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype.method = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\">    __decorate([</span><br><span class=\"line\">        mark(<span class=\"number\">1</span>),</span><br><span class=\"line\">        mark(<span class=\"number\">2</span>)</span><br><span class=\"line\">    ], Person.prototype, <span class=\"string\">\"method\"</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Person;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p1.method();</span><br></pre></td></tr></table></figure></p>\n<p>上面啰里啰唆的注释是啥意思呢？<br>翻译成人话： 装饰器的执行顺序是个 栈， 后进先出。像极了… 爱情？不，像极了 <strong>洋葱模型</strong>。</p>\n<h5 id=\"2-combine-合并\"><a href=\"#2-combine-合并\" class=\"headerlink\" title=\"2. combine (合并)\"></a>2. combine (合并)</h5><p>合并指的是装饰器装饰某个类的属性的时候，同时应用多个装饰器的模式。（要跟下面的 <code>@mixin</code>）区分<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eatApple</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`吃了 <span class=\"subst\">$&#123;count&#125;</span> 个 苹果`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runMeter</span>(<span class=\"params\">long</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`跑了 <span class=\"subst\">$&#123;long&#125;</span> 米`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">...descriptors</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj, target, descriptor</span>) =&gt;</span> descriptors.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.apply(<span class=\"keyword\">this</span>, [obj, target, descriptor]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @combine(eatApple(<span class=\"number\">1</span>), runMeter(<span class=\"number\">9</span>))</span><br><span class=\"line\">  method() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">p1.method();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">吃了一个苹果</span><br><span class=\"line\">跑了 <span class=\"number\">9</span> 米</span><br></pre></td></tr></table></figure></p>\n<p>可见，在 <code>@combine()</code> 中传入的参数顺序，竟然跟最终的顺序 是一样的，咦？不是洋葱吗？这压根不是栈啊！<br>脑子里回想一下刚才解析源码的过程，我再次望向了这次的源码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"comment\">/** @class */</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype.method = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\">    __decorate([</span><br><span class=\"line\">        combine(eatApple(<span class=\"number\">1</span>), runMeter(<span class=\"number\">9</span>))</span><br><span class=\"line\">    ], Person.prototype, <span class=\"string\">\"method\"</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Person;</span><br></pre></td></tr></table></figure></p>\n<p>显而易见，这两个函数，直接是作为结果被传进去的，相当于栈里面只有 <code>mixin</code> 一个函数，无所谓是栈或者队列了，反正两个函数都在我内部执行，我让他怎么执行就怎么执行，为所欲为。所以这里的输出结果是同步的，完全就是因为栈里只有一个  member。<br>不信验证一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eatApple</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`吃了 <span class=\"subst\">$&#123;count&#125;</span> 个 苹果`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runMeter</span>(<span class=\"params\">long</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`跑了 <span class=\"subst\">$&#123;long&#125;</span> 米`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">...descriptors</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj, target, descriptor</span>) =&gt;</span> descriptors.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.apply(<span class=\"keyword\">this</span>, [obj, target, descriptor]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @combine(eatApple(<span class=\"number\">1</span>), runMeter(<span class=\"number\">9</span>))</span><br><span class=\"line\">  @combine(eatApple(<span class=\"number\">5</span>),runMeter(<span class=\"number\">100</span>))</span><br><span class=\"line\">  method() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">p1.method();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">吃了 <span class=\"number\">5</span> 个 苹果</span><br><span class=\"line\">跑了 <span class=\"number\">100</span> 米</span><br><span class=\"line\">吃了 <span class=\"number\">1</span> 个 苹果</span><br><span class=\"line\">跑了 <span class=\"number\">9</span> 米</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-mixin-混合\"><a href=\"#3-mixin-混合\" class=\"headerlink\" title=\"3. mixin (混合)\"></a>3. mixin (混合)</h5><p>mixin 意为在一个对象之中混入另外一个对象的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixins</span>(<span class=\"params\">...list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Object.assign 可用于对象，即 编译后的 es3 runtime 指向 class.prototype</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(target.prototype, ...list);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@mixins(Foo)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/91357985\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/91357985</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>一直享受着  Anuglar 和 Nest 的红利，上来就是 <code>@Component(...)</code> 或者 <code>@Controller(...)</code>，自己却没有实际的探究过背后的原理。于是今天想好好总结一下，沉淀沉淀。</p>\n<h3 id=\"前置条件（es5-原理）\"><a href=\"#前置条件（es5-原理）\" class=\"headerlink\" title=\"前置条件（es5 原理）\"></a>前置条件（es5 原理）</h3><p>之前看过红宝书，第六章提到过，js 对象的属性有几个特性：</p>\n<ol>\n<li>[[configurable]] 是否可配置 </li>\n<li>[[enumerable]] 是否可枚举</li>\n<li>[[writeble]] 是否可修改值</li>\n<li>[[value]] 写入的值是啥</li>\n</ol>\n<p><em>四个配置项都为 boolean 类型。</em><br>这四个配置联合起来有一个名字，叫做<strong>对象属性的描述符(descriptor)</strong><br>其中，writeble 和 value 还有另外一个名字， <code>setter</code> 和 <code>getter</code> 访问器）。<br>上代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">value: <span class=\"number\">1</span>,</span><br><span class=\"line\">writeble: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123;a: 1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a) <span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.a = <span class=\"number\">3</span>; <span class=\"comment\">// 修改 a 属性的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.a) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**====================另一种写法====================*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> d = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(d , <span class=\"string\">'name'</span> &#123;</span><br><span class=\"line\">get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d) <span class=\"comment\">// &#123;&#125; 注意！！！！这里跟 writeble 和 value 不太一样，这里打印出来的对象，是没有显示 name 属性的！！！但是访问可以访问出来</span></span><br><span class=\"line\">d.name; <span class=\"comment\">// 1</span></span><br><span class=\"line\">d.name = <span class=\"number\">3</span>; <span class=\"comment\">// 尝试修改 name 属性 </span></span><br><span class=\"line\">d.name; <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></p>\n<p>我们发现，配置了可写入项为  false 时，我们就无法去修改对象属性的值了，有点像冻结的意思。刚好，JS 有个 <code>Object.freeze()</code>， 来看一下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> c = &#123;<span class=\"attr\">name</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.freeze(c);</span><br><span class=\"line\">c.name = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>发现和我们自己去配置 <code>writeble: false</code> 效果相同。不信？来验证一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(c);</span><br><span class=\"line\"><span class=\"comment\">// 返回： </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t name: &#123;</span><br><span class=\"line\">\t configurable: <span class=\"literal\">false</span></span><br><span class=\"line\">\t enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">\t value: <span class=\"number\">1</span></span><br><span class=\"line\">\t writable: <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ES6-还要这么写吗？\"><a href=\"#ES6-还要这么写吗？\" class=\"headerlink\" title=\"ES6 还要这么写吗？\"></a>ES6 还要这么写吗？</h3><p>不用。直接用<code>装饰器 decorator</code>来写。</p>\n<h4 id=\"第一种，直接装饰-class，\"><a href=\"#第一种，直接装饰-class，\" class=\"headerlink\" title=\"第一种，直接装饰 class，\"></a>第一种，直接装饰 class，</h4><p>作用： 给类增加动态属性，该动态属性并不会被继承，只能作为 <strong>被装饰类</strong> 的 静态属性。<br>注意： 给类添加静态属性的这种行为，是在 <strong>编译时</strong> 发生的！所以说：<br><strong>装饰器的本质就是编译时运行的函数</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addFlag</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">object.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@addFlag</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>()</span>&#123;&#125;</span><br><span class=\"line\">Foo.flag <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 来个实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> f1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\">f1.flag <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第二种，装饰属性\"><a href=\"#第二种，装饰属性\" class=\"headerlink\" title=\"第二种，装饰属性\"></a>第二种，装饰属性</h4><p>装饰器会在 <code>Object.defineProperty</code> 之前执行，也就是拦截默认的访问修饰符。<br>举个例子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CSDN markdown 编辑器 为什么不支持 typescript 高亮？无语...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nameEqual3</span>(<span class=\"params\">object, key, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class=\"line\">    descriptor.value = <span class=\"number\">3</span>;</span><br><span class=\"line\">    descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @nameEqual3</span><br><span class=\"line\">    name() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></p>\n<p>可见其效果。<br>也支持传参，如下代码所示，请仔细阅读注释：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 装饰器函数 (用闭包来封装一下)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sign</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  这里的 value 在我看来，更像是一个 getter, 所以可以直接被赋值成一个函数</span></span><br><span class=\"line\"><span class=\"comment\">     *  类似于：</span></span><br><span class=\"line\"><span class=\"comment\">     *  descriptor = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     *     get: function()&#123; return this.value &#125; </span></span><br><span class=\"line\"><span class=\"comment\">     *  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldValue = descriptor.value;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里的 args 实际上就是装饰器在运行时，挂载的函数的入参，下面的 log 日志会证明</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`args =&gt;`</span>, args);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`标记 <span class=\"subst\">$&#123;id&#125;</span>`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> oldValue.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @sign(<span class=\"number\">1</span>)</span><br><span class=\"line\">  method(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化和调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p1.method(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"> args =&gt; [<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"> 标记 <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第三种，装饰器的高级用法（链式调用-combine-以及-mixin\"><a href=\"#第三种，装饰器的高级用法（链式调用-combine-以及-mixin\" class=\"headerlink\" title=\"第三种，装饰器的高级用法（链式调用, combine 以及 mixin)\"></a>第三种，装饰器的高级用法（链式调用, combine 以及 mixin)</h4><h5 id=\"1-链式（连续）\"><a href=\"#1-链式（连续）\" class=\"headerlink\" title=\"1.链式（连续）\"></a>1.链式（连续）</h5><p>首先来看链式（连续）调用，这次多加一个装饰器，并且继续通过打印的方式来查看下调用的顺序：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 装饰器函数 再 封装一层</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mark</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 真正的装饰器函数以闭包形式返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj, target, descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不破坏原 getter 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> descriptor.value = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> old.apply(<span class=\"keyword\">this</span>, id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @mark(<span class=\"number\">1</span>)</span><br><span class=\"line\">  @mark(<span class=\"number\">2</span>)</span><br><span class=\"line\">  method() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">p1.method();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>咦？明明 <code>@mark(1)</code> 在 <code>@mark(2)</code> 之前调用的啊，为什么 2 比 1 先执行了呢？<br>让我们打开 如下地址，跟着我一起分析：<br><a href=\"http://www.typescriptlang.org/play/#src=%0D%0A%2F%2F%20%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%20%E5%86%8D%20%E5%B0%81%E8%A3%85%E4%B8%80%E5%B1%82%0D%0Afunction%20mark(id\" target=\"_blank\" rel=\"noopener\">Type Script - Play ground</a>%20%7B%0D%0A%20%20%2F%2F%20%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E5%87%BD%E6%95%B0%E4%BB%A5%E9%97%AD%E5%8C%85%E5%BD%A2%E5%BC%8F%E8%BF%94%E5%9B%9E%0D%0A%20%20return%20(obj%2C%20target%2C%20descriptor)%20%3D%3E%20%7B%0D%0A%20%20%20%20%2F%2F%20%E4%B8%8D%E7%A0%B4%E5%9D%8F%E5%8E%9F%20getter%20%E5%87%BD%E6%95%B0%0D%0A%20%20%20%20const%20old%20%3D%20descriptor.value%3B%0D%0A%20%20%20%20console.log(id)%3B%0D%0A%20%20%20%20return%20descriptor.value%20%3D%20()%20%3D%3E%20old.apply(this%2C%20id)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0A%0D%0Aclass%20Person%20%7B%0D%0A%0D%0A%20%20%40mark(1)%0D%0A%20%20%40mark(2)%0D%0A%20%20method()%20%7B%20%7D%0D%0A%7D%0D%0A%0D%0A%0D%0Aconst%20p1%20%3D%20new%20Person()%3B%0D%0A%0D%0Ap1.method()%3B%0D%0A%0D%0A%2F%2F%20%E8%BE%93%E5%87%BA%EF%BC%9A%0D%0A2%20%0D%0A1)<br> 来看右边编译后的 javascript 代码，只看 var decorator 被编译成了啥，下面的不用看，跟源码差不多。<strong>请仔细阅读注释</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __decorate = (<span class=\"keyword\">this</span> &amp;&amp; <span class=\"keyword\">this</span>.__decorate) || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">decorators, target, key, desc</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 判断函数真正的入参，如果小于 3 个，r = target 否则 继续判断 ，在该 对象 的属性（被装饰的属性）上原本的 descriptor 是不是 null ？ 如果是，则 desc 等于 当前对象被装饰属性的 descriptor ，否则 r = 当前对象被装饰属性的 descriptor</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的 d 用于缓存 下面遍历时 的 状态</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"built_in\">arguments</span>.length, r = c &lt; <span class=\"number\">3</span> ? target : desc === <span class=\"literal\">null</span> ? desc = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(target, key) : desc, d;</span><br><span class=\"line\">    <span class=\"comment\">// 这里的 Reflect 是 window 下的 全局对象，我们也知道， Reflect 对象根本没有 decorate 方法，所以， turthy 的分支并不会执行，而是走 falsy 分支.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Reflect</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Reflect</span>.decorate === <span class=\"string\">\"function\"</span>) r = <span class=\"built_in\">Reflect</span>.decorate(decorators, target, key, desc);</span><br><span class=\"line\">    <span class=\"comment\">/**********关键步骤************/</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里遍历的是入参的装饰器数组，并且，从右倒叙遍历（起始下标为 decorators.length - 1）</span></span><br><span class=\"line\">    <span class=\"comment\">// d 是每次遍历的 装饰器返回的 descriptor, 通过 判断入参个数，来决定 r 的类型，以及是否通过 d(r) 来装饰某个对象。如果 入参 &lt; 3 个，即 r 为 一个对象，执行 d(r) ； 否则如果 入参 &gt; 3 个，即运行时传入了第四个参数 desc(descriptor) ， 此时的 r 其实就是 desc ，d(target, key, r) 意思是：用 入参的 desc 装饰对象 target 的 key 属性；否则 c &lt; 4 ， 此时的 r  为 object 对象，d(target, key)；</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = decorators.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) <span class=\"keyword\">if</span> (d = decorators[i]) r = (c &lt; <span class=\"number\">3</span> ? d(r) : c &gt; <span class=\"number\">3</span> ? d(target, key, r) : d(target, key)) || r;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c &gt; <span class=\"number\">3</span> &amp;&amp; r &amp;&amp; <span class=\"built_in\">Object</span>.defineProperty(target, key, r), r;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*************************下面这些先不用看***********************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 装饰器函数 再 封装一层</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mark</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 真正的装饰器函数以闭包形式返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj, target, descriptor</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不破坏原 getter 函数</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> old = descriptor.value;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> old.apply(_this, id); &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"comment\">/** @class */</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype.method = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\">    __decorate([</span><br><span class=\"line\">        mark(<span class=\"number\">1</span>),</span><br><span class=\"line\">        mark(<span class=\"number\">2</span>)</span><br><span class=\"line\">    ], Person.prototype, <span class=\"string\">\"method\"</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Person;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">p1.method();</span><br></pre></td></tr></table></figure></p>\n<p>上面啰里啰唆的注释是啥意思呢？<br>翻译成人话： 装饰器的执行顺序是个 栈， 后进先出。像极了… 爱情？不，像极了 <strong>洋葱模型</strong>。</p>\n<h5 id=\"2-combine-合并\"><a href=\"#2-combine-合并\" class=\"headerlink\" title=\"2. combine (合并)\"></a>2. combine (合并)</h5><p>合并指的是装饰器装饰某个类的属性的时候，同时应用多个装饰器的模式。（要跟下面的 <code>@mixin</code>）区分<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eatApple</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`吃了 <span class=\"subst\">$&#123;count&#125;</span> 个 苹果`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runMeter</span>(<span class=\"params\">long</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`跑了 <span class=\"subst\">$&#123;long&#125;</span> 米`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">...descriptors</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj, target, descriptor</span>) =&gt;</span> descriptors.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.apply(<span class=\"keyword\">this</span>, [obj, target, descriptor]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @combine(eatApple(<span class=\"number\">1</span>), runMeter(<span class=\"number\">9</span>))</span><br><span class=\"line\">  method() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">p1.method();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">吃了一个苹果</span><br><span class=\"line\">跑了 <span class=\"number\">9</span> 米</span><br></pre></td></tr></table></figure></p>\n<p>可见，在 <code>@combine()</code> 中传入的参数顺序，竟然跟最终的顺序 是一样的，咦？不是洋葱吗？这压根不是栈啊！<br>脑子里回想一下刚才解析源码的过程，我再次望向了这次的源码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"comment\">/** @class */</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype.method = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\">    __decorate([</span><br><span class=\"line\">        combine(eatApple(<span class=\"number\">1</span>), runMeter(<span class=\"number\">9</span>))</span><br><span class=\"line\">    ], Person.prototype, <span class=\"string\">\"method\"</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Person;</span><br></pre></td></tr></table></figure></p>\n<p>显而易见，这两个函数，直接是作为结果被传进去的，相当于栈里面只有 <code>mixin</code> 一个函数，无所谓是栈或者队列了，反正两个函数都在我内部执行，我让他怎么执行就怎么执行，为所欲为。所以这里的输出结果是同步的，完全就是因为栈里只有一个  member。<br>不信验证一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eatApple</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`吃了 <span class=\"subst\">$&#123;count&#125;</span> 个 苹果`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runMeter</span>(<span class=\"params\">long</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj,target,descriptor</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> old = descriptor.value;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`跑了 <span class=\"subst\">$&#123;long&#125;</span> 米`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> old.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">...descriptors</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 想点办法，让入参的每个函数立马执行！要把自己得到的对象分配给两个小弟</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">obj, target, descriptor</span>) =&gt;</span> descriptors.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.apply(<span class=\"keyword\">this</span>, [obj, target, descriptor]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @combine(eatApple(<span class=\"number\">1</span>), runMeter(<span class=\"number\">9</span>))</span><br><span class=\"line\">  @combine(eatApple(<span class=\"number\">5</span>),runMeter(<span class=\"number\">100</span>))</span><br><span class=\"line\">  method() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">p1.method();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">吃了 <span class=\"number\">5</span> 个 苹果</span><br><span class=\"line\">跑了 <span class=\"number\">100</span> 米</span><br><span class=\"line\">吃了 <span class=\"number\">1</span> 个 苹果</span><br><span class=\"line\">跑了 <span class=\"number\">9</span> 米</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-mixin-混合\"><a href=\"#3-mixin-混合\" class=\"headerlink\" title=\"3. mixin (混合)\"></a>3. mixin (混合)</h5><p>mixin 意为在一个对象之中混入另外一个对象的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixins</span>(<span class=\"params\">...list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Object.assign 可用于对象，即 编译后的 es3 runtime 指向 class.prototype</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(target.prototype, ...list);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@mixins(Foo)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"IONIC3 打包安卓apk详细过程（大量图文）","date":"2018-03-06T15:44:03.000Z","reward":true,"comment":true,"_content":"\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79319408)\n\n\n\n本文写于2018年2月12日 22:25:59。\n\n如果2018年的新春之际，你遇到IONIC的开发问题，这将是一篇最为详尽的打包方案。\n\n经历三天的踩坑，跳坑，相信绝大多数的问题都已经覆盖到了，请仔细按照流程来对照操作及检查。\n## 1.基本依赖环境 ##\n\n 1. nodejs环境 (作为一个前端相信你已经有了)![nodejs](http://img.blog.csdn.net/20180212223918473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)最好提前配置好node的环境变量，便于全局访问\n 2. jdk(下面细说)![JDK](http://img.blog.csdn.net/20180212224004766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 3. SDK(下面细说，其实主要难就难在SDK配置了)![SDK](http://img.blog.csdn.net/20180212224101120?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 4. gradle(下面细说)![gradle](http://img.blog.csdn.net/20180212224141473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 2. 基本工具 ##\n\n 1. gitbash(就是用来替代windows自带的丑陋的CMD)![gitbash](http://img.blog.csdn.net/20180212224300075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 下载：我都打包了！\n链接：https://pan.baidu.com/s/1mje7ZHu 密码：ob6m\n 2. windows自带的CMD(`window`+`R`输入CMD，管理员身份运行)![CMD](http://img.blog.csdn.net/20180212224327731?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 3. VSCode(微软爸爸开发的前端IDE)![VSCode](http://img.blog.csdn.net/20180212224349157?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n下载：请自行去微软爸爸官网下载。\n\n## 3.环境配置 ##\n**3.1 nodejs (需要配置环境变量)**\n前端必会，跳过。\n**3.2 jdk (无需配置环境变量)**\n下载：已经上传网盘↓\n链接：https://pan.baidu.com/s/1mje7ZHu 密码：ob6m\n请自行根据系统安装32/64位的版本。\n安装方法：下载完成，解压，直接按照提示安装，全局点确定，不出意外，最后的安装路径为：C:\\Program Files\\Java \nOK，jdk安装完成，在cmd中，输入`$ java -version`验证是否安装成功。\n\n![jdk安装成功](http://img.blog.csdn.net/20180212225402220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\nOK。\n**3.3 sdk (需要配置环境变量)**\n下载：跟上面的一样，我都打包了。\n链接：https://pan.baidu.com/s/1mje7ZHu 密码：ob6m\n\n解压后（直接右键X解压并重命名。因为面还有个文件夹，不建议用右键+E解压）。\n将重命名的文件夹，跟jdk放在一个父目录，便于查找：C:\\Program Files\\SDK\n接着配置环境变量，我的电脑------右键属性-------高级系统设置-------环境变量。\n在下面的系统变量(s)中，新建，键值对如下：\nname: ANDROID_HOME\nkey: C:\\Program Files\\SDK\n如图所示：\n\n![SDK环境变量](http://img.blog.csdn.net/20180212230110171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n然后在path中，全局声明一下，将;%PATH%;%GRADLE_HOME%\\bin缀在最后面，前面有【;】分隔符。\n\n然后运行CMD，输入`$ android -h`，如果出现一大堆指令，说明你的SDK安装无误，并且环境变量配置OK。\n\n![ANDROID环境配置验证](http://img.blog.csdn.net/20180212230459827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n现在，打开SDK目录下的SDK Manager.exe\n打开界面上的Tools,选择options，先配置国内镜像：\n\n域名千万不要输入http或者https协议前缀，谁输谁哭。\n\n![配置镜像](http://img.blog.csdn.net/20180212231404498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n下面记得勾选。\n回到主界面，点packages再点reload\n先勾选如下图的三个Tools:\n分别是[ Android SDK Tools,Android SDK platform-tools,Android SDK Build-tools]\n![Tools](http://img.blog.csdn.net/20180212230934859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n别急，还没完，下面还有一个：\n[SDK platform]![SDK platform](http://img.blog.csdn.net/20180212231104690?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n全部选中后，点右下角 install packages 来安装，耐心等待即可。\n**3.4 gradle安装(需要配置环境变量)**\n打开：http://services.gradle.org/distributions/\n下载：gradle-4.1-bin.zip\n同样安装在JDK,SDK的目录下，便于查找。\n同样的配置环境变量：\nGRADLE_HOME=C:\\Program Files\\SDK\\gradle-4.1\n;%GRADLE_HOME%\\bin\n\n测试命令（查看版本）：gradle -v\n \n## 3.基本流程 ##\n1.安装ionic和cordova \n \n打开Gitbash,全局安装ionic和cordova（IONIC是UI，cordova负责打包成apk,并且可以调用原生安卓的各种API）\n```\n$ cnpm install -g ionic cordova\n```\n![安装ionic和cordova ](http://img.blog.csdn.net/20180212224442812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n2.创建ionic项目\n\n桌面右键，在此处gitbash\n```\n$ ionic start app tabs\n```\n耐心等待完成，在 cd 到 app 子目录(app是你的真实项目目录)，然后\n\n```\n$ ionic serve\n```\n![ionic serve](http://img.blog.csdn.net/20180212224746544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n稍等片刻，浏览器自动弹出预览界面(建议电脑安装Chrome浏览器)，并且支持持续热更新(Webpack的功能)，如下图所示：\n\n\n![CHROME预览](http://img.blog.csdn.net/20180212224825825?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n如果做到这一步没问题，说明：\n1.nodejs与gitbash没有问题。\n2.ionic和cordova没有问题。\n\n## 4.打包 ##\n\n确保SDK,JDK没问题以后，使用指令\n```\n$ ionic cordova build android --release\n```\n (如果这条命令有问题，可以去掉--release然后debug编译，编译完成Dos会显示apk目录位置)\n\n如若你聪慧的双眼发现如下字眼：Build Success!  即可关闭本网页，说明你已经成功打包了。\n\nOK，此时你已经有了debug的包，但是这个包没有签名，不能发布。\n\n此时，我们应该：\n    First：在JDK目录下的bin文件夹下（C:\\Program Files\\Java\\jdk1.8.0_71\\bin），先看看有没有keytool.exe和jarsigner.exe文件，这两个程序用于给APK签名，签名以后即可发布。\n    \nSecond：将Ionic生成的文件先命名为app.apk，然后复制一份当前的bin目录里，执行命令1，生成自己的签名文件，名为:zhangqiang.keystrore，别名也是这个，有效期20000天，仅仅在第一次生成签名文件，以后不需要。\n执行完命令1，继续执行命令2即可完成签名打包。\n \n命令1：生成签名密钥\n\n```\n/*\n使用工具, 签名,-genkey表示构建签名文件，-v 显示在dos窗口中 -alias表示签名包的别名 -validity 签名有效期(天)，姓名:zhangqiang 城市:lz + lz 国家: cn 口令敲的时候不动，是因为保护隐私，别当做你电脑死机！\n*/\n\n```\n\nkeytool -genkey -v -keystore zhangqiang.keystore -alias zhangqiang.keystore -keyalg RSA -validity 20000\n\n\n命令2：给文件签名\n使用刚才生成的zhangqiang.keystore   -signedjar   签名后的apk   签名之前的apk  签名包别  \n\njarsigner -verbose -keystore zhangqiang.keystore -signedjar complete.apk app.apk zhangqiang.keystore\n\n![签名完成](http://img.blog.csdn.net/20180212234119134?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n如上图所示，IONIC打包的文件为app.apk,签名后的文件为complete.apk，这时候，可以说，一个软件就诞生啦！\n后续的软件压缩打包可以百度：jarsigner打包\n## 5.疑难杂症 ##\n**5.1 Without ·from· option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.**\n\n 出现这个提示，说明配置不正确。\n \n 解决方法：\n  在“/node_modules/@ionic/app-scripts/dist/sass.js”路径的“sass.js”文件，在postcssOptions参数中添加“from: undefined”。添加后效果如下：\n\n```javascript\n\tvar postcssOptions = {  \n\t\tfrom: undefined,  \n\t\tto: path_1.basename(sassConfig.outFile),  \n\t\tmap: autoPrefixerMapOptions  \n\t};  \n\n```\n**5.2 安卓SDK组件缺失/缺少/不匹配**\n报文：\n\n```\nA problem occurred configuring project ':CordovaLib'.\n> You have not accepted the license agreements of the following SDK components:\n  [Android SDK Build-Tools 26.0.2].\n```\n\n原因:SDK构建工具和platform工具不匹配，或者有东西遗漏了，没下载。\n解决：如果中途报错SDK出问题，请打开C盘/profiles/SDK/manager.exe，使用东软的镜像，根绝报错信息，来down对应的platform或者build包。\n\n**5.3 缺少安卓构建/打包工具**\n报错报文：\n\n```\nUnhandled promise rejection (rejection id: 1): CordovaError: Could not find an installed version of Gradle either in Android Studio,\nor on your system to install the gradle wrapper. Please include gradle\nin your path, or install Android Studio\n(node:3444) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n```\n\n原因：缺少安卓构建打包工具，报文提示你可以用Android Studio，也可以安装一个Gradle。\n解决办法：\n去http://services.gradle.org/distributions/ 下载 gradle-4.1-bin.zip\n配置相应的环境变量：\n\nGRADLE_HOME=E:\\software\\gradle-3.0\nPATH=%PATH%;%GRADLE_HOME%\\bin\n\n测试命令（查看版本）：gradle -v\n\n完成上述任务后，重新运行Gitbash,然后 $ ionic cordova build android ,发现build成功，会自动下载gradle-4.1-bin.zip (初步猜测是因为自己的gradle路径不对，可能没有被项目依赖，但是项目在全局空间中发现gradle环境，因此自己要下载gradle来依赖。) \n\n感谢收看。\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/IONIC3 打包安卓apk详细过程（大量图文）.md","raw":"---\ntitle:  IONIC3 打包安卓apk详细过程（大量图文）\ndate:   2018-03-06 23:44:03\ntags: [android,SDK,JDK,APP,IONIC,gradle]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79319408)\n\n\n\n本文写于2018年2月12日 22:25:59。\n\n如果2018年的新春之际，你遇到IONIC的开发问题，这将是一篇最为详尽的打包方案。\n\n经历三天的踩坑，跳坑，相信绝大多数的问题都已经覆盖到了，请仔细按照流程来对照操作及检查。\n## 1.基本依赖环境 ##\n\n 1. nodejs环境 (作为一个前端相信你已经有了)![nodejs](http://img.blog.csdn.net/20180212223918473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)最好提前配置好node的环境变量，便于全局访问\n 2. jdk(下面细说)![JDK](http://img.blog.csdn.net/20180212224004766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 3. SDK(下面细说，其实主要难就难在SDK配置了)![SDK](http://img.blog.csdn.net/20180212224101120?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 4. gradle(下面细说)![gradle](http://img.blog.csdn.net/20180212224141473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 2. 基本工具 ##\n\n 1. gitbash(就是用来替代windows自带的丑陋的CMD)![gitbash](http://img.blog.csdn.net/20180212224300075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 下载：我都打包了！\n链接：https://pan.baidu.com/s/1mje7ZHu 密码：ob6m\n 2. windows自带的CMD(`window`+`R`输入CMD，管理员身份运行)![CMD](http://img.blog.csdn.net/20180212224327731?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n 3. VSCode(微软爸爸开发的前端IDE)![VSCode](http://img.blog.csdn.net/20180212224349157?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n下载：请自行去微软爸爸官网下载。\n\n## 3.环境配置 ##\n**3.1 nodejs (需要配置环境变量)**\n前端必会，跳过。\n**3.2 jdk (无需配置环境变量)**\n下载：已经上传网盘↓\n链接：https://pan.baidu.com/s/1mje7ZHu 密码：ob6m\n请自行根据系统安装32/64位的版本。\n安装方法：下载完成，解压，直接按照提示安装，全局点确定，不出意外，最后的安装路径为：C:\\Program Files\\Java \nOK，jdk安装完成，在cmd中，输入`$ java -version`验证是否安装成功。\n\n![jdk安装成功](http://img.blog.csdn.net/20180212225402220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\nOK。\n**3.3 sdk (需要配置环境变量)**\n下载：跟上面的一样，我都打包了。\n链接：https://pan.baidu.com/s/1mje7ZHu 密码：ob6m\n\n解压后（直接右键X解压并重命名。因为面还有个文件夹，不建议用右键+E解压）。\n将重命名的文件夹，跟jdk放在一个父目录，便于查找：C:\\Program Files\\SDK\n接着配置环境变量，我的电脑------右键属性-------高级系统设置-------环境变量。\n在下面的系统变量(s)中，新建，键值对如下：\nname: ANDROID_HOME\nkey: C:\\Program Files\\SDK\n如图所示：\n\n![SDK环境变量](http://img.blog.csdn.net/20180212230110171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n然后在path中，全局声明一下，将;%PATH%;%GRADLE_HOME%\\bin缀在最后面，前面有【;】分隔符。\n\n然后运行CMD，输入`$ android -h`，如果出现一大堆指令，说明你的SDK安装无误，并且环境变量配置OK。\n\n![ANDROID环境配置验证](http://img.blog.csdn.net/20180212230459827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n现在，打开SDK目录下的SDK Manager.exe\n打开界面上的Tools,选择options，先配置国内镜像：\n\n域名千万不要输入http或者https协议前缀，谁输谁哭。\n\n![配置镜像](http://img.blog.csdn.net/20180212231404498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n下面记得勾选。\n回到主界面，点packages再点reload\n先勾选如下图的三个Tools:\n分别是[ Android SDK Tools,Android SDK platform-tools,Android SDK Build-tools]\n![Tools](http://img.blog.csdn.net/20180212230934859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n别急，还没完，下面还有一个：\n[SDK platform]![SDK platform](http://img.blog.csdn.net/20180212231104690?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n全部选中后，点右下角 install packages 来安装，耐心等待即可。\n**3.4 gradle安装(需要配置环境变量)**\n打开：http://services.gradle.org/distributions/\n下载：gradle-4.1-bin.zip\n同样安装在JDK,SDK的目录下，便于查找。\n同样的配置环境变量：\nGRADLE_HOME=C:\\Program Files\\SDK\\gradle-4.1\n;%GRADLE_HOME%\\bin\n\n测试命令（查看版本）：gradle -v\n \n## 3.基本流程 ##\n1.安装ionic和cordova \n \n打开Gitbash,全局安装ionic和cordova（IONIC是UI，cordova负责打包成apk,并且可以调用原生安卓的各种API）\n```\n$ cnpm install -g ionic cordova\n```\n![安装ionic和cordova ](http://img.blog.csdn.net/20180212224442812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n2.创建ionic项目\n\n桌面右键，在此处gitbash\n```\n$ ionic start app tabs\n```\n耐心等待完成，在 cd 到 app 子目录(app是你的真实项目目录)，然后\n\n```\n$ ionic serve\n```\n![ionic serve](http://img.blog.csdn.net/20180212224746544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n稍等片刻，浏览器自动弹出预览界面(建议电脑安装Chrome浏览器)，并且支持持续热更新(Webpack的功能)，如下图所示：\n\n\n![CHROME预览](http://img.blog.csdn.net/20180212224825825?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n如果做到这一步没问题，说明：\n1.nodejs与gitbash没有问题。\n2.ionic和cordova没有问题。\n\n## 4.打包 ##\n\n确保SDK,JDK没问题以后，使用指令\n```\n$ ionic cordova build android --release\n```\n (如果这条命令有问题，可以去掉--release然后debug编译，编译完成Dos会显示apk目录位置)\n\n如若你聪慧的双眼发现如下字眼：Build Success!  即可关闭本网页，说明你已经成功打包了。\n\nOK，此时你已经有了debug的包，但是这个包没有签名，不能发布。\n\n此时，我们应该：\n    First：在JDK目录下的bin文件夹下（C:\\Program Files\\Java\\jdk1.8.0_71\\bin），先看看有没有keytool.exe和jarsigner.exe文件，这两个程序用于给APK签名，签名以后即可发布。\n    \nSecond：将Ionic生成的文件先命名为app.apk，然后复制一份当前的bin目录里，执行命令1，生成自己的签名文件，名为:zhangqiang.keystrore，别名也是这个，有效期20000天，仅仅在第一次生成签名文件，以后不需要。\n执行完命令1，继续执行命令2即可完成签名打包。\n \n命令1：生成签名密钥\n\n```\n/*\n使用工具, 签名,-genkey表示构建签名文件，-v 显示在dos窗口中 -alias表示签名包的别名 -validity 签名有效期(天)，姓名:zhangqiang 城市:lz + lz 国家: cn 口令敲的时候不动，是因为保护隐私，别当做你电脑死机！\n*/\n\n```\n\nkeytool -genkey -v -keystore zhangqiang.keystore -alias zhangqiang.keystore -keyalg RSA -validity 20000\n\n\n命令2：给文件签名\n使用刚才生成的zhangqiang.keystore   -signedjar   签名后的apk   签名之前的apk  签名包别  \n\njarsigner -verbose -keystore zhangqiang.keystore -signedjar complete.apk app.apk zhangqiang.keystore\n\n![签名完成](http://img.blog.csdn.net/20180212234119134?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n如上图所示，IONIC打包的文件为app.apk,签名后的文件为complete.apk，这时候，可以说，一个软件就诞生啦！\n后续的软件压缩打包可以百度：jarsigner打包\n## 5.疑难杂症 ##\n**5.1 Without ·from· option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.**\n\n 出现这个提示，说明配置不正确。\n \n 解决方法：\n  在“/node_modules/@ionic/app-scripts/dist/sass.js”路径的“sass.js”文件，在postcssOptions参数中添加“from: undefined”。添加后效果如下：\n\n```javascript\n\tvar postcssOptions = {  \n\t\tfrom: undefined,  \n\t\tto: path_1.basename(sassConfig.outFile),  \n\t\tmap: autoPrefixerMapOptions  \n\t};  \n\n```\n**5.2 安卓SDK组件缺失/缺少/不匹配**\n报文：\n\n```\nA problem occurred configuring project ':CordovaLib'.\n> You have not accepted the license agreements of the following SDK components:\n  [Android SDK Build-Tools 26.0.2].\n```\n\n原因:SDK构建工具和platform工具不匹配，或者有东西遗漏了，没下载。\n解决：如果中途报错SDK出问题，请打开C盘/profiles/SDK/manager.exe，使用东软的镜像，根绝报错信息，来down对应的platform或者build包。\n\n**5.3 缺少安卓构建/打包工具**\n报错报文：\n\n```\nUnhandled promise rejection (rejection id: 1): CordovaError: Could not find an installed version of Gradle either in Android Studio,\nor on your system to install the gradle wrapper. Please include gradle\nin your path, or install Android Studio\n(node:3444) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n```\n\n原因：缺少安卓构建打包工具，报文提示你可以用Android Studio，也可以安装一个Gradle。\n解决办法：\n去http://services.gradle.org/distributions/ 下载 gradle-4.1-bin.zip\n配置相应的环境变量：\n\nGRADLE_HOME=E:\\software\\gradle-3.0\nPATH=%PATH%;%GRADLE_HOME%\\bin\n\n测试命令（查看版本）：gradle -v\n\n完成上述任务后，重新运行Gitbash,然后 $ ionic cordova build android ,发现build成功，会自动下载gradle-4.1-bin.zip (初步猜测是因为自己的gradle路径不对，可能没有被项目依赖，但是项目在全局空间中发现gradle环境，因此自己要下载gradle来依赖。) \n\n感谢收看。\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"IONIC3 打包安卓apk详细过程（大量图文）","published":1,"updated":"2019-05-14T14:30:28.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxg003dckufbgnx84la","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79319408\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>本文写于2018年2月12日 22:25:59。</p>\n<p>如果2018年的新春之际，你遇到IONIC的开发问题，这将是一篇最为详尽的打包方案。</p>\n<p>经历三天的踩坑，跳坑，相信绝大多数的问题都已经覆盖到了，请仔细按照流程来对照操作及检查。</p>\n<h2 id=\"1-基本依赖环境\"><a href=\"#1-基本依赖环境\" class=\"headerlink\" title=\"1.基本依赖环境\"></a>1.基本依赖环境</h2><ol>\n<li>nodejs环境 (作为一个前端相信你已经有了)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212223918473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"nodejs\" title=\"\" class=\"\">\n                <p>nodejs</p>\n            </figure>最好提前配置好node的环境变量，便于全局访问</li>\n<li>jdk(下面细说)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224004766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"JDK\" title=\"\" class=\"\">\n                <p>JDK</p>\n            </figure></li>\n<li>SDK(下面细说，其实主要难就难在SDK配置了)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224101120?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"SDK\" title=\"\" class=\"\">\n                <p>SDK</p>\n            </figure></li>\n<li>gradle(下面细说)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224141473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gradle\" title=\"\" class=\"\">\n                <p>gradle</p>\n            </figure></li>\n</ol>\n<h2 id=\"2-基本工具\"><a href=\"#2-基本工具\" class=\"headerlink\" title=\"2. 基本工具\"></a>2. 基本工具</h2><ol>\n<li>gitbash(就是用来替代windows自带的丑陋的CMD)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224300075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gitbash\" title=\"\" class=\"\">\n                <p>gitbash</p>\n            </figure><br>下载：我都打包了！<br>链接：<a href=\"https://pan.baidu.com/s/1mje7ZHu\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mje7ZHu</a> 密码：ob6m</li>\n<li>windows自带的CMD(<code>window</code>+<code>R</code>输入CMD，管理员身份运行)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224327731?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"CMD\" title=\"\" class=\"\">\n                <p>CMD</p>\n            </figure></li>\n<li>VSCode(微软爸爸开发的前端IDE)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224349157?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"VSCode\" title=\"\" class=\"\">\n                <p>VSCode</p>\n            </figure><br>下载：请自行去微软爸爸官网下载。</li>\n</ol>\n<h2 id=\"3-环境配置\"><a href=\"#3-环境配置\" class=\"headerlink\" title=\"3.环境配置\"></a>3.环境配置</h2><p><strong>3.1 nodejs (需要配置环境变量)</strong><br>前端必会，跳过。<br><strong>3.2 jdk (无需配置环境变量)</strong><br>下载：已经上传网盘↓<br>链接：<a href=\"https://pan.baidu.com/s/1mje7ZHu\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mje7ZHu</a> 密码：ob6m<br>请自行根据系统安装32/64位的版本。<br>安装方法：下载完成，解压，直接按照提示安装，全局点确定，不出意外，最后的安装路径为：C:\\Program Files\\Java<br>OK，jdk安装完成，在cmd中，输入<code>$ java -version</code>验证是否安装成功。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212225402220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"jdk安装成功\" title=\"\" class=\"\">\n                <p>jdk安装成功</p>\n            </figure>\n<p>OK。<br><strong>3.3 sdk (需要配置环境变量)</strong><br>下载：跟上面的一样，我都打包了。<br>链接：<a href=\"https://pan.baidu.com/s/1mje7ZHu\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mje7ZHu</a> 密码：ob6m</p>\n<p>解压后（直接右键X解压并重命名。因为面还有个文件夹，不建议用右键+E解压）。<br>将重命名的文件夹，跟jdk放在一个父目录，便于查找：C:\\Program Files\\SDK<br>接着配置环境变量，我的电脑——右键属性——-高级系统设置——-环境变量。<br>在下面的系统变量(s)中，新建，键值对如下：<br>name: ANDROID_HOME<br>key: C:\\Program Files\\SDK<br>如图所示：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212230110171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"SDK环境变量\" title=\"\" class=\"\">\n                <p>SDK环境变量</p>\n            </figure>\n<p>然后在path中，全局声明一下，将;%PATH%;%GRADLE_HOME%\\bin缀在最后面，前面有【;】分隔符。</p>\n<p>然后运行CMD，输入<code>$ android -h</code>，如果出现一大堆指令，说明你的SDK安装无误，并且环境变量配置OK。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212230459827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"ANDROID环境配置验证\" title=\"\" class=\"\">\n                <p>ANDROID环境配置验证</p>\n            </figure>\n<p>现在，打开SDK目录下的SDK Manager.exe<br>打开界面上的Tools,选择options，先配置国内镜像：</p>\n<p>域名千万不要输入http或者https协议前缀，谁输谁哭。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212231404498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置镜像\" title=\"\" class=\"\">\n                <p>配置镜像</p>\n            </figure>\n<p>下面记得勾选。<br>回到主界面，点packages再点reload<br>先勾选如下图的三个Tools:<br>分别是[ Android SDK Tools,Android SDK platform-tools,Android SDK Build-tools]<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212230934859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Tools\" title=\"\" class=\"\">\n                <p>Tools</p>\n            </figure></p>\n<p>别急，还没完，下面还有一个：<br>[SDK platform]<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212231104690?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"SDK platform\" title=\"\" class=\"\">\n                <p>SDK platform</p>\n            </figure></p>\n<p>全部选中后，点右下角 install packages 来安装，耐心等待即可。<br><strong>3.4 gradle安装(需要配置环境变量)</strong><br>打开：<a href=\"http://services.gradle.org/distributions/\" target=\"_blank\" rel=\"noopener\">http://services.gradle.org/distributions/</a><br>下载：gradle-4.1-bin.zip<br>同样安装在JDK,SDK的目录下，便于查找。<br>同样的配置环境变量：<br>GRADLE_HOME=C:\\Program Files\\SDK\\gradle-4.1<br>;%GRADLE_HOME%\\bin</p>\n<p>测试命令（查看版本）：gradle -v</p>\n<h2 id=\"3-基本流程\"><a href=\"#3-基本流程\" class=\"headerlink\" title=\"3.基本流程\"></a>3.基本流程</h2><p>1.安装ionic和cordova </p>\n<p>打开Gitbash,全局安装ionic和cordova（IONIC是UI，cordova负责打包成apk,并且可以调用原生安卓的各种API）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g ionic cordova</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224442812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"安装ionic和cordova\" title=\"\" class=\"\">\n                <p>安装ionic和cordova</p>\n            </figure>\n<p>2.创建ionic项目</p>\n<p>桌面右键，在此处gitbash<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ionic start app tabs</span><br></pre></td></tr></table></figure></p>\n<p>耐心等待完成，在 cd 到 app 子目录(app是你的真实项目目录)，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ionic serve</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224746544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"ionic serve\" title=\"\" class=\"\">\n                <p>ionic serve</p>\n            </figure>\n<p>稍等片刻，浏览器自动弹出预览界面(建议电脑安装Chrome浏览器)，并且支持持续热更新(Webpack的功能)，如下图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20180212224825825?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"CHROME预览\"></p>\n<p>如果做到这一步没问题，说明：<br>1.nodejs与gitbash没有问题。<br>2.ionic和cordova没有问题。</p>\n<h2 id=\"4-打包\"><a href=\"#4-打包\" class=\"headerlink\" title=\"4.打包\"></a>4.打包</h2><p>确保SDK,JDK没问题以后，使用指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ionic cordova build android --release</span><br></pre></td></tr></table></figure></p>\n<p> (如果这条命令有问题，可以去掉–release然后debug编译，编译完成Dos会显示apk目录位置)</p>\n<p>如若你聪慧的双眼发现如下字眼：Build Success!  即可关闭本网页，说明你已经成功打包了。</p>\n<p>OK，此时你已经有了debug的包，但是这个包没有签名，不能发布。</p>\n<p>此时，我们应该：<br>    First：在JDK目录下的bin文件夹下（C:\\Program Files\\Java\\jdk1.8.0_71\\bin），先看看有没有keytool.exe和jarsigner.exe文件，这两个程序用于给APK签名，签名以后即可发布。</p>\n<p>Second：将Ionic生成的文件先命名为app.apk，然后复制一份当前的bin目录里，执行命令1，生成自己的签名文件，名为:zhangqiang.keystrore，别名也是这个，有效期20000天，仅仅在第一次生成签名文件，以后不需要。<br>执行完命令1，继续执行命令2即可完成签名打包。</p>\n<p>命令1：生成签名密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">使用工具, 签名,-genkey表示构建签名文件，-v 显示在dos窗口中 -alias表示签名包的别名 -validity 签名有效期(天)，姓名:zhangqiang 城市:lz + lz 国家: cn 口令敲的时候不动，是因为保护隐私，别当做你电脑死机！</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>keytool -genkey -v -keystore zhangqiang.keystore -alias zhangqiang.keystore -keyalg RSA -validity 20000</p>\n<p>命令2：给文件签名<br>使用刚才生成的zhangqiang.keystore   -signedjar   签名后的apk   签名之前的apk  签名包别  </p>\n<p>jarsigner -verbose -keystore zhangqiang.keystore -signedjar complete.apk app.apk zhangqiang.keystore</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212234119134?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"签名完成\" title=\"\" class=\"\">\n                <p>签名完成</p>\n            </figure>\n<p>如上图所示，IONIC打包的文件为app.apk,签名后的文件为complete.apk，这时候，可以说，一个软件就诞生啦！<br>后续的软件压缩打包可以百度：jarsigner打包</p>\n<h2 id=\"5-疑难杂症\"><a href=\"#5-疑难杂症\" class=\"headerlink\" title=\"5.疑难杂症\"></a>5.疑难杂症</h2><p><strong>5.1 Without ·from· option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to <code>undefined</code> to prevent this warning.</strong></p>\n<p> 出现这个提示，说明配置不正确。</p>\n<p> 解决方法：<br>  在“/node_modules/@ionic/app-scripts/dist/sass.js”路径的“sass.js”文件，在postcssOptions参数中添加“from: undefined”。添加后效果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postcssOptions = &#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">from</span>: <span class=\"literal\">undefined</span>,  </span><br><span class=\"line\">\tto: path_1.basename(sassConfig.outFile),  </span><br><span class=\"line\">\tmap: autoPrefixerMapOptions  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>5.2 安卓SDK组件缺失/缺少/不匹配</strong><br>报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A problem occurred configuring project &apos;:CordovaLib&apos;.</span><br><span class=\"line\">&gt; You have not accepted the license agreements of the following SDK components:</span><br><span class=\"line\">  [Android SDK Build-Tools 26.0.2].</span><br></pre></td></tr></table></figure>\n<p>原因:SDK构建工具和platform工具不匹配，或者有东西遗漏了，没下载。<br>解决：如果中途报错SDK出问题，请打开C盘/profiles/SDK/manager.exe，使用东软的镜像，根绝报错信息，来down对应的platform或者build包。</p>\n<p><strong>5.3 缺少安卓构建/打包工具</strong><br>报错报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unhandled promise rejection (rejection id: 1): CordovaError: Could not find an installed version of Gradle either in Android Studio,</span><br><span class=\"line\">or on your system to install the gradle wrapper. Please include gradle</span><br><span class=\"line\">in your path, or install Android Studio</span><br><span class=\"line\">(node:3444) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</span><br></pre></td></tr></table></figure>\n<p>原因：缺少安卓构建打包工具，报文提示你可以用Android Studio，也可以安装一个Gradle。<br>解决办法：<br>去<a href=\"http://services.gradle.org/distributions/\" target=\"_blank\" rel=\"noopener\">http://services.gradle.org/distributions/</a> 下载 gradle-4.1-bin.zip<br>配置相应的环境变量：</p>\n<p>GRADLE_HOME=E:\\software\\gradle-3.0<br>PATH=%PATH%;%GRADLE_HOME%\\bin</p>\n<p>测试命令（查看版本）：gradle -v</p>\n<p>完成上述任务后，重新运行Gitbash,然后 $ ionic cordova build android ,发现build成功，会自动下载gradle-4.1-bin.zip (初步猜测是因为自己的gradle路径不对，可能没有被项目依赖，但是项目在全局空间中发现gradle环境，因此自己要下载gradle来依赖。) </p>\n<p>感谢收看。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79319408\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>本文写于2018年2月12日 22:25:59。</p>\n<p>如果2018年的新春之际，你遇到IONIC的开发问题，这将是一篇最为详尽的打包方案。</p>\n<p>经历三天的踩坑，跳坑，相信绝大多数的问题都已经覆盖到了，请仔细按照流程来对照操作及检查。</p>\n<h2 id=\"1-基本依赖环境\"><a href=\"#1-基本依赖环境\" class=\"headerlink\" title=\"1.基本依赖环境\"></a>1.基本依赖环境</h2><ol>\n<li>nodejs环境 (作为一个前端相信你已经有了)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212223918473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"nodejs\" title=\"\" class=\"\">\n                <p>nodejs</p>\n            </figure>最好提前配置好node的环境变量，便于全局访问</li>\n<li>jdk(下面细说)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224004766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"JDK\" title=\"\" class=\"\">\n                <p>JDK</p>\n            </figure></li>\n<li>SDK(下面细说，其实主要难就难在SDK配置了)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224101120?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"SDK\" title=\"\" class=\"\">\n                <p>SDK</p>\n            </figure></li>\n<li>gradle(下面细说)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224141473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gradle\" title=\"\" class=\"\">\n                <p>gradle</p>\n            </figure></li>\n</ol>\n<h2 id=\"2-基本工具\"><a href=\"#2-基本工具\" class=\"headerlink\" title=\"2. 基本工具\"></a>2. 基本工具</h2><ol>\n<li>gitbash(就是用来替代windows自带的丑陋的CMD)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224300075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gitbash\" title=\"\" class=\"\">\n                <p>gitbash</p>\n            </figure><br>下载：我都打包了！<br>链接：<a href=\"https://pan.baidu.com/s/1mje7ZHu\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mje7ZHu</a> 密码：ob6m</li>\n<li>windows自带的CMD(<code>window</code>+<code>R</code>输入CMD，管理员身份运行)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224327731?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"CMD\" title=\"\" class=\"\">\n                <p>CMD</p>\n            </figure></li>\n<li>VSCode(微软爸爸开发的前端IDE)<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224349157?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"VSCode\" title=\"\" class=\"\">\n                <p>VSCode</p>\n            </figure><br>下载：请自行去微软爸爸官网下载。</li>\n</ol>\n<h2 id=\"3-环境配置\"><a href=\"#3-环境配置\" class=\"headerlink\" title=\"3.环境配置\"></a>3.环境配置</h2><p><strong>3.1 nodejs (需要配置环境变量)</strong><br>前端必会，跳过。<br><strong>3.2 jdk (无需配置环境变量)</strong><br>下载：已经上传网盘↓<br>链接：<a href=\"https://pan.baidu.com/s/1mje7ZHu\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mje7ZHu</a> 密码：ob6m<br>请自行根据系统安装32/64位的版本。<br>安装方法：下载完成，解压，直接按照提示安装，全局点确定，不出意外，最后的安装路径为：C:\\Program Files\\Java<br>OK，jdk安装完成，在cmd中，输入<code>$ java -version</code>验证是否安装成功。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212225402220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"jdk安装成功\" title=\"\" class=\"\">\n                <p>jdk安装成功</p>\n            </figure>\n<p>OK。<br><strong>3.3 sdk (需要配置环境变量)</strong><br>下载：跟上面的一样，我都打包了。<br>链接：<a href=\"https://pan.baidu.com/s/1mje7ZHu\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1mje7ZHu</a> 密码：ob6m</p>\n<p>解压后（直接右键X解压并重命名。因为面还有个文件夹，不建议用右键+E解压）。<br>将重命名的文件夹，跟jdk放在一个父目录，便于查找：C:\\Program Files\\SDK<br>接着配置环境变量，我的电脑——右键属性——-高级系统设置——-环境变量。<br>在下面的系统变量(s)中，新建，键值对如下：<br>name: ANDROID_HOME<br>key: C:\\Program Files\\SDK<br>如图所示：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212230110171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"SDK环境变量\" title=\"\" class=\"\">\n                <p>SDK环境变量</p>\n            </figure>\n<p>然后在path中，全局声明一下，将;%PATH%;%GRADLE_HOME%\\bin缀在最后面，前面有【;】分隔符。</p>\n<p>然后运行CMD，输入<code>$ android -h</code>，如果出现一大堆指令，说明你的SDK安装无误，并且环境变量配置OK。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212230459827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"ANDROID环境配置验证\" title=\"\" class=\"\">\n                <p>ANDROID环境配置验证</p>\n            </figure>\n<p>现在，打开SDK目录下的SDK Manager.exe<br>打开界面上的Tools,选择options，先配置国内镜像：</p>\n<p>域名千万不要输入http或者https协议前缀，谁输谁哭。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212231404498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置镜像\" title=\"\" class=\"\">\n                <p>配置镜像</p>\n            </figure>\n<p>下面记得勾选。<br>回到主界面，点packages再点reload<br>先勾选如下图的三个Tools:<br>分别是[ Android SDK Tools,Android SDK platform-tools,Android SDK Build-tools]<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212230934859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Tools\" title=\"\" class=\"\">\n                <p>Tools</p>\n            </figure></p>\n<p>别急，还没完，下面还有一个：<br>[SDK platform]<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212231104690?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"SDK platform\" title=\"\" class=\"\">\n                <p>SDK platform</p>\n            </figure></p>\n<p>全部选中后，点右下角 install packages 来安装，耐心等待即可。<br><strong>3.4 gradle安装(需要配置环境变量)</strong><br>打开：<a href=\"http://services.gradle.org/distributions/\" target=\"_blank\" rel=\"noopener\">http://services.gradle.org/distributions/</a><br>下载：gradle-4.1-bin.zip<br>同样安装在JDK,SDK的目录下，便于查找。<br>同样的配置环境变量：<br>GRADLE_HOME=C:\\Program Files\\SDK\\gradle-4.1<br>;%GRADLE_HOME%\\bin</p>\n<p>测试命令（查看版本）：gradle -v</p>\n<h2 id=\"3-基本流程\"><a href=\"#3-基本流程\" class=\"headerlink\" title=\"3.基本流程\"></a>3.基本流程</h2><p>1.安装ionic和cordova </p>\n<p>打开Gitbash,全局安装ionic和cordova（IONIC是UI，cordova负责打包成apk,并且可以调用原生安卓的各种API）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g ionic cordova</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224442812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"安装ionic和cordova\" title=\"\" class=\"\">\n                <p>安装ionic和cordova</p>\n            </figure>\n<p>2.创建ionic项目</p>\n<p>桌面右键，在此处gitbash<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ionic start app tabs</span><br></pre></td></tr></table></figure></p>\n<p>耐心等待完成，在 cd 到 app 子目录(app是你的真实项目目录)，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ionic serve</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212224746544?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"ionic serve\" title=\"\" class=\"\">\n                <p>ionic serve</p>\n            </figure>\n<p>稍等片刻，浏览器自动弹出预览界面(建议电脑安装Chrome浏览器)，并且支持持续热更新(Webpack的功能)，如下图所示：</p>\n<p><img src=\"http://img.blog.csdn.net/20180212224825825?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"CHROME预览\"></p>\n<p>如果做到这一步没问题，说明：<br>1.nodejs与gitbash没有问题。<br>2.ionic和cordova没有问题。</p>\n<h2 id=\"4-打包\"><a href=\"#4-打包\" class=\"headerlink\" title=\"4.打包\"></a>4.打包</h2><p>确保SDK,JDK没问题以后，使用指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ionic cordova build android --release</span><br></pre></td></tr></table></figure></p>\n<p> (如果这条命令有问题，可以去掉–release然后debug编译，编译完成Dos会显示apk目录位置)</p>\n<p>如若你聪慧的双眼发现如下字眼：Build Success!  即可关闭本网页，说明你已经成功打包了。</p>\n<p>OK，此时你已经有了debug的包，但是这个包没有签名，不能发布。</p>\n<p>此时，我们应该：<br>    First：在JDK目录下的bin文件夹下（C:\\Program Files\\Java\\jdk1.8.0_71\\bin），先看看有没有keytool.exe和jarsigner.exe文件，这两个程序用于给APK签名，签名以后即可发布。</p>\n<p>Second：将Ionic生成的文件先命名为app.apk，然后复制一份当前的bin目录里，执行命令1，生成自己的签名文件，名为:zhangqiang.keystrore，别名也是这个，有效期20000天，仅仅在第一次生成签名文件，以后不需要。<br>执行完命令1，继续执行命令2即可完成签名打包。</p>\n<p>命令1：生成签名密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">使用工具, 签名,-genkey表示构建签名文件，-v 显示在dos窗口中 -alias表示签名包的别名 -validity 签名有效期(天)，姓名:zhangqiang 城市:lz + lz 国家: cn 口令敲的时候不动，是因为保护隐私，别当做你电脑死机！</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>keytool -genkey -v -keystore zhangqiang.keystore -alias zhangqiang.keystore -keyalg RSA -validity 20000</p>\n<p>命令2：给文件签名<br>使用刚才生成的zhangqiang.keystore   -signedjar   签名后的apk   签名之前的apk  签名包别  </p>\n<p>jarsigner -verbose -keystore zhangqiang.keystore -signedjar complete.apk app.apk zhangqiang.keystore</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180212234119134?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"签名完成\" title=\"\" class=\"\">\n                <p>签名完成</p>\n            </figure>\n<p>如上图所示，IONIC打包的文件为app.apk,签名后的文件为complete.apk，这时候，可以说，一个软件就诞生啦！<br>后续的软件压缩打包可以百度：jarsigner打包</p>\n<h2 id=\"5-疑难杂症\"><a href=\"#5-疑难杂症\" class=\"headerlink\" title=\"5.疑难杂症\"></a>5.疑难杂症</h2><p><strong>5.1 Without ·from· option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to <code>undefined</code> to prevent this warning.</strong></p>\n<p> 出现这个提示，说明配置不正确。</p>\n<p> 解决方法：<br>  在“/node_modules/@ionic/app-scripts/dist/sass.js”路径的“sass.js”文件，在postcssOptions参数中添加“from: undefined”。添加后效果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postcssOptions = &#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">from</span>: <span class=\"literal\">undefined</span>,  </span><br><span class=\"line\">\tto: path_1.basename(sassConfig.outFile),  </span><br><span class=\"line\">\tmap: autoPrefixerMapOptions  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>5.2 安卓SDK组件缺失/缺少/不匹配</strong><br>报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A problem occurred configuring project &apos;:CordovaLib&apos;.</span><br><span class=\"line\">&gt; You have not accepted the license agreements of the following SDK components:</span><br><span class=\"line\">  [Android SDK Build-Tools 26.0.2].</span><br></pre></td></tr></table></figure>\n<p>原因:SDK构建工具和platform工具不匹配，或者有东西遗漏了，没下载。<br>解决：如果中途报错SDK出问题，请打开C盘/profiles/SDK/manager.exe，使用东软的镜像，根绝报错信息，来down对应的platform或者build包。</p>\n<p><strong>5.3 缺少安卓构建/打包工具</strong><br>报错报文：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unhandled promise rejection (rejection id: 1): CordovaError: Could not find an installed version of Gradle either in Android Studio,</span><br><span class=\"line\">or on your system to install the gradle wrapper. Please include gradle</span><br><span class=\"line\">in your path, or install Android Studio</span><br><span class=\"line\">(node:3444) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</span><br></pre></td></tr></table></figure>\n<p>原因：缺少安卓构建打包工具，报文提示你可以用Android Studio，也可以安装一个Gradle。<br>解决办法：<br>去<a href=\"http://services.gradle.org/distributions/\" target=\"_blank\" rel=\"noopener\">http://services.gradle.org/distributions/</a> 下载 gradle-4.1-bin.zip<br>配置相应的环境变量：</p>\n<p>GRADLE_HOME=E:\\software\\gradle-3.0<br>PATH=%PATH%;%GRADLE_HOME%\\bin</p>\n<p>测试命令（查看版本）：gradle -v</p>\n<p>完成上述任务后，重新运行Gitbash,然后 $ ionic cordova build android ,发现build成功，会自动下载gradle-4.1-bin.zip (初步猜测是因为自己的gradle路径不对，可能没有被项目依赖，但是项目在全局空间中发现gradle环境，因此自己要下载gradle来依赖。) </p>\n<p>感谢收看。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"Webpack打包工具学习笔记","date":"2018-01-17T03:18:00.000Z","reward":true,"comment":true,"_content":"\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/u014717036/article/details/51001311)\n\n## 前言 ##\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79078776)\n前言：Webpack是一款基于node的前端打包工具，它可以将很多静态文件打包起来，自动处理依赖关系后，生成一个.js文件，然后让html来引用，不仅可以做到按需加载，而且可以减少HTTP请求，节约带宽。\n\n## 1.配置与安装 ##\n在node已经安装完成的前提下，全局安装webpack\n\n```\n$ cd d:\n\n$ mkdir test && cd test  //创建test ，并进入\n\n$ npm install -g webpack  //等待100s，安装完成，也可以使用淘宝镜像\n\n$ npm init //初始化package.json文件\n\n$ npm install --save-dev webpack //添加依赖 ，在package.json中声明依赖,等待安装完成\n\n```\n## 2.基本操作`$webpack main.js webpack.js`##\n\n当前目录下创建如下工作结构:\n\n```\n/---------test\n\n   ----app\n     ----main.js\n     ----index.js   \n     \n   ----index.html\n```\n项目目录下，app文件夹含有两个js文件，修改如下：\n\n```\n//main.js ，这是Webpack主要的入口文件\n\n  require('./index.js');\n\n\n\n//index.js ，这是被主文件引用的文件\n\ndocument.write('Hello,world!');\n\n\n\n//index.html ，供浏览器解读\n\n<html>\n\n...\n\n<script src=\"./webpack.js\">  // 引用同目录下的webpack.js\n\n...\n\n</html>\n\n```\n\nwebpack.js是哪来的呢？就是通过webpack打包生成的js文件，接下来，\n\n开始生成webpack.js文件：\n\n```\n$ webpack main.js webpack.js\n\n```\n![这里写图片描述](http://img.blog.csdn.net/20180116202114667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到已经打包成功了，此时查看IDE中的项目目录，根目录下已经多了一个webpack.js文件。然后用浏览器打开index.html，效果如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20180116202235717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n此时查看网页源代码：\n\n![这里写图片描述](http://img.blog.csdn.net/20180116202405946?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n66666666666！\n## 3.进阶操作 （配置webpack.config.js或者配置package.json，后者依赖前者）##\n每次在命令行敲目录调试，是很痛苦的，因此需要一次配置，多次使用的方法。\n\n在根目录下新建文件： webpack.config.js  (名字就是这样，规定，不能改)，内容如下：\n\n```\nmodule.exports  = {\n//入口文件位置\n    entry:__dirname+'/app/main.js',\n\n//出口\n    output:{\n   //路径\n        path:__dirname,\n        filename:'webpack.js'\n    }\n\n}\n```\n这里的 __dirname是一个node的全局变量，用于指向当前的工作目录，调皮的我console.log了一下这个变量：\n\n![这里写图片描述](http://img.blog.csdn.net/20180116203051747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n确认无疑。\n\n这样，我们的webpack.js写完以后，可以直接在命令行中敲：\n\n```\n$ webpack\n```\n可以发现，项目中也同样的会生成目标js文件，也就是webpack.js，这样非常方便，省事。 \n\n\n还有一种配置方法，将package.json文件中\"scripts\"里面添加键值对：\n![这里写图片描述](http://img.blog.csdn.net/20180116203453509?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这样同样可以在项目目录生成目标js文件，直接在 命令行里敲\n\n```\n$ npm start //因为webpack是全局安装的，直接value给webpack，而不用跟路径\n```\n如果start被占用了/冲突了，也可以在scripts下面自定义一个键值对：\n\n```\n\"zq\":\"webpack\"\n\n$ npm run zq //稍作修改cmd 命令\n```\n最后还是可以生成。\n## 4.webpack服务器监听代码变动，自动刷新及source-map ##\n4.1关于source-map，也就是在webpack.config.js中配置 devtool (develpment tool)的值，例如我这样配置：\n\n![这里写图片描述](http://img.blog.csdn.net/20180117094811412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在webpack完成文件打包后，会自动生成一个与目标文件相同名的 .map文件，用来说明打包文件的每个地方对应的是哪些文件，简而言之，让你能知道源码是在哪里错的，帮你刨根问底，而不用开发者自己去Debug。\n\n参考文章1：[入门WEBPACK，看这篇文章就够了----简书](https://www.jianshu.com/p/42e11515c10f)\n\n参考文章2：[Webpack中的sourcemap](https://www.cnblogs.com/axl234/p/6500534.html)\n\n\n4.2 webpack服务器 \n\n首先单独安装 server 包 ：\n\n```\n$ npm install --save-dev webpack-dev-server\n```\n同样的，在webpack.config.js中做出相应的配置：\n\n```\nmodule.exports = {\n    devtool: 'source-map',\n    entry: __dirname + \"/app/main.js\",\n    output: {\n        path: __dirname,\n        filename: 'bundle.js'\n    },\n    module: {\n\n    },\n\n    devServer: {\n        contentBase: \"./\",//本地服务器加载index.html页面所在的目录，这里写的是根目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新,\n    } \n\n}\n```\n\n配置好config后，还得配置一下package.json，在scirpts里面添加server：\n\n```\n\n\"scripts\": {\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open\", \n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \n```\n\n接着，在命令行运行\n\n```\n\n$ npm run server \n\n/*届时服务器会自动启动， 并且打开浏览器,默认端口为8080，也可以\ndevServer:{\n\nport:4040 //自己配置端口为4040\n\n}\n\n```\n\n下面是一个服务器跑起来后的演示结果，我不断的修改work.js 中 `document.write`的值，从而服务器会自动检测并刷新页面：\n\n\n![这里写图片描述](http://img.blog.csdn.net/20180117100531064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n## 5.非JS文件的操作(img,json,css......),猪脚：Loaders ##\n\n **5.0 基本概念** \n 前面都在说js文件，官网说什么文件都可以当做模块打包，下面就来试试非js文件。\n\n首先要明确的是，webpack只能识别js文件，如果要识别非js文件，就需要loader来解析这些文件。\n\nloaders 需要单独安装，并且在webpack.config.js中的modules关键字下进行配置。\n\nWebpck2以上已经支持对json的解析打包，不需要额外的loaders，可以在main.js中\n\n```\nvar json = require('../package.json')//json在它的上级目录\n\ndocument.write(json.scripts.server);\n\n```\n\n运行结果 ：\n\n![这里写图片描述](http://img.blog.csdn.net/20180117101705406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可见，网页中，没有通过任何第三方loader，即可将json解析并打包成bundle.js。\n\n**5.1 Bable **\nBable可以使得开发者使用最新的ECMAscript标准来书写代码，而不用管新标准是否被当前使用的浏览器完全支持。\n\n还是需要单独安装Bable的包：\n\n```\n$ npm install --save-dev babel-core babel-loader babel-preset-env \n\n/\n```\n\n安装完成后，在webpack.config.js下的module关键字下进行配置：\n\n```\nmodule.exports = {\n  devtool: 'source-map',\n  \n    entry: __dirname + \"/app/main.js\",\n    \n    output: {\n    \n        path: __dirname,\n        \n        filename: 'bundle.js'\n        \n    },\n    \n    \n    devtool: 'eval-source-map',\n    \n    devServer: {\n    \n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        \n        historyApiFallback: true,//不跳转\n        \n        inline: true//实时刷新\n        \n    },\n    \n    module: {\n    \n        rules: [\n        \n            {\n            \n                test: /\\.js$/, //正则匹配，必须\n                \n                use: { //使用到的loader\n                \n                    loader: \"babel-loader\",  //loader名\n                    \n                    options: {   //选项\n                    \n                        presets: [ //预先配置\n                        \n                            \"env\"\n                            \n                        ]\n                        \n                    }\n                    \n                },\n                \n                exclude: /node_modules/ //不包含的目录或文件\n                \n            }\n            \n        ]\n        \n    }\n    \n};\n\n```\n\n\n**5.2 CSS文件处理 **\nwebpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n同样先安装两个包 style-loader和css-loader\n\n```\n$ npm install --save-dev style-loader css-loader\n```\n\n```\n module: {\n        rules: [\n          {.......}，\n {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\"\n                    }\n也可以简写：\n{\ntest:/\\.css$/.\n\nuse:[{\n\nloader:\"style!css\"  //这里的执行顺序是从右往左，css应该在style之前执行\n\n}]\n}\n```\n*根目录下新建 ./src/index.css，写一个body的背景为green，然后在入口文件main.js中,require('../src/index.css')，接着通过命令行`$ webpack`*\n此时查看index.html，发现页面背景已经变成绿色\n![这里写图片描述](http://img.blog.csdn.net/20180117110627698?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 6.插件plugins ##\n先安装插件的包：\n\n```\ncnpm install html-webpack-plugin\n```\n在webpack.config.js中 头部，引入依赖：\n\n```\nlet webpack = require('webpack');\n```\n\n然后在webpack.config.js中配置根键值对：\n\n```\n  plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究')\n    ],\n```\n![这里写图片描述](http://img.blog.csdn.net/20180117111652412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/Webpack打包工具学习笔记.md","raw":"---\ntitle: Webpack打包工具学习笔记\ndate: 2018-01-17 11:18:00\ntags: Webpack\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/u014717036/article/details/51001311)\n\n## 前言 ##\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79078776)\n前言：Webpack是一款基于node的前端打包工具，它可以将很多静态文件打包起来，自动处理依赖关系后，生成一个.js文件，然后让html来引用，不仅可以做到按需加载，而且可以减少HTTP请求，节约带宽。\n\n## 1.配置与安装 ##\n在node已经安装完成的前提下，全局安装webpack\n\n```\n$ cd d:\n\n$ mkdir test && cd test  //创建test ，并进入\n\n$ npm install -g webpack  //等待100s，安装完成，也可以使用淘宝镜像\n\n$ npm init //初始化package.json文件\n\n$ npm install --save-dev webpack //添加依赖 ，在package.json中声明依赖,等待安装完成\n\n```\n## 2.基本操作`$webpack main.js webpack.js`##\n\n当前目录下创建如下工作结构:\n\n```\n/---------test\n\n   ----app\n     ----main.js\n     ----index.js   \n     \n   ----index.html\n```\n项目目录下，app文件夹含有两个js文件，修改如下：\n\n```\n//main.js ，这是Webpack主要的入口文件\n\n  require('./index.js');\n\n\n\n//index.js ，这是被主文件引用的文件\n\ndocument.write('Hello,world!');\n\n\n\n//index.html ，供浏览器解读\n\n<html>\n\n...\n\n<script src=\"./webpack.js\">  // 引用同目录下的webpack.js\n\n...\n\n</html>\n\n```\n\nwebpack.js是哪来的呢？就是通过webpack打包生成的js文件，接下来，\n\n开始生成webpack.js文件：\n\n```\n$ webpack main.js webpack.js\n\n```\n![这里写图片描述](http://img.blog.csdn.net/20180116202114667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到已经打包成功了，此时查看IDE中的项目目录，根目录下已经多了一个webpack.js文件。然后用浏览器打开index.html，效果如下：\n\n![这里写图片描述](http://img.blog.csdn.net/20180116202235717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n此时查看网页源代码：\n\n![这里写图片描述](http://img.blog.csdn.net/20180116202405946?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n66666666666！\n## 3.进阶操作 （配置webpack.config.js或者配置package.json，后者依赖前者）##\n每次在命令行敲目录调试，是很痛苦的，因此需要一次配置，多次使用的方法。\n\n在根目录下新建文件： webpack.config.js  (名字就是这样，规定，不能改)，内容如下：\n\n```\nmodule.exports  = {\n//入口文件位置\n    entry:__dirname+'/app/main.js',\n\n//出口\n    output:{\n   //路径\n        path:__dirname,\n        filename:'webpack.js'\n    }\n\n}\n```\n这里的 __dirname是一个node的全局变量，用于指向当前的工作目录，调皮的我console.log了一下这个变量：\n\n![这里写图片描述](http://img.blog.csdn.net/20180116203051747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n确认无疑。\n\n这样，我们的webpack.js写完以后，可以直接在命令行中敲：\n\n```\n$ webpack\n```\n可以发现，项目中也同样的会生成目标js文件，也就是webpack.js，这样非常方便，省事。 \n\n\n还有一种配置方法，将package.json文件中\"scripts\"里面添加键值对：\n![这里写图片描述](http://img.blog.csdn.net/20180116203453509?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这样同样可以在项目目录生成目标js文件，直接在 命令行里敲\n\n```\n$ npm start //因为webpack是全局安装的，直接value给webpack，而不用跟路径\n```\n如果start被占用了/冲突了，也可以在scripts下面自定义一个键值对：\n\n```\n\"zq\":\"webpack\"\n\n$ npm run zq //稍作修改cmd 命令\n```\n最后还是可以生成。\n## 4.webpack服务器监听代码变动，自动刷新及source-map ##\n4.1关于source-map，也就是在webpack.config.js中配置 devtool (develpment tool)的值，例如我这样配置：\n\n![这里写图片描述](http://img.blog.csdn.net/20180117094811412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在webpack完成文件打包后，会自动生成一个与目标文件相同名的 .map文件，用来说明打包文件的每个地方对应的是哪些文件，简而言之，让你能知道源码是在哪里错的，帮你刨根问底，而不用开发者自己去Debug。\n\n参考文章1：[入门WEBPACK，看这篇文章就够了----简书](https://www.jianshu.com/p/42e11515c10f)\n\n参考文章2：[Webpack中的sourcemap](https://www.cnblogs.com/axl234/p/6500534.html)\n\n\n4.2 webpack服务器 \n\n首先单独安装 server 包 ：\n\n```\n$ npm install --save-dev webpack-dev-server\n```\n同样的，在webpack.config.js中做出相应的配置：\n\n```\nmodule.exports = {\n    devtool: 'source-map',\n    entry: __dirname + \"/app/main.js\",\n    output: {\n        path: __dirname,\n        filename: 'bundle.js'\n    },\n    module: {\n\n    },\n\n    devServer: {\n        contentBase: \"./\",//本地服务器加载index.html页面所在的目录，这里写的是根目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新,\n    } \n\n}\n```\n\n配置好config后，还得配置一下package.json，在scirpts里面添加server：\n\n```\n\n\"scripts\": {\n    \"start\": \"webpack\",\n    \"server\": \"webpack-dev-server --open\", \n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \n```\n\n接着，在命令行运行\n\n```\n\n$ npm run server \n\n/*届时服务器会自动启动， 并且打开浏览器,默认端口为8080，也可以\ndevServer:{\n\nport:4040 //自己配置端口为4040\n\n}\n\n```\n\n下面是一个服务器跑起来后的演示结果，我不断的修改work.js 中 `document.write`的值，从而服务器会自动检测并刷新页面：\n\n\n![这里写图片描述](http://img.blog.csdn.net/20180117100531064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n## 5.非JS文件的操作(img,json,css......),猪脚：Loaders ##\n\n **5.0 基本概念** \n 前面都在说js文件，官网说什么文件都可以当做模块打包，下面就来试试非js文件。\n\n首先要明确的是，webpack只能识别js文件，如果要识别非js文件，就需要loader来解析这些文件。\n\nloaders 需要单独安装，并且在webpack.config.js中的modules关键字下进行配置。\n\nWebpck2以上已经支持对json的解析打包，不需要额外的loaders，可以在main.js中\n\n```\nvar json = require('../package.json')//json在它的上级目录\n\ndocument.write(json.scripts.server);\n\n```\n\n运行结果 ：\n\n![这里写图片描述](http://img.blog.csdn.net/20180117101705406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可见，网页中，没有通过任何第三方loader，即可将json解析并打包成bundle.js。\n\n**5.1 Bable **\nBable可以使得开发者使用最新的ECMAscript标准来书写代码，而不用管新标准是否被当前使用的浏览器完全支持。\n\n还是需要单独安装Bable的包：\n\n```\n$ npm install --save-dev babel-core babel-loader babel-preset-env \n\n/\n```\n\n安装完成后，在webpack.config.js下的module关键字下进行配置：\n\n```\nmodule.exports = {\n  devtool: 'source-map',\n  \n    entry: __dirname + \"/app/main.js\",\n    \n    output: {\n    \n        path: __dirname,\n        \n        filename: 'bundle.js'\n        \n    },\n    \n    \n    devtool: 'eval-source-map',\n    \n    devServer: {\n    \n        contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n        \n        historyApiFallback: true,//不跳转\n        \n        inline: true//实时刷新\n        \n    },\n    \n    module: {\n    \n        rules: [\n        \n            {\n            \n                test: /\\.js$/, //正则匹配，必须\n                \n                use: { //使用到的loader\n                \n                    loader: \"babel-loader\",  //loader名\n                    \n                    options: {   //选项\n                    \n                        presets: [ //预先配置\n                        \n                            \"env\"\n                            \n                        ]\n                        \n                    }\n                    \n                },\n                \n                exclude: /node_modules/ //不包含的目录或文件\n                \n            }\n            \n        ]\n        \n    }\n    \n};\n\n```\n\n\n**5.2 CSS文件处理 **\nwebpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(...)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n同样先安装两个包 style-loader和css-loader\n\n```\n$ npm install --save-dev style-loader css-loader\n```\n\n```\n module: {\n        rules: [\n          {.......}，\n {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"style-loader\"\n                    }, {\n                        loader: \"css-loader\"\n                    }\n也可以简写：\n{\ntest:/\\.css$/.\n\nuse:[{\n\nloader:\"style!css\"  //这里的执行顺序是从右往左，css应该在style之前执行\n\n}]\n}\n```\n*根目录下新建 ./src/index.css，写一个body的背景为green，然后在入口文件main.js中,require('../src/index.css')，接着通过命令行`$ webpack`*\n此时查看index.html，发现页面背景已经变成绿色\n![这里写图片描述](http://img.blog.csdn.net/20180117110627698?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 6.插件plugins ##\n先安装插件的包：\n\n```\ncnpm install html-webpack-plugin\n```\n在webpack.config.js中 头部，引入依赖：\n\n```\nlet webpack = require('webpack');\n```\n\n然后在webpack.config.js中配置根键值对：\n\n```\n  plugins: [\n        new webpack.BannerPlugin('版权所有，翻版必究')\n    ],\n```\n![这里写图片描述](http://img.blog.csdn.net/20180117111652412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"Webpack打包工具学习笔记","published":1,"updated":"2019-05-14T14:30:28.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxh003eckufswndi8ke","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/u014717036/article/details/51001311\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79078776\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a><br>前言：Webpack是一款基于node的前端打包工具，它可以将很多静态文件打包起来，自动处理依赖关系后，生成一个.js文件，然后让html来引用，不仅可以做到按需加载，而且可以减少HTTP请求，节约带宽。</p>\n<h2 id=\"1-配置与安装\"><a href=\"#1-配置与安装\" class=\"headerlink\" title=\"1.配置与安装\"></a>1.配置与安装</h2><p>在node已经安装完成的前提下，全局安装webpack</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd d:</span><br><span class=\"line\"></span><br><span class=\"line\">$ mkdir test &amp;&amp; cd test  //创建test ，并进入</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install -g webpack  //等待100s，安装完成，也可以使用淘宝镜像</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm init //初始化package.json文件</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install --save-dev webpack //添加依赖 ，在package.json中声明依赖,等待安装完成</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-基本操作-webpack-main-js-webpack-js\"><a href=\"#2-基本操作-webpack-main-js-webpack-js\" class=\"headerlink\" title=\"2.基本操作$webpack main.js webpack.js\"></a>2.基本操作<code>$webpack main.js webpack.js</code></h2><p>当前目录下创建如下工作结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/---------test</span><br><span class=\"line\"></span><br><span class=\"line\">   ----app</span><br><span class=\"line\">     ----main.js</span><br><span class=\"line\">     ----index.js   </span><br><span class=\"line\">     </span><br><span class=\"line\">   ----index.html</span><br></pre></td></tr></table></figure>\n<p>项目目录下，app文件夹含有两个js文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js ，这是Webpack主要的入口文件</span><br><span class=\"line\"></span><br><span class=\"line\">  require(&apos;./index.js&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//index.js ，这是被主文件引用的文件</span><br><span class=\"line\"></span><br><span class=\"line\">document.write(&apos;Hello,world!&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//index.html ，供浏览器解读</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=&quot;./webpack.js&quot;&gt;  // 引用同目录下的webpack.js</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>webpack.js是哪来的呢？就是通过webpack打包生成的js文件，接下来，</p>\n<p>开始生成webpack.js文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack main.js webpack.js</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116202114667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>可以看到已经打包成功了，此时查看IDE中的项目目录，根目录下已经多了一个webpack.js文件。然后用浏览器打开index.html，效果如下：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116202235717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>此时查看网页源代码：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116202405946?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>66666666666！</p>\n<h2 id=\"3-进阶操作-（配置webpack-config-js或者配置package-json，后者依赖前者）\"><a href=\"#3-进阶操作-（配置webpack-config-js或者配置package-json，后者依赖前者）\" class=\"headerlink\" title=\"3.进阶操作 （配置webpack.config.js或者配置package.json，后者依赖前者）\"></a>3.进阶操作 （配置webpack.config.js或者配置package.json，后者依赖前者）</h2><p>每次在命令行敲目录调试，是很痛苦的，因此需要一次配置，多次使用的方法。</p>\n<p>在根目录下新建文件： webpack.config.js  (名字就是这样，规定，不能改)，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports  = &#123;</span><br><span class=\"line\">//入口文件位置</span><br><span class=\"line\">    entry:__dirname+&apos;/app/main.js&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">//出口</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">   //路径</span><br><span class=\"line\">        path:__dirname,</span><br><span class=\"line\">        filename:&apos;webpack.js&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 __dirname是一个node的全局变量，用于指向当前的工作目录，调皮的我console.log了一下这个变量：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116203051747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>确认无疑。</p>\n<p>这样，我们的webpack.js写完以后，可以直接在命令行中敲：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack</span><br></pre></td></tr></table></figure>\n<p>可以发现，项目中也同样的会生成目标js文件，也就是webpack.js，这样非常方便，省事。 </p>\n<p>还有一种配置方法，将package.json文件中”scripts”里面添加键值对：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116203453509?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>这样同样可以在项目目录生成目标js文件，直接在 命令行里敲</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm start //因为webpack是全局安装的，直接value给webpack，而不用跟路径</span><br></pre></td></tr></table></figure>\n<p>如果start被占用了/冲突了，也可以在scripts下面自定义一个键值对：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;zq&quot;:&quot;webpack&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm run zq //稍作修改cmd 命令</span><br></pre></td></tr></table></figure>\n<p>最后还是可以生成。</p>\n<h2 id=\"4-webpack服务器监听代码变动，自动刷新及source-map\"><a href=\"#4-webpack服务器监听代码变动，自动刷新及source-map\" class=\"headerlink\" title=\"4.webpack服务器监听代码变动，自动刷新及source-map\"></a>4.webpack服务器监听代码变动，自动刷新及source-map</h2><p>4.1关于source-map，也就是在webpack.config.js中配置 devtool (develpment tool)的值，例如我这样配置：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180117094811412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>在webpack完成文件打包后，会自动生成一个与目标文件相同名的 .map文件，用来说明打包文件的每个地方对应的是哪些文件，简而言之，让你能知道源码是在哪里错的，帮你刨根问底，而不用开发者自己去Debug。</p>\n<p>参考文章1：<a href=\"https://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"noopener\">入门WEBPACK，看这篇文章就够了—-简书</a></p>\n<p>参考文章2：<a href=\"https://www.cnblogs.com/axl234/p/6500534.html\" target=\"_blank\" rel=\"noopener\">Webpack中的sourcemap</a></p>\n<p>4.2 webpack服务器 </p>\n<p>首先单独安装 server 包 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>同样的，在webpack.config.js中做出相应的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    devtool: &apos;source-map&apos;,</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname,</span><br><span class=\"line\">        filename: &apos;bundle.js&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./&quot;,//本地服务器加载index.html页面所在的目录，这里写的是根目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true//实时刷新,</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好config后，还得配置一下package.json，在scirpts里面添加server：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class=\"line\">    &quot;server&quot;: &quot;webpack-dev-server --open&quot;, </span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>接着，在命令行运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ npm run server </span><br><span class=\"line\"></span><br><span class=\"line\">/*届时服务器会自动启动， 并且打开浏览器,默认端口为8080，也可以</span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">port:4040 //自己配置端口为4040</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是一个服务器跑起来后的演示结果，我不断的修改work.js 中 <code>document.write</code>的值，从而服务器会自动检测并刷新页面：</p>\n<p><img src=\"http://img.blog.csdn.net/20180117100531064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"5-非JS文件的操作-img-json-css……-猪脚：Loaders\"><a href=\"#5-非JS文件的操作-img-json-css……-猪脚：Loaders\" class=\"headerlink\" title=\"5.非JS文件的操作(img,json,css……),猪脚：Loaders\"></a>5.非JS文件的操作(img,json,css……),猪脚：Loaders</h2><p> <strong>5.0 基本概念</strong><br> 前面都在说js文件，官网说什么文件都可以当做模块打包，下面就来试试非js文件。</p>\n<p>首先要明确的是，webpack只能识别js文件，如果要识别非js文件，就需要loader来解析这些文件。</p>\n<p>loaders 需要单独安装，并且在webpack.config.js中的modules关键字下进行配置。</p>\n<p>Webpck2以上已经支持对json的解析打包，不需要额外的loaders，可以在main.js中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var json = require(&apos;../package.json&apos;)//json在它的上级目录</span><br><span class=\"line\"></span><br><span class=\"line\">document.write(json.scripts.server);</span><br></pre></td></tr></table></figure>\n<p>运行结果 ：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180117101705406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>可见，网页中，没有通过任何第三方loader，即可将json解析并打包成bundle.js。</p>\n<p><strong>5.1 Bable </strong><br>Bable可以使得开发者使用最新的ECMAscript标准来书写代码，而不用管新标准是否被当前使用的浏览器完全支持。</p>\n<p>还是需要单独安装Bable的包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-core babel-loader babel-preset-env </span><br><span class=\"line\"></span><br><span class=\"line\">/</span><br></pre></td></tr></table></figure>\n<p>安装完成后，在webpack.config.js下的module关键字下进行配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;source-map&apos;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        path: __dirname,</span><br><span class=\"line\">        </span><br><span class=\"line\">        filename: &apos;bundle.js&apos;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        </span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        </span><br><span class=\"line\">        inline: true//实时刷新</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">                test: /\\.js$/, //正则匹配，必须</span><br><span class=\"line\">                </span><br><span class=\"line\">                use: &#123; //使用到的loader</span><br><span class=\"line\">                </span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;,  //loader名</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    options: &#123;   //选项</span><br><span class=\"line\">                    </span><br><span class=\"line\">                        presets: [ //预先配置</span><br><span class=\"line\">                        </span><br><span class=\"line\">                            &quot;env&quot;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                </span><br><span class=\"line\">                exclude: /node_modules/ //不包含的目录或文件</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        ]</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>5.2 CSS文件处理 </strong><br>webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>同样先安装两个包 style-loader和css-loader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">          &#123;.......&#125;，</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">也可以简写：</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">test:/\\.css$/.</span><br><span class=\"line\"></span><br><span class=\"line\">use:[&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">loader:&quot;style!css&quot;  //这里的执行顺序是从右往左，css应该在style之前执行</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>根目录下新建 ./src/index.css，写一个body的背景为green，然后在入口文件main.js中,require(‘../src/index.css’)，接着通过命令行<code>$ webpack</code></em><br>此时查看index.html，发现页面背景已经变成绿色<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180117110627698?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<h2 id=\"6-插件plugins\"><a href=\"#6-插件plugins\" class=\"headerlink\" title=\"6.插件plugins\"></a>6.插件plugins</h2><p>先安装插件的包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>在webpack.config.js中 头部，引入依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack = require(&apos;webpack&apos;);</span><br></pre></td></tr></table></figure>\n<p>然后在webpack.config.js中配置根键值对：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">      new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;)</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180117111652412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/u014717036/article/details/51001311\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79078776\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a><br>前言：Webpack是一款基于node的前端打包工具，它可以将很多静态文件打包起来，自动处理依赖关系后，生成一个.js文件，然后让html来引用，不仅可以做到按需加载，而且可以减少HTTP请求，节约带宽。</p>\n<h2 id=\"1-配置与安装\"><a href=\"#1-配置与安装\" class=\"headerlink\" title=\"1.配置与安装\"></a>1.配置与安装</h2><p>在node已经安装完成的前提下，全局安装webpack</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd d:</span><br><span class=\"line\"></span><br><span class=\"line\">$ mkdir test &amp;&amp; cd test  //创建test ，并进入</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install -g webpack  //等待100s，安装完成，也可以使用淘宝镜像</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm init //初始化package.json文件</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install --save-dev webpack //添加依赖 ，在package.json中声明依赖,等待安装完成</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-基本操作-webpack-main-js-webpack-js\"><a href=\"#2-基本操作-webpack-main-js-webpack-js\" class=\"headerlink\" title=\"2.基本操作$webpack main.js webpack.js\"></a>2.基本操作<code>$webpack main.js webpack.js</code></h2><p>当前目录下创建如下工作结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/---------test</span><br><span class=\"line\"></span><br><span class=\"line\">   ----app</span><br><span class=\"line\">     ----main.js</span><br><span class=\"line\">     ----index.js   </span><br><span class=\"line\">     </span><br><span class=\"line\">   ----index.html</span><br></pre></td></tr></table></figure>\n<p>项目目录下，app文件夹含有两个js文件，修改如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js ，这是Webpack主要的入口文件</span><br><span class=\"line\"></span><br><span class=\"line\">  require(&apos;./index.js&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//index.js ，这是被主文件引用的文件</span><br><span class=\"line\"></span><br><span class=\"line\">document.write(&apos;Hello,world!&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//index.html ，供浏览器解读</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=&quot;./webpack.js&quot;&gt;  // 引用同目录下的webpack.js</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>webpack.js是哪来的呢？就是通过webpack打包生成的js文件，接下来，</p>\n<p>开始生成webpack.js文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack main.js webpack.js</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116202114667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>可以看到已经打包成功了，此时查看IDE中的项目目录，根目录下已经多了一个webpack.js文件。然后用浏览器打开index.html，效果如下：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116202235717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>此时查看网页源代码：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116202405946?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>66666666666！</p>\n<h2 id=\"3-进阶操作-（配置webpack-config-js或者配置package-json，后者依赖前者）\"><a href=\"#3-进阶操作-（配置webpack-config-js或者配置package-json，后者依赖前者）\" class=\"headerlink\" title=\"3.进阶操作 （配置webpack.config.js或者配置package.json，后者依赖前者）\"></a>3.进阶操作 （配置webpack.config.js或者配置package.json，后者依赖前者）</h2><p>每次在命令行敲目录调试，是很痛苦的，因此需要一次配置，多次使用的方法。</p>\n<p>在根目录下新建文件： webpack.config.js  (名字就是这样，规定，不能改)，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports  = &#123;</span><br><span class=\"line\">//入口文件位置</span><br><span class=\"line\">    entry:__dirname+&apos;/app/main.js&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">//出口</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">   //路径</span><br><span class=\"line\">        path:__dirname,</span><br><span class=\"line\">        filename:&apos;webpack.js&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 __dirname是一个node的全局变量，用于指向当前的工作目录，调皮的我console.log了一下这个变量：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116203051747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>确认无疑。</p>\n<p>这样，我们的webpack.js写完以后，可以直接在命令行中敲：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ webpack</span><br></pre></td></tr></table></figure>\n<p>可以发现，项目中也同样的会生成目标js文件，也就是webpack.js，这样非常方便，省事。 </p>\n<p>还有一种配置方法，将package.json文件中”scripts”里面添加键值对：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180116203453509?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>这样同样可以在项目目录生成目标js文件，直接在 命令行里敲</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm start //因为webpack是全局安装的，直接value给webpack，而不用跟路径</span><br></pre></td></tr></table></figure>\n<p>如果start被占用了/冲突了，也可以在scripts下面自定义一个键值对：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;zq&quot;:&quot;webpack&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm run zq //稍作修改cmd 命令</span><br></pre></td></tr></table></figure>\n<p>最后还是可以生成。</p>\n<h2 id=\"4-webpack服务器监听代码变动，自动刷新及source-map\"><a href=\"#4-webpack服务器监听代码变动，自动刷新及source-map\" class=\"headerlink\" title=\"4.webpack服务器监听代码变动，自动刷新及source-map\"></a>4.webpack服务器监听代码变动，自动刷新及source-map</h2><p>4.1关于source-map，也就是在webpack.config.js中配置 devtool (develpment tool)的值，例如我这样配置：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180117094811412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>在webpack完成文件打包后，会自动生成一个与目标文件相同名的 .map文件，用来说明打包文件的每个地方对应的是哪些文件，简而言之，让你能知道源码是在哪里错的，帮你刨根问底，而不用开发者自己去Debug。</p>\n<p>参考文章1：<a href=\"https://www.jianshu.com/p/42e11515c10f\" target=\"_blank\" rel=\"noopener\">入门WEBPACK，看这篇文章就够了—-简书</a></p>\n<p>参考文章2：<a href=\"https://www.cnblogs.com/axl234/p/6500534.html\" target=\"_blank\" rel=\"noopener\">Webpack中的sourcemap</a></p>\n<p>4.2 webpack服务器 </p>\n<p>首先单独安装 server 包 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n<p>同样的，在webpack.config.js中做出相应的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    devtool: &apos;source-map&apos;,</span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname,</span><br><span class=\"line\">        filename: &apos;bundle.js&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &quot;./&quot;,//本地服务器加载index.html页面所在的目录，这里写的是根目录</span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        inline: true//实时刷新,</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好config后，还得配置一下package.json，在scirpts里面添加server：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot;,</span><br><span class=\"line\">    &quot;server&quot;: &quot;webpack-dev-server --open&quot;, </span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>接着，在命令行运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ npm run server </span><br><span class=\"line\"></span><br><span class=\"line\">/*届时服务器会自动启动， 并且打开浏览器,默认端口为8080，也可以</span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">port:4040 //自己配置端口为4040</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是一个服务器跑起来后的演示结果，我不断的修改work.js 中 <code>document.write</code>的值，从而服务器会自动检测并刷新页面：</p>\n<p><img src=\"http://img.blog.csdn.net/20180117100531064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"5-非JS文件的操作-img-json-css……-猪脚：Loaders\"><a href=\"#5-非JS文件的操作-img-json-css……-猪脚：Loaders\" class=\"headerlink\" title=\"5.非JS文件的操作(img,json,css……),猪脚：Loaders\"></a>5.非JS文件的操作(img,json,css……),猪脚：Loaders</h2><p> <strong>5.0 基本概念</strong><br> 前面都在说js文件，官网说什么文件都可以当做模块打包，下面就来试试非js文件。</p>\n<p>首先要明确的是，webpack只能识别js文件，如果要识别非js文件，就需要loader来解析这些文件。</p>\n<p>loaders 需要单独安装，并且在webpack.config.js中的modules关键字下进行配置。</p>\n<p>Webpck2以上已经支持对json的解析打包，不需要额外的loaders，可以在main.js中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var json = require(&apos;../package.json&apos;)//json在它的上级目录</span><br><span class=\"line\"></span><br><span class=\"line\">document.write(json.scripts.server);</span><br></pre></td></tr></table></figure>\n<p>运行结果 ：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180117101705406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>可见，网页中，没有通过任何第三方loader，即可将json解析并打包成bundle.js。</p>\n<p><strong>5.1 Bable </strong><br>Bable可以使得开发者使用最新的ECMAscript标准来书写代码，而不用管新标准是否被当前使用的浏览器完全支持。</p>\n<p>还是需要单独安装Bable的包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-core babel-loader babel-preset-env </span><br><span class=\"line\"></span><br><span class=\"line\">/</span><br></pre></td></tr></table></figure>\n<p>安装完成后，在webpack.config.js下的module关键字下进行配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;source-map&apos;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    entry: __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        path: __dirname,</span><br><span class=\"line\">        </span><br><span class=\"line\">        filename: &apos;bundle.js&apos;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class=\"line\">        </span><br><span class=\"line\">        historyApiFallback: true,//不跳转</span><br><span class=\"line\">        </span><br><span class=\"line\">        inline: true//实时刷新</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">        </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">                test: /\\.js$/, //正则匹配，必须</span><br><span class=\"line\">                </span><br><span class=\"line\">                use: &#123; //使用到的loader</span><br><span class=\"line\">                </span><br><span class=\"line\">                    loader: &quot;babel-loader&quot;,  //loader名</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    options: &#123;   //选项</span><br><span class=\"line\">                    </span><br><span class=\"line\">                        presets: [ //预先配置</span><br><span class=\"line\">                        </span><br><span class=\"line\">                            &quot;env&quot;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                </span><br><span class=\"line\">                exclude: /node_modules/ //不包含的目录或文件</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        ]</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>5.2 CSS文件处理 </strong><br>webpack提供两个工具处理样式表，css-loader 和 style-loader，二者处理的任务不同，css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>同样先安装两个包 style-loader和css-loader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">          &#123;.......&#125;，</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &quot;style-loader&quot;</span><br><span class=\"line\">                    &#125;, &#123;</span><br><span class=\"line\">                        loader: &quot;css-loader&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">也可以简写：</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">test:/\\.css$/.</span><br><span class=\"line\"></span><br><span class=\"line\">use:[&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">loader:&quot;style!css&quot;  //这里的执行顺序是从右往左，css应该在style之前执行</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>根目录下新建 ./src/index.css，写一个body的背景为green，然后在入口文件main.js中,require(‘../src/index.css’)，接着通过命令行<code>$ webpack</code></em><br>此时查看index.html，发现页面背景已经变成绿色<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180117110627698?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<h2 id=\"6-插件plugins\"><a href=\"#6-插件plugins\" class=\"headerlink\" title=\"6.插件plugins\"></a>6.插件plugins</h2><p>先安装插件的包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>在webpack.config.js中 头部，引入依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let webpack = require(&apos;webpack&apos;);</span><br></pre></td></tr></table></figure>\n<p>然后在webpack.config.js中配置根键值对：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">      new webpack.BannerPlugin(&apos;版权所有，翻版必究&apos;)</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180117111652412?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"ajax回顾","date":"2017-12-12T09:04:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78781917)\n\n\n## **jq与原生以及angular中的ajax（长文）**##\n\nhttp://blog.csdn.net/qq_20264891/article/details/78457021\n\n上面是之前写的一篇关于ajax的帖子，里面的集成包xampp的配置方法有点不太科学，\n\n虽然这样可以运行，但感觉不是很美滋滋。\n\n感谢新浪博主@期待下一站幸福\n\n具体参考原文地址：http://blog.sina.com.cn/s/blog_ae1d0a810102wvy6.html\n\n\n\n配置外部服务器，运行后端代码php？\n对于完全是小白的我而言，实在是想都不敢想。因为得学习Ajax，就必须得给服务器的发送请求和等待服务器响。所以就在老师的带领下，开始了服务器的配置。\n\n首先介绍一下，我用的IDE:​HBuilder. 后端语言是php。\n\n我使用的是模拟服务器的软件：XAMPP​\n\n(下载地址：https://www.apachefriends.org/download.html)\n\n然后说一下，我要做什么样的效果：\n\n让一个PHP文件在本地服务器上运行。（对！就是这么简单，我捣鼓了一个多小时...）​\n\n\n好了，接下来我们来看看吧。\n\n\n​\n\n1,安装一个模拟的服务器。\n\n如果你和我一样，没有任何的​Apache，MySQL，tomcat等WEB服务器。那就下载一个XAMPP.【好用于部署一个本地服务器】\n\n​安装完成后，打开的界面是这样子的：\n![这里写图片描述](http://img.blog.csdn.net/20171212150943894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我们可以先点击“start”启动，这时候需要注意的是：可能出现错误。【错误是：端口被占用】。\n\n> ![引用块内容](http://img.blog.csdn.net/20171212151012172?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n解决方法是：点击config--进入Apache（httpd.conf）--找到listen（监听的端口号）进行修改。如图：\n![这里写图片描述](http://img.blog.csdn.net/20171212151304609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n好了，可以重新启动Apache啦。\n\n**2.打开HBuilder，然后新建一个项目。**\n\n注意：新建的项目---一定要在我们刚刚打开的XMAPP安装目录下的​htdocs文件夹下面。\n\n（不要问为啥，这是我一晚上调试出来的经验）​\n![这里写图片描述](http://img.blog.csdn.net/20171212151354297?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n﻿在安装目录下的htdocs，新建文件\n\n3.在HBuilder中的快捷工具栏中找到【浏览器】，打开它的下拉菜单，点击【设置web服务器】。\n\n进入页面点击”外置web服务器“​--选择”新建“\n\n![这里写图片描述](http://img.blog.csdn.net/20171212151434576?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20171212151454782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n添加本地服务器\n\n\n![这里写图片描述](http://img.blog.csdn.net/20171212151518701?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n4.把你写的PHP文件可以在浏览器中，打开了。\n\n这是我的源文件：\n![这里写图片描述](http://img.blog.csdn.net/20171212151552039?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n![这里写图片描述](http://img.blog.csdn.net/20171212151609984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n***OK,接下来才是正文：***\n==\n\n**一、javaScript原生Ajax**\n==\n\n**1.浏览器自带的与服务器交互的对象及附带API**\n\n**该对象是一个全局对象，即位于window对象下。IE与非IE，该对象不同**\n\n非IE && IE7+ : XMLHttpRequest\n\nIE5,IE6: ActiveXObject\n\n**2.兼容创建大法**\n\n```\nvar xhr=null;//初始化变量\n\nif(window.XMLHttpRequest){\n//非IE&&IE7+\n\nxhr = new XMLHttpRequest();\n}\nelse if(window.ActiveXObject){\n\nxhr = new ActiveXObject(\"Microsoft.XMLHTTP\");//不同的IE版本，里面写的东西不一样，具体请自行baidu\n\n}\n```\n**3.创建好之后的后续步骤**\n\nxhr.open()  //该方法用于 **创建**  连接服务端的请求。\n\nxhr.send();  //所有的事情完毕，正式发送请求。\n\n注意：\n\nxhr.open(method,url,async)  请求方式，请求地址，是否异步？(ps:默认为true,异步执行)\n\n设置好open中的传参，接着执行xhr.send()。\n\n**4.如何知道请求与相应成功不成功？？**\n\n这里，xhr对象自带 一个方法，用来检测连接是否成功，以及对xhr创建过程进行监听，\n\n为什么这样说呢？直接看代码：\n\n```\n xhr.onreadystatechange=function(){\n    \n    \tif(xhr.readyState=4&&xhr.status==200){\n    \t\t\n    \t\tdocument.getElementById('box').innerHTML = xhr.responseText;\n    \t}\n    }\n***************上面界定了，请求成功以后，将响应的内容放在我们的box盒子里********\n\n\txhr.open(\"GET\",\"01.php?a=5&b=1\",true);//传参a=5,b=1\n\txhr.send(); \n\t\n//因为上面的方法是异步执行的，因此不用纠结，xhr.open()和send()的位置。\n\n}\n```\n运行结果:\n![这里写图片描述](http://img.blog.csdn.net/20171212145801095?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n附上php的代码：\n\n```\n<?php\necho  \"a为{$_GET['a']},那么b为{$_GET['b']}\"  \n?>\n```\n这里php代码看不懂的话， 可以去http://blog.csdn.net/qq_20264891/article/details/78748217回顾一下PHP 的基本语法。作为一个前端，后端语言要了解其接口和语法，这是最起码的(这个B装的66666)。\n\n\n**说好的监听xhr对象的创建过程呢？**\n```\nxhr.onreadystatechange = function(){\n//这里加上一句话  :\nconsole.log(\"当前的XMLHttpRequest对象的创建进度为\"+xhr.readyState)\n...\n...\n }\n```\n来看打印结果:\n![这里写图片描述](http://img.blog.csdn.net/20171212150218442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可见，每次xhr对象自身状态值改变，都会调用函数，因此导致我们打印的结果发生变化。  由此可得，ajax的创建是分步进行的，查询资料可得：\n\n - 0 对象未创建\n - 1 已与服务器连接\n - 2 服务器已经接受请求\n - 3 服务器正在处理请求\n - 4 服务器将请求下发\n **同时，status也需要有响应的返回值，从服务器传递回来，有个状态值(xhr.status)： **\n如果响应成功，就返回200\n如果没找到，返回404\n其他还有403,5系列等等，不再赘述。\n\n**二、jQuery中的ajax**\n==\n1.load方法\n\n```\n兹有按钮与容器各一个：\n\n<input type=\"button\" value=\"点我加载\" id=\"btn\"/>\n\n<div id=\"box\"></div>\n\n//js如下\n\n\t<script type=\"text/javascript\">\n\t\n\t\t$('#btn').click(function(){\n\t\t\t$('#box').load('03.php')\n\n\t</script>\n\t\n//php如下\n\n<?php\necho \"hello,world!<br/>a  =  {$_POST['a']}<br/>b  =   {$_POST['b']}\"\n?>\n```\n这里，点击按钮，box载入响应值，这个方法是get方法。\n如图：![这里写图片描述](http://img.blog.csdn.net/20171212153748919?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n如果，在load()多传一个json对象:\n\n```\n$('#box').load('03.php',{\n\t\t\t\ta:5,\n\t\t\t\tb:1\n\t\t\t})\n```\n那么这个请求会自动 变成post请求。\n![这里写图片描述](http://img.blog.csdn.net/20171212153930619?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在 Ajax数据载入完毕之后，就能执行回调函数 callback，也就是第三个参数。回调函数\n也可以传递三个可选参数：responseText（请求返回）、textStatus（请求状态)、XMLHttpRequest对象。\n\n```\n$('#btn').click(function () {\n  $('#box').load('03.php', {\n       a:5,\n       b:1\n  }, function (response, status, xhr) {\n        alert('返回的值为：' + response + '，状态为：' + status + '，\n           状态是：' + xhr.statusText);\n  });\n});\n```\n运行结果：\n![这里写图片描述](http://img.blog.csdn.net/20171212154422827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这里的status和xhr.statusText都是经过jQuery进行处理的，原本的值应该对应为：\n200 \n**2.`$.get()和$.post()`**\n\n.load()方法是局部方法，因为他需要一个包含元素的 jQuery对象作为前缀。而$.get()和\n$.post()是全局方法，无须指定某个元素。对于用途而言，.load()适合做静态文件的异步获取，\n而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。\n\n```\n$('#btn').click($.get(url,{json.data},callback(),type){})\n\n/*GET方法与load()方法相比，多了最后一个参数，返回类型，可以设置为\nxml,html,json,text等，一般不需要设置，都是jQuery智能判断返回的。第一个参数：请求\n地址，是必须的，后面的都是可选参数。\n*/\n```\n**`$.post()方法`**\n\n的使用和`$.get()`基本上一致，他们之间的区别也比较隐晦，基本都是背后的\n\n不同，在用户使用上体现不出。具体区别如下：\n\n1.GET请求是通过  URL提交的，而 POST请求则是  HTTP消息实体提交的；\n\n2.GET提交有大小限制（2KB），而  POST方式不受限制；\n\n3.GET方式会被缓存下来，可能有安全性问题，而  POST没有这个问题；\n\n4.GET方式通过`$_GET[]`获取，POST方式通过`$_POST[]`获取。\n**3.`load(),$.get(),$.post()` **的集合：$.ajax\n\n```\n//ajax是jQuery封装的最底层的方法\n\t\t$('btn[submit]')[0].click(function(){\n\t\t\t$.ajax({\n\t\t\t\ttype:\"get\",    //请求方式\n\t\t\t\turl:\"02.php\",  //地址\n\t\t\t\tasync:true,      //异步\n\t\t\t\tsuccess:function(response,status,xhr){alert(response)}, //成功回调函数\n\t\t\t\terror:function(){},//失败回调\n\t\t\t\tdata:$('form').serialize()//表单序列化\n\t\t\t});\n\t\t\t\n\n\t\t})\n```\n\n**三、AngularJs中的ajax**\n==\n\n\n```\n在任一一个控制器中注入http依赖\n\nvar app = angular.module('myApp',[]);\n\n\n//http模块注入到任一一个控制器中\n\napp.controller('ctrl1',function($scope,$http){\n\n$http({ \n\n    method: 'GET', //选择请求方式\n    \n    url: '02.php' //请求地址\n    \n}).then(function successCallback(response) {\n\n        // 请求成功执行代码\n    }, function errorCallback(response) {\n    \n        // 请求失败执行代码\n//语法为：$http.then(success(),fail())\n});\n\n\n\n```\n**声明：v1.5 中$http 的 success 和 error 方法已废弃。使用 then 方法替代。因此千万不要**\n\n```\n$http.success().error()//错误写法！z不能跟jQuery混淆\n```\n\n总结：\n==\nJs/jq/angularjs 中ajax的：\n\n\n**相同点**\n1.都是异步的请求，都支持get,post方法,jq,angular支持(put)。\n\n\n**不同点：**\n\n1.jq中，对于ajax请求的写法非常简单，非常直观。angular中，通过$http模块也进行相应的封装，非常方便。\n\n2.普通的javaScript AJAX请求，如果需要GET方法传参，只能强行用\"？\"追加到url后面，并且不同参数连接要用&进行，非常繁琐。\n\n3.所谓jq的success(),error()，以及angular的then方法，都是对原生ajax的\n\nstatus的不同返回值进行封装,例如：200就会执行success函数，404就执行error函数。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/ajax回顾.md","raw":"---\ntitle:  ajax回顾 \ndate: 2017-12-12 17:04:00\ntags: ajax\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78781917)\n\n\n## **jq与原生以及angular中的ajax（长文）**##\n\nhttp://blog.csdn.net/qq_20264891/article/details/78457021\n\n上面是之前写的一篇关于ajax的帖子，里面的集成包xampp的配置方法有点不太科学，\n\n虽然这样可以运行，但感觉不是很美滋滋。\n\n感谢新浪博主@期待下一站幸福\n\n具体参考原文地址：http://blog.sina.com.cn/s/blog_ae1d0a810102wvy6.html\n\n\n\n配置外部服务器，运行后端代码php？\n对于完全是小白的我而言，实在是想都不敢想。因为得学习Ajax，就必须得给服务器的发送请求和等待服务器响。所以就在老师的带领下，开始了服务器的配置。\n\n首先介绍一下，我用的IDE:​HBuilder. 后端语言是php。\n\n我使用的是模拟服务器的软件：XAMPP​\n\n(下载地址：https://www.apachefriends.org/download.html)\n\n然后说一下，我要做什么样的效果：\n\n让一个PHP文件在本地服务器上运行。（对！就是这么简单，我捣鼓了一个多小时...）​\n\n\n好了，接下来我们来看看吧。\n\n\n​\n\n1,安装一个模拟的服务器。\n\n如果你和我一样，没有任何的​Apache，MySQL，tomcat等WEB服务器。那就下载一个XAMPP.【好用于部署一个本地服务器】\n\n​安装完成后，打开的界面是这样子的：\n![这里写图片描述](http://img.blog.csdn.net/20171212150943894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我们可以先点击“start”启动，这时候需要注意的是：可能出现错误。【错误是：端口被占用】。\n\n> ![引用块内容](http://img.blog.csdn.net/20171212151012172?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n解决方法是：点击config--进入Apache（httpd.conf）--找到listen（监听的端口号）进行修改。如图：\n![这里写图片描述](http://img.blog.csdn.net/20171212151304609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n好了，可以重新启动Apache啦。\n\n**2.打开HBuilder，然后新建一个项目。**\n\n注意：新建的项目---一定要在我们刚刚打开的XMAPP安装目录下的​htdocs文件夹下面。\n\n（不要问为啥，这是我一晚上调试出来的经验）​\n![这里写图片描述](http://img.blog.csdn.net/20171212151354297?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n﻿在安装目录下的htdocs，新建文件\n\n3.在HBuilder中的快捷工具栏中找到【浏览器】，打开它的下拉菜单，点击【设置web服务器】。\n\n进入页面点击”外置web服务器“​--选择”新建“\n\n![这里写图片描述](http://img.blog.csdn.net/20171212151434576?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20171212151454782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n添加本地服务器\n\n\n![这里写图片描述](http://img.blog.csdn.net/20171212151518701?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n4.把你写的PHP文件可以在浏览器中，打开了。\n\n这是我的源文件：\n![这里写图片描述](http://img.blog.csdn.net/20171212151552039?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n![这里写图片描述](http://img.blog.csdn.net/20171212151609984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n***OK,接下来才是正文：***\n==\n\n**一、javaScript原生Ajax**\n==\n\n**1.浏览器自带的与服务器交互的对象及附带API**\n\n**该对象是一个全局对象，即位于window对象下。IE与非IE，该对象不同**\n\n非IE && IE7+ : XMLHttpRequest\n\nIE5,IE6: ActiveXObject\n\n**2.兼容创建大法**\n\n```\nvar xhr=null;//初始化变量\n\nif(window.XMLHttpRequest){\n//非IE&&IE7+\n\nxhr = new XMLHttpRequest();\n}\nelse if(window.ActiveXObject){\n\nxhr = new ActiveXObject(\"Microsoft.XMLHTTP\");//不同的IE版本，里面写的东西不一样，具体请自行baidu\n\n}\n```\n**3.创建好之后的后续步骤**\n\nxhr.open()  //该方法用于 **创建**  连接服务端的请求。\n\nxhr.send();  //所有的事情完毕，正式发送请求。\n\n注意：\n\nxhr.open(method,url,async)  请求方式，请求地址，是否异步？(ps:默认为true,异步执行)\n\n设置好open中的传参，接着执行xhr.send()。\n\n**4.如何知道请求与相应成功不成功？？**\n\n这里，xhr对象自带 一个方法，用来检测连接是否成功，以及对xhr创建过程进行监听，\n\n为什么这样说呢？直接看代码：\n\n```\n xhr.onreadystatechange=function(){\n    \n    \tif(xhr.readyState=4&&xhr.status==200){\n    \t\t\n    \t\tdocument.getElementById('box').innerHTML = xhr.responseText;\n    \t}\n    }\n***************上面界定了，请求成功以后，将响应的内容放在我们的box盒子里********\n\n\txhr.open(\"GET\",\"01.php?a=5&b=1\",true);//传参a=5,b=1\n\txhr.send(); \n\t\n//因为上面的方法是异步执行的，因此不用纠结，xhr.open()和send()的位置。\n\n}\n```\n运行结果:\n![这里写图片描述](http://img.blog.csdn.net/20171212145801095?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n附上php的代码：\n\n```\n<?php\necho  \"a为{$_GET['a']},那么b为{$_GET['b']}\"  \n?>\n```\n这里php代码看不懂的话， 可以去http://blog.csdn.net/qq_20264891/article/details/78748217回顾一下PHP 的基本语法。作为一个前端，后端语言要了解其接口和语法，这是最起码的(这个B装的66666)。\n\n\n**说好的监听xhr对象的创建过程呢？**\n```\nxhr.onreadystatechange = function(){\n//这里加上一句话  :\nconsole.log(\"当前的XMLHttpRequest对象的创建进度为\"+xhr.readyState)\n...\n...\n }\n```\n来看打印结果:\n![这里写图片描述](http://img.blog.csdn.net/20171212150218442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可见，每次xhr对象自身状态值改变，都会调用函数，因此导致我们打印的结果发生变化。  由此可得，ajax的创建是分步进行的，查询资料可得：\n\n - 0 对象未创建\n - 1 已与服务器连接\n - 2 服务器已经接受请求\n - 3 服务器正在处理请求\n - 4 服务器将请求下发\n **同时，status也需要有响应的返回值，从服务器传递回来，有个状态值(xhr.status)： **\n如果响应成功，就返回200\n如果没找到，返回404\n其他还有403,5系列等等，不再赘述。\n\n**二、jQuery中的ajax**\n==\n1.load方法\n\n```\n兹有按钮与容器各一个：\n\n<input type=\"button\" value=\"点我加载\" id=\"btn\"/>\n\n<div id=\"box\"></div>\n\n//js如下\n\n\t<script type=\"text/javascript\">\n\t\n\t\t$('#btn').click(function(){\n\t\t\t$('#box').load('03.php')\n\n\t</script>\n\t\n//php如下\n\n<?php\necho \"hello,world!<br/>a  =  {$_POST['a']}<br/>b  =   {$_POST['b']}\"\n?>\n```\n这里，点击按钮，box载入响应值，这个方法是get方法。\n如图：![这里写图片描述](http://img.blog.csdn.net/20171212153748919?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n如果，在load()多传一个json对象:\n\n```\n$('#box').load('03.php',{\n\t\t\t\ta:5,\n\t\t\t\tb:1\n\t\t\t})\n```\n那么这个请求会自动 变成post请求。\n![这里写图片描述](http://img.blog.csdn.net/20171212153930619?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在 Ajax数据载入完毕之后，就能执行回调函数 callback，也就是第三个参数。回调函数\n也可以传递三个可选参数：responseText（请求返回）、textStatus（请求状态)、XMLHttpRequest对象。\n\n```\n$('#btn').click(function () {\n  $('#box').load('03.php', {\n       a:5,\n       b:1\n  }, function (response, status, xhr) {\n        alert('返回的值为：' + response + '，状态为：' + status + '，\n           状态是：' + xhr.statusText);\n  });\n});\n```\n运行结果：\n![这里写图片描述](http://img.blog.csdn.net/20171212154422827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这里的status和xhr.statusText都是经过jQuery进行处理的，原本的值应该对应为：\n200 \n**2.`$.get()和$.post()`**\n\n.load()方法是局部方法，因为他需要一个包含元素的 jQuery对象作为前缀。而$.get()和\n$.post()是全局方法，无须指定某个元素。对于用途而言，.load()适合做静态文件的异步获取，\n而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。\n\n```\n$('#btn').click($.get(url,{json.data},callback(),type){})\n\n/*GET方法与load()方法相比，多了最后一个参数，返回类型，可以设置为\nxml,html,json,text等，一般不需要设置，都是jQuery智能判断返回的。第一个参数：请求\n地址，是必须的，后面的都是可选参数。\n*/\n```\n**`$.post()方法`**\n\n的使用和`$.get()`基本上一致，他们之间的区别也比较隐晦，基本都是背后的\n\n不同，在用户使用上体现不出。具体区别如下：\n\n1.GET请求是通过  URL提交的，而 POST请求则是  HTTP消息实体提交的；\n\n2.GET提交有大小限制（2KB），而  POST方式不受限制；\n\n3.GET方式会被缓存下来，可能有安全性问题，而  POST没有这个问题；\n\n4.GET方式通过`$_GET[]`获取，POST方式通过`$_POST[]`获取。\n**3.`load(),$.get(),$.post()` **的集合：$.ajax\n\n```\n//ajax是jQuery封装的最底层的方法\n\t\t$('btn[submit]')[0].click(function(){\n\t\t\t$.ajax({\n\t\t\t\ttype:\"get\",    //请求方式\n\t\t\t\turl:\"02.php\",  //地址\n\t\t\t\tasync:true,      //异步\n\t\t\t\tsuccess:function(response,status,xhr){alert(response)}, //成功回调函数\n\t\t\t\terror:function(){},//失败回调\n\t\t\t\tdata:$('form').serialize()//表单序列化\n\t\t\t});\n\t\t\t\n\n\t\t})\n```\n\n**三、AngularJs中的ajax**\n==\n\n\n```\n在任一一个控制器中注入http依赖\n\nvar app = angular.module('myApp',[]);\n\n\n//http模块注入到任一一个控制器中\n\napp.controller('ctrl1',function($scope,$http){\n\n$http({ \n\n    method: 'GET', //选择请求方式\n    \n    url: '02.php' //请求地址\n    \n}).then(function successCallback(response) {\n\n        // 请求成功执行代码\n    }, function errorCallback(response) {\n    \n        // 请求失败执行代码\n//语法为：$http.then(success(),fail())\n});\n\n\n\n```\n**声明：v1.5 中$http 的 success 和 error 方法已废弃。使用 then 方法替代。因此千万不要**\n\n```\n$http.success().error()//错误写法！z不能跟jQuery混淆\n```\n\n总结：\n==\nJs/jq/angularjs 中ajax的：\n\n\n**相同点**\n1.都是异步的请求，都支持get,post方法,jq,angular支持(put)。\n\n\n**不同点：**\n\n1.jq中，对于ajax请求的写法非常简单，非常直观。angular中，通过$http模块也进行相应的封装，非常方便。\n\n2.普通的javaScript AJAX请求，如果需要GET方法传参，只能强行用\"？\"追加到url后面，并且不同参数连接要用&进行，非常繁琐。\n\n3.所谓jq的success(),error()，以及angular的then方法，都是对原生ajax的\n\nstatus的不同返回值进行封装,例如：200就会执行success函数，404就执行error函数。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"ajax回顾","published":1,"updated":"2019-05-14T14:30:28.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxj003fckufrusnfuxv","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78781917\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"jq与原生以及angular中的ajax（长文）\"><a href=\"#jq与原生以及angular中的ajax（长文）\" class=\"headerlink\" title=\"jq与原生以及angular中的ajax（长文）\"></a><strong>jq与原生以及angular中的ajax（长文）</strong></h2><p><a href=\"http://blog.csdn.net/qq_20264891/article/details/78457021\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_20264891/article/details/78457021</a></p>\n<p>上面是之前写的一篇关于ajax的帖子，里面的集成包xampp的配置方法有点不太科学，</p>\n<p>虽然这样可以运行，但感觉不是很美滋滋。</p>\n<p>感谢新浪博主@期待下一站幸福</p>\n<p>具体参考原文地址：<a href=\"http://blog.sina.com.cn/s/blog_ae1d0a810102wvy6.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_ae1d0a810102wvy6.html</a></p>\n<p>配置外部服务器，运行后端代码php？<br>对于完全是小白的我而言，实在是想都不敢想。因为得学习Ajax，就必须得给服务器的发送请求和等待服务器响。所以就在老师的带领下，开始了服务器的配置。</p>\n<p>首先介绍一下，我用的IDE:​HBuilder. 后端语言是php。</p>\n<p>我使用的是模拟服务器的软件：XAMPP​</p>\n<p>(下载地址：<a href=\"https://www.apachefriends.org/download.html\" target=\"_blank\" rel=\"noopener\">https://www.apachefriends.org/download.html</a>)</p>\n<p>然后说一下，我要做什么样的效果：</p>\n<p>让一个PHP文件在本地服务器上运行。（对！就是这么简单，我捣鼓了一个多小时…）​</p>\n<p>好了，接下来我们来看看吧。</p>\n<p>​</p>\n<p>1,安装一个模拟的服务器。</p>\n<p>如果你和我一样，没有任何的​Apache，MySQL，tomcat等WEB服务器。那就下载一个XAMPP.【好用于部署一个本地服务器】</p>\n<p>​安装完成后，打开的界面是这样子的：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212150943894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>我们可以先点击“start”启动，这时候需要注意的是：可能出现错误。【错误是：端口被占用】。</p>\n<blockquote>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151012172?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用块内容\" title=\"\" class=\"\">\n                <p>引用块内容</p>\n            </figure>\n</blockquote>\n<p>解决方法是：点击config–进入Apache（httpd.conf）–找到listen（监听的端口号）进行修改。如图：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151304609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>好了，可以重新启动Apache啦。</p>\n<p><strong>2.打开HBuilder，然后新建一个项目。</strong></p>\n<p>注意：新建的项目—一定要在我们刚刚打开的XMAPP安装目录下的​htdocs文件夹下面。</p>\n<p>（不要问为啥，这是我一晚上调试出来的经验）​<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151354297?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>﻿在安装目录下的htdocs，新建文件</p>\n<p>3.在HBuilder中的快捷工具栏中找到【浏览器】，打开它的下拉菜单，点击【设置web服务器】。</p>\n<p>进入页面点击”外置web服务器“​–选择”新建“</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151434576?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151454782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>添加本地服务器</p>\n<p><img src=\"http://img.blog.csdn.net/20171212151518701?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>4.把你写的PHP文件可以在浏览器中，打开了。</p>\n<p>这是我的源文件：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151552039?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151609984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<h1 id=\"OK-接下来才是正文：\"><a href=\"#OK-接下来才是正文：\" class=\"headerlink\" title=\"OK,接下来才是正文：\"></a><strong><em>OK,接下来才是正文：</em></strong></h1><h1 id=\"一、javaScript原生Ajax\"><a href=\"#一、javaScript原生Ajax\" class=\"headerlink\" title=\"一、javaScript原生Ajax\"></a><strong>一、javaScript原生Ajax</strong></h1><p><strong>1.浏览器自带的与服务器交互的对象及附带API</strong></p>\n<p><strong>该对象是一个全局对象，即位于window对象下。IE与非IE，该对象不同</strong></p>\n<p>非IE &amp;&amp; IE7+ : XMLHttpRequest</p>\n<p>IE5,IE6: ActiveXObject</p>\n<p><strong>2.兼容创建大法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr=null;//初始化变量</span><br><span class=\"line\"></span><br><span class=\"line\">if(window.XMLHttpRequest)&#123;</span><br><span class=\"line\">//非IE&amp;&amp;IE7+</span><br><span class=\"line\"></span><br><span class=\"line\">xhr = new XMLHttpRequest();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if(window.ActiveXObject)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);//不同的IE版本，里面写的东西不一样，具体请自行baidu</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.创建好之后的后续步骤</strong></p>\n<p>xhr.open()  //该方法用于 <strong>创建</strong>  连接服务端的请求。</p>\n<p>xhr.send();  //所有的事情完毕，正式发送请求。</p>\n<p>注意：</p>\n<p>xhr.open(method,url,async)  请求方式，请求地址，是否异步？(ps:默认为true,异步执行)</p>\n<p>设置好open中的传参，接着执行xhr.send()。</p>\n<p><strong>4.如何知道请求与相应成功不成功？？</strong></p>\n<p>这里，xhr对象自带 一个方法，用来检测连接是否成功，以及对xhr创建过程进行监听，</p>\n<p>为什么这样说呢？直接看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> xhr.onreadystatechange=function()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \tif(xhr.readyState=4&amp;&amp;xhr.status==200)&#123;</span><br><span class=\"line\">    \t\t</span><br><span class=\"line\">    \t\tdocument.getElementById(&apos;box&apos;).innerHTML = xhr.responseText;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">***************上面界定了，请求成功以后，将响应的内容放在我们的box盒子里********</span><br><span class=\"line\"></span><br><span class=\"line\">\txhr.open(&quot;GET&quot;,&quot;01.php?a=5&amp;b=1&quot;,true);//传参a=5,b=1</span><br><span class=\"line\">\txhr.send(); </span><br><span class=\"line\">\t</span><br><span class=\"line\">//因为上面的方法是异步执行的，因此不用纠结，xhr.open()和send()的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212145801095?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>附上php的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo  &quot;a为&#123;$_GET[&apos;a&apos;]&#125;,那么b为&#123;$_GET[&apos;b&apos;]&#125;&quot;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>这里php代码看不懂的话， 可以去<a href=\"http://blog.csdn.net/qq_20264891/article/details/78748217回顾一下PHP\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_20264891/article/details/78748217回顾一下PHP</a> 的基本语法。作为一个前端，后端语言要了解其接口和语法，这是最起码的(这个B装的66666)。</p>\n<p><strong>说好的监听xhr对象的创建过程呢？</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">//这里加上一句话  :</span><br><span class=\"line\">console.log(&quot;当前的XMLHttpRequest对象的创建进度为&quot;+xhr.readyState)</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>来看打印结果:<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212150218442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>可见，每次xhr对象自身状态值改变，都会调用函数，因此导致我们打印的结果发生变化。  由此可得，ajax的创建是分步进行的，查询资料可得：</p>\n<ul>\n<li>0 对象未创建</li>\n<li>1 已与服务器连接</li>\n<li>2 服务器已经接受请求</li>\n<li>3 服务器正在处理请求</li>\n<li>4 服务器将请求下发<br><strong>同时，status也需要有响应的返回值，从服务器传递回来，有个状态值(xhr.status)： </strong><br>如果响应成功，就返回200<br>如果没找到，返回404<br>其他还有403,5系列等等，不再赘述。</li>\n</ul>\n<h1 id=\"二、jQuery中的ajax\"><a href=\"#二、jQuery中的ajax\" class=\"headerlink\" title=\"二、jQuery中的ajax\"></a><strong>二、jQuery中的ajax</strong></h1><p>1.load方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">兹有按钮与容器各一个：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;点我加载&quot; id=&quot;btn&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//js如下</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t$(&apos;#btn&apos;).click(function()&#123;</span><br><span class=\"line\">\t\t\t$(&apos;#box&apos;).load(&apos;03.php&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">//php如下</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo &quot;hello,world!&lt;br/&gt;a  =  &#123;$_POST[&apos;a&apos;]&#125;&lt;br/&gt;b  =   &#123;$_POST[&apos;b&apos;]&#125;&quot;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>这里，点击按钮，box载入响应值，这个方法是get方法。<br>如图：<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212153748919?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>如果，在load()多传一个json对象:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#box&apos;).load(&apos;03.php&apos;,&#123;</span><br><span class=\"line\">\t\t\t\ta:5,</span><br><span class=\"line\">\t\t\t\tb:1</span><br><span class=\"line\">\t\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<p>那么这个请求会自动 变成post请求。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212153930619?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>在 Ajax数据载入完毕之后，就能执行回调函数 callback，也就是第三个参数。回调函数<br>也可以传递三个可选参数：responseText（请求返回）、textStatus（请求状态)、XMLHttpRequest对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#btn&apos;).click(function () &#123;</span><br><span class=\"line\">  $(&apos;#box&apos;).load(&apos;03.php&apos;, &#123;</span><br><span class=\"line\">       a:5,</span><br><span class=\"line\">       b:1</span><br><span class=\"line\">  &#125;, function (response, status, xhr) &#123;</span><br><span class=\"line\">        alert(&apos;返回的值为：&apos; + response + &apos;，状态为：&apos; + status + &apos;，</span><br><span class=\"line\">           状态是：&apos; + xhr.statusText);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212154422827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>这里的status和xhr.statusText都是经过jQuery进行处理的，原本的值应该对应为：<br>200<br><strong>2.<code>$.get()和$.post()</code></strong></p>\n<p>.load()方法是局部方法，因为他需要一个包含元素的 jQuery对象作为前缀。而$.get()和<br>$.post()是全局方法，无须指定某个元素。对于用途而言，.load()适合做静态文件的异步获取，<br>而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#btn&apos;).click($.get(url,&#123;json.data&#125;,callback(),type)&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/*GET方法与load()方法相比，多了最后一个参数，返回类型，可以设置为</span><br><span class=\"line\">xml,html,json,text等，一般不需要设置，都是jQuery智能判断返回的。第一个参数：请求</span><br><span class=\"line\">地址，是必须的，后面的都是可选参数。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p><strong><code>$.post()方法</code></strong></p>\n<p>的使用和<code>$.get()</code>基本上一致，他们之间的区别也比较隐晦，基本都是背后的</p>\n<p>不同，在用户使用上体现不出。具体区别如下：</p>\n<p>1.GET请求是通过  URL提交的，而 POST请求则是  HTTP消息实体提交的；</p>\n<p>2.GET提交有大小限制（2KB），而  POST方式不受限制；</p>\n<p>3.GET方式会被缓存下来，可能有安全性问题，而  POST没有这个问题；</p>\n<p>4.GET方式通过<code>$_GET[]</code>获取，POST方式通过<code>$_POST[]</code>获取。<br><strong>3.<code>load(),$.get(),$.post()</code> </strong>的集合：$.ajax</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ajax是jQuery封装的最底层的方法</span><br><span class=\"line\">\t\t$(&apos;btn[submit]&apos;)[0].click(function()&#123;</span><br><span class=\"line\">\t\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\t\ttype:&quot;get&quot;,    //请求方式</span><br><span class=\"line\">\t\t\t\turl:&quot;02.php&quot;,  //地址</span><br><span class=\"line\">\t\t\t\tasync:true,      //异步</span><br><span class=\"line\">\t\t\t\tsuccess:function(response,status,xhr)&#123;alert(response)&#125;, //成功回调函数</span><br><span class=\"line\">\t\t\t\terror:function()&#123;&#125;,//失败回调</span><br><span class=\"line\">\t\t\t\tdata:$(&apos;form&apos;).serialize()//表单序列化</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、AngularJs中的ajax\"><a href=\"#三、AngularJs中的ajax\" class=\"headerlink\" title=\"三、AngularJs中的ajax\"></a><strong>三、AngularJs中的ajax</strong></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在任一一个控制器中注入http依赖</span><br><span class=\"line\"></span><br><span class=\"line\">var app = angular.module(&apos;myApp&apos;,[]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//http模块注入到任一一个控制器中</span><br><span class=\"line\"></span><br><span class=\"line\">app.controller(&apos;ctrl1&apos;,function($scope,$http)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">$http(&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    method: &apos;GET&apos;, //选择请求方式</span><br><span class=\"line\">    </span><br><span class=\"line\">    url: &apos;02.php&apos; //请求地址</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;).then(function successCallback(response) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 请求成功执行代码</span><br><span class=\"line\">    &#125;, function errorCallback(response) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        // 请求失败执行代码</span><br><span class=\"line\">//语法为：$http.then(success(),fail())</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>声明：v1.5 中$http 的 success 和 error 方法已废弃。使用 then 方法替代。因此千万不要</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$http.success().error()//错误写法！z不能跟jQuery混淆</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>Js/jq/angularjs 中ajax的：</p>\n<p><strong>相同点</strong><br>1.都是异步的请求，都支持get,post方法,jq,angular支持(put)。</p>\n<p><strong>不同点：</strong></p>\n<p>1.jq中，对于ajax请求的写法非常简单，非常直观。angular中，通过$http模块也进行相应的封装，非常方便。</p>\n<p>2.普通的javaScript AJAX请求，如果需要GET方法传参，只能强行用”？”追加到url后面，并且不同参数连接要用&amp;进行，非常繁琐。</p>\n<p>3.所谓jq的success(),error()，以及angular的then方法，都是对原生ajax的</p>\n<p>status的不同返回值进行封装,例如：200就会执行success函数，404就执行error函数。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78781917\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"jq与原生以及angular中的ajax（长文）\"><a href=\"#jq与原生以及angular中的ajax（长文）\" class=\"headerlink\" title=\"jq与原生以及angular中的ajax（长文）\"></a><strong>jq与原生以及angular中的ajax（长文）</strong></h2><p><a href=\"http://blog.csdn.net/qq_20264891/article/details/78457021\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_20264891/article/details/78457021</a></p>\n<p>上面是之前写的一篇关于ajax的帖子，里面的集成包xampp的配置方法有点不太科学，</p>\n<p>虽然这样可以运行，但感觉不是很美滋滋。</p>\n<p>感谢新浪博主@期待下一站幸福</p>\n<p>具体参考原文地址：<a href=\"http://blog.sina.com.cn/s/blog_ae1d0a810102wvy6.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_ae1d0a810102wvy6.html</a></p>\n<p>配置外部服务器，运行后端代码php？<br>对于完全是小白的我而言，实在是想都不敢想。因为得学习Ajax，就必须得给服务器的发送请求和等待服务器响。所以就在老师的带领下，开始了服务器的配置。</p>\n<p>首先介绍一下，我用的IDE:​HBuilder. 后端语言是php。</p>\n<p>我使用的是模拟服务器的软件：XAMPP​</p>\n<p>(下载地址：<a href=\"https://www.apachefriends.org/download.html\" target=\"_blank\" rel=\"noopener\">https://www.apachefriends.org/download.html</a>)</p>\n<p>然后说一下，我要做什么样的效果：</p>\n<p>让一个PHP文件在本地服务器上运行。（对！就是这么简单，我捣鼓了一个多小时…）​</p>\n<p>好了，接下来我们来看看吧。</p>\n<p>​</p>\n<p>1,安装一个模拟的服务器。</p>\n<p>如果你和我一样，没有任何的​Apache，MySQL，tomcat等WEB服务器。那就下载一个XAMPP.【好用于部署一个本地服务器】</p>\n<p>​安装完成后，打开的界面是这样子的：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212150943894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>我们可以先点击“start”启动，这时候需要注意的是：可能出现错误。【错误是：端口被占用】。</p>\n<blockquote>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151012172?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"引用块内容\" title=\"\" class=\"\">\n                <p>引用块内容</p>\n            </figure>\n</blockquote>\n<p>解决方法是：点击config–进入Apache（httpd.conf）–找到listen（监听的端口号）进行修改。如图：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151304609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>好了，可以重新启动Apache啦。</p>\n<p><strong>2.打开HBuilder，然后新建一个项目。</strong></p>\n<p>注意：新建的项目—一定要在我们刚刚打开的XMAPP安装目录下的​htdocs文件夹下面。</p>\n<p>（不要问为啥，这是我一晚上调试出来的经验）​<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151354297?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>﻿在安装目录下的htdocs，新建文件</p>\n<p>3.在HBuilder中的快捷工具栏中找到【浏览器】，打开它的下拉菜单，点击【设置web服务器】。</p>\n<p>进入页面点击”外置web服务器“​–选择”新建“</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151434576?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151454782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>添加本地服务器</p>\n<p><img src=\"http://img.blog.csdn.net/20171212151518701?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>4.把你写的PHP文件可以在浏览器中，打开了。</p>\n<p>这是我的源文件：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151552039?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212151609984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<h1 id=\"OK-接下来才是正文：\"><a href=\"#OK-接下来才是正文：\" class=\"headerlink\" title=\"OK,接下来才是正文：\"></a><strong><em>OK,接下来才是正文：</em></strong></h1><h1 id=\"一、javaScript原生Ajax\"><a href=\"#一、javaScript原生Ajax\" class=\"headerlink\" title=\"一、javaScript原生Ajax\"></a><strong>一、javaScript原生Ajax</strong></h1><p><strong>1.浏览器自带的与服务器交互的对象及附带API</strong></p>\n<p><strong>该对象是一个全局对象，即位于window对象下。IE与非IE，该对象不同</strong></p>\n<p>非IE &amp;&amp; IE7+ : XMLHttpRequest</p>\n<p>IE5,IE6: ActiveXObject</p>\n<p><strong>2.兼容创建大法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr=null;//初始化变量</span><br><span class=\"line\"></span><br><span class=\"line\">if(window.XMLHttpRequest)&#123;</span><br><span class=\"line\">//非IE&amp;&amp;IE7+</span><br><span class=\"line\"></span><br><span class=\"line\">xhr = new XMLHttpRequest();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if(window.ActiveXObject)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);//不同的IE版本，里面写的东西不一样，具体请自行baidu</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.创建好之后的后续步骤</strong></p>\n<p>xhr.open()  //该方法用于 <strong>创建</strong>  连接服务端的请求。</p>\n<p>xhr.send();  //所有的事情完毕，正式发送请求。</p>\n<p>注意：</p>\n<p>xhr.open(method,url,async)  请求方式，请求地址，是否异步？(ps:默认为true,异步执行)</p>\n<p>设置好open中的传参，接着执行xhr.send()。</p>\n<p><strong>4.如何知道请求与相应成功不成功？？</strong></p>\n<p>这里，xhr对象自带 一个方法，用来检测连接是否成功，以及对xhr创建过程进行监听，</p>\n<p>为什么这样说呢？直接看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> xhr.onreadystatechange=function()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \tif(xhr.readyState=4&amp;&amp;xhr.status==200)&#123;</span><br><span class=\"line\">    \t\t</span><br><span class=\"line\">    \t\tdocument.getElementById(&apos;box&apos;).innerHTML = xhr.responseText;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">***************上面界定了，请求成功以后，将响应的内容放在我们的box盒子里********</span><br><span class=\"line\"></span><br><span class=\"line\">\txhr.open(&quot;GET&quot;,&quot;01.php?a=5&amp;b=1&quot;,true);//传参a=5,b=1</span><br><span class=\"line\">\txhr.send(); </span><br><span class=\"line\">\t</span><br><span class=\"line\">//因为上面的方法是异步执行的，因此不用纠结，xhr.open()和send()的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212145801095?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>附上php的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo  &quot;a为&#123;$_GET[&apos;a&apos;]&#125;,那么b为&#123;$_GET[&apos;b&apos;]&#125;&quot;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>这里php代码看不懂的话， 可以去<a href=\"http://blog.csdn.net/qq_20264891/article/details/78748217回顾一下PHP\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_20264891/article/details/78748217回顾一下PHP</a> 的基本语法。作为一个前端，后端语言要了解其接口和语法，这是最起码的(这个B装的66666)。</p>\n<p><strong>说好的监听xhr对象的创建过程呢？</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">//这里加上一句话  :</span><br><span class=\"line\">console.log(&quot;当前的XMLHttpRequest对象的创建进度为&quot;+xhr.readyState)</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>来看打印结果:<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212150218442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>可见，每次xhr对象自身状态值改变，都会调用函数，因此导致我们打印的结果发生变化。  由此可得，ajax的创建是分步进行的，查询资料可得：</p>\n<ul>\n<li>0 对象未创建</li>\n<li>1 已与服务器连接</li>\n<li>2 服务器已经接受请求</li>\n<li>3 服务器正在处理请求</li>\n<li>4 服务器将请求下发<br><strong>同时，status也需要有响应的返回值，从服务器传递回来，有个状态值(xhr.status)： </strong><br>如果响应成功，就返回200<br>如果没找到，返回404<br>其他还有403,5系列等等，不再赘述。</li>\n</ul>\n<h1 id=\"二、jQuery中的ajax\"><a href=\"#二、jQuery中的ajax\" class=\"headerlink\" title=\"二、jQuery中的ajax\"></a><strong>二、jQuery中的ajax</strong></h1><p>1.load方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">兹有按钮与容器各一个：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;点我加载&quot; id=&quot;btn&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//js如下</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t$(&apos;#btn&apos;).click(function()&#123;</span><br><span class=\"line\">\t\t\t$(&apos;#box&apos;).load(&apos;03.php&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">//php如下</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo &quot;hello,world!&lt;br/&gt;a  =  &#123;$_POST[&apos;a&apos;]&#125;&lt;br/&gt;b  =   &#123;$_POST[&apos;b&apos;]&#125;&quot;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>这里，点击按钮，box载入响应值，这个方法是get方法。<br>如图：<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212153748919?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>如果，在load()多传一个json对象:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#box&apos;).load(&apos;03.php&apos;,&#123;</span><br><span class=\"line\">\t\t\t\ta:5,</span><br><span class=\"line\">\t\t\t\tb:1</span><br><span class=\"line\">\t\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<p>那么这个请求会自动 变成post请求。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212153930619?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>在 Ajax数据载入完毕之后，就能执行回调函数 callback，也就是第三个参数。回调函数<br>也可以传递三个可选参数：responseText（请求返回）、textStatus（请求状态)、XMLHttpRequest对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#btn&apos;).click(function () &#123;</span><br><span class=\"line\">  $(&apos;#box&apos;).load(&apos;03.php&apos;, &#123;</span><br><span class=\"line\">       a:5,</span><br><span class=\"line\">       b:1</span><br><span class=\"line\">  &#125;, function (response, status, xhr) &#123;</span><br><span class=\"line\">        alert(&apos;返回的值为：&apos; + response + &apos;，状态为：&apos; + status + &apos;，</span><br><span class=\"line\">           状态是：&apos; + xhr.statusText);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171212154422827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>这里的status和xhr.statusText都是经过jQuery进行处理的，原本的值应该对应为：<br>200<br><strong>2.<code>$.get()和$.post()</code></strong></p>\n<p>.load()方法是局部方法，因为他需要一个包含元素的 jQuery对象作为前缀。而$.get()和<br>$.post()是全局方法，无须指定某个元素。对于用途而言，.load()适合做静态文件的异步获取，<br>而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#btn&apos;).click($.get(url,&#123;json.data&#125;,callback(),type)&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/*GET方法与load()方法相比，多了最后一个参数，返回类型，可以设置为</span><br><span class=\"line\">xml,html,json,text等，一般不需要设置，都是jQuery智能判断返回的。第一个参数：请求</span><br><span class=\"line\">地址，是必须的，后面的都是可选参数。</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p><strong><code>$.post()方法</code></strong></p>\n<p>的使用和<code>$.get()</code>基本上一致，他们之间的区别也比较隐晦，基本都是背后的</p>\n<p>不同，在用户使用上体现不出。具体区别如下：</p>\n<p>1.GET请求是通过  URL提交的，而 POST请求则是  HTTP消息实体提交的；</p>\n<p>2.GET提交有大小限制（2KB），而  POST方式不受限制；</p>\n<p>3.GET方式会被缓存下来，可能有安全性问题，而  POST没有这个问题；</p>\n<p>4.GET方式通过<code>$_GET[]</code>获取，POST方式通过<code>$_POST[]</code>获取。<br><strong>3.<code>load(),$.get(),$.post()</code> </strong>的集合：$.ajax</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ajax是jQuery封装的最底层的方法</span><br><span class=\"line\">\t\t$(&apos;btn[submit]&apos;)[0].click(function()&#123;</span><br><span class=\"line\">\t\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\t\ttype:&quot;get&quot;,    //请求方式</span><br><span class=\"line\">\t\t\t\turl:&quot;02.php&quot;,  //地址</span><br><span class=\"line\">\t\t\t\tasync:true,      //异步</span><br><span class=\"line\">\t\t\t\tsuccess:function(response,status,xhr)&#123;alert(response)&#125;, //成功回调函数</span><br><span class=\"line\">\t\t\t\terror:function()&#123;&#125;,//失败回调</span><br><span class=\"line\">\t\t\t\tdata:$(&apos;form&apos;).serialize()//表单序列化</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、AngularJs中的ajax\"><a href=\"#三、AngularJs中的ajax\" class=\"headerlink\" title=\"三、AngularJs中的ajax\"></a><strong>三、AngularJs中的ajax</strong></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在任一一个控制器中注入http依赖</span><br><span class=\"line\"></span><br><span class=\"line\">var app = angular.module(&apos;myApp&apos;,[]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//http模块注入到任一一个控制器中</span><br><span class=\"line\"></span><br><span class=\"line\">app.controller(&apos;ctrl1&apos;,function($scope,$http)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">$http(&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    method: &apos;GET&apos;, //选择请求方式</span><br><span class=\"line\">    </span><br><span class=\"line\">    url: &apos;02.php&apos; //请求地址</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;).then(function successCallback(response) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 请求成功执行代码</span><br><span class=\"line\">    &#125;, function errorCallback(response) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        // 请求失败执行代码</span><br><span class=\"line\">//语法为：$http.then(success(),fail())</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>声明：v1.5 中$http 的 success 和 error 方法已废弃。使用 then 方法替代。因此千万不要</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$http.success().error()//错误写法！z不能跟jQuery混淆</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>Js/jq/angularjs 中ajax的：</p>\n<p><strong>相同点</strong><br>1.都是异步的请求，都支持get,post方法,jq,angular支持(put)。</p>\n<p><strong>不同点：</strong></p>\n<p>1.jq中，对于ajax请求的写法非常简单，非常直观。angular中，通过$http模块也进行相应的封装，非常方便。</p>\n<p>2.普通的javaScript AJAX请求，如果需要GET方法传参，只能强行用”？”追加到url后面，并且不同参数连接要用&amp;进行，非常繁琐。</p>\n<p>3.所谓jq的success(),error()，以及angular的then方法，都是对原生ajax的</p>\n<p>status的不同返回值进行封装,例如：200就会执行success函数，404就执行error函数。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"css3原理，结合jquery复习","date":"2018-01-17T03:18:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79019724)\n\n## 0.怪异盒模型 ##\n非IE及IE9及以上， 盒模型的构成为:content\n老IE，IE8及以下， 盒模型为 content+border+padding \n如果有这样一个DIV：\n\n```\ndiv{width:100px;height:100px;border:1px solid black;padding:10px;}\n```\n在非IE下，盒模型为：\n![这里写图片描述](http://img.blog.csdn.net/20180110092905668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在老IE下，盒模型为：\n![这里写图片描述](http://img.blog.csdn.net/20180110092944223?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n由此可见，老IE在计算盒模型时，加入了两个padding和border的值。\n\n## 1.background-size ##\n规定背景的位置。\neg:\n\n```\n#div{background-size:cover;}//覆盖整个div\n#div{background:url(img/123.png) no-repeat;background-size:10% 10%;}//背景图片宽高为原始图片宽高的10%，且不重复\n\n```\n## 2.background-orgin: ##\n//可以选择的值为：content-box、margin-box、padding-box\n\n***content-box、margin-box、padding-box的区别***\n\n①content-box，即采用W3C标准渲染方法，不计算padding和border及margin，得出的盒子\n②padding-box，渲染盒子的时候，把padding当做盒子宽高的组成部分，即在标准盒子模型的基础上，宽高都增加padding px。\n③margin-box，同理，宽高都增加margin-box\n3.border-radius  圆角边框，假如DIV 的  宽 = 高，即正方形，此时，如果border-radius = div 的宽/高，那么此时的div是一个圆形。如果border-radius远远大于div的宽/高，那么还是一个圆形，不会变化。\n因此，background-origin的值，就取决于背景图从哪个盒子模型开始渲染。\n## 4.text-shadow : 水平偏移 垂直偏移 阴影距离文字的z-index距离 颜色 ##\n\n```\n{\ntext-shadow: 225px 0px 0px #FF0000; /*水平偏移225，垂直不偏移 z-index为0 颜色为红色*/\n\n}\n```\n最终效果：\n![这里写图片描述](http://img.blog.csdn.net/20180110095154859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 5.font-face 自定义字体 ##\n兼容度：IE及IE8以下不支持，主流浏览器都支持。\n关于自定义字体，请参见我之前的一篇博客：\n[自定义图标与百度Share API](http://blog.csdn.net/qq_20264891/article/details/78438174)\n## 6.Css3 之 2D转换 (transform)##\n释义：transform 改变;变换\n兼容度：IE9及以上，主流浏览器都兼容。\n下面列举的方法，都位于transform属性之下，例如：transform:rotate()、transform:translate()\n主要的2D转换属性：\n**6.1  位移：  translate()   方法 **\n\n```\ndiv{transform：translate(100px,100px)} /*在原来位置的基础上，x轴移动10px，y轴移动10px*/\n```\n如图所示：\n![这里写图片描述](http://img.blog.csdn.net/20180110101251395?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n原本处于空白位置的DIV，现在x,y轴都平移了正的100px\n**6.2 旋转   rotate() 方法**\n\n```\n```\nimg{transform：rotate(30deg)}\n /*图片顺时针旋转30度，当然，也可以和css伪类配合完成一些效果 ，例如 ：*/\n img:hover{transform:rotate(30deg)} /*鼠标悬停，方可旋转*/\n```\n![这里写图片描述](http://img.blog.csdn.net/20180110102120286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n由此可见，这个效果在一些圆形的图片上最为适用\n\n**6.3 比例/缩放 scale(x轴比例，y轴比例) 方法**\n跟刚才的旋转同理，我们也可以给一个图片设定一:hover伪类，然后来观察效果\n\n```\n/*文档结构：父div包含着一个图片，父div标准盒子模型100x100，原始图片100x100 */\n\ndiv{width:101px;height:101px;overflow:hidden;border:1px solid black;}\n\nimg:hover{transform: scale(1.5,1.5);}\n```\n![这里写图片描述](http://img.blog.csdn.net/20180110102627735?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这个效果也很常见。鼠标放进去放大，鼠标离开变成原始比例。\n关于这一点，可以参照之前的博客：\n[关于CSS3呼吸效果的探究](http://blog.csdn.net/qq_20264891/article/details/78949964)\n**6.4 偏斜/歪斜  skew(x轴偏斜,y轴偏斜)**\n以前见过很多用CSS3做的留言墙，skew属性用的比较多。\n\n```\nimg:hover{transform:skew(30deg,30deg)}\n```\n鉴于这个方法比较扭曲，就不上图了，值得注意的一点是，这个偏移量貌似根据tan来计算的，当我给这个方法传入90deg时，图片会不存在。\n**6.5 矩阵/汇总方法 matrix**\nmartrix()接受6个参数，其实就是对于 平移、旋转、缩放、偏斜的汇总简写。\n具体请参见张鑫旭大神的博客：\n[理解CSS3 transform中的Matrix(矩阵)](http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/)\n## 7. Css3之3D转换 ##（Oprea不支持3D转换）\n**7.1    3D旋转 rotateY()**\n\n```\ndiv:hover{transform: rotateY(180deg)}\n```\n![这里写图片描述](http://img.blog.csdn.net/20180110123324497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n框中的文字，其本身围绕Y轴旋转180°\n\n## 8.Transition 过渡效果 ##\n兼容度：IE9及以下不支持该属性，需要优雅降级\n\n```\ndiv{width:100px;height:100px;background:yellow;transition:width:width 2s;}\ndiv:hover{width:300px;}\n```\n效果如图（鼠标移入，DIV变宽，鼠标移出，自动复原）：\n![鼠标移入，DIV变宽](http://img.blog.csdn.net/20180111092602675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n此时，我们在div:hover中重写了属性width，那么，在原始的div{transition}中，我们要说明，那个属性需要过渡效果，并注明过渡时间，此时肯定是transition:width 2s，如果有多个属性需要过渡效果，那么，就应该给出如下说明：\n\n```\ntransition:all 2s   //所有属性都需要过渡效果，并且所有效果同步过渡的总时长为2s.\n```\n如此一来，就可以实现类似于jquery的效果：\n\n```\n$('div').animate({width:'101px';height:'101px';background:'green';})\n```\n![这里写图片描述](http://img.blog.csdn.net/20180111115416020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n甚至可以规定过渡的delay延时：\n\n```\ntransition-delay:0.5s;  //0.5秒延时以后开始动画效果。\n```\n效果与上图大同小异，不过有0.5s的移入和移出延时。\n其实，在transition里有4个属性，分别是：\n1.过渡的属性名称\n2.过渡的总时长\n3.过渡的方式:线性，缓慢等等\n4.过渡的延时，即多少s以后才开始过渡\n例如：\n\n```\ndiv{\n\ttransition-property: width;\n\ttransition-duration: 1s;\n\ttransition-timing-function: linear;\n\ttransition-delay: 2s;\n}\n```\n可以简写为：\n\n```\ndiv{transition:width 2s linear 2s}\n```\n## 9.CSS3 动画 ##\n之前一篇帖子对于动画部分做了一些探究：\n[关于CSS3呼吸效果的探究 ](http://blog.csdn.net/qq_20264891/article/details/78949964)\n如果对于动画的需求比较复杂，需要持续重复的完成，可以考虑动画效果，如果只是简单的一些效果，完全可以采用transform来自己实现。\n## 10.CSS 3 多列 ##\n\n```\ndiv{\n-moz-column-count:3; /* Firefox */\n-webkit-column-count:3; /* Safari and Chrome */\ncolumn-count:3;\n}\n/*将一个DIV分为三列*/\n```\n![这里写图片描述](http://img.blog.csdn.net/20180111133322968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n以及最后的最后，有一个允许用户自定义元素大小(可拖拽拉伸)的属性\n\n```\ndiv\n{\nborder:2px solid;\npadding:10px 40px; \nwidth:300px;\nresize:both;\noverflow:auto;\n}\n```\n![这里写图片描述](http://img.blog.csdn.net/20180111135633726?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/css3原理，结合jquery复习.md","raw":"---\ntitle: css3原理，结合jquery复习\ndate: 2018-01-17 11:18:00\ntags: css3\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79019724)\n\n## 0.怪异盒模型 ##\n非IE及IE9及以上， 盒模型的构成为:content\n老IE，IE8及以下， 盒模型为 content+border+padding \n如果有这样一个DIV：\n\n```\ndiv{width:100px;height:100px;border:1px solid black;padding:10px;}\n```\n在非IE下，盒模型为：\n![这里写图片描述](http://img.blog.csdn.net/20180110092905668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在老IE下，盒模型为：\n![这里写图片描述](http://img.blog.csdn.net/20180110092944223?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n由此可见，老IE在计算盒模型时，加入了两个padding和border的值。\n\n## 1.background-size ##\n规定背景的位置。\neg:\n\n```\n#div{background-size:cover;}//覆盖整个div\n#div{background:url(img/123.png) no-repeat;background-size:10% 10%;}//背景图片宽高为原始图片宽高的10%，且不重复\n\n```\n## 2.background-orgin: ##\n//可以选择的值为：content-box、margin-box、padding-box\n\n***content-box、margin-box、padding-box的区别***\n\n①content-box，即采用W3C标准渲染方法，不计算padding和border及margin，得出的盒子\n②padding-box，渲染盒子的时候，把padding当做盒子宽高的组成部分，即在标准盒子模型的基础上，宽高都增加padding px。\n③margin-box，同理，宽高都增加margin-box\n3.border-radius  圆角边框，假如DIV 的  宽 = 高，即正方形，此时，如果border-radius = div 的宽/高，那么此时的div是一个圆形。如果border-radius远远大于div的宽/高，那么还是一个圆形，不会变化。\n因此，background-origin的值，就取决于背景图从哪个盒子模型开始渲染。\n## 4.text-shadow : 水平偏移 垂直偏移 阴影距离文字的z-index距离 颜色 ##\n\n```\n{\ntext-shadow: 225px 0px 0px #FF0000; /*水平偏移225，垂直不偏移 z-index为0 颜色为红色*/\n\n}\n```\n最终效果：\n![这里写图片描述](http://img.blog.csdn.net/20180110095154859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 5.font-face 自定义字体 ##\n兼容度：IE及IE8以下不支持，主流浏览器都支持。\n关于自定义字体，请参见我之前的一篇博客：\n[自定义图标与百度Share API](http://blog.csdn.net/qq_20264891/article/details/78438174)\n## 6.Css3 之 2D转换 (transform)##\n释义：transform 改变;变换\n兼容度：IE9及以上，主流浏览器都兼容。\n下面列举的方法，都位于transform属性之下，例如：transform:rotate()、transform:translate()\n主要的2D转换属性：\n**6.1  位移：  translate()   方法 **\n\n```\ndiv{transform：translate(100px,100px)} /*在原来位置的基础上，x轴移动10px，y轴移动10px*/\n```\n如图所示：\n![这里写图片描述](http://img.blog.csdn.net/20180110101251395?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n原本处于空白位置的DIV，现在x,y轴都平移了正的100px\n**6.2 旋转   rotate() 方法**\n\n```\n```\nimg{transform：rotate(30deg)}\n /*图片顺时针旋转30度，当然，也可以和css伪类配合完成一些效果 ，例如 ：*/\n img:hover{transform:rotate(30deg)} /*鼠标悬停，方可旋转*/\n```\n![这里写图片描述](http://img.blog.csdn.net/20180110102120286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n由此可见，这个效果在一些圆形的图片上最为适用\n\n**6.3 比例/缩放 scale(x轴比例，y轴比例) 方法**\n跟刚才的旋转同理，我们也可以给一个图片设定一:hover伪类，然后来观察效果\n\n```\n/*文档结构：父div包含着一个图片，父div标准盒子模型100x100，原始图片100x100 */\n\ndiv{width:101px;height:101px;overflow:hidden;border:1px solid black;}\n\nimg:hover{transform: scale(1.5,1.5);}\n```\n![这里写图片描述](http://img.blog.csdn.net/20180110102627735?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这个效果也很常见。鼠标放进去放大，鼠标离开变成原始比例。\n关于这一点，可以参照之前的博客：\n[关于CSS3呼吸效果的探究](http://blog.csdn.net/qq_20264891/article/details/78949964)\n**6.4 偏斜/歪斜  skew(x轴偏斜,y轴偏斜)**\n以前见过很多用CSS3做的留言墙，skew属性用的比较多。\n\n```\nimg:hover{transform:skew(30deg,30deg)}\n```\n鉴于这个方法比较扭曲，就不上图了，值得注意的一点是，这个偏移量貌似根据tan来计算的，当我给这个方法传入90deg时，图片会不存在。\n**6.5 矩阵/汇总方法 matrix**\nmartrix()接受6个参数，其实就是对于 平移、旋转、缩放、偏斜的汇总简写。\n具体请参见张鑫旭大神的博客：\n[理解CSS3 transform中的Matrix(矩阵)](http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/)\n## 7. Css3之3D转换 ##（Oprea不支持3D转换）\n**7.1    3D旋转 rotateY()**\n\n```\ndiv:hover{transform: rotateY(180deg)}\n```\n![这里写图片描述](http://img.blog.csdn.net/20180110123324497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n框中的文字，其本身围绕Y轴旋转180°\n\n## 8.Transition 过渡效果 ##\n兼容度：IE9及以下不支持该属性，需要优雅降级\n\n```\ndiv{width:100px;height:100px;background:yellow;transition:width:width 2s;}\ndiv:hover{width:300px;}\n```\n效果如图（鼠标移入，DIV变宽，鼠标移出，自动复原）：\n![鼠标移入，DIV变宽](http://img.blog.csdn.net/20180111092602675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n此时，我们在div:hover中重写了属性width，那么，在原始的div{transition}中，我们要说明，那个属性需要过渡效果，并注明过渡时间，此时肯定是transition:width 2s，如果有多个属性需要过渡效果，那么，就应该给出如下说明：\n\n```\ntransition:all 2s   //所有属性都需要过渡效果，并且所有效果同步过渡的总时长为2s.\n```\n如此一来，就可以实现类似于jquery的效果：\n\n```\n$('div').animate({width:'101px';height:'101px';background:'green';})\n```\n![这里写图片描述](http://img.blog.csdn.net/20180111115416020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n甚至可以规定过渡的delay延时：\n\n```\ntransition-delay:0.5s;  //0.5秒延时以后开始动画效果。\n```\n效果与上图大同小异，不过有0.5s的移入和移出延时。\n其实，在transition里有4个属性，分别是：\n1.过渡的属性名称\n2.过渡的总时长\n3.过渡的方式:线性，缓慢等等\n4.过渡的延时，即多少s以后才开始过渡\n例如：\n\n```\ndiv{\n\ttransition-property: width;\n\ttransition-duration: 1s;\n\ttransition-timing-function: linear;\n\ttransition-delay: 2s;\n}\n```\n可以简写为：\n\n```\ndiv{transition:width 2s linear 2s}\n```\n## 9.CSS3 动画 ##\n之前一篇帖子对于动画部分做了一些探究：\n[关于CSS3呼吸效果的探究 ](http://blog.csdn.net/qq_20264891/article/details/78949964)\n如果对于动画的需求比较复杂，需要持续重复的完成，可以考虑动画效果，如果只是简单的一些效果，完全可以采用transform来自己实现。\n## 10.CSS 3 多列 ##\n\n```\ndiv{\n-moz-column-count:3; /* Firefox */\n-webkit-column-count:3; /* Safari and Chrome */\ncolumn-count:3;\n}\n/*将一个DIV分为三列*/\n```\n![这里写图片描述](http://img.blog.csdn.net/20180111133322968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n以及最后的最后，有一个允许用户自定义元素大小(可拖拽拉伸)的属性\n\n```\ndiv\n{\nborder:2px solid;\npadding:10px 40px; \nwidth:300px;\nresize:both;\noverflow:auto;\n}\n```\n![这里写图片描述](http://img.blog.csdn.net/20180111135633726?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"css3原理，结合jquery复习","published":1,"updated":"2019-05-14T14:30:28.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxm003ickuf1zxpndm0","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79019724\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"0-怪异盒模型\"><a href=\"#0-怪异盒模型\" class=\"headerlink\" title=\"0.怪异盒模型\"></a>0.怪异盒模型</h2><p>非IE及IE9及以上， 盒模型的构成为:content<br>老IE，IE8及以下， 盒模型为 content+border+padding<br>如果有这样一个DIV：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;width:100px;height:100px;border:1px solid black;padding:10px;&#125;</span><br></pre></td></tr></table></figure>\n<p>在非IE下，盒模型为：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110092905668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>在老IE下，盒模型为：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110092944223?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>由此可见，老IE在计算盒模型时，加入了两个padding和border的值。</p>\n<h2 id=\"1-background-size\"><a href=\"#1-background-size\" class=\"headerlink\" title=\"1.background-size\"></a>1.background-size</h2><p>规定背景的位置。<br>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#div&#123;background-size:cover;&#125;//覆盖整个div</span><br><span class=\"line\">#div&#123;background:url(img/123.png) no-repeat;background-size:10% 10%;&#125;//背景图片宽高为原始图片宽高的10%，且不重复</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-background-orgin\"><a href=\"#2-background-orgin\" class=\"headerlink\" title=\"2.background-orgin:\"></a>2.background-orgin:</h2><p>//可以选择的值为：content-box、margin-box、padding-box</p>\n<p><strong><em>content-box、margin-box、padding-box的区别</em></strong></p>\n<p>①content-box，即采用W3C标准渲染方法，不计算padding和border及margin，得出的盒子<br>②padding-box，渲染盒子的时候，把padding当做盒子宽高的组成部分，即在标准盒子模型的基础上，宽高都增加padding px。<br>③margin-box，同理，宽高都增加margin-box<br>3.border-radius  圆角边框，假如DIV 的  宽 = 高，即正方形，此时，如果border-radius = div 的宽/高，那么此时的div是一个圆形。如果border-radius远远大于div的宽/高，那么还是一个圆形，不会变化。<br>因此，background-origin的值，就取决于背景图从哪个盒子模型开始渲染。</p>\n<h2 id=\"4-text-shadow-水平偏移-垂直偏移-阴影距离文字的z-index距离-颜色\"><a href=\"#4-text-shadow-水平偏移-垂直偏移-阴影距离文字的z-index距离-颜色\" class=\"headerlink\" title=\"4.text-shadow : 水平偏移 垂直偏移 阴影距离文字的z-index距离 颜色\"></a>4.text-shadow : 水平偏移 垂直偏移 阴影距离文字的z-index距离 颜色</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">text-shadow: 225px 0px 0px #FF0000; /*水平偏移225，垂直不偏移 z-index为0 颜色为红色*/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110095154859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<h2 id=\"5-font-face-自定义字体\"><a href=\"#5-font-face-自定义字体\" class=\"headerlink\" title=\"5.font-face 自定义字体\"></a>5.font-face 自定义字体</h2><p>兼容度：IE及IE8以下不支持，主流浏览器都支持。<br>关于自定义字体，请参见我之前的一篇博客：<br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78438174\" target=\"_blank\" rel=\"noopener\">自定义图标与百度Share API</a></p>\n<h2 id=\"6-Css3-之-2D转换-transform\"><a href=\"#6-Css3-之-2D转换-transform\" class=\"headerlink\" title=\"6.Css3 之 2D转换 (transform)\"></a>6.Css3 之 2D转换 (transform)</h2><p>释义：transform 改变;变换<br>兼容度：IE9及以上，主流浏览器都兼容。<br>下面列举的方法，都位于transform属性之下，例如：transform:rotate()、transform:translate()<br>主要的2D转换属性：<br><strong>6.1  位移：  translate()   方法 </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;transform：translate(100px,100px)&#125; /*在原来位置的基础上，x轴移动10px，y轴移动10px*/</span><br></pre></td></tr></table></figure>\n<p>如图所示：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110101251395?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>原本处于空白位置的DIV，现在x,y轴都平移了正的100px<br><strong>6.2 旋转   rotate() 方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">img&#123;transform：rotate(30deg)&#125;</span><br><span class=\"line\"> /*图片顺时针旋转30度，当然，也可以和css伪类配合完成一些效果 ，例如 ：*/</span><br><span class=\"line\"> img:hover&#123;transform:rotate(30deg)&#125; /*鼠标悬停，方可旋转*/</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110102120286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>由此可见，这个效果在一些圆形的图片上最为适用</p>\n<p><strong>6.3 比例/缩放 scale(x轴比例，y轴比例) 方法</strong><br>跟刚才的旋转同理，我们也可以给一个图片设定一:hover伪类，然后来观察效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*文档结构：父div包含着一个图片，父div标准盒子模型100x100，原始图片100x100 */</span><br><span class=\"line\"></span><br><span class=\"line\">div&#123;width:101px;height:101px;overflow:hidden;border:1px solid black;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">img:hover&#123;transform: scale(1.5,1.5);&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110102627735?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>这个效果也很常见。鼠标放进去放大，鼠标离开变成原始比例。<br>关于这一点，可以参照之前的博客：<br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78949964\" target=\"_blank\" rel=\"noopener\">关于CSS3呼吸效果的探究</a><br><strong>6.4 偏斜/歪斜  skew(x轴偏斜,y轴偏斜)</strong><br>以前见过很多用CSS3做的留言墙，skew属性用的比较多。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img:hover&#123;transform:skew(30deg,30deg)&#125;</span><br></pre></td></tr></table></figure>\n<p>鉴于这个方法比较扭曲，就不上图了，值得注意的一点是，这个偏移量貌似根据tan来计算的，当我给这个方法传入90deg时，图片会不存在。<br><strong>6.5 矩阵/汇总方法 matrix</strong><br>martrix()接受6个参数，其实就是对于 平移、旋转、缩放、偏斜的汇总简写。<br>具体请参见张鑫旭大神的博客：<br><a href=\"http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/\" target=\"_blank\" rel=\"noopener\">理解CSS3 transform中的Matrix(矩阵)</a></p>\n<h2 id=\"7-Css3之3D转换-（Oprea不支持3D转换）\"><a href=\"#7-Css3之3D转换-（Oprea不支持3D转换）\" class=\"headerlink\" title=\"7. Css3之3D转换 ##（Oprea不支持3D转换）\"></a>7. Css3之3D转换 ##（Oprea不支持3D转换）</h2><p><strong>7.1    3D旋转 rotateY()</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div:hover&#123;transform: rotateY(180deg)&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110123324497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>框中的文字，其本身围绕Y轴旋转180°</p>\n<h2 id=\"8-Transition-过渡效果\"><a href=\"#8-Transition-过渡效果\" class=\"headerlink\" title=\"8.Transition 过渡效果\"></a>8.Transition 过渡效果</h2><p>兼容度：IE9及以下不支持该属性，需要优雅降级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;width:100px;height:100px;background:yellow;transition:width:width 2s;&#125;</span><br><span class=\"line\">div:hover&#123;width:300px;&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如图（鼠标移入，DIV变宽，鼠标移出，自动复原）：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180111092602675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"鼠标移入，DIV变宽\" title=\"\" class=\"\">\n                <p>鼠标移入，DIV变宽</p>\n            </figure></p>\n<p>此时，我们在div:hover中重写了属性width，那么，在原始的div{transition}中，我们要说明，那个属性需要过渡效果，并注明过渡时间，此时肯定是transition:width 2s，如果有多个属性需要过渡效果，那么，就应该给出如下说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition:all 2s   //所有属性都需要过渡效果，并且所有效果同步过渡的总时长为2s.</span><br></pre></td></tr></table></figure>\n<p>如此一来，就可以实现类似于jquery的效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;div&apos;).animate(&#123;width:&apos;101px&apos;;height:&apos;101px&apos;;background:&apos;green&apos;;&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180111115416020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>甚至可以规定过渡的delay延时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-delay:0.5s;  //0.5秒延时以后开始动画效果。</span><br></pre></td></tr></table></figure>\n<p>效果与上图大同小异，不过有0.5s的移入和移出延时。<br>其实，在transition里有4个属性，分别是：<br>1.过渡的属性名称<br>2.过渡的总时长<br>3.过渡的方式:线性，缓慢等等<br>4.过渡的延时，即多少s以后才开始过渡<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">\ttransition-property: width;</span><br><span class=\"line\">\ttransition-duration: 1s;</span><br><span class=\"line\">\ttransition-timing-function: linear;</span><br><span class=\"line\">\ttransition-delay: 2s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;transition:width 2s linear 2s&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-CSS3-动画\"><a href=\"#9-CSS3-动画\" class=\"headerlink\" title=\"9.CSS3 动画\"></a>9.CSS3 动画</h2><p>之前一篇帖子对于动画部分做了一些探究：<br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78949964\" target=\"_blank\" rel=\"noopener\">关于CSS3呼吸效果的探究 </a><br>如果对于动画的需求比较复杂，需要持续重复的完成，可以考虑动画效果，如果只是简单的一些效果，完全可以采用transform来自己实现。</p>\n<h2 id=\"10-CSS-3-多列\"><a href=\"#10-CSS-3-多列\" class=\"headerlink\" title=\"10.CSS 3 多列\"></a>10.CSS 3 多列</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">-moz-column-count:3; /* Firefox */</span><br><span class=\"line\">-webkit-column-count:3; /* Safari and Chrome */</span><br><span class=\"line\">column-count:3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*将一个DIV分为三列*/</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180111133322968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>以及最后的最后，有一个允许用户自定义元素大小(可拖拽拉伸)的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">border:2px solid;</span><br><span class=\"line\">padding:10px 40px; </span><br><span class=\"line\">width:300px;</span><br><span class=\"line\">resize:both;</span><br><span class=\"line\">overflow:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180111135633726?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79019724\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"0-怪异盒模型\"><a href=\"#0-怪异盒模型\" class=\"headerlink\" title=\"0.怪异盒模型\"></a>0.怪异盒模型</h2><p>非IE及IE9及以上， 盒模型的构成为:content<br>老IE，IE8及以下， 盒模型为 content+border+padding<br>如果有这样一个DIV：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;width:100px;height:100px;border:1px solid black;padding:10px;&#125;</span><br></pre></td></tr></table></figure>\n<p>在非IE下，盒模型为：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110092905668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>在老IE下，盒模型为：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110092944223?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>由此可见，老IE在计算盒模型时，加入了两个padding和border的值。</p>\n<h2 id=\"1-background-size\"><a href=\"#1-background-size\" class=\"headerlink\" title=\"1.background-size\"></a>1.background-size</h2><p>规定背景的位置。<br>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#div&#123;background-size:cover;&#125;//覆盖整个div</span><br><span class=\"line\">#div&#123;background:url(img/123.png) no-repeat;background-size:10% 10%;&#125;//背景图片宽高为原始图片宽高的10%，且不重复</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-background-orgin\"><a href=\"#2-background-orgin\" class=\"headerlink\" title=\"2.background-orgin:\"></a>2.background-orgin:</h2><p>//可以选择的值为：content-box、margin-box、padding-box</p>\n<p><strong><em>content-box、margin-box、padding-box的区别</em></strong></p>\n<p>①content-box，即采用W3C标准渲染方法，不计算padding和border及margin，得出的盒子<br>②padding-box，渲染盒子的时候，把padding当做盒子宽高的组成部分，即在标准盒子模型的基础上，宽高都增加padding px。<br>③margin-box，同理，宽高都增加margin-box<br>3.border-radius  圆角边框，假如DIV 的  宽 = 高，即正方形，此时，如果border-radius = div 的宽/高，那么此时的div是一个圆形。如果border-radius远远大于div的宽/高，那么还是一个圆形，不会变化。<br>因此，background-origin的值，就取决于背景图从哪个盒子模型开始渲染。</p>\n<h2 id=\"4-text-shadow-水平偏移-垂直偏移-阴影距离文字的z-index距离-颜色\"><a href=\"#4-text-shadow-水平偏移-垂直偏移-阴影距离文字的z-index距离-颜色\" class=\"headerlink\" title=\"4.text-shadow : 水平偏移 垂直偏移 阴影距离文字的z-index距离 颜色\"></a>4.text-shadow : 水平偏移 垂直偏移 阴影距离文字的z-index距离 颜色</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">text-shadow: 225px 0px 0px #FF0000; /*水平偏移225，垂直不偏移 z-index为0 颜色为红色*/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110095154859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<h2 id=\"5-font-face-自定义字体\"><a href=\"#5-font-face-自定义字体\" class=\"headerlink\" title=\"5.font-face 自定义字体\"></a>5.font-face 自定义字体</h2><p>兼容度：IE及IE8以下不支持，主流浏览器都支持。<br>关于自定义字体，请参见我之前的一篇博客：<br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78438174\" target=\"_blank\" rel=\"noopener\">自定义图标与百度Share API</a></p>\n<h2 id=\"6-Css3-之-2D转换-transform\"><a href=\"#6-Css3-之-2D转换-transform\" class=\"headerlink\" title=\"6.Css3 之 2D转换 (transform)\"></a>6.Css3 之 2D转换 (transform)</h2><p>释义：transform 改变;变换<br>兼容度：IE9及以上，主流浏览器都兼容。<br>下面列举的方法，都位于transform属性之下，例如：transform:rotate()、transform:translate()<br>主要的2D转换属性：<br><strong>6.1  位移：  translate()   方法 </strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;transform：translate(100px,100px)&#125; /*在原来位置的基础上，x轴移动10px，y轴移动10px*/</span><br></pre></td></tr></table></figure>\n<p>如图所示：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110101251395?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure></p>\n<p>原本处于空白位置的DIV，现在x,y轴都平移了正的100px<br><strong>6.2 旋转   rotate() 方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">img&#123;transform：rotate(30deg)&#125;</span><br><span class=\"line\"> /*图片顺时针旋转30度，当然，也可以和css伪类配合完成一些效果 ，例如 ：*/</span><br><span class=\"line\"> img:hover&#123;transform:rotate(30deg)&#125; /*鼠标悬停，方可旋转*/</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110102120286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>由此可见，这个效果在一些圆形的图片上最为适用</p>\n<p><strong>6.3 比例/缩放 scale(x轴比例，y轴比例) 方法</strong><br>跟刚才的旋转同理，我们也可以给一个图片设定一:hover伪类，然后来观察效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*文档结构：父div包含着一个图片，父div标准盒子模型100x100，原始图片100x100 */</span><br><span class=\"line\"></span><br><span class=\"line\">div&#123;width:101px;height:101px;overflow:hidden;border:1px solid black;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">img:hover&#123;transform: scale(1.5,1.5);&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110102627735?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>这个效果也很常见。鼠标放进去放大，鼠标离开变成原始比例。<br>关于这一点，可以参照之前的博客：<br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78949964\" target=\"_blank\" rel=\"noopener\">关于CSS3呼吸效果的探究</a><br><strong>6.4 偏斜/歪斜  skew(x轴偏斜,y轴偏斜)</strong><br>以前见过很多用CSS3做的留言墙，skew属性用的比较多。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img:hover&#123;transform:skew(30deg,30deg)&#125;</span><br></pre></td></tr></table></figure>\n<p>鉴于这个方法比较扭曲，就不上图了，值得注意的一点是，这个偏移量貌似根据tan来计算的，当我给这个方法传入90deg时，图片会不存在。<br><strong>6.5 矩阵/汇总方法 matrix</strong><br>martrix()接受6个参数，其实就是对于 平移、旋转、缩放、偏斜的汇总简写。<br>具体请参见张鑫旭大神的博客：<br><a href=\"http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/\" target=\"_blank\" rel=\"noopener\">理解CSS3 transform中的Matrix(矩阵)</a></p>\n<h2 id=\"7-Css3之3D转换-（Oprea不支持3D转换）\"><a href=\"#7-Css3之3D转换-（Oprea不支持3D转换）\" class=\"headerlink\" title=\"7. Css3之3D转换 ##（Oprea不支持3D转换）\"></a>7. Css3之3D转换 ##（Oprea不支持3D转换）</h2><p><strong>7.1    3D旋转 rotateY()</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div:hover&#123;transform: rotateY(180deg)&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180110123324497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>框中的文字，其本身围绕Y轴旋转180°</p>\n<h2 id=\"8-Transition-过渡效果\"><a href=\"#8-Transition-过渡效果\" class=\"headerlink\" title=\"8.Transition 过渡效果\"></a>8.Transition 过渡效果</h2><p>兼容度：IE9及以下不支持该属性，需要优雅降级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;width:100px;height:100px;background:yellow;transition:width:width 2s;&#125;</span><br><span class=\"line\">div:hover&#123;width:300px;&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如图（鼠标移入，DIV变宽，鼠标移出，自动复原）：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180111092602675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"鼠标移入，DIV变宽\" title=\"\" class=\"\">\n                <p>鼠标移入，DIV变宽</p>\n            </figure></p>\n<p>此时，我们在div:hover中重写了属性width，那么，在原始的div{transition}中，我们要说明，那个属性需要过渡效果，并注明过渡时间，此时肯定是transition:width 2s，如果有多个属性需要过渡效果，那么，就应该给出如下说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition:all 2s   //所有属性都需要过渡效果，并且所有效果同步过渡的总时长为2s.</span><br></pre></td></tr></table></figure>\n<p>如此一来，就可以实现类似于jquery的效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;div&apos;).animate(&#123;width:&apos;101px&apos;;height:&apos;101px&apos;;background:&apos;green&apos;;&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180111115416020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>甚至可以规定过渡的delay延时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transition-delay:0.5s;  //0.5秒延时以后开始动画效果。</span><br></pre></td></tr></table></figure>\n<p>效果与上图大同小异，不过有0.5s的移入和移出延时。<br>其实，在transition里有4个属性，分别是：<br>1.过渡的属性名称<br>2.过渡的总时长<br>3.过渡的方式:线性，缓慢等等<br>4.过渡的延时，即多少s以后才开始过渡<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">\ttransition-property: width;</span><br><span class=\"line\">\ttransition-duration: 1s;</span><br><span class=\"line\">\ttransition-timing-function: linear;</span><br><span class=\"line\">\ttransition-delay: 2s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;transition:width 2s linear 2s&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-CSS3-动画\"><a href=\"#9-CSS3-动画\" class=\"headerlink\" title=\"9.CSS3 动画\"></a>9.CSS3 动画</h2><p>之前一篇帖子对于动画部分做了一些探究：<br><a href=\"http://blog.csdn.net/qq_20264891/article/details/78949964\" target=\"_blank\" rel=\"noopener\">关于CSS3呼吸效果的探究 </a><br>如果对于动画的需求比较复杂，需要持续重复的完成，可以考虑动画效果，如果只是简单的一些效果，完全可以采用transform来自己实现。</p>\n<h2 id=\"10-CSS-3-多列\"><a href=\"#10-CSS-3-多列\" class=\"headerlink\" title=\"10.CSS 3 多列\"></a>10.CSS 3 多列</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div&#123;</span><br><span class=\"line\">-moz-column-count:3; /* Firefox */</span><br><span class=\"line\">-webkit-column-count:3; /* Safari and Chrome */</span><br><span class=\"line\">column-count:3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*将一个DIV分为三列*/</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180111133322968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>以及最后的最后，有一个允许用户自定义元素大小(可拖拽拉伸)的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">border:2px solid;</span><br><span class=\"line\">padding:10px 40px; </span><br><span class=\"line\">width:300px;</span><br><span class=\"line\">resize:both;</span><br><span class=\"line\">overflow:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180111135633726?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"hello-sql","date":"2019-06-11T06:58:10.000Z","reward":true,"comment":true,"_content":"本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/91437256](https://blog.csdn.net/qq_20264891/article/details/91437256)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n## 前置条件\n1. [廖雪峰 sql 教程](https://www.liaoxuefeng.com/wiki/1177760294764384)\n2. [alasql github](https://github.com/agershun/alasql)\n3. 新建一个项目 `$ npm i alasql` \n## 一、基本语法\n根据示例 [https://github.com/agershun/alasql](https://github.com/agershun/alasql) 学习基本语法\n#### 1.建表( CREATE TABLE)\n```sql\nalasql(`\nCREATE TABLE users (age number, name string, money number);\n`);\n```\n#### 2. 插入数据(INSERT INTO {table})\n```sql\nalasql(`\nINSERT INTO users VALUES (25,'张三', 100);\n`):\n```\n然后确认一下数据是否真的写入了\n```javascript\nconst mysql = alasql('\n\nSELECT *FROM users;\n\n');\n\nconsole.log(mysql); // [ { age: 25, name: '张三', money: 100 } ]\n```\n于是写个遍历，插入更多数据，以供后面操作。\n```javascript\n...\nfor(let i = 0; i< 100; i++) {\n    const sql = `INSERT INTO users VALUES (${i}, '张${i}', ${i})`;\n    alasql(sql);\n}\nconst mysql = alasql('\nSELECT * FROM users;\n');\nconsole.log(mysql);\n// 输出：\n[ { age: 25, name: '张三', money: 100 },\n  { age: 0, name: '张0', money: 0 },\n  { age: 1, name: '张1', money: 1 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n// ...\n { age: 99, name: '张99', money: 99 },\n```\n#### 3. SELECT 语句\n望文生义， SELECT 就是选中，命中。选中的对象是啥呢？其实就是表的 \"列\" column。\n举例：\n```sql\n// 选中 users 表中所有的列\nSELECT * FROM users;\n\n// 只选中 name 这一列\nSELECT name FROM users;\n\n// 选中 name, age 两列\n SELECT name,age FROM users;\n```\n如果希望返回的结果集可以自定义列名（column） ，这种操作称之为 **\"投影\"**， 可以使用语法 :\n```sql\nSELECT 列1 别名1, 列2 别名2 FROM users;\n```\n举个 🌰:\n```sql\n// 原 column 名为 name\n...\n[name]\n张三\n李四\n王麻子\n...\n\nSELECT name '姓名' FROM users;\n// 输出\n...\n[姓名]\n张三\n李四\n王麻子\n...\n```\n#### 4. WHERE 语句\n现在，从表中筛选出 age > 90 的：\n```javascript\n...\nconst mysql = alasql(`SELECT * FROM users WHERE age>90;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 91, name: '张91', money: 91 },\n  { age: 92, name: '张92', money: 92 },\n  { age: 93, name: '张93', money: 93 },\n  { age: 94, name: '张94', money: 94 },\n  { age: 95, name: '张95', money: 95 },\n  { age: 96, name: '张96', money: 96 },\n  { age: 97, name: '张97', money: 97 },\n  { age: 98, name: '张98', money: 98 },\n  { age: 99, name: '张99', money: 99 } ]\n```\n#### 5. 联合条件\n联合条件，即多条件叠加。是为了提高命中数据的准确度，达到准确查找想要数据的目的。\n##### AND\n```javascript\n...\nconst mysql = alasql(`SELECT * FROM users WHERE age=60 AND money=60;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 60, name: '张60', money: 60 } ]\n```\n##### OR\n```javascript\n...\nconst mysql = alasql(`SELECT * FROM users WHERE age=60 OR money=61;`);\nconsole.log(mysql);\n// 输出：\n [ \n { age: 60, name: '张60', money: 60 },\n  { age: 61, name: '张61', money: 61 } \n  ]\n```\n##### NOT\n查询 !(age>=10)\n```javascript\n...\nconst mysql = alasql(`SELECT * FROM users WHERE NOT age>=10;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 0 },\n  { age: 1, name: '张1', money: 1 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n  { age: 5, name: '张5', money: 5 },\n  { age: 6, name: '张6', money: 6 },\n  { age: 7, name: '张7', money: 7 },\n  { age: 8, name: '张8', money: 8 },\n  { age: 9, name: '张9', money: 9 } ]\n```\n另一种，不等于的写法：\n```javascript\n// 又要大，又要小。又想马儿跑，又不想给马吃草\nconst mysql = alasql(`SELECT * FROM users WHERE  age<>20;`);\nconsole.log(mysql);\n// 输出：\n ...\n [\n  {age: 0, name: '张0'},\n   ...\n  { age: 18, name: '张18', money: 18 },\n  { age: 19, name: '张19', money: 19 },\n  // 注意，这里 age=20 的数据被 where 语句命中了，因此没有出现在结果集\n  { age: 21, name: '张21', money: 21 },\n  ... \n  { age: 99, name: '张99', money: 99 }\n  ]\n```\n#### 6.模糊查询({field} LIKE)\n```javascript\n// 查询名字中以 `张7` 开头的数据，% 代表任意字符。\nconst mysql = alasql(`SELECT * FROM users WHERE  name LIKE '张7%';`);\nconsole.log(mysql);\n// 输出：\n[ { age: 7, name: '张7', money: 7 },\n  { age: 70, name: '张70', money: 70 },\n  { age: 71, name: '张71', money: 71 },\n  { age: 72, name: '张72', money: 72 },\n  { age: 73, name: '张73', money: 73 },\n  { age: 74, name: '张74', money: 74 },\n  { age: 75, name: '张75', money: 75 },\n  { age: 76, name: '张76', money: 76 },\n  { age: 77, name: '张77', money: 77 },\n  { age: 78, name: '张78', money: 78 },\n  { age: 79, name: '张79', money: 79 } ]\n```\n#### 7. 排序方式(ORDER BY {field} DESC/ASC)\n细心的你肯定发现了，前面的数据都是按照顺序（ASC 从小到大）来排序的，那如果我希望 age 或者 money 字段按照倒序（DESC 从大到小）来排布，该怎么操作呢？\n```javascript\n...\nconst mysql = alasql(`SELECT name '姓名' FROM users ORDER BY age DESC;`);\nconsole.log(mysql);\n// 输出:\n[ { '\\'姓名\\'': '张99' },\n  { '\\'姓名\\'': '张98' },\n  { '\\'姓名\\'': '张97' },\n  { '\\'姓名\\'': '张96' },\n  { '\\'姓名\\'': '张95' },\n  ...\n  ];\n```\n这里我按照 age 的 DESC 来排序，结果符合预期。\n#### 8.分页查询( LIMIT, OFFSET)\n之前做后台管理的时候，我还纳闷，为什么接口总是定义 offset=0;limit=10;orderBy='name' 这样的接口，现在看到这里，应该都豁然开朗了。\n在上述的例子里，每次返回的结果集都太大，然而这个表只有 100 条数据而已，随着表的规模越来越大，分页查询势在必行。\n```javascript\n...\n// 返回的结果集极限大小为 10 条数据，且从 index=0 的位置向后偏移 4 个\nconst mysql = alasql(`SELECT name FROM users LIMIT 10 OFFSET 4;`);\nconsole.log(mysql);\n// 输出\n[ { name: '张4' },\n  { name: '张5' },\n  { name: '张6' },\n  { name: '张7' },\n  { name: '张8' },\n  { name: '张9' },\n  { name: '张10' },\n  { name: '张11' },\n  { name: '张12' },\n  { name: '张13' } ]\n```\n假表中设有无穷多的数据，需要查询第 N 页的数据，默认 LIMIT = 10，问 OFFSET = ？\n```javascript\nOFFSET = LIMIT(N-1);\n```\n偏移量总是等于 = （要查询的页数 - 1）* limit\n#### 9.聚合查询（SELECT COUNT(*) FROM {table}）\n```javascript\nconst mysql = alasql(`SELECT COUNT(*) FROM users;`);\nconsole.log(mysql);\n// 输出 ['COUNT(*)': 100]\n```\n同样可以取别名\n```javascript\nconst mysql = alasql(`SELECT COUNT(*) total FROM users;`);\nconsole.log(mysql);\n// 输出： [ { total: 100 } ]\n```\n另外，除了 `COUNT` 还有几个内置函数：\nMAX, MIN, AVG, SUM,FLOOR,CELING 等\n对应最大，最小，平均，总和。\n```javascript\nconst mysql = alasql(`SELECT MAX(money) max FROM users;`);\nconsole.log(mysql);\n// 输出  [ { max: 99 } ]\nconst mysql = alasql(`SELECT SUM(money) totalMoney FROM users;`);\nconsole.log(mysql);\n// [ { totalMoney: 4950 } ]\n```\n\n#### 10.分组查询（SELECT FROM {table} GROUP BY {field};）\n```javascript\nconst alasql = require('alasql');\n\nalasql(`CREATE TABLE users (age number, name string, money number)`);\n\nfor (let i = 0; i < 10; i++) {\n    // build random number as 1~10\n    const number = Math.ceil(Math.random() * 10);\n    const sql = `INSERT INTO users VALUES (${i}, '张${i}', ${number})`;\n    alasql(sql);\n}\nconst mysql = alasql(`SELECT * FROM users GROUP BY money ;`);\nconsole.log(mysql);\n// 输出：\n[ { money: 9 },\n  { money: 8 },\n  { money: 4 },\n  { money: 3 },\n  { money: 2 },\n  { money: 7 },\n  { money: 1 },\n  { money: 10 } ]\n```\n#### 11. 连接查询(INNER JOIN ... ON...)\n顾名思义，即多个表连接到一起，统一查询。\n现在，假设每个 user 需要添加一个 company 字段，代表所处公司。而这个 company 是随时会变动的，因此需要建立一个新表进行单独的维护：\n```sql\nalasql(`\nCREATE TABLE companies (id numnber, name string);\n`);\n```\n`companies` 表很简单，只有一个字段。\n如果现在每个 user 的字段都要对应到 companies 的一个成员，即 users 长度  = companies 长度，该如何做映射呢？\n```javascript\nconst alasql = require('alasql');\n// 创建两个表，user 表中， company 为数字，对应着 companies 表中的索引 id\nalasql(`CREATE TABLE users (age number, name string, money number, company number)`);\nalasql(`CREATE TABLE companies (id number, name string)`);\nfor (let i = 0; i < 10; i++) {\n    // build random number as 1~10\n    const number = Math.ceil(Math.random() * 10);\n    const sql = `INSERT INTO users VALUES (${i}, '张${i}', ${number}, ${number})`;\n    alasql(sql);\n    // 这里每个 company 的 id 应该与 user 表中的 company 字段 依次 相同\n    alasql(`INSERT INTO companies VALUES (${number}, '公司' + ${number})`);\n}\n\n// 查询时，多加一个 companies 表中的 name 列\nconst mysql = alasql(`\n    SELECT u.age, u.name, u.money, c.name company_name\n    FROM users u \n    INNER JOIN companies c \n    ON u.company=c.id\n`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 1, company_name: '公司1' },\n  { age: 1, name: '张1', money: 2, company_name: '公司2' },\n  { age: 1, name: '张1', money: 2, company_name: '公司2' },\n  { age: 1, name: '张1', money: 2, company_name: '公司2' },\n  { age: 1, name: '张1', money: 2, company_name: '公司2' },\n  { age: 2, name: '张2', money: 7, company_name: '公司7' },\n  { age: 2, name: '张2', money: 7, company_name: '公司7' },\n  { age: 3, name: '张3', money: 4, company_name: '公司4' },\n  { age: 3, name: '张3', money: 4, company_name: '公司4' },\n  { age: 3, name: '张3', money: 4, company_name: '公司4' },\n  { age: 4, name: '张4', money: 7, company_name: '公司7' },\n  { age: 4, name: '张4', money: 7, company_name: '公司7' },\n  { age: 5, name: '张5', money: 2, company_name: '公司2' },\n  { age: 5, name: '张5', money: 2, company_name: '公司2' },\n  { age: 5, name: '张5', money: 2, company_name: '公司2' },\n  { age: 5, name: '张5', money: 2, company_name: '公司2' },\n  { age: 6, name: '张6', money: 4, company_name: '公司4' },\n  { age: 6, name: '张6', money: 4, company_name: '公司4' },\n  { age: 6, name: '张6', money: 4, company_name: '公司4' },\n  { age: 7, name: '张7', money: 4, company_name: '公司4' },\n  { age: 7, name: '张7', money: 4, company_name: '公司4' },\n  { age: 7, name: '张7', money: 4, company_name: '公司4' },\n  { age: 8, name: '张8', money: 2, company_name: '公司2' },\n  { age: 8, name: '张8', money: 2, company_name: '公司2' },\n  { age: 8, name: '张8', money: 2, company_name: '公司2' },\n  { age: 8, name: '张8', money: 2, company_name: '公司2' },\n  { age: 9, name: '张9', money: 2, company_name: '公司2' },\n  { age: 9, name: '张9', money: 2, company_name: '公司2' },\n  { age: 9, name: '张9', money: 2, company_name: '公司2' },\n  { age: 9, name: '张9', money: 2, company_name: '公司2' } ]\n```\n总结一下，这种多表联合查询，就是在 SELECT 阶段选择两个表中的字段，然后通过 INNER JOIN {表名} ON {条件} 来完成的。\n另外还有 LEFT OUTER JOIN ， RIGHT OUTER JOIN 等，详见廖雪峰大神总结的图示：\n{% asset_image sql.png%}\n\n### 二、CRUD BOY 的基本素养\n#### 1. 增\n语法：\n```sql\nINSERT INTO table (field) VALUES (value1, value2...);\n```\n```javascript\nconst alasql = require('alasql');\n// 建表时可以注明类型\nalasql(`CREATE TABLE users (age number, name string, money number)`);\n\nfor(let i = 0; i< 10; i++) {\n    const sql = `INSERT INTO users VALUES (${i}, '张${i}', ${i})`;\n    alasql(sql);\n}\n\n// 插入时不需要标注 field type\nalasql(`INSERT INTO users (age, name, money) VALUES (1 , '大牛' , 100)`);\nconst mysql = alasql(`SELECT * FROM users;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 0 },\n  { age: 1, name: '张1', money: 1 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n  { age: 5, name: '张5', money: 5 },\n  { age: 6, name: '张6', money: 6 },\n  { age: 7, name: '张7', money: 7 },\n  { age: 8, name: '张8', money: 8 },\n  { age: 9, name: '张9', money: 9 },\n  { age: 1, name: '大牛', money: 100 } ]\n```\n#### 2. 改\n语法：\n```sql\nUPDATE <表名> SET 字段1=值1, 字段2=值2, ... WHERE ...;\n```\n```javascript\n...\n// 更新 age=1 的这条数据\nalasql(`UPDATE users  SET age=100000, money=200000 WHERE age=1`);\nconst mysql = alasql(`SELECT * FROM users;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 0 },\n  { age: 100000, name: '张1', money: 200000 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n  { age: 5, name: '张5', money: 5 },\n  { age: 6, name: '张6', money: 6 },\n  { age: 7, name: '张7', money: 7 },\n  { age: 8, name: '张8', money: 8 },\n  { age: 9, name: '张9', money: 9 } ]\n```\n#### 3. DELETE\n语法：\n```sql\nDELETE FROM <表名> WHERE ...;\n```\n```javascript\nalasql(`DELETE FROM users WHERE age>5`);\nconst mysql = alasql(`SELECT * FROM users;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 0 },\n  { age: 1, name: '张1', money: 1 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n  { age: 5, name: '张5', money: 5 } ]\n```\n#### 4. Retrieve\n语法：\n```sql\nSELECT colume FROM table （WHERE） ...\n```\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/hello-sql.md","raw":"---\ntitle: hello-sql #标题\ndate: 2019-06-11 14:58:10 #创建时间\ntags: [sql] #标签(同级)\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文章原始创作地址：[https://blog.csdn.net/qq_20264891/article/details/91437256](https://blog.csdn.net/qq_20264891/article/details/91437256)\n\n如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 https://zq-jhon.github.io/about/ 中添加我的微信\n\n## 前置条件\n1. [廖雪峰 sql 教程](https://www.liaoxuefeng.com/wiki/1177760294764384)\n2. [alasql github](https://github.com/agershun/alasql)\n3. 新建一个项目 `$ npm i alasql` \n## 一、基本语法\n根据示例 [https://github.com/agershun/alasql](https://github.com/agershun/alasql) 学习基本语法\n#### 1.建表( CREATE TABLE)\n```sql\nalasql(`\nCREATE TABLE users (age number, name string, money number);\n`);\n```\n#### 2. 插入数据(INSERT INTO {table})\n```sql\nalasql(`\nINSERT INTO users VALUES (25,'张三', 100);\n`):\n```\n然后确认一下数据是否真的写入了\n```javascript\nconst mysql = alasql('\n\nSELECT *FROM users;\n\n');\n\nconsole.log(mysql); // [ { age: 25, name: '张三', money: 100 } ]\n```\n于是写个遍历，插入更多数据，以供后面操作。\n```javascript\n...\nfor(let i = 0; i< 100; i++) {\n    const sql = `INSERT INTO users VALUES (${i}, '张${i}', ${i})`;\n    alasql(sql);\n}\nconst mysql = alasql('\nSELECT * FROM users;\n');\nconsole.log(mysql);\n// 输出：\n[ { age: 25, name: '张三', money: 100 },\n  { age: 0, name: '张0', money: 0 },\n  { age: 1, name: '张1', money: 1 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n// ...\n { age: 99, name: '张99', money: 99 },\n```\n#### 3. SELECT 语句\n望文生义， SELECT 就是选中，命中。选中的对象是啥呢？其实就是表的 \"列\" column。\n举例：\n```sql\n// 选中 users 表中所有的列\nSELECT * FROM users;\n\n// 只选中 name 这一列\nSELECT name FROM users;\n\n// 选中 name, age 两列\n SELECT name,age FROM users;\n```\n如果希望返回的结果集可以自定义列名（column） ，这种操作称之为 **\"投影\"**， 可以使用语法 :\n```sql\nSELECT 列1 别名1, 列2 别名2 FROM users;\n```\n举个 🌰:\n```sql\n// 原 column 名为 name\n...\n[name]\n张三\n李四\n王麻子\n...\n\nSELECT name '姓名' FROM users;\n// 输出\n...\n[姓名]\n张三\n李四\n王麻子\n...\n```\n#### 4. WHERE 语句\n现在，从表中筛选出 age > 90 的：\n```javascript\n...\nconst mysql = alasql(`SELECT * FROM users WHERE age>90;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 91, name: '张91', money: 91 },\n  { age: 92, name: '张92', money: 92 },\n  { age: 93, name: '张93', money: 93 },\n  { age: 94, name: '张94', money: 94 },\n  { age: 95, name: '张95', money: 95 },\n  { age: 96, name: '张96', money: 96 },\n  { age: 97, name: '张97', money: 97 },\n  { age: 98, name: '张98', money: 98 },\n  { age: 99, name: '张99', money: 99 } ]\n```\n#### 5. 联合条件\n联合条件，即多条件叠加。是为了提高命中数据的准确度，达到准确查找想要数据的目的。\n##### AND\n```javascript\n...\nconst mysql = alasql(`SELECT * FROM users WHERE age=60 AND money=60;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 60, name: '张60', money: 60 } ]\n```\n##### OR\n```javascript\n...\nconst mysql = alasql(`SELECT * FROM users WHERE age=60 OR money=61;`);\nconsole.log(mysql);\n// 输出：\n [ \n { age: 60, name: '张60', money: 60 },\n  { age: 61, name: '张61', money: 61 } \n  ]\n```\n##### NOT\n查询 !(age>=10)\n```javascript\n...\nconst mysql = alasql(`SELECT * FROM users WHERE NOT age>=10;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 0 },\n  { age: 1, name: '张1', money: 1 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n  { age: 5, name: '张5', money: 5 },\n  { age: 6, name: '张6', money: 6 },\n  { age: 7, name: '张7', money: 7 },\n  { age: 8, name: '张8', money: 8 },\n  { age: 9, name: '张9', money: 9 } ]\n```\n另一种，不等于的写法：\n```javascript\n// 又要大，又要小。又想马儿跑，又不想给马吃草\nconst mysql = alasql(`SELECT * FROM users WHERE  age<>20;`);\nconsole.log(mysql);\n// 输出：\n ...\n [\n  {age: 0, name: '张0'},\n   ...\n  { age: 18, name: '张18', money: 18 },\n  { age: 19, name: '张19', money: 19 },\n  // 注意，这里 age=20 的数据被 where 语句命中了，因此没有出现在结果集\n  { age: 21, name: '张21', money: 21 },\n  ... \n  { age: 99, name: '张99', money: 99 }\n  ]\n```\n#### 6.模糊查询({field} LIKE)\n```javascript\n// 查询名字中以 `张7` 开头的数据，% 代表任意字符。\nconst mysql = alasql(`SELECT * FROM users WHERE  name LIKE '张7%';`);\nconsole.log(mysql);\n// 输出：\n[ { age: 7, name: '张7', money: 7 },\n  { age: 70, name: '张70', money: 70 },\n  { age: 71, name: '张71', money: 71 },\n  { age: 72, name: '张72', money: 72 },\n  { age: 73, name: '张73', money: 73 },\n  { age: 74, name: '张74', money: 74 },\n  { age: 75, name: '张75', money: 75 },\n  { age: 76, name: '张76', money: 76 },\n  { age: 77, name: '张77', money: 77 },\n  { age: 78, name: '张78', money: 78 },\n  { age: 79, name: '张79', money: 79 } ]\n```\n#### 7. 排序方式(ORDER BY {field} DESC/ASC)\n细心的你肯定发现了，前面的数据都是按照顺序（ASC 从小到大）来排序的，那如果我希望 age 或者 money 字段按照倒序（DESC 从大到小）来排布，该怎么操作呢？\n```javascript\n...\nconst mysql = alasql(`SELECT name '姓名' FROM users ORDER BY age DESC;`);\nconsole.log(mysql);\n// 输出:\n[ { '\\'姓名\\'': '张99' },\n  { '\\'姓名\\'': '张98' },\n  { '\\'姓名\\'': '张97' },\n  { '\\'姓名\\'': '张96' },\n  { '\\'姓名\\'': '张95' },\n  ...\n  ];\n```\n这里我按照 age 的 DESC 来排序，结果符合预期。\n#### 8.分页查询( LIMIT, OFFSET)\n之前做后台管理的时候，我还纳闷，为什么接口总是定义 offset=0;limit=10;orderBy='name' 这样的接口，现在看到这里，应该都豁然开朗了。\n在上述的例子里，每次返回的结果集都太大，然而这个表只有 100 条数据而已，随着表的规模越来越大，分页查询势在必行。\n```javascript\n...\n// 返回的结果集极限大小为 10 条数据，且从 index=0 的位置向后偏移 4 个\nconst mysql = alasql(`SELECT name FROM users LIMIT 10 OFFSET 4;`);\nconsole.log(mysql);\n// 输出\n[ { name: '张4' },\n  { name: '张5' },\n  { name: '张6' },\n  { name: '张7' },\n  { name: '张8' },\n  { name: '张9' },\n  { name: '张10' },\n  { name: '张11' },\n  { name: '张12' },\n  { name: '张13' } ]\n```\n假表中设有无穷多的数据，需要查询第 N 页的数据，默认 LIMIT = 10，问 OFFSET = ？\n```javascript\nOFFSET = LIMIT(N-1);\n```\n偏移量总是等于 = （要查询的页数 - 1）* limit\n#### 9.聚合查询（SELECT COUNT(*) FROM {table}）\n```javascript\nconst mysql = alasql(`SELECT COUNT(*) FROM users;`);\nconsole.log(mysql);\n// 输出 ['COUNT(*)': 100]\n```\n同样可以取别名\n```javascript\nconst mysql = alasql(`SELECT COUNT(*) total FROM users;`);\nconsole.log(mysql);\n// 输出： [ { total: 100 } ]\n```\n另外，除了 `COUNT` 还有几个内置函数：\nMAX, MIN, AVG, SUM,FLOOR,CELING 等\n对应最大，最小，平均，总和。\n```javascript\nconst mysql = alasql(`SELECT MAX(money) max FROM users;`);\nconsole.log(mysql);\n// 输出  [ { max: 99 } ]\nconst mysql = alasql(`SELECT SUM(money) totalMoney FROM users;`);\nconsole.log(mysql);\n// [ { totalMoney: 4950 } ]\n```\n\n#### 10.分组查询（SELECT FROM {table} GROUP BY {field};）\n```javascript\nconst alasql = require('alasql');\n\nalasql(`CREATE TABLE users (age number, name string, money number)`);\n\nfor (let i = 0; i < 10; i++) {\n    // build random number as 1~10\n    const number = Math.ceil(Math.random() * 10);\n    const sql = `INSERT INTO users VALUES (${i}, '张${i}', ${number})`;\n    alasql(sql);\n}\nconst mysql = alasql(`SELECT * FROM users GROUP BY money ;`);\nconsole.log(mysql);\n// 输出：\n[ { money: 9 },\n  { money: 8 },\n  { money: 4 },\n  { money: 3 },\n  { money: 2 },\n  { money: 7 },\n  { money: 1 },\n  { money: 10 } ]\n```\n#### 11. 连接查询(INNER JOIN ... ON...)\n顾名思义，即多个表连接到一起，统一查询。\n现在，假设每个 user 需要添加一个 company 字段，代表所处公司。而这个 company 是随时会变动的，因此需要建立一个新表进行单独的维护：\n```sql\nalasql(`\nCREATE TABLE companies (id numnber, name string);\n`);\n```\n`companies` 表很简单，只有一个字段。\n如果现在每个 user 的字段都要对应到 companies 的一个成员，即 users 长度  = companies 长度，该如何做映射呢？\n```javascript\nconst alasql = require('alasql');\n// 创建两个表，user 表中， company 为数字，对应着 companies 表中的索引 id\nalasql(`CREATE TABLE users (age number, name string, money number, company number)`);\nalasql(`CREATE TABLE companies (id number, name string)`);\nfor (let i = 0; i < 10; i++) {\n    // build random number as 1~10\n    const number = Math.ceil(Math.random() * 10);\n    const sql = `INSERT INTO users VALUES (${i}, '张${i}', ${number}, ${number})`;\n    alasql(sql);\n    // 这里每个 company 的 id 应该与 user 表中的 company 字段 依次 相同\n    alasql(`INSERT INTO companies VALUES (${number}, '公司' + ${number})`);\n}\n\n// 查询时，多加一个 companies 表中的 name 列\nconst mysql = alasql(`\n    SELECT u.age, u.name, u.money, c.name company_name\n    FROM users u \n    INNER JOIN companies c \n    ON u.company=c.id\n`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 1, company_name: '公司1' },\n  { age: 1, name: '张1', money: 2, company_name: '公司2' },\n  { age: 1, name: '张1', money: 2, company_name: '公司2' },\n  { age: 1, name: '张1', money: 2, company_name: '公司2' },\n  { age: 1, name: '张1', money: 2, company_name: '公司2' },\n  { age: 2, name: '张2', money: 7, company_name: '公司7' },\n  { age: 2, name: '张2', money: 7, company_name: '公司7' },\n  { age: 3, name: '张3', money: 4, company_name: '公司4' },\n  { age: 3, name: '张3', money: 4, company_name: '公司4' },\n  { age: 3, name: '张3', money: 4, company_name: '公司4' },\n  { age: 4, name: '张4', money: 7, company_name: '公司7' },\n  { age: 4, name: '张4', money: 7, company_name: '公司7' },\n  { age: 5, name: '张5', money: 2, company_name: '公司2' },\n  { age: 5, name: '张5', money: 2, company_name: '公司2' },\n  { age: 5, name: '张5', money: 2, company_name: '公司2' },\n  { age: 5, name: '张5', money: 2, company_name: '公司2' },\n  { age: 6, name: '张6', money: 4, company_name: '公司4' },\n  { age: 6, name: '张6', money: 4, company_name: '公司4' },\n  { age: 6, name: '张6', money: 4, company_name: '公司4' },\n  { age: 7, name: '张7', money: 4, company_name: '公司4' },\n  { age: 7, name: '张7', money: 4, company_name: '公司4' },\n  { age: 7, name: '张7', money: 4, company_name: '公司4' },\n  { age: 8, name: '张8', money: 2, company_name: '公司2' },\n  { age: 8, name: '张8', money: 2, company_name: '公司2' },\n  { age: 8, name: '张8', money: 2, company_name: '公司2' },\n  { age: 8, name: '张8', money: 2, company_name: '公司2' },\n  { age: 9, name: '张9', money: 2, company_name: '公司2' },\n  { age: 9, name: '张9', money: 2, company_name: '公司2' },\n  { age: 9, name: '张9', money: 2, company_name: '公司2' },\n  { age: 9, name: '张9', money: 2, company_name: '公司2' } ]\n```\n总结一下，这种多表联合查询，就是在 SELECT 阶段选择两个表中的字段，然后通过 INNER JOIN {表名} ON {条件} 来完成的。\n另外还有 LEFT OUTER JOIN ， RIGHT OUTER JOIN 等，详见廖雪峰大神总结的图示：\n{% asset_image sql.png%}\n\n### 二、CRUD BOY 的基本素养\n#### 1. 增\n语法：\n```sql\nINSERT INTO table (field) VALUES (value1, value2...);\n```\n```javascript\nconst alasql = require('alasql');\n// 建表时可以注明类型\nalasql(`CREATE TABLE users (age number, name string, money number)`);\n\nfor(let i = 0; i< 10; i++) {\n    const sql = `INSERT INTO users VALUES (${i}, '张${i}', ${i})`;\n    alasql(sql);\n}\n\n// 插入时不需要标注 field type\nalasql(`INSERT INTO users (age, name, money) VALUES (1 , '大牛' , 100)`);\nconst mysql = alasql(`SELECT * FROM users;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 0 },\n  { age: 1, name: '张1', money: 1 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n  { age: 5, name: '张5', money: 5 },\n  { age: 6, name: '张6', money: 6 },\n  { age: 7, name: '张7', money: 7 },\n  { age: 8, name: '张8', money: 8 },\n  { age: 9, name: '张9', money: 9 },\n  { age: 1, name: '大牛', money: 100 } ]\n```\n#### 2. 改\n语法：\n```sql\nUPDATE <表名> SET 字段1=值1, 字段2=值2, ... WHERE ...;\n```\n```javascript\n...\n// 更新 age=1 的这条数据\nalasql(`UPDATE users  SET age=100000, money=200000 WHERE age=1`);\nconst mysql = alasql(`SELECT * FROM users;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 0 },\n  { age: 100000, name: '张1', money: 200000 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n  { age: 5, name: '张5', money: 5 },\n  { age: 6, name: '张6', money: 6 },\n  { age: 7, name: '张7', money: 7 },\n  { age: 8, name: '张8', money: 8 },\n  { age: 9, name: '张9', money: 9 } ]\n```\n#### 3. DELETE\n语法：\n```sql\nDELETE FROM <表名> WHERE ...;\n```\n```javascript\nalasql(`DELETE FROM users WHERE age>5`);\nconst mysql = alasql(`SELECT * FROM users;`);\nconsole.log(mysql);\n// 输出：\n[ { age: 0, name: '张0', money: 0 },\n  { age: 1, name: '张1', money: 1 },\n  { age: 2, name: '张2', money: 2 },\n  { age: 3, name: '张3', money: 3 },\n  { age: 4, name: '张4', money: 4 },\n  { age: 5, name: '张5', money: 5 } ]\n```\n#### 4. Retrieve\n语法：\n```sql\nSELECT colume FROM table （WHERE） ...\n```\n\n<b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"hello-sql","published":1,"updated":"2019-06-13T14:35:42.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxo003kckuf9jfagtzn","content":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/91437256\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/91437256</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><ol>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/1177760294764384\" target=\"_blank\" rel=\"noopener\">廖雪峰 sql 教程</a></li>\n<li><a href=\"https://github.com/agershun/alasql\" target=\"_blank\" rel=\"noopener\">alasql github</a></li>\n<li>新建一个项目 <code>$ npm i alasql</code> <h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2>根据示例 <a href=\"https://github.com/agershun/alasql\" target=\"_blank\" rel=\"noopener\">https://github.com/agershun/alasql</a> 学习基本语法<h4 id=\"1-建表-CREATE-TABLE\"><a href=\"#1-建表-CREATE-TABLE\" class=\"headerlink\" title=\"1.建表( CREATE TABLE)\"></a>1.建表( CREATE TABLE)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alasql(`</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">users</span> (age <span class=\"built_in\">number</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">string</span>, money <span class=\"built_in\">number</span>);</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2-插入数据-INSERT-INTO-table\"><a href=\"#2-插入数据-INSERT-INTO-table\" class=\"headerlink\" title=\"2. 插入数据(INSERT INTO {table})\"></a>2. 插入数据(INSERT INTO {table})</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alasql(`</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">users</span> <span class=\"keyword\">VALUES</span> (<span class=\"number\">25</span>,<span class=\"string\">'张三'</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">`):</span><br></pre></td></tr></table></figure>\n<p>然后确认一下数据是否真的写入了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">SELECT *FROM users;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql); <span class=\"comment\">// [ &#123; age: 25, name: '张三', money: 100 &#125; ]</span></span><br></pre></td></tr></table></figure></p>\n<p>于是写个遍历，插入更多数据，以供后面操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sql = <span class=\"string\">`INSERT INTO users VALUES (<span class=\"subst\">$&#123;i&#125;</span>, '张<span class=\"subst\">$&#123;i&#125;</span>', <span class=\"subst\">$&#123;i&#125;</span>)`</span>;</span><br><span class=\"line\">    alasql(sql);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">SELECT * FROM users;</span></span><br><span class=\"line\"><span class=\"string\">'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">25</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">money</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#123; <span class=\"attr\">age</span>: <span class=\"number\">99</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张99'</span>, <span class=\"attr\">money</span>: <span class=\"number\">99</span> &#125;,</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-SELECT-语句\"><a href=\"#3-SELECT-语句\" class=\"headerlink\" title=\"3. SELECT 语句\"></a>3. SELECT 语句</h4><p>望文生义， SELECT 就是选中，命中。选中的对象是啥呢？其实就是表的 “列” column。<br>举例：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 选中 users 表中所有的列</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">// 只选中 name 这一列</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">// 选中 name, age 两列</span><br><span class=\"line\"> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span>,age <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br></pre></td></tr></table></figure></p>\n<p>如果希望返回的结果集可以自定义列名（column） ，这种操作称之为 <strong>“投影”</strong>， 可以使用语法 :<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> 列<span class=\"number\">1</span> 别名<span class=\"number\">1</span>, 列<span class=\"number\">2</span> 别名<span class=\"number\">2</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br></pre></td></tr></table></figure></p>\n<p>举个 🌰:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原 column 名为 name</span><br><span class=\"line\">...</span><br><span class=\"line\">[name]</span><br><span class=\"line\">张三</span><br><span class=\"line\">李四</span><br><span class=\"line\">王麻子</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"string\">'姓名'</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br><span class=\"line\">// 输出</span><br><span class=\"line\">...</span><br><span class=\"line\">[姓名]</span><br><span class=\"line\">张三</span><br><span class=\"line\">李四</span><br><span class=\"line\">王麻子</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-WHERE-语句\"><a href=\"#4-WHERE-语句\" class=\"headerlink\" title=\"4. WHERE 语句\"></a>4. WHERE 语句</h4><p>现在，从表中筛选出 age &gt; 90 的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE age&gt;90;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">91</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张91'</span>, <span class=\"attr\">money</span>: <span class=\"number\">91</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">92</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张92'</span>, <span class=\"attr\">money</span>: <span class=\"number\">92</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">93</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张93'</span>, <span class=\"attr\">money</span>: <span class=\"number\">93</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">94</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张94'</span>, <span class=\"attr\">money</span>: <span class=\"number\">94</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">95</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张95'</span>, <span class=\"attr\">money</span>: <span class=\"number\">95</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">96</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张96'</span>, <span class=\"attr\">money</span>: <span class=\"number\">96</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">97</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张97'</span>, <span class=\"attr\">money</span>: <span class=\"number\">97</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">98</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张98'</span>, <span class=\"attr\">money</span>: <span class=\"number\">98</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">99</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张99'</span>, <span class=\"attr\">money</span>: <span class=\"number\">99</span> &#125; ]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-联合条件\"><a href=\"#5-联合条件\" class=\"headerlink\" title=\"5. 联合条件\"></a>5. 联合条件</h4><p>联合条件，即多条件叠加。是为了提高命中数据的准确度，达到准确查找想要数据的目的。</p>\n<h5 id=\"AND\"><a href=\"#AND\" class=\"headerlink\" title=\"AND\"></a>AND</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE age=60 AND money=60;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">60</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张60'</span>, <span class=\"attr\">money</span>: <span class=\"number\">60</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h5 id=\"OR\"><a href=\"#OR\" class=\"headerlink\" title=\"OR\"></a>OR</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE age=60 OR money=61;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"> [ </span><br><span class=\"line\"> &#123; <span class=\"attr\">age</span>: <span class=\"number\">60</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张60'</span>, <span class=\"attr\">money</span>: <span class=\"number\">60</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">61</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张61'</span>, <span class=\"attr\">money</span>: <span class=\"number\">61</span> &#125; </span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<h5 id=\"NOT\"><a href=\"#NOT\" class=\"headerlink\" title=\"NOT\"></a>NOT</h5><p>查询 !(age&gt;=10)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE NOT age&gt;=10;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">9</span> &#125; ]</span><br></pre></td></tr></table></figure></p>\n<p>另一种，不等于的写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 又要大，又要小。又想马儿跑，又不想给马吃草</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE  age&lt;&gt;20;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"> [</span><br><span class=\"line\">  &#123;<span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>&#125;,</span><br><span class=\"line\">   ...</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张18'</span>, <span class=\"attr\">money</span>: <span class=\"number\">18</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张19'</span>, <span class=\"attr\">money</span>: <span class=\"number\">19</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 注意，这里 age=20 的数据被 where 语句命中了，因此没有出现在结果集</span></span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">21</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张21'</span>, <span class=\"attr\">money</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">  ... </span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">99</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张99'</span>, <span class=\"attr\">money</span>: <span class=\"number\">99</span> &#125;</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-模糊查询-field-LIKE\"><a href=\"#6-模糊查询-field-LIKE\" class=\"headerlink\" title=\"6.模糊查询({field} LIKE)\"></a>6.模糊查询({field} LIKE)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询名字中以 `张7` 开头的数据，% 代表任意字符。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE  name LIKE '张7%';`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">70</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张70'</span>, <span class=\"attr\">money</span>: <span class=\"number\">70</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">71</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张71'</span>, <span class=\"attr\">money</span>: <span class=\"number\">71</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">72</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张72'</span>, <span class=\"attr\">money</span>: <span class=\"number\">72</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">73</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张73'</span>, <span class=\"attr\">money</span>: <span class=\"number\">73</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">74</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张74'</span>, <span class=\"attr\">money</span>: <span class=\"number\">74</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">75</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张75'</span>, <span class=\"attr\">money</span>: <span class=\"number\">75</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">76</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张76'</span>, <span class=\"attr\">money</span>: <span class=\"number\">76</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">77</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张77'</span>, <span class=\"attr\">money</span>: <span class=\"number\">77</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">78</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张78'</span>, <span class=\"attr\">money</span>: <span class=\"number\">78</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">79</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张79'</span>, <span class=\"attr\">money</span>: <span class=\"number\">79</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-排序方式-ORDER-BY-field-DESC-ASC\"><a href=\"#7-排序方式-ORDER-BY-field-DESC-ASC\" class=\"headerlink\" title=\"7. 排序方式(ORDER BY {field} DESC/ASC)\"></a>7. 排序方式(ORDER BY {field} DESC/ASC)</h4><p>细心的你肯定发现了，前面的数据都是按照顺序（ASC 从小到大）来排序的，那如果我希望 age 或者 money 字段按照倒序（DESC 从大到小）来排布，该怎么操作呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT name '姓名' FROM users ORDER BY age DESC;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出:</span></span><br><span class=\"line\">[ &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张99'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张98'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张97'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张96'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张95'</span> &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ];</span><br></pre></td></tr></table></figure></p>\n<p>这里我按照 age 的 DESC 来排序，结果符合预期。</p>\n<h4 id=\"8-分页查询-LIMIT-OFFSET\"><a href=\"#8-分页查询-LIMIT-OFFSET\" class=\"headerlink\" title=\"8.分页查询( LIMIT, OFFSET)\"></a>8.分页查询( LIMIT, OFFSET)</h4><p>之前做后台管理的时候，我还纳闷，为什么接口总是定义 offset=0;limit=10;orderBy=’name’ 这样的接口，现在看到这里，应该都豁然开朗了。<br>在上述的例子里，每次返回的结果集都太大，然而这个表只有 100 条数据而已，随着表的规模越来越大，分页查询势在必行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 返回的结果集极限大小为 10 条数据，且从 index=0 的位置向后偏移 4 个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT name FROM users LIMIT 10 OFFSET 4;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张10'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张11'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张12'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张13'</span> &#125; ]</span><br></pre></td></tr></table></figure></p>\n<p>假表中设有无穷多的数据，需要查询第 N 页的数据，默认 LIMIT = 10，问 OFFSET = ？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OFFSET = LIMIT(N<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>偏移量总是等于 = （要查询的页数 - 1）* limit</p>\n<h4 id=\"9-聚合查询（SELECT-COUNT-FROM-table-）\"><a href=\"#9-聚合查询（SELECT-COUNT-FROM-table-）\" class=\"headerlink\" title=\"9.聚合查询（SELECT COUNT(*) FROM {table}）\"></a>9.聚合查询（SELECT COUNT(*) FROM {table}）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT COUNT(*) FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出 ['COUNT(*)': 100]</span></span><br></pre></td></tr></table></figure>\n<p>同样可以取别名<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT COUNT(*) total FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出： [ &#123; total: 100 &#125; ]</span></span><br></pre></td></tr></table></figure></p>\n<p>另外，除了 <code>COUNT</code> 还有几个内置函数：<br>MAX, MIN, AVG, SUM,FLOOR,CELING 等<br>对应最大，最小，平均，总和。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT MAX(money) max FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出  [ &#123; max: 99 &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT SUM(money) totalMoney FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// [ &#123; totalMoney: 4950 &#125; ]</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"10-分组查询（SELECT-FROM-table-GROUP-BY-field-）\"><a href=\"#10-分组查询（SELECT-FROM-table-GROUP-BY-field-）\" class=\"headerlink\" title=\"10.分组查询（SELECT FROM {table} GROUP BY {field};）\"></a>10.分组查询（SELECT FROM {table} GROUP BY {field};）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alasql = <span class=\"built_in\">require</span>(<span class=\"string\">'alasql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alasql(<span class=\"string\">`CREATE TABLE users (age number, name string, money number)`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// build random number as 1~10</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> number = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sql = <span class=\"string\">`INSERT INTO users VALUES (<span class=\"subst\">$&#123;i&#125;</span>, '张<span class=\"subst\">$&#123;i&#125;</span>', <span class=\"subst\">$&#123;number&#125;</span>)`</span>;</span><br><span class=\"line\">    alasql(sql);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users GROUP BY money ;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">money</span>: <span class=\"number\">9</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">10</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"11-连接查询-INNER-JOIN-…-ON…\"><a href=\"#11-连接查询-INNER-JOIN-…-ON…\" class=\"headerlink\" title=\"11. 连接查询(INNER JOIN … ON…)\"></a>11. 连接查询(INNER JOIN … ON…)</h4><p>顾名思义，即多个表连接到一起，统一查询。<br>现在，假设每个 user 需要添加一个 company 字段，代表所处公司。而这个 company 是随时会变动的，因此需要建立一个新表进行单独的维护：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alasql(`</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> companies (<span class=\"keyword\">id</span> numnber, <span class=\"keyword\">name</span> <span class=\"keyword\">string</span>);</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure></p>\n<p><code>companies</code> 表很简单，只有一个字段。<br>如果现在每个 user 的字段都要对应到 companies 的一个成员，即 users 长度  = companies 长度，该如何做映射呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alasql = <span class=\"built_in\">require</span>(<span class=\"string\">'alasql'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建两个表，user 表中， company 为数字，对应着 companies 表中的索引 id</span></span><br><span class=\"line\">alasql(<span class=\"string\">`CREATE TABLE users (age number, name string, money number, company number)`</span>);</span><br><span class=\"line\">alasql(<span class=\"string\">`CREATE TABLE companies (id number, name string)`</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// build random number as 1~10</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> number = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sql = <span class=\"string\">`INSERT INTO users VALUES (<span class=\"subst\">$&#123;i&#125;</span>, '张<span class=\"subst\">$&#123;i&#125;</span>', <span class=\"subst\">$&#123;number&#125;</span>, <span class=\"subst\">$&#123;number&#125;</span>)`</span>;</span><br><span class=\"line\">    alasql(sql);</span><br><span class=\"line\">    <span class=\"comment\">// 这里每个 company 的 id 应该与 user 表中的 company 字段 依次 相同</span></span><br><span class=\"line\">    alasql(<span class=\"string\">`INSERT INTO companies VALUES (<span class=\"subst\">$&#123;number&#125;</span>, '公司' + <span class=\"subst\">$&#123;number&#125;</span>)`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询时，多加一个 companies 表中的 name 列</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT u.age, u.name, u.money, c.name company_name</span></span><br><span class=\"line\"><span class=\"string\">    FROM users u </span></span><br><span class=\"line\"><span class=\"string\">    INNER JOIN companies c </span></span><br><span class=\"line\"><span class=\"string\">    ON u.company=c.id</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司1'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125; ]</span><br></pre></td></tr></table></figure></p>\n<p>总结一下，这种多表联合查询，就是在 SELECT 阶段选择两个表中的字段，然后通过 INNER JOIN {表名} ON {条件} 来完成的。<br>另外还有 LEFT OUTER JOIN ， RIGHT OUTER JOIN 等，详见廖雪峰大神总结的图示：<br><img src=\"/2019/06/11/hello-sql/sql.png\"></p>\n<h3 id=\"二、CRUD-BOY-的基本素养\"><a href=\"#二、CRUD-BOY-的基本素养\" class=\"headerlink\" title=\"二、CRUD BOY 的基本素养\"></a>二、CRUD BOY 的基本素养</h3><h4 id=\"1-增\"><a href=\"#1-增\" class=\"headerlink\" title=\"1. 增\"></a>1. 增</h4><p>语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">table</span> (<span class=\"keyword\">field</span>) <span class=\"keyword\">VALUES</span> (value1, value2...);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alasql = <span class=\"built_in\">require</span>(<span class=\"string\">'alasql'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 建表时可以注明类型</span></span><br><span class=\"line\">alasql(<span class=\"string\">`CREATE TABLE users (age number, name string, money number)`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sql = <span class=\"string\">`INSERT INTO users VALUES (<span class=\"subst\">$&#123;i&#125;</span>, '张<span class=\"subst\">$&#123;i&#125;</span>', <span class=\"subst\">$&#123;i&#125;</span>)`</span>;</span><br><span class=\"line\">    alasql(sql);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入时不需要标注 field type</span></span><br><span class=\"line\">alasql(<span class=\"string\">`INSERT INTO users (age, name, money) VALUES (1 , '大牛' , 100)`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">9</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'大牛'</span>, <span class=\"attr\">money</span>: <span class=\"number\">100</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-改\"><a href=\"#2-改\" class=\"headerlink\" title=\"2. 改\"></a>2. 改</h4><p>语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> &lt;表名&gt; <span class=\"keyword\">SET</span> 字段<span class=\"number\">1</span>=值<span class=\"number\">1</span>, 字段<span class=\"number\">2</span>=值<span class=\"number\">2</span>, ... <span class=\"keyword\">WHERE</span> ...;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 更新 age=1 的这条数据</span></span><br><span class=\"line\">alasql(<span class=\"string\">`UPDATE users  SET age=100000, money=200000 WHERE age=1`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">100000</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">200000</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">9</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-DELETE\"><a href=\"#3-DELETE\" class=\"headerlink\" title=\"3. DELETE\"></a>3. DELETE</h4><p>语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> &lt;表名&gt; <span class=\"keyword\">WHERE</span> ...;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alasql(<span class=\"string\">`DELETE FROM users WHERE age&gt;5`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">5</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-Retrieve\"><a href=\"#4-Retrieve\" class=\"headerlink\" title=\"4. Retrieve\"></a>4. Retrieve</h4><p>语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> colume <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> （<span class=\"keyword\">WHERE</span>） ...</span><br></pre></td></tr></table></figure></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文章原始创作地址：<a href=\"https://blog.csdn.net/qq_20264891/article/details/91437256\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_20264891/article/details/91437256</a></p>\n<p>如您有其他建议，可以通过左上角的 QQ 发起回话，或者在 <a href=\"https://zq-jhon.github.io/about/\" target=\"_blank\" rel=\"noopener\">https://zq-jhon.github.io/about/</a> 中添加我的微信</p>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><ol>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/1177760294764384\" target=\"_blank\" rel=\"noopener\">廖雪峰 sql 教程</a></li>\n<li><a href=\"https://github.com/agershun/alasql\" target=\"_blank\" rel=\"noopener\">alasql github</a></li>\n<li>新建一个项目 <code>$ npm i alasql</code> <h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2>根据示例 <a href=\"https://github.com/agershun/alasql\" target=\"_blank\" rel=\"noopener\">https://github.com/agershun/alasql</a> 学习基本语法<h4 id=\"1-建表-CREATE-TABLE\"><a href=\"#1-建表-CREATE-TABLE\" class=\"headerlink\" title=\"1.建表( CREATE TABLE)\"></a>1.建表( CREATE TABLE)</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alasql(`</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">users</span> (age <span class=\"built_in\">number</span>, <span class=\"keyword\">name</span> <span class=\"keyword\">string</span>, money <span class=\"built_in\">number</span>);</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2-插入数据-INSERT-INTO-table\"><a href=\"#2-插入数据-INSERT-INTO-table\" class=\"headerlink\" title=\"2. 插入数据(INSERT INTO {table})\"></a>2. 插入数据(INSERT INTO {table})</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alasql(`</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">users</span> <span class=\"keyword\">VALUES</span> (<span class=\"number\">25</span>,<span class=\"string\">'张三'</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">`):</span><br></pre></td></tr></table></figure>\n<p>然后确认一下数据是否真的写入了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">SELECT *FROM users;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql); <span class=\"comment\">// [ &#123; age: 25, name: '张三', money: 100 &#125; ]</span></span><br></pre></td></tr></table></figure></p>\n<p>于是写个遍历，插入更多数据，以供后面操作。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sql = <span class=\"string\">`INSERT INTO users VALUES (<span class=\"subst\">$&#123;i&#125;</span>, '张<span class=\"subst\">$&#123;i&#125;</span>', <span class=\"subst\">$&#123;i&#125;</span>)`</span>;</span><br><span class=\"line\">    alasql(sql);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">SELECT * FROM users;</span></span><br><span class=\"line\"><span class=\"string\">'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">25</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">money</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#123; <span class=\"attr\">age</span>: <span class=\"number\">99</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张99'</span>, <span class=\"attr\">money</span>: <span class=\"number\">99</span> &#125;,</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-SELECT-语句\"><a href=\"#3-SELECT-语句\" class=\"headerlink\" title=\"3. SELECT 语句\"></a>3. SELECT 语句</h4><p>望文生义， SELECT 就是选中，命中。选中的对象是啥呢？其实就是表的 “列” column。<br>举例：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 选中 users 表中所有的列</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">// 只选中 name 这一列</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">// 选中 name, age 两列</span><br><span class=\"line\"> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span>,age <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br></pre></td></tr></table></figure></p>\n<p>如果希望返回的结果集可以自定义列名（column） ，这种操作称之为 <strong>“投影”</strong>， 可以使用语法 :<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> 列<span class=\"number\">1</span> 别名<span class=\"number\">1</span>, 列<span class=\"number\">2</span> 别名<span class=\"number\">2</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br></pre></td></tr></table></figure></p>\n<p>举个 🌰:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原 column 名为 name</span><br><span class=\"line\">...</span><br><span class=\"line\">[name]</span><br><span class=\"line\">张三</span><br><span class=\"line\">李四</span><br><span class=\"line\">王麻子</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"string\">'姓名'</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span>;</span><br><span class=\"line\">// 输出</span><br><span class=\"line\">...</span><br><span class=\"line\">[姓名]</span><br><span class=\"line\">张三</span><br><span class=\"line\">李四</span><br><span class=\"line\">王麻子</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-WHERE-语句\"><a href=\"#4-WHERE-语句\" class=\"headerlink\" title=\"4. WHERE 语句\"></a>4. WHERE 语句</h4><p>现在，从表中筛选出 age &gt; 90 的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE age&gt;90;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">91</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张91'</span>, <span class=\"attr\">money</span>: <span class=\"number\">91</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">92</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张92'</span>, <span class=\"attr\">money</span>: <span class=\"number\">92</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">93</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张93'</span>, <span class=\"attr\">money</span>: <span class=\"number\">93</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">94</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张94'</span>, <span class=\"attr\">money</span>: <span class=\"number\">94</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">95</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张95'</span>, <span class=\"attr\">money</span>: <span class=\"number\">95</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">96</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张96'</span>, <span class=\"attr\">money</span>: <span class=\"number\">96</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">97</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张97'</span>, <span class=\"attr\">money</span>: <span class=\"number\">97</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">98</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张98'</span>, <span class=\"attr\">money</span>: <span class=\"number\">98</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">99</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张99'</span>, <span class=\"attr\">money</span>: <span class=\"number\">99</span> &#125; ]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-联合条件\"><a href=\"#5-联合条件\" class=\"headerlink\" title=\"5. 联合条件\"></a>5. 联合条件</h4><p>联合条件，即多条件叠加。是为了提高命中数据的准确度，达到准确查找想要数据的目的。</p>\n<h5 id=\"AND\"><a href=\"#AND\" class=\"headerlink\" title=\"AND\"></a>AND</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE age=60 AND money=60;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">60</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张60'</span>, <span class=\"attr\">money</span>: <span class=\"number\">60</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h5 id=\"OR\"><a href=\"#OR\" class=\"headerlink\" title=\"OR\"></a>OR</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE age=60 OR money=61;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"> [ </span><br><span class=\"line\"> &#123; <span class=\"attr\">age</span>: <span class=\"number\">60</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张60'</span>, <span class=\"attr\">money</span>: <span class=\"number\">60</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">61</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张61'</span>, <span class=\"attr\">money</span>: <span class=\"number\">61</span> &#125; </span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure>\n<h5 id=\"NOT\"><a href=\"#NOT\" class=\"headerlink\" title=\"NOT\"></a>NOT</h5><p>查询 !(age&gt;=10)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE NOT age&gt;=10;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">9</span> &#125; ]</span><br></pre></td></tr></table></figure></p>\n<p>另一种，不等于的写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 又要大，又要小。又想马儿跑，又不想给马吃草</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE  age&lt;&gt;20;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"> [</span><br><span class=\"line\">  &#123;<span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>&#125;,</span><br><span class=\"line\">   ...</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张18'</span>, <span class=\"attr\">money</span>: <span class=\"number\">18</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">19</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张19'</span>, <span class=\"attr\">money</span>: <span class=\"number\">19</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 注意，这里 age=20 的数据被 where 语句命中了，因此没有出现在结果集</span></span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">21</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张21'</span>, <span class=\"attr\">money</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">  ... </span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">99</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张99'</span>, <span class=\"attr\">money</span>: <span class=\"number\">99</span> &#125;</span><br><span class=\"line\">  ]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-模糊查询-field-LIKE\"><a href=\"#6-模糊查询-field-LIKE\" class=\"headerlink\" title=\"6.模糊查询({field} LIKE)\"></a>6.模糊查询({field} LIKE)</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询名字中以 `张7` 开头的数据，% 代表任意字符。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users WHERE  name LIKE '张7%';`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">70</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张70'</span>, <span class=\"attr\">money</span>: <span class=\"number\">70</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">71</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张71'</span>, <span class=\"attr\">money</span>: <span class=\"number\">71</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">72</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张72'</span>, <span class=\"attr\">money</span>: <span class=\"number\">72</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">73</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张73'</span>, <span class=\"attr\">money</span>: <span class=\"number\">73</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">74</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张74'</span>, <span class=\"attr\">money</span>: <span class=\"number\">74</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">75</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张75'</span>, <span class=\"attr\">money</span>: <span class=\"number\">75</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">76</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张76'</span>, <span class=\"attr\">money</span>: <span class=\"number\">76</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">77</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张77'</span>, <span class=\"attr\">money</span>: <span class=\"number\">77</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">78</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张78'</span>, <span class=\"attr\">money</span>: <span class=\"number\">78</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">79</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张79'</span>, <span class=\"attr\">money</span>: <span class=\"number\">79</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-排序方式-ORDER-BY-field-DESC-ASC\"><a href=\"#7-排序方式-ORDER-BY-field-DESC-ASC\" class=\"headerlink\" title=\"7. 排序方式(ORDER BY {field} DESC/ASC)\"></a>7. 排序方式(ORDER BY {field} DESC/ASC)</h4><p>细心的你肯定发现了，前面的数据都是按照顺序（ASC 从小到大）来排序的，那如果我希望 age 或者 money 字段按照倒序（DESC 从大到小）来排布，该怎么操作呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT name '姓名' FROM users ORDER BY age DESC;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出:</span></span><br><span class=\"line\">[ &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张99'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张98'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张97'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张96'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'\\'姓名\\''</span>: <span class=\"string\">'张95'</span> &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ];</span><br></pre></td></tr></table></figure></p>\n<p>这里我按照 age 的 DESC 来排序，结果符合预期。</p>\n<h4 id=\"8-分页查询-LIMIT-OFFSET\"><a href=\"#8-分页查询-LIMIT-OFFSET\" class=\"headerlink\" title=\"8.分页查询( LIMIT, OFFSET)\"></a>8.分页查询( LIMIT, OFFSET)</h4><p>之前做后台管理的时候，我还纳闷，为什么接口总是定义 offset=0;limit=10;orderBy=’name’ 这样的接口，现在看到这里，应该都豁然开朗了。<br>在上述的例子里，每次返回的结果集都太大，然而这个表只有 100 条数据而已，随着表的规模越来越大，分页查询势在必行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 返回的结果集极限大小为 10 条数据，且从 index=0 的位置向后偏移 4 个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT name FROM users LIMIT 10 OFFSET 4;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张10'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张11'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张12'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'张13'</span> &#125; ]</span><br></pre></td></tr></table></figure></p>\n<p>假表中设有无穷多的数据，需要查询第 N 页的数据，默认 LIMIT = 10，问 OFFSET = ？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OFFSET = LIMIT(N<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>偏移量总是等于 = （要查询的页数 - 1）* limit</p>\n<h4 id=\"9-聚合查询（SELECT-COUNT-FROM-table-）\"><a href=\"#9-聚合查询（SELECT-COUNT-FROM-table-）\" class=\"headerlink\" title=\"9.聚合查询（SELECT COUNT(*) FROM {table}）\"></a>9.聚合查询（SELECT COUNT(*) FROM {table}）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT COUNT(*) FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出 ['COUNT(*)': 100]</span></span><br></pre></td></tr></table></figure>\n<p>同样可以取别名<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT COUNT(*) total FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出： [ &#123; total: 100 &#125; ]</span></span><br></pre></td></tr></table></figure></p>\n<p>另外，除了 <code>COUNT</code> 还有几个内置函数：<br>MAX, MIN, AVG, SUM,FLOOR,CELING 等<br>对应最大，最小，平均，总和。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT MAX(money) max FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出  [ &#123; max: 99 &#125; ]</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT SUM(money) totalMoney FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// [ &#123; totalMoney: 4950 &#125; ]</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"10-分组查询（SELECT-FROM-table-GROUP-BY-field-）\"><a href=\"#10-分组查询（SELECT-FROM-table-GROUP-BY-field-）\" class=\"headerlink\" title=\"10.分组查询（SELECT FROM {table} GROUP BY {field};）\"></a>10.分组查询（SELECT FROM {table} GROUP BY {field};）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alasql = <span class=\"built_in\">require</span>(<span class=\"string\">'alasql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alasql(<span class=\"string\">`CREATE TABLE users (age number, name string, money number)`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// build random number as 1~10</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> number = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sql = <span class=\"string\">`INSERT INTO users VALUES (<span class=\"subst\">$&#123;i&#125;</span>, '张<span class=\"subst\">$&#123;i&#125;</span>', <span class=\"subst\">$&#123;number&#125;</span>)`</span>;</span><br><span class=\"line\">    alasql(sql);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users GROUP BY money ;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">money</span>: <span class=\"number\">9</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">money</span>: <span class=\"number\">10</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"11-连接查询-INNER-JOIN-…-ON…\"><a href=\"#11-连接查询-INNER-JOIN-…-ON…\" class=\"headerlink\" title=\"11. 连接查询(INNER JOIN … ON…)\"></a>11. 连接查询(INNER JOIN … ON…)</h4><p>顾名思义，即多个表连接到一起，统一查询。<br>现在，假设每个 user 需要添加一个 company 字段，代表所处公司。而这个 company 是随时会变动的，因此需要建立一个新表进行单独的维护：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alasql(`</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> companies (<span class=\"keyword\">id</span> numnber, <span class=\"keyword\">name</span> <span class=\"keyword\">string</span>);</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure></p>\n<p><code>companies</code> 表很简单，只有一个字段。<br>如果现在每个 user 的字段都要对应到 companies 的一个成员，即 users 长度  = companies 长度，该如何做映射呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alasql = <span class=\"built_in\">require</span>(<span class=\"string\">'alasql'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建两个表，user 表中， company 为数字，对应着 companies 表中的索引 id</span></span><br><span class=\"line\">alasql(<span class=\"string\">`CREATE TABLE users (age number, name string, money number, company number)`</span>);</span><br><span class=\"line\">alasql(<span class=\"string\">`CREATE TABLE companies (id number, name string)`</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// build random number as 1~10</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> number = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sql = <span class=\"string\">`INSERT INTO users VALUES (<span class=\"subst\">$&#123;i&#125;</span>, '张<span class=\"subst\">$&#123;i&#125;</span>', <span class=\"subst\">$&#123;number&#125;</span>, <span class=\"subst\">$&#123;number&#125;</span>)`</span>;</span><br><span class=\"line\">    alasql(sql);</span><br><span class=\"line\">    <span class=\"comment\">// 这里每个 company 的 id 应该与 user 表中的 company 字段 依次 相同</span></span><br><span class=\"line\">    alasql(<span class=\"string\">`INSERT INTO companies VALUES (<span class=\"subst\">$&#123;number&#125;</span>, '公司' + <span class=\"subst\">$&#123;number&#125;</span>)`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询时，多加一个 companies 表中的 name 列</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    SELECT u.age, u.name, u.money, c.name company_name</span></span><br><span class=\"line\"><span class=\"string\">    FROM users u </span></span><br><span class=\"line\"><span class=\"string\">    INNER JOIN companies c </span></span><br><span class=\"line\"><span class=\"string\">    ON u.company=c.id</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司1'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司7'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司4'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span>, <span class=\"attr\">company_name</span>: <span class=\"string\">'公司2'</span> &#125; ]</span><br></pre></td></tr></table></figure></p>\n<p>总结一下，这种多表联合查询，就是在 SELECT 阶段选择两个表中的字段，然后通过 INNER JOIN {表名} ON {条件} 来完成的。<br>另外还有 LEFT OUTER JOIN ， RIGHT OUTER JOIN 等，详见廖雪峰大神总结的图示：<br><img src=\"/2019/06/11/hello-sql/sql.png\"></p>\n<h3 id=\"二、CRUD-BOY-的基本素养\"><a href=\"#二、CRUD-BOY-的基本素养\" class=\"headerlink\" title=\"二、CRUD BOY 的基本素养\"></a>二、CRUD BOY 的基本素养</h3><h4 id=\"1-增\"><a href=\"#1-增\" class=\"headerlink\" title=\"1. 增\"></a>1. 增</h4><p>语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">table</span> (<span class=\"keyword\">field</span>) <span class=\"keyword\">VALUES</span> (value1, value2...);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> alasql = <span class=\"built_in\">require</span>(<span class=\"string\">'alasql'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 建表时可以注明类型</span></span><br><span class=\"line\">alasql(<span class=\"string\">`CREATE TABLE users (age number, name string, money number)`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sql = <span class=\"string\">`INSERT INTO users VALUES (<span class=\"subst\">$&#123;i&#125;</span>, '张<span class=\"subst\">$&#123;i&#125;</span>', <span class=\"subst\">$&#123;i&#125;</span>)`</span>;</span><br><span class=\"line\">    alasql(sql);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入时不需要标注 field type</span></span><br><span class=\"line\">alasql(<span class=\"string\">`INSERT INTO users (age, name, money) VALUES (1 , '大牛' , 100)`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">9</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'大牛'</span>, <span class=\"attr\">money</span>: <span class=\"number\">100</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-改\"><a href=\"#2-改\" class=\"headerlink\" title=\"2. 改\"></a>2. 改</h4><p>语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> &lt;表名&gt; <span class=\"keyword\">SET</span> 字段<span class=\"number\">1</span>=值<span class=\"number\">1</span>, 字段<span class=\"number\">2</span>=值<span class=\"number\">2</span>, ... <span class=\"keyword\">WHERE</span> ...;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 更新 age=1 的这条数据</span></span><br><span class=\"line\">alasql(<span class=\"string\">`UPDATE users  SET age=100000, money=200000 WHERE age=1`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">100000</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">200000</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">6</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张6'</span>, <span class=\"attr\">money</span>: <span class=\"number\">6</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">7</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张7'</span>, <span class=\"attr\">money</span>: <span class=\"number\">7</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">8</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张8'</span>, <span class=\"attr\">money</span>: <span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">9</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张9'</span>, <span class=\"attr\">money</span>: <span class=\"number\">9</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-DELETE\"><a href=\"#3-DELETE\" class=\"headerlink\" title=\"3. DELETE\"></a>3. DELETE</h4><p>语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> &lt;表名&gt; <span class=\"keyword\">WHERE</span> ...;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alasql(<span class=\"string\">`DELETE FROM users WHERE age&gt;5`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = alasql(<span class=\"string\">`SELECT * FROM users;`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mysql);</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\">[ &#123; <span class=\"attr\">age</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张0'</span>, <span class=\"attr\">money</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张1'</span>, <span class=\"attr\">money</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张2'</span>, <span class=\"attr\">money</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张3'</span>, <span class=\"attr\">money</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张4'</span>, <span class=\"attr\">money</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">age</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张5'</span>, <span class=\"attr\">money</span>: <span class=\"number\">5</span> &#125; ]</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-Retrieve\"><a href=\"#4-Retrieve\" class=\"headerlink\" title=\"4. Retrieve\"></a>4. Retrieve</h4><p>语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> colume <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> （<span class=\"keyword\">WHERE</span>） ...</span><br></pre></td></tr></table></figure></p>\n<p><b>😘 觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"TypeScript学习笔记","date":"2018-03-11T10:28:38.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79324863)\n\n##  前言 ##\nTypeScript是JavaScript的超集，它的作者是著名的C#之父（名字我忘了）。作为后者的超集，Typescript(以下简称为tsc)拓展了JS，真正的将js从玩具语言变成一种工程语言，一种强类型的语言。并且，tsc的标准是根据每年的ECMA提案来预先实现的，也就是说，tsc兼容未来的ES7，ES8...提前为将来的ES标准打下基础。\n    学习tsc，不亏!\n## 环境搭建  ##\n```\n$ cnpm install -g typescript\n```\n完事，安装tsc的npm包，就是为了使用它自带的功能，将.ts文件编译成.js文件，从而兼容各种平台及浏览器，编译的命令行如下：\n\n```\n$ cd your File_path\n$ tsc File_name.ts\n```\nOK,执行完，发现在.ts的同目录下，自动编译完成一个同名的.ts文件。\n\n![tsc](http://img.blog.csdn.net/20180214112403989?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 类型检测##\n1.基本类型检测\n\n在js中，命名一个变量通常不用指定类型，tsc弥补了这个劣势，加入类型监测，形如：\n\n\n```\nlet a:number = 1;  //OK\n\nlet a:string = 1;  //error\n\n类型检测的语法，就是在变量屁股后面缀上 :类型\n\n```\n\n\n\n2.数组的类型检测：\n\n```\nlet arr:number[]=[1,2,3];   //ok   类型+[]\n \nlet brr:Array<number>=[4,5,6]; //OK  数组泛型+尖括号< 类型 >\n```\n3.元组类型 Tupe \n\n```\nlet X:[number,string];\nx=[1,'hello']; //OK\nx=[1,2];  //type error\n元组类型适用于已知个数和元素类型的数组。\n```\n\n\n## 字符串拼接及字符串模板 ##\n\n\n拼接：跟ES6一样，通过`（``）`来实现，【`】为Tab上面的按键。\n\nfor eg  :\n\n```\nlet hi= (`\nhello,\nwrold!\n`);\n\n//输出 hello,world!\n```\n字符串模板：提供一种更优雅的书写方式：`${ 变量名}`\n\nfor eg:\n\n```\nlet names:string = 'xiaoming';\n\nlet age:number = 23;\n\nlet sentence:string = (`\n\nhello,my name is ${names},my age is ${age}\n\n`);\n\n```\n编译后的js文件为:\n\n```\nvar names = 'xiaoming';\n\nvar age = 23;\n\nvar sentence = (\"\\nhello,my name is \" + names + \",my age is \" + age + \"\\n\");\n\ndocument.body.innerHTML = sentence;\n\n```\n\n## 枚举类型 ##\n\n\n```typescript\nenum flower {a,b,c,d,e,f,g};  //enum关键字，后跟枚举类型的命名\n\nlet rouse:flower = flower.a;  //定义一个rouse，类型是刚才定义的枚举类型flower其中的a属性\n\nalert(rouse);  // 0 表明rouse映射的对象，在flower中的index为0\n\n```\n## Any类型 ##\n有时候不希望tsc太严格，对于部分变量或者数据开个后门，就可以声明Any 任意类型。\n\n\n![any类型](http://img.blog.csdn.net/20180214120224290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nlet不能重复定义，我就用var来演示。\n\n\nAny类型也可以像数组的第一种定义方法一样，形如：\n\n```\nArray:\n\nlet arr:number[]=[1,2,3];  // OK\n\n数字的组合，可不就是数组吗？\n\n\n字符串组、布尔值组...\n\nlet brr:string[] = ['a','b','c'];\n\nlet crr:boolean[] = [true,false];\n\n\nAny:\n\nlet drr:any[]=[1,'2',true];  //  OK\n\n\n只知道是个类似于数组的数据类型，但是对元素的类型不做限制。\n\n```\n\n## Void类型##\n\n\nvoid类型表示空。常用在函数返回值，形如：\n\n```\n//注意函数返回值类型检测的写法\nfunction foo():void{\n\nalert('123');\n\n};\n\n```\n其实，void包含两种数据类型，就是null和undefind。\n\n触类旁通，其实还有两个类型是null和undefind，如图所示：\n\n![null&undefind](http://img.blog.csdn.net/20180214121723225?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如图所示，两个类型不仅自暴自弃，还拉对方下水，形成“你中有我，我中有你”的关系。\n## 类型断言 ##\n\n作用就是清楚的告诉编译器，我知道a是number类型的，不要给我搞事。\n写法一：\n\n\n\n```\nlet a:number =1; \n\nlet b:any = <number>a ;  //赋值\n```\n第二种写法:\n\n![类型断言](http://img.blog.csdn.net/20180214131500183?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n## Let ##\n\n来看这样一段代码：\n![for循环实例](http://img.blog.csdn.net/20180220191341275?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n在这个for循环中，有一个setTimeout异步函数，循环5次，打印出的结果是什么呢？\n\n![运行结果](http://img.blog.csdn.net/20180220191448648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n可见，连续打印了5次5，为什么5次都是5 呢？因为setTimeout是一个异步函数，他会等待其他函数执行完，再执行，没有拿到i的最终结果，他不会执行。\n\n**究其本质，是因为for循环()中的作用域与{}中的作用域混淆了，如果将这两个作用域独立，那么setTimeout不会等待i的最终执行结果**\n\n将上述代码的`var i`改为`let i`这样，for 循环中的()部分就有了自己独立的块级作用域，所以每次setTimeout执行的时候就不会等待i的最终结果。\n因此，代码结果如下图所示：\n\n![let执行结果](http://img.blog.csdn.net/20180220191954426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n再来看一个对比：\n\n![使用var声明](http://img.blog.csdn.net/20180220193631816?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n将var 改为let \n\n\n![使用let声明](http://img.blog.csdn.net/20180220193713998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n可见，两种声明，是一摸一样的输出，为什么呢？\nvar的声名方式，是因为()和{}基本上可以视为同一作用域，而let的声名方式稍有不同，每次`for(let i=0;i<5;i++)`的迭代，都会创建一个新的作用域{}，因此，每次的结果照样可以打印出来。\n**因为这里没有异步函数**，即便二者的作用域不同(前者是一个全局作用域，后者是两个块级作用域)，输出也是相同的。\n\n总结：使用var或者let，如果当输入环节没有异步函数，无论再怎么变换作用域，那么输出相同，否则，输出不同。\n\n## Const ##\n定义了一次，就不能再次定义或者修改赋值。这种定义的方法，用于只读数据，没有修改权限的时候用。\neg:\n\n```\nconst a = 1 ;\n\nconst a = 2 ; //error\n```\n\n## 结构赋值 ##\n\n普通结构赋值：\n\n![普通结构赋值](http://img.blog.csdn.net/20180220195746635?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n函数参数结构赋值：\n\n![函数结构赋值](http://img.blog.csdn.net/20180220200215178?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n注意：函数的参数在类型监测的时候，用结构赋值，需要冒号【:】。\n\n\n\n## 数组中的【...】解构语法 ##\n\n![数组解构](http://img.blog.csdn.net/20180220200938878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n输出：\n\n![输出](http://img.blog.csdn.net/20180220201035491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n可见，对于未知元素(数组中的成员)，默认是对象，当打印输出的时候，会将其当做数组对象来看待。\n\n## 对象解构 ##\n\n\n![对象解构](http://img.blog.csdn.net/2018022020404810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**直接结构，这里要注意，新定义的对象中，key键名，一定要与被解构对象的属性名字相同，且不能跳跃式解构。**\n\n**下图是错误示范**：\n\n\n![对象解构错误示范](http://img.blog.csdn.net/20180220204209671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n那么同理，如果在一个方法中返回对象，同样也可以被解构。\n![函数返回的对象也可以解构赋值](http://img.blog.csdn.net/2018022113342527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n如果对象存在嵌套现象，可以使用冒号表达式：\n\n![嵌套的对象，使用冒号表达式来嵌套化结构](http://img.blog.csdn.net/20180221133915180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n## 展开 ##\n\n还是使用...语法，进行数组或者对象的浅拷贝。\n\n\n数组展开，形如：\n![数组展开](http://img.blog.csdn.net/20180220205541321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n对象展开，形如：\n\n![对象展开](http://img.blog.csdn.net/20180220205712494?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n**对象展开时，所有传入的键值对，一旦有重复，按照覆盖原则，后面的value会覆盖前面的。执行顺序是从左到右。**\n\n\n\n\n## 可选参数、默认参数 ##\n\n```\nfunction test(a:string,b?:string,c=\"wang\"){\nconsole.log(a)\nconsole.log(b)\nconsole.log(c)\n\n}\n\na为string类型，b为可选参数(string类型)，c是有默认值的参数\n\n```\n\n**确定的参数要现在第一个，不能把可选参数写在第一位。**\n\n## 函数断点Yield ##\n在往常的js代码中，不可以人为的暂停或者恢复代码的运行，但是现在有了yield关键字，就可以将函数的执行流程化，从而让我们有条不紊的控制步骤。\n\n```\nfunction* foo(){\n    console.log(1);\n    yield; //设置断点，下同\n\n    console.log(2);\n\n    yield;\n\n    console.log(3);\n\n    yield;\n};\n\n/*设置断点以后，并不能直接foo.next()，因为其内部没有next方法。\n *必须重新赋值，再调用。\n */\n\nlet zoo =  foo(); \n\n//这里有三个断点，简单的可以理解为，把函数的执行流程划分为三个阶段，每次的调用，只是执行其中的一个阶段。\nzoo.next();//1\nzoo.next();//2\nzoo.next();//3\n```\n\n## 箭头函数 ##\n作用一：主要用于声明匿名函数，简化代码。\n```\nvar sum = (a,b)=>a+b\n\n上式等价于：\nvar sum = function (a,b){\nretrun a+b;\n};\n```\n作用二：消除this指针带来的歧义,优化执行上下文。\n\n```\nfunction getName (name) { \n this.name = name ;\n  setInterval(function () { console.log('name is '+this.name)},1000)\n};\n\nvar john = new getName('jhon');\nconsole.log(john)       // 打印 name is (空)\n```\n\n这里由于getName()是全局函数，就是window下的一个方法，但是console.log()时，由于window下并没有定义 window.name 属性，因此，打印出来的值是 undefind。\n\n使用箭头函数改造：\n\n```\nfunction getName (name) { \n this.name = name ;\n    setInterval(() => console.log('name is '+this.name)),1000)\n};\n\nvar john = new getName('jhon');\nconsole.log(john)       // 打印 name is jhon\n```\n\n## For...of循环 ##\n**for...in 循环对象的下标**\n\n```\nvar arr = [1, 2, 3, 4];\narr.name = 'myArr';\n\nfor (var n in arr) { \n    console.log(n+'=='+arr[n])\n}\n//输出0=1,1=2,2=3,3=4,name=myArr\n```\n\n**for of 循环对象的key**\n\n```\nvar arr = [1, 2, 3, 4];\narr.name = 'myArr';\n\nfor (var n of arr) { \n    console.log(n+'=='+arr[n])\n}\n//输出0=1,1=2,2=3,3=4,undefind\n\n//还可以循环字符串\nvar arr ='hello,world!'\n\n\nfor (var n of arr) { \n    console.log(n)\n}\n//h,e,l,l,o,，w,o,r,l,d,!;\n\n```\n\n**forEach  循环循环对象的key值，并且可以循环对象的key值对应的value，但是不能循环数组之外新添加的属性**\n\n```\nvar arr = [1, 2, 3, 4];\narr.name = 'myArr';\n\narr.forEach(function (n,v) { \n    console.log(n,v)\n})\n//输出1,2,3,4，但是没有输出我们定义的name\n```\n总结：for...in循环数组下标。forEach很体面，但是有局限性(不能访问数组外部定义的属性)，for...of有点鸡肋，但是胜在使用场景广泛。\n\n\n## interface接口 ##\ninterface是一种类型，预先定义好一系列的属性的类型，然后供新的对象来使用它。\n\n![interface](http://img.blog.csdn.net/2018022210063595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n当然，接口中预先定义的变量，也可以规定/限制函数中的参数：\n\n![限制函数中的参数](http://img.blog.csdn.net/20180222103808977?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n## 基于Class的继承 ##\n\n在es3中，javascript的继承只能通过原型链来继承，现在可以通过Class类来继承 。真不愧是“JAVA”script!\n\n![基于Class的继承](http://img.blog.csdn.net/20180220210913277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n访问权限关键字：\n**public** 公共成员。  子类、父类内部都可以访问到。\n\n**private** 私有成员。只允许在类中访问。\n\n**protected** 超类的私有成员。但是在子类中仍然可以访问。\n\n构造器Construcor：\n\n```\n//形如：\nconstructor(){\n name?string;\n};\n\n```\n在构造器中，相当于新建了一个局部的作用域，在构造器中声明的变量、属性都是局部的，哪怕是在Class内部、构造器之外，也无法访问。\n\n举例说明：\n\n\n![构造器内部的变量无法被全局访问](http://img.blog.csdn.net/20180222105023915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n这时候，只要在构造器的name上增加关键字`public`，即可在class中全局访问：\n\n\n\n![加上public，没有报错](http://img.blog.csdn.net/20180222105147415?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**类的继承**\n真的比基于原型链的继承更加优雅和简便。\n![通过extends关键字实现继承](http://img.blog.csdn.net/20180222105737601?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/typescript学习笔记.md","raw":"---\ntitle:  TypeScript学习笔记\ndate:   2018-03-11 18:28:38\ntags: [typescript,编译,javascript,工具]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79324863)\n\n##  前言 ##\nTypeScript是JavaScript的超集，它的作者是著名的C#之父（名字我忘了）。作为后者的超集，Typescript(以下简称为tsc)拓展了JS，真正的将js从玩具语言变成一种工程语言，一种强类型的语言。并且，tsc的标准是根据每年的ECMA提案来预先实现的，也就是说，tsc兼容未来的ES7，ES8...提前为将来的ES标准打下基础。\n    学习tsc，不亏!\n## 环境搭建  ##\n```\n$ cnpm install -g typescript\n```\n完事，安装tsc的npm包，就是为了使用它自带的功能，将.ts文件编译成.js文件，从而兼容各种平台及浏览器，编译的命令行如下：\n\n```\n$ cd your File_path\n$ tsc File_name.ts\n```\nOK,执行完，发现在.ts的同目录下，自动编译完成一个同名的.ts文件。\n\n![tsc](http://img.blog.csdn.net/20180214112403989?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 类型检测##\n1.基本类型检测\n\n在js中，命名一个变量通常不用指定类型，tsc弥补了这个劣势，加入类型监测，形如：\n\n\n```\nlet a:number = 1;  //OK\n\nlet a:string = 1;  //error\n\n类型检测的语法，就是在变量屁股后面缀上 :类型\n\n```\n\n\n\n2.数组的类型检测：\n\n```\nlet arr:number[]=[1,2,3];   //ok   类型+[]\n \nlet brr:Array<number>=[4,5,6]; //OK  数组泛型+尖括号< 类型 >\n```\n3.元组类型 Tupe \n\n```\nlet X:[number,string];\nx=[1,'hello']; //OK\nx=[1,2];  //type error\n元组类型适用于已知个数和元素类型的数组。\n```\n\n\n## 字符串拼接及字符串模板 ##\n\n\n拼接：跟ES6一样，通过`（``）`来实现，【`】为Tab上面的按键。\n\nfor eg  :\n\n```\nlet hi= (`\nhello,\nwrold!\n`);\n\n//输出 hello,world!\n```\n字符串模板：提供一种更优雅的书写方式：`${ 变量名}`\n\nfor eg:\n\n```\nlet names:string = 'xiaoming';\n\nlet age:number = 23;\n\nlet sentence:string = (`\n\nhello,my name is ${names},my age is ${age}\n\n`);\n\n```\n编译后的js文件为:\n\n```\nvar names = 'xiaoming';\n\nvar age = 23;\n\nvar sentence = (\"\\nhello,my name is \" + names + \",my age is \" + age + \"\\n\");\n\ndocument.body.innerHTML = sentence;\n\n```\n\n## 枚举类型 ##\n\n\n```typescript\nenum flower {a,b,c,d,e,f,g};  //enum关键字，后跟枚举类型的命名\n\nlet rouse:flower = flower.a;  //定义一个rouse，类型是刚才定义的枚举类型flower其中的a属性\n\nalert(rouse);  // 0 表明rouse映射的对象，在flower中的index为0\n\n```\n## Any类型 ##\n有时候不希望tsc太严格，对于部分变量或者数据开个后门，就可以声明Any 任意类型。\n\n\n![any类型](http://img.blog.csdn.net/20180214120224290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nlet不能重复定义，我就用var来演示。\n\n\nAny类型也可以像数组的第一种定义方法一样，形如：\n\n```\nArray:\n\nlet arr:number[]=[1,2,3];  // OK\n\n数字的组合，可不就是数组吗？\n\n\n字符串组、布尔值组...\n\nlet brr:string[] = ['a','b','c'];\n\nlet crr:boolean[] = [true,false];\n\n\nAny:\n\nlet drr:any[]=[1,'2',true];  //  OK\n\n\n只知道是个类似于数组的数据类型，但是对元素的类型不做限制。\n\n```\n\n## Void类型##\n\n\nvoid类型表示空。常用在函数返回值，形如：\n\n```\n//注意函数返回值类型检测的写法\nfunction foo():void{\n\nalert('123');\n\n};\n\n```\n其实，void包含两种数据类型，就是null和undefind。\n\n触类旁通，其实还有两个类型是null和undefind，如图所示：\n\n![null&undefind](http://img.blog.csdn.net/20180214121723225?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如图所示，两个类型不仅自暴自弃，还拉对方下水，形成“你中有我，我中有你”的关系。\n## 类型断言 ##\n\n作用就是清楚的告诉编译器，我知道a是number类型的，不要给我搞事。\n写法一：\n\n\n\n```\nlet a:number =1; \n\nlet b:any = <number>a ;  //赋值\n```\n第二种写法:\n\n![类型断言](http://img.blog.csdn.net/20180214131500183?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\n## Let ##\n\n来看这样一段代码：\n![for循环实例](http://img.blog.csdn.net/20180220191341275?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n在这个for循环中，有一个setTimeout异步函数，循环5次，打印出的结果是什么呢？\n\n![运行结果](http://img.blog.csdn.net/20180220191448648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n可见，连续打印了5次5，为什么5次都是5 呢？因为setTimeout是一个异步函数，他会等待其他函数执行完，再执行，没有拿到i的最终结果，他不会执行。\n\n**究其本质，是因为for循环()中的作用域与{}中的作用域混淆了，如果将这两个作用域独立，那么setTimeout不会等待i的最终执行结果**\n\n将上述代码的`var i`改为`let i`这样，for 循环中的()部分就有了自己独立的块级作用域，所以每次setTimeout执行的时候就不会等待i的最终结果。\n因此，代码结果如下图所示：\n\n![let执行结果](http://img.blog.csdn.net/20180220191954426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n再来看一个对比：\n\n![使用var声明](http://img.blog.csdn.net/20180220193631816?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n将var 改为let \n\n\n![使用let声明](http://img.blog.csdn.net/20180220193713998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n可见，两种声明，是一摸一样的输出，为什么呢？\nvar的声名方式，是因为()和{}基本上可以视为同一作用域，而let的声名方式稍有不同，每次`for(let i=0;i<5;i++)`的迭代，都会创建一个新的作用域{}，因此，每次的结果照样可以打印出来。\n**因为这里没有异步函数**，即便二者的作用域不同(前者是一个全局作用域，后者是两个块级作用域)，输出也是相同的。\n\n总结：使用var或者let，如果当输入环节没有异步函数，无论再怎么变换作用域，那么输出相同，否则，输出不同。\n\n## Const ##\n定义了一次，就不能再次定义或者修改赋值。这种定义的方法，用于只读数据，没有修改权限的时候用。\neg:\n\n```\nconst a = 1 ;\n\nconst a = 2 ; //error\n```\n\n## 结构赋值 ##\n\n普通结构赋值：\n\n![普通结构赋值](http://img.blog.csdn.net/20180220195746635?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n函数参数结构赋值：\n\n![函数结构赋值](http://img.blog.csdn.net/20180220200215178?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n注意：函数的参数在类型监测的时候，用结构赋值，需要冒号【:】。\n\n\n\n## 数组中的【...】解构语法 ##\n\n![数组解构](http://img.blog.csdn.net/20180220200938878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n输出：\n\n![输出](http://img.blog.csdn.net/20180220201035491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n可见，对于未知元素(数组中的成员)，默认是对象，当打印输出的时候，会将其当做数组对象来看待。\n\n## 对象解构 ##\n\n\n![对象解构](http://img.blog.csdn.net/2018022020404810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**直接结构，这里要注意，新定义的对象中，key键名，一定要与被解构对象的属性名字相同，且不能跳跃式解构。**\n\n**下图是错误示范**：\n\n\n![对象解构错误示范](http://img.blog.csdn.net/20180220204209671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n那么同理，如果在一个方法中返回对象，同样也可以被解构。\n![函数返回的对象也可以解构赋值](http://img.blog.csdn.net/2018022113342527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n如果对象存在嵌套现象，可以使用冒号表达式：\n\n![嵌套的对象，使用冒号表达式来嵌套化结构](http://img.blog.csdn.net/20180221133915180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n## 展开 ##\n\n还是使用...语法，进行数组或者对象的浅拷贝。\n\n\n数组展开，形如：\n![数组展开](http://img.blog.csdn.net/20180220205541321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n对象展开，形如：\n\n![对象展开](http://img.blog.csdn.net/20180220205712494?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n**对象展开时，所有传入的键值对，一旦有重复，按照覆盖原则，后面的value会覆盖前面的。执行顺序是从左到右。**\n\n\n\n\n## 可选参数、默认参数 ##\n\n```\nfunction test(a:string,b?:string,c=\"wang\"){\nconsole.log(a)\nconsole.log(b)\nconsole.log(c)\n\n}\n\na为string类型，b为可选参数(string类型)，c是有默认值的参数\n\n```\n\n**确定的参数要现在第一个，不能把可选参数写在第一位。**\n\n## 函数断点Yield ##\n在往常的js代码中，不可以人为的暂停或者恢复代码的运行，但是现在有了yield关键字，就可以将函数的执行流程化，从而让我们有条不紊的控制步骤。\n\n```\nfunction* foo(){\n    console.log(1);\n    yield; //设置断点，下同\n\n    console.log(2);\n\n    yield;\n\n    console.log(3);\n\n    yield;\n};\n\n/*设置断点以后，并不能直接foo.next()，因为其内部没有next方法。\n *必须重新赋值，再调用。\n */\n\nlet zoo =  foo(); \n\n//这里有三个断点，简单的可以理解为，把函数的执行流程划分为三个阶段，每次的调用，只是执行其中的一个阶段。\nzoo.next();//1\nzoo.next();//2\nzoo.next();//3\n```\n\n## 箭头函数 ##\n作用一：主要用于声明匿名函数，简化代码。\n```\nvar sum = (a,b)=>a+b\n\n上式等价于：\nvar sum = function (a,b){\nretrun a+b;\n};\n```\n作用二：消除this指针带来的歧义,优化执行上下文。\n\n```\nfunction getName (name) { \n this.name = name ;\n  setInterval(function () { console.log('name is '+this.name)},1000)\n};\n\nvar john = new getName('jhon');\nconsole.log(john)       // 打印 name is (空)\n```\n\n这里由于getName()是全局函数，就是window下的一个方法，但是console.log()时，由于window下并没有定义 window.name 属性，因此，打印出来的值是 undefind。\n\n使用箭头函数改造：\n\n```\nfunction getName (name) { \n this.name = name ;\n    setInterval(() => console.log('name is '+this.name)),1000)\n};\n\nvar john = new getName('jhon');\nconsole.log(john)       // 打印 name is jhon\n```\n\n## For...of循环 ##\n**for...in 循环对象的下标**\n\n```\nvar arr = [1, 2, 3, 4];\narr.name = 'myArr';\n\nfor (var n in arr) { \n    console.log(n+'=='+arr[n])\n}\n//输出0=1,1=2,2=3,3=4,name=myArr\n```\n\n**for of 循环对象的key**\n\n```\nvar arr = [1, 2, 3, 4];\narr.name = 'myArr';\n\nfor (var n of arr) { \n    console.log(n+'=='+arr[n])\n}\n//输出0=1,1=2,2=3,3=4,undefind\n\n//还可以循环字符串\nvar arr ='hello,world!'\n\n\nfor (var n of arr) { \n    console.log(n)\n}\n//h,e,l,l,o,，w,o,r,l,d,!;\n\n```\n\n**forEach  循环循环对象的key值，并且可以循环对象的key值对应的value，但是不能循环数组之外新添加的属性**\n\n```\nvar arr = [1, 2, 3, 4];\narr.name = 'myArr';\n\narr.forEach(function (n,v) { \n    console.log(n,v)\n})\n//输出1,2,3,4，但是没有输出我们定义的name\n```\n总结：for...in循环数组下标。forEach很体面，但是有局限性(不能访问数组外部定义的属性)，for...of有点鸡肋，但是胜在使用场景广泛。\n\n\n## interface接口 ##\ninterface是一种类型，预先定义好一系列的属性的类型，然后供新的对象来使用它。\n\n![interface](http://img.blog.csdn.net/2018022210063595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n当然，接口中预先定义的变量，也可以规定/限制函数中的参数：\n\n![限制函数中的参数](http://img.blog.csdn.net/20180222103808977?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n## 基于Class的继承 ##\n\n在es3中，javascript的继承只能通过原型链来继承，现在可以通过Class类来继承 。真不愧是“JAVA”script!\n\n![基于Class的继承](http://img.blog.csdn.net/20180220210913277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n访问权限关键字：\n**public** 公共成员。  子类、父类内部都可以访问到。\n\n**private** 私有成员。只允许在类中访问。\n\n**protected** 超类的私有成员。但是在子类中仍然可以访问。\n\n构造器Construcor：\n\n```\n//形如：\nconstructor(){\n name?string;\n};\n\n```\n在构造器中，相当于新建了一个局部的作用域，在构造器中声明的变量、属性都是局部的，哪怕是在Class内部、构造器之外，也无法访问。\n\n举例说明：\n\n\n![构造器内部的变量无法被全局访问](http://img.blog.csdn.net/20180222105023915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n这时候，只要在构造器的name上增加关键字`public`，即可在class中全局访问：\n\n\n\n![加上public，没有报错](http://img.blog.csdn.net/20180222105147415?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n**类的继承**\n真的比基于原型链的继承更加优雅和简便。\n![通过extends关键字实现继承](http://img.blog.csdn.net/20180222105737601?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"typescript学习笔记","published":1,"updated":"2019-05-14T14:30:28.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxq003nckufq4mhp0y0","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79324863\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>TypeScript是JavaScript的超集，它的作者是著名的C#之父（名字我忘了）。作为后者的超集，Typescript(以下简称为tsc)拓展了JS，真正的将js从玩具语言变成一种工程语言，一种强类型的语言。并且，tsc的标准是根据每年的ECMA提案来预先实现的，也就是说，tsc兼容未来的ES7，ES8…提前为将来的ES标准打下基础。<br>    学习tsc，不亏!</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g typescript</span><br></pre></td></tr></table></figure>\n<p>完事，安装tsc的npm包，就是为了使用它自带的功能，将.ts文件编译成.js文件，从而兼容各种平台及浏览器，编译的命令行如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your File_path</span><br><span class=\"line\">$ tsc File_name.ts</span><br></pre></td></tr></table></figure>\n<p>OK,执行完，发现在.ts的同目录下，自动编译完成一个同名的.ts文件。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180214112403989?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"tsc\" title=\"\" class=\"\">\n                <p>tsc</p>\n            </figure>\n<h2 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h2><p>1.基本类型检测</p>\n<p>在js中，命名一个变量通常不用指定类型，tsc弥补了这个劣势，加入类型监测，形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a:number = 1;  //OK</span><br><span class=\"line\"></span><br><span class=\"line\">let a:string = 1;  //error</span><br><span class=\"line\"></span><br><span class=\"line\">类型检测的语法，就是在变量屁股后面缀上 :类型</span><br></pre></td></tr></table></figure>\n<p>2.数组的类型检测：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr:number[]=[1,2,3];   //ok   类型+[]</span><br><span class=\"line\"> </span><br><span class=\"line\">let brr:Array&lt;number&gt;=[4,5,6]; //OK  数组泛型+尖括号&lt; 类型 &gt;</span><br></pre></td></tr></table></figure>\n<p>3.元组类型 Tupe </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let X:[number,string];</span><br><span class=\"line\">x=[1,&apos;hello&apos;]; //OK</span><br><span class=\"line\">x=[1,2];  //type error</span><br><span class=\"line\">元组类型适用于已知个数和元素类型的数组。</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串拼接及字符串模板\"><a href=\"#字符串拼接及字符串模板\" class=\"headerlink\" title=\"字符串拼接及字符串模板\"></a>字符串拼接及字符串模板</h2><p>拼接：跟ES6一样，通过<code>（`</code>）<code>来实现，【</code>】为Tab上面的按键。</p>\n<p>for eg  :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hi= (`</span><br><span class=\"line\">hello,</span><br><span class=\"line\">wrold!</span><br><span class=\"line\">`);</span><br><span class=\"line\"></span><br><span class=\"line\">//输出 hello,world!</span><br></pre></td></tr></table></figure>\n<p>字符串模板：提供一种更优雅的书写方式：<code>${ 变量名}</code></p>\n<p>for eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let names:string = &apos;xiaoming&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let age:number = 23;</span><br><span class=\"line\"></span><br><span class=\"line\">let sentence:string = (`</span><br><span class=\"line\"></span><br><span class=\"line\">hello,my name is $&#123;names&#125;,my age is $&#123;age&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n<p>编译后的js文件为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var names = &apos;xiaoming&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var age = 23;</span><br><span class=\"line\"></span><br><span class=\"line\">var sentence = (&quot;\\nhello,my name is &quot; + names + &quot;,my age is &quot; + age + &quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">document.body.innerHTML = sentence;</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> flower &#123;a,b,c,d,e,f,g&#125;;  <span class=\"comment\">//enum关键字，后跟枚举类型的命名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> rouse:flower = flower.a;  <span class=\"comment\">//定义一个rouse，类型是刚才定义的枚举类型flower其中的a属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">alert(rouse);  <span class=\"comment\">// 0 表明rouse映射的对象，在flower中的index为0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Any类型\"><a href=\"#Any类型\" class=\"headerlink\" title=\"Any类型\"></a>Any类型</h2><p>有时候不希望tsc太严格，对于部分变量或者数据开个后门，就可以声明Any 任意类型。</p>\n<p><img src=\"http://img.blog.csdn.net/20180214120224290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"any类型\"></p>\n<p>let不能重复定义，我就用var来演示。</p>\n<p>Any类型也可以像数组的第一种定义方法一样，形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array:</span><br><span class=\"line\"></span><br><span class=\"line\">let arr:number[]=[1,2,3];  // OK</span><br><span class=\"line\"></span><br><span class=\"line\">数字的组合，可不就是数组吗？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">字符串组、布尔值组...</span><br><span class=\"line\"></span><br><span class=\"line\">let brr:string[] = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">let crr:boolean[] = [true,false];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Any:</span><br><span class=\"line\"></span><br><span class=\"line\">let drr:any[]=[1,&apos;2&apos;,true];  //  OK</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">只知道是个类似于数组的数据类型，但是对元素的类型不做限制。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Void类型\"><a href=\"#Void类型\" class=\"headerlink\" title=\"Void类型\"></a>Void类型</h2><p>void类型表示空。常用在函数返回值，形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意函数返回值类型检测的写法</span><br><span class=\"line\">function foo():void&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(&apos;123&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其实，void包含两种数据类型，就是null和undefind。</p>\n<p>触类旁通，其实还有两个类型是null和undefind，如图所示：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180214121723225?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"null&undefind\" title=\"\" class=\"\">\n                <p>null&undefind</p>\n            </figure>\n<p>如图所示，两个类型不仅自暴自弃，还拉对方下水，形成“你中有我，我中有你”的关系。</p>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>作用就是清楚的告诉编译器，我知道a是number类型的，不要给我搞事。<br>写法一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a:number =1; </span><br><span class=\"line\"></span><br><span class=\"line\">let b:any = &lt;number&gt;a ;  //赋值</span><br></pre></td></tr></table></figure>\n<p>第二种写法:</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180214131500183?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"类型断言\" title=\"\" class=\"\">\n                <p>类型断言</p>\n            </figure>\n<h2 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h2><p>来看这样一段代码：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220191341275?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"for循环实例\" title=\"\" class=\"\">\n                <p>for循环实例</p>\n            </figure></p>\n<p>在这个for循环中，有一个setTimeout异步函数，循环5次，打印出的结果是什么呢？</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220191448648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"运行结果\" title=\"\" class=\"\">\n                <p>运行结果</p>\n            </figure>\n<p>可见，连续打印了5次5，为什么5次都是5 呢？因为setTimeout是一个异步函数，他会等待其他函数执行完，再执行，没有拿到i的最终结果，他不会执行。</p>\n<p><strong>究其本质，是因为for循环()中的作用域与{}中的作用域混淆了，如果将这两个作用域独立，那么setTimeout不会等待i的最终执行结果</strong></p>\n<p>将上述代码的<code>var i</code>改为<code>let i</code>这样，for 循环中的()部分就有了自己独立的块级作用域，所以每次setTimeout执行的时候就不会等待i的最终结果。<br>因此，代码结果如下图所示：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220191954426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"let执行结果\" title=\"\" class=\"\">\n                <p>let执行结果</p>\n            </figure>\n<p>再来看一个对比：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220193631816?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"使用var声明\" title=\"\" class=\"\">\n                <p>使用var声明</p>\n            </figure>\n<p>将var 改为let </p>\n<p><img src=\"http://img.blog.csdn.net/20180220193713998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"使用let声明\"></p>\n<p>可见，两种声明，是一摸一样的输出，为什么呢？<br>var的声名方式，是因为()和{}基本上可以视为同一作用域，而let的声名方式稍有不同，每次<code>for(let i=0;i&lt;5;i++)</code>的迭代，都会创建一个新的作用域{}，因此，每次的结果照样可以打印出来。<br><strong>因为这里没有异步函数</strong>，即便二者的作用域不同(前者是一个全局作用域，后者是两个块级作用域)，输出也是相同的。</p>\n<p>总结：使用var或者let，如果当输入环节没有异步函数，无论再怎么变换作用域，那么输出相同，否则，输出不同。</p>\n<h2 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h2><p>定义了一次，就不能再次定义或者修改赋值。这种定义的方法，用于只读数据，没有修改权限的时候用。<br>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = 1 ;</span><br><span class=\"line\"></span><br><span class=\"line\">const a = 2 ; //error</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h2><p>普通结构赋值：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220195746635?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"普通结构赋值\" title=\"\" class=\"\">\n                <p>普通结构赋值</p>\n            </figure>\n<p>函数参数结构赋值：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220200215178?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"函数结构赋值\" title=\"\" class=\"\">\n                <p>函数结构赋值</p>\n            </figure>\n<p>注意：函数的参数在类型监测的时候，用结构赋值，需要冒号【:】。</p>\n<h2 id=\"数组中的【…】解构语法\"><a href=\"#数组中的【…】解构语法\" class=\"headerlink\" title=\"数组中的【…】解构语法\"></a>数组中的【…】解构语法</h2><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220200938878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"数组解构\" title=\"\" class=\"\">\n                <p>数组解构</p>\n            </figure>\n<p>输出：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220201035491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"输出\" title=\"\" class=\"\">\n                <p>输出</p>\n            </figure>\n<p>可见，对于未知元素(数组中的成员)，默认是对象，当打印输出的时候，会将其当做数组对象来看待。</p>\n<h2 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h2><p><img src=\"http://img.blog.csdn.net/2018022020404810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"对象解构\"></p>\n<p><strong>直接结构，这里要注意，新定义的对象中，key键名，一定要与被解构对象的属性名字相同，且不能跳跃式解构。</strong></p>\n<p><strong>下图是错误示范</strong>：</p>\n<p><img src=\"http://img.blog.csdn.net/20180220204209671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"对象解构错误示范\"></p>\n<p>那么同理，如果在一个方法中返回对象，同样也可以被解构。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/2018022113342527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"函数返回的对象也可以解构赋值\" title=\"\" class=\"\">\n                <p>函数返回的对象也可以解构赋值</p>\n            </figure></p>\n<p>如果对象存在嵌套现象，可以使用冒号表达式：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180221133915180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"嵌套的对象，使用冒号表达式来嵌套化结构\" title=\"\" class=\"\">\n                <p>嵌套的对象，使用冒号表达式来嵌套化结构</p>\n            </figure>\n<h2 id=\"展开\"><a href=\"#展开\" class=\"headerlink\" title=\"展开\"></a>展开</h2><p>还是使用…语法，进行数组或者对象的浅拷贝。</p>\n<p>数组展开，形如：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220205541321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"数组展开\" title=\"\" class=\"\">\n                <p>数组展开</p>\n            </figure></p>\n<p>对象展开，形如：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220205712494?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"对象展开\" title=\"\" class=\"\">\n                <p>对象展开</p>\n            </figure>\n<p><strong>对象展开时，所有传入的键值对，一旦有重复，按照覆盖原则，后面的value会覆盖前面的。执行顺序是从左到右。</strong></p>\n<h2 id=\"可选参数、默认参数\"><a href=\"#可选参数、默认参数\" class=\"headerlink\" title=\"可选参数、默认参数\"></a>可选参数、默认参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test(a:string,b?:string,c=&quot;wang&quot;)&#123;</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">console.log(b)</span><br><span class=\"line\">console.log(c)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a为string类型，b为可选参数(string类型)，c是有默认值的参数</span><br></pre></td></tr></table></figure>\n<p><strong>确定的参数要现在第一个，不能把可选参数写在第一位。</strong></p>\n<h2 id=\"函数断点Yield\"><a href=\"#函数断点Yield\" class=\"headerlink\" title=\"函数断点Yield\"></a>函数断点Yield</h2><p>在往常的js代码中，不可以人为的暂停或者恢复代码的运行，但是现在有了yield关键字，就可以将函数的执行流程化，从而让我们有条不紊的控制步骤。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* foo()&#123;</span><br><span class=\"line\">    console.log(1);</span><br><span class=\"line\">    yield; //设置断点，下同</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(2);</span><br><span class=\"line\"></span><br><span class=\"line\">    yield;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(3);</span><br><span class=\"line\"></span><br><span class=\"line\">    yield;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/*设置断点以后，并不能直接foo.next()，因为其内部没有next方法。</span><br><span class=\"line\"> *必须重新赋值，再调用。</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">let zoo =  foo(); </span><br><span class=\"line\"></span><br><span class=\"line\">//这里有三个断点，简单的可以理解为，把函数的执行流程划分为三个阶段，每次的调用，只是执行其中的一个阶段。</span><br><span class=\"line\">zoo.next();//1</span><br><span class=\"line\">zoo.next();//2</span><br><span class=\"line\">zoo.next();//3</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>作用一：主要用于声明匿名函数，简化代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = (a,b)=&gt;a+b</span><br><span class=\"line\"></span><br><span class=\"line\">上式等价于：</span><br><span class=\"line\">var sum = function (a,b)&#123;</span><br><span class=\"line\">retrun a+b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>作用二：消除this指针带来的歧义,优化执行上下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getName (name) &#123; </span><br><span class=\"line\"> this.name = name ;</span><br><span class=\"line\">  setInterval(function () &#123; console.log(&apos;name is &apos;+this.name)&#125;,1000)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var john = new getName(&apos;jhon&apos;);</span><br><span class=\"line\">console.log(john)       // 打印 name is (空)</span><br></pre></td></tr></table></figure>\n<p>这里由于getName()是全局函数，就是window下的一个方法，但是console.log()时，由于window下并没有定义 window.name 属性，因此，打印出来的值是 undefind。</p>\n<p>使用箭头函数改造：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getName (name) &#123; </span><br><span class=\"line\"> this.name = name ;</span><br><span class=\"line\">    setInterval(() =&gt; console.log(&apos;name is &apos;+this.name)),1000)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var john = new getName(&apos;jhon&apos;);</span><br><span class=\"line\">console.log(john)       // 打印 name is jhon</span><br></pre></td></tr></table></figure>\n<h2 id=\"For…of循环\"><a href=\"#For…of循环\" class=\"headerlink\" title=\"For…of循环\"></a>For…of循环</h2><p><strong>for…in 循环对象的下标</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3, 4];</span><br><span class=\"line\">arr.name = &apos;myArr&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var n in arr) &#123; </span><br><span class=\"line\">    console.log(n+&apos;==&apos;+arr[n])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出0=1,1=2,2=3,3=4,name=myArr</span><br></pre></td></tr></table></figure>\n<p><strong>for of 循环对象的key</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3, 4];</span><br><span class=\"line\">arr.name = &apos;myArr&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var n of arr) &#123; </span><br><span class=\"line\">    console.log(n+&apos;==&apos;+arr[n])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出0=1,1=2,2=3,3=4,undefind</span><br><span class=\"line\"></span><br><span class=\"line\">//还可以循环字符串</span><br><span class=\"line\">var arr =&apos;hello,world!&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for (var n of arr) &#123; </span><br><span class=\"line\">    console.log(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//h,e,l,l,o,，w,o,r,l,d,!;</span><br></pre></td></tr></table></figure>\n<p><strong>forEach  循环循环对象的key值，并且可以循环对象的key值对应的value，但是不能循环数组之外新添加的属性</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3, 4];</span><br><span class=\"line\">arr.name = &apos;myArr&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach(function (n,v) &#123; </span><br><span class=\"line\">    console.log(n,v)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//输出1,2,3,4，但是没有输出我们定义的name</span><br></pre></td></tr></table></figure>\n<p>总结：for…in循环数组下标。forEach很体面，但是有局限性(不能访问数组外部定义的属性)，for…of有点鸡肋，但是胜在使用场景广泛。</p>\n<h2 id=\"interface接口\"><a href=\"#interface接口\" class=\"headerlink\" title=\"interface接口\"></a>interface接口</h2><p>interface是一种类型，预先定义好一系列的属性的类型，然后供新的对象来使用它。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/2018022210063595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"interface\" title=\"\" class=\"\">\n                <p>interface</p>\n            </figure>\n<p>当然，接口中预先定义的变量，也可以规定/限制函数中的参数：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180222103808977?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"限制函数中的参数\" title=\"\" class=\"\">\n                <p>限制函数中的参数</p>\n            </figure>\n<h2 id=\"基于Class的继承\"><a href=\"#基于Class的继承\" class=\"headerlink\" title=\"基于Class的继承\"></a>基于Class的继承</h2><p>在es3中，javascript的继承只能通过原型链来继承，现在可以通过Class类来继承 。真不愧是“JAVA”script!</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220210913277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"基于Class的继承\" title=\"\" class=\"\">\n                <p>基于Class的继承</p>\n            </figure>\n<p>访问权限关键字：<br><strong>public</strong> 公共成员。  子类、父类内部都可以访问到。</p>\n<p><strong>private</strong> 私有成员。只允许在类中访问。</p>\n<p><strong>protected</strong> 超类的私有成员。但是在子类中仍然可以访问。</p>\n<p>构造器Construcor：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//形如：</span><br><span class=\"line\">constructor()&#123;</span><br><span class=\"line\"> name?string;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在构造器中，相当于新建了一个局部的作用域，在构造器中声明的变量、属性都是局部的，哪怕是在Class内部、构造器之外，也无法访问。</p>\n<p>举例说明：</p>\n<p><img src=\"http://img.blog.csdn.net/20180222105023915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"构造器内部的变量无法被全局访问\"></p>\n<p>这时候，只要在构造器的name上增加关键字<code>public</code>，即可在class中全局访问：</p>\n<p><img src=\"http://img.blog.csdn.net/20180222105147415?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"加上public，没有报错\"></p>\n<p><strong>类的继承</strong><br>真的比基于原型链的继承更加优雅和简便。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180222105737601?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"通过extends关键字实现继承\" title=\"\" class=\"\">\n                <p>通过extends关键字实现继承</p>\n            </figure></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79324863\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>TypeScript是JavaScript的超集，它的作者是著名的C#之父（名字我忘了）。作为后者的超集，Typescript(以下简称为tsc)拓展了JS，真正的将js从玩具语言变成一种工程语言，一种强类型的语言。并且，tsc的标准是根据每年的ECMA提案来预先实现的，也就是说，tsc兼容未来的ES7，ES8…提前为将来的ES标准打下基础。<br>    学习tsc，不亏!</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g typescript</span><br></pre></td></tr></table></figure>\n<p>完事，安装tsc的npm包，就是为了使用它自带的功能，将.ts文件编译成.js文件，从而兼容各种平台及浏览器，编译的命令行如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your File_path</span><br><span class=\"line\">$ tsc File_name.ts</span><br></pre></td></tr></table></figure>\n<p>OK,执行完，发现在.ts的同目录下，自动编译完成一个同名的.ts文件。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180214112403989?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"tsc\" title=\"\" class=\"\">\n                <p>tsc</p>\n            </figure>\n<h2 id=\"类型检测\"><a href=\"#类型检测\" class=\"headerlink\" title=\"类型检测\"></a>类型检测</h2><p>1.基本类型检测</p>\n<p>在js中，命名一个变量通常不用指定类型，tsc弥补了这个劣势，加入类型监测，形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a:number = 1;  //OK</span><br><span class=\"line\"></span><br><span class=\"line\">let a:string = 1;  //error</span><br><span class=\"line\"></span><br><span class=\"line\">类型检测的语法，就是在变量屁股后面缀上 :类型</span><br></pre></td></tr></table></figure>\n<p>2.数组的类型检测：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr:number[]=[1,2,3];   //ok   类型+[]</span><br><span class=\"line\"> </span><br><span class=\"line\">let brr:Array&lt;number&gt;=[4,5,6]; //OK  数组泛型+尖括号&lt; 类型 &gt;</span><br></pre></td></tr></table></figure>\n<p>3.元组类型 Tupe </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let X:[number,string];</span><br><span class=\"line\">x=[1,&apos;hello&apos;]; //OK</span><br><span class=\"line\">x=[1,2];  //type error</span><br><span class=\"line\">元组类型适用于已知个数和元素类型的数组。</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串拼接及字符串模板\"><a href=\"#字符串拼接及字符串模板\" class=\"headerlink\" title=\"字符串拼接及字符串模板\"></a>字符串拼接及字符串模板</h2><p>拼接：跟ES6一样，通过<code>（`</code>）<code>来实现，【</code>】为Tab上面的按键。</p>\n<p>for eg  :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hi= (`</span><br><span class=\"line\">hello,</span><br><span class=\"line\">wrold!</span><br><span class=\"line\">`);</span><br><span class=\"line\"></span><br><span class=\"line\">//输出 hello,world!</span><br></pre></td></tr></table></figure>\n<p>字符串模板：提供一种更优雅的书写方式：<code>${ 变量名}</code></p>\n<p>for eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let names:string = &apos;xiaoming&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let age:number = 23;</span><br><span class=\"line\"></span><br><span class=\"line\">let sentence:string = (`</span><br><span class=\"line\"></span><br><span class=\"line\">hello,my name is $&#123;names&#125;,my age is $&#123;age&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n<p>编译后的js文件为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var names = &apos;xiaoming&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var age = 23;</span><br><span class=\"line\"></span><br><span class=\"line\">var sentence = (&quot;\\nhello,my name is &quot; + names + &quot;,my age is &quot; + age + &quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">document.body.innerHTML = sentence;</span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> flower &#123;a,b,c,d,e,f,g&#125;;  <span class=\"comment\">//enum关键字，后跟枚举类型的命名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> rouse:flower = flower.a;  <span class=\"comment\">//定义一个rouse，类型是刚才定义的枚举类型flower其中的a属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">alert(rouse);  <span class=\"comment\">// 0 表明rouse映射的对象，在flower中的index为0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Any类型\"><a href=\"#Any类型\" class=\"headerlink\" title=\"Any类型\"></a>Any类型</h2><p>有时候不希望tsc太严格，对于部分变量或者数据开个后门，就可以声明Any 任意类型。</p>\n<p><img src=\"http://img.blog.csdn.net/20180214120224290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"any类型\"></p>\n<p>let不能重复定义，我就用var来演示。</p>\n<p>Any类型也可以像数组的第一种定义方法一样，形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array:</span><br><span class=\"line\"></span><br><span class=\"line\">let arr:number[]=[1,2,3];  // OK</span><br><span class=\"line\"></span><br><span class=\"line\">数字的组合，可不就是数组吗？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">字符串组、布尔值组...</span><br><span class=\"line\"></span><br><span class=\"line\">let brr:string[] = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">let crr:boolean[] = [true,false];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Any:</span><br><span class=\"line\"></span><br><span class=\"line\">let drr:any[]=[1,&apos;2&apos;,true];  //  OK</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">只知道是个类似于数组的数据类型，但是对元素的类型不做限制。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Void类型\"><a href=\"#Void类型\" class=\"headerlink\" title=\"Void类型\"></a>Void类型</h2><p>void类型表示空。常用在函数返回值，形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意函数返回值类型检测的写法</span><br><span class=\"line\">function foo():void&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(&apos;123&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其实，void包含两种数据类型，就是null和undefind。</p>\n<p>触类旁通，其实还有两个类型是null和undefind，如图所示：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180214121723225?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"null&undefind\" title=\"\" class=\"\">\n                <p>null&undefind</p>\n            </figure>\n<p>如图所示，两个类型不仅自暴自弃，还拉对方下水，形成“你中有我，我中有你”的关系。</p>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>作用就是清楚的告诉编译器，我知道a是number类型的，不要给我搞事。<br>写法一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a:number =1; </span><br><span class=\"line\"></span><br><span class=\"line\">let b:any = &lt;number&gt;a ;  //赋值</span><br></pre></td></tr></table></figure>\n<p>第二种写法:</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180214131500183?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"类型断言\" title=\"\" class=\"\">\n                <p>类型断言</p>\n            </figure>\n<h2 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h2><p>来看这样一段代码：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220191341275?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"for循环实例\" title=\"\" class=\"\">\n                <p>for循环实例</p>\n            </figure></p>\n<p>在这个for循环中，有一个setTimeout异步函数，循环5次，打印出的结果是什么呢？</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220191448648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"运行结果\" title=\"\" class=\"\">\n                <p>运行结果</p>\n            </figure>\n<p>可见，连续打印了5次5，为什么5次都是5 呢？因为setTimeout是一个异步函数，他会等待其他函数执行完，再执行，没有拿到i的最终结果，他不会执行。</p>\n<p><strong>究其本质，是因为for循环()中的作用域与{}中的作用域混淆了，如果将这两个作用域独立，那么setTimeout不会等待i的最终执行结果</strong></p>\n<p>将上述代码的<code>var i</code>改为<code>let i</code>这样，for 循环中的()部分就有了自己独立的块级作用域，所以每次setTimeout执行的时候就不会等待i的最终结果。<br>因此，代码结果如下图所示：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220191954426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"let执行结果\" title=\"\" class=\"\">\n                <p>let执行结果</p>\n            </figure>\n<p>再来看一个对比：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220193631816?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"使用var声明\" title=\"\" class=\"\">\n                <p>使用var声明</p>\n            </figure>\n<p>将var 改为let </p>\n<p><img src=\"http://img.blog.csdn.net/20180220193713998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"使用let声明\"></p>\n<p>可见，两种声明，是一摸一样的输出，为什么呢？<br>var的声名方式，是因为()和{}基本上可以视为同一作用域，而let的声名方式稍有不同，每次<code>for(let i=0;i&lt;5;i++)</code>的迭代，都会创建一个新的作用域{}，因此，每次的结果照样可以打印出来。<br><strong>因为这里没有异步函数</strong>，即便二者的作用域不同(前者是一个全局作用域，后者是两个块级作用域)，输出也是相同的。</p>\n<p>总结：使用var或者let，如果当输入环节没有异步函数，无论再怎么变换作用域，那么输出相同，否则，输出不同。</p>\n<h2 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h2><p>定义了一次，就不能再次定义或者修改赋值。这种定义的方法，用于只读数据，没有修改权限的时候用。<br>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = 1 ;</span><br><span class=\"line\"></span><br><span class=\"line\">const a = 2 ; //error</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构赋值\"><a href=\"#结构赋值\" class=\"headerlink\" title=\"结构赋值\"></a>结构赋值</h2><p>普通结构赋值：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220195746635?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"普通结构赋值\" title=\"\" class=\"\">\n                <p>普通结构赋值</p>\n            </figure>\n<p>函数参数结构赋值：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220200215178?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"函数结构赋值\" title=\"\" class=\"\">\n                <p>函数结构赋值</p>\n            </figure>\n<p>注意：函数的参数在类型监测的时候，用结构赋值，需要冒号【:】。</p>\n<h2 id=\"数组中的【…】解构语法\"><a href=\"#数组中的【…】解构语法\" class=\"headerlink\" title=\"数组中的【…】解构语法\"></a>数组中的【…】解构语法</h2><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220200938878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"数组解构\" title=\"\" class=\"\">\n                <p>数组解构</p>\n            </figure>\n<p>输出：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220201035491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"输出\" title=\"\" class=\"\">\n                <p>输出</p>\n            </figure>\n<p>可见，对于未知元素(数组中的成员)，默认是对象，当打印输出的时候，会将其当做数组对象来看待。</p>\n<h2 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h2><p><img src=\"http://img.blog.csdn.net/2018022020404810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"对象解构\"></p>\n<p><strong>直接结构，这里要注意，新定义的对象中，key键名，一定要与被解构对象的属性名字相同，且不能跳跃式解构。</strong></p>\n<p><strong>下图是错误示范</strong>：</p>\n<p><img src=\"http://img.blog.csdn.net/20180220204209671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"对象解构错误示范\"></p>\n<p>那么同理，如果在一个方法中返回对象，同样也可以被解构。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/2018022113342527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"函数返回的对象也可以解构赋值\" title=\"\" class=\"\">\n                <p>函数返回的对象也可以解构赋值</p>\n            </figure></p>\n<p>如果对象存在嵌套现象，可以使用冒号表达式：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180221133915180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"嵌套的对象，使用冒号表达式来嵌套化结构\" title=\"\" class=\"\">\n                <p>嵌套的对象，使用冒号表达式来嵌套化结构</p>\n            </figure>\n<h2 id=\"展开\"><a href=\"#展开\" class=\"headerlink\" title=\"展开\"></a>展开</h2><p>还是使用…语法，进行数组或者对象的浅拷贝。</p>\n<p>数组展开，形如：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220205541321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"数组展开\" title=\"\" class=\"\">\n                <p>数组展开</p>\n            </figure></p>\n<p>对象展开，形如：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220205712494?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"对象展开\" title=\"\" class=\"\">\n                <p>对象展开</p>\n            </figure>\n<p><strong>对象展开时，所有传入的键值对，一旦有重复，按照覆盖原则，后面的value会覆盖前面的。执行顺序是从左到右。</strong></p>\n<h2 id=\"可选参数、默认参数\"><a href=\"#可选参数、默认参数\" class=\"headerlink\" title=\"可选参数、默认参数\"></a>可选参数、默认参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test(a:string,b?:string,c=&quot;wang&quot;)&#123;</span><br><span class=\"line\">console.log(a)</span><br><span class=\"line\">console.log(b)</span><br><span class=\"line\">console.log(c)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a为string类型，b为可选参数(string类型)，c是有默认值的参数</span><br></pre></td></tr></table></figure>\n<p><strong>确定的参数要现在第一个，不能把可选参数写在第一位。</strong></p>\n<h2 id=\"函数断点Yield\"><a href=\"#函数断点Yield\" class=\"headerlink\" title=\"函数断点Yield\"></a>函数断点Yield</h2><p>在往常的js代码中，不可以人为的暂停或者恢复代码的运行，但是现在有了yield关键字，就可以将函数的执行流程化，从而让我们有条不紊的控制步骤。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* foo()&#123;</span><br><span class=\"line\">    console.log(1);</span><br><span class=\"line\">    yield; //设置断点，下同</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(2);</span><br><span class=\"line\"></span><br><span class=\"line\">    yield;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(3);</span><br><span class=\"line\"></span><br><span class=\"line\">    yield;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/*设置断点以后，并不能直接foo.next()，因为其内部没有next方法。</span><br><span class=\"line\"> *必须重新赋值，再调用。</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">let zoo =  foo(); </span><br><span class=\"line\"></span><br><span class=\"line\">//这里有三个断点，简单的可以理解为，把函数的执行流程划分为三个阶段，每次的调用，只是执行其中的一个阶段。</span><br><span class=\"line\">zoo.next();//1</span><br><span class=\"line\">zoo.next();//2</span><br><span class=\"line\">zoo.next();//3</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>作用一：主要用于声明匿名函数，简化代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sum = (a,b)=&gt;a+b</span><br><span class=\"line\"></span><br><span class=\"line\">上式等价于：</span><br><span class=\"line\">var sum = function (a,b)&#123;</span><br><span class=\"line\">retrun a+b;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>作用二：消除this指针带来的歧义,优化执行上下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getName (name) &#123; </span><br><span class=\"line\"> this.name = name ;</span><br><span class=\"line\">  setInterval(function () &#123; console.log(&apos;name is &apos;+this.name)&#125;,1000)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var john = new getName(&apos;jhon&apos;);</span><br><span class=\"line\">console.log(john)       // 打印 name is (空)</span><br></pre></td></tr></table></figure>\n<p>这里由于getName()是全局函数，就是window下的一个方法，但是console.log()时，由于window下并没有定义 window.name 属性，因此，打印出来的值是 undefind。</p>\n<p>使用箭头函数改造：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getName (name) &#123; </span><br><span class=\"line\"> this.name = name ;</span><br><span class=\"line\">    setInterval(() =&gt; console.log(&apos;name is &apos;+this.name)),1000)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var john = new getName(&apos;jhon&apos;);</span><br><span class=\"line\">console.log(john)       // 打印 name is jhon</span><br></pre></td></tr></table></figure>\n<h2 id=\"For…of循环\"><a href=\"#For…of循环\" class=\"headerlink\" title=\"For…of循环\"></a>For…of循环</h2><p><strong>for…in 循环对象的下标</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3, 4];</span><br><span class=\"line\">arr.name = &apos;myArr&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var n in arr) &#123; </span><br><span class=\"line\">    console.log(n+&apos;==&apos;+arr[n])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出0=1,1=2,2=3,3=4,name=myArr</span><br></pre></td></tr></table></figure>\n<p><strong>for of 循环对象的key</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3, 4];</span><br><span class=\"line\">arr.name = &apos;myArr&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var n of arr) &#123; </span><br><span class=\"line\">    console.log(n+&apos;==&apos;+arr[n])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出0=1,1=2,2=3,3=4,undefind</span><br><span class=\"line\"></span><br><span class=\"line\">//还可以循环字符串</span><br><span class=\"line\">var arr =&apos;hello,world!&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for (var n of arr) &#123; </span><br><span class=\"line\">    console.log(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//h,e,l,l,o,，w,o,r,l,d,!;</span><br></pre></td></tr></table></figure>\n<p><strong>forEach  循环循环对象的key值，并且可以循环对象的key值对应的value，但是不能循环数组之外新添加的属性</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1, 2, 3, 4];</span><br><span class=\"line\">arr.name = &apos;myArr&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach(function (n,v) &#123; </span><br><span class=\"line\">    console.log(n,v)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//输出1,2,3,4，但是没有输出我们定义的name</span><br></pre></td></tr></table></figure>\n<p>总结：for…in循环数组下标。forEach很体面，但是有局限性(不能访问数组外部定义的属性)，for…of有点鸡肋，但是胜在使用场景广泛。</p>\n<h2 id=\"interface接口\"><a href=\"#interface接口\" class=\"headerlink\" title=\"interface接口\"></a>interface接口</h2><p>interface是一种类型，预先定义好一系列的属性的类型，然后供新的对象来使用它。</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/2018022210063595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"interface\" title=\"\" class=\"\">\n                <p>interface</p>\n            </figure>\n<p>当然，接口中预先定义的变量，也可以规定/限制函数中的参数：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180222103808977?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"限制函数中的参数\" title=\"\" class=\"\">\n                <p>限制函数中的参数</p>\n            </figure>\n<h2 id=\"基于Class的继承\"><a href=\"#基于Class的继承\" class=\"headerlink\" title=\"基于Class的继承\"></a>基于Class的继承</h2><p>在es3中，javascript的继承只能通过原型链来继承，现在可以通过Class类来继承 。真不愧是“JAVA”script!</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180220210913277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"基于Class的继承\" title=\"\" class=\"\">\n                <p>基于Class的继承</p>\n            </figure>\n<p>访问权限关键字：<br><strong>public</strong> 公共成员。  子类、父类内部都可以访问到。</p>\n<p><strong>private</strong> 私有成员。只允许在类中访问。</p>\n<p><strong>protected</strong> 超类的私有成员。但是在子类中仍然可以访问。</p>\n<p>构造器Construcor：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//形如：</span><br><span class=\"line\">constructor()&#123;</span><br><span class=\"line\"> name?string;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在构造器中，相当于新建了一个局部的作用域，在构造器中声明的变量、属性都是局部的，哪怕是在Class内部、构造器之外，也无法访问。</p>\n<p>举例说明：</p>\n<p><img src=\"http://img.blog.csdn.net/20180222105023915?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"构造器内部的变量无法被全局访问\"></p>\n<p>这时候，只要在构造器的name上增加关键字<code>public</code>，即可在class中全局访问：</p>\n<p><img src=\"http://img.blog.csdn.net/20180222105147415?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"加上public，没有报错\"></p>\n<p><strong>类的继承</strong><br>真的比基于原型链的继承更加优雅和简便。<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180222105737601?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"通过extends关键字实现继承\" title=\"\" class=\"\">\n                <p>通过extends关键字实现继承</p>\n            </figure></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"关于百度集成API bd_share的一些窥探","date":"2017-11-03T10:10:00.000Z","reward":true,"comment":true,"_content":"本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78438174)\n\n\n  最近在做一个项目因为要用bootstrap，需要对第三方分享的图标设计两个款式，最终需求的效果如下：\n\n一、需求分析\n\n1.在PC端，要求用font字符来实现第三方分享的图标,并且鼠标经过时，设定hover效果：\n![这里写图片描述](http://img.blog.csdn.net/20171103173452202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n2.在小屏幕设备上，需要设定另外一种款式：\n![这里写图片描述](http://img.blog.csdn.net/20171103173511144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n二、思路分析\n\n理清需求以后，下面来看是如何实现的：\n\n 首先，需要点击这些第三方应用的图片或者字符，来实现相应的跳转，例如点击QQ，进入QQ的分享界面。\n\n  如果要完成这一步，需要去每个平台的官网获取分享组件，其实就是人家官方定义好的js API接口。整个页面如果只需要1个2个分享图标还好，要是十几个，20个图标，估计页面会乱七八糟自己看着都糟心。\n  于是这里安利百度share，集成了大多数的第三方share API,非常的方便，省事，复制，粘贴，一气呵成，但是效果可能就不尽人意了。\n  ![这里写图片描述](http://img.blog.csdn.net/20171103173650394?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  看到这里，我以为我打开了二零零年的一张网页，真的，这图标，这32*32的icon清晰度，真的让我很难受。\n 首先推荐一几个icon库，这些icon非常精美，并且实时更新：\n1.阿里妈妈icon库：\n[http://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.8&manage_type=myicons&icontype=histories&keyword=](http://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.8&manage_type=myicons&icontype=histories&keyword=)\n2.Easyicon\n[http://www.easyicon.net/](http://www.easyicon.net/)\n在这里可以下载相应的icon，推荐下载SVG，这个格式的图片制作字体很方便。\n \n\n看一下百度官方的代码\n  \n\n```\n<div class=\"bdsharebuttonbox\">\n\t<a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a>\n\t<a href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\"></a>\n\t<a href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\"></a>\n\t<a href=\"#\" class=\"bds_tqq\" data-cmd=\"tqq\"></a>\n\t<a href=\"#\" class=\"bds_renren\" data-cmd=\"renren\"></a>\n\t<a href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\"></a>\n</div>\n<script>\n\twindow._bd_share_config = {\n\t\t\"common\": {\n\t\t\t\"bdSnsKey\": {},\n\t\t\t\"bdText\": \"\",\n\t\t\t\"bdMini\": \"2\",\n\t\t\t\"bdPic\": \"\",\n\t\t\t\"bdStyle\": \"0\",\n\t\t\t\"bdSize\": \"16\"\n\t\t},\n\t\t\"share\": {},\n\t\t\"image\": {\n\t\t\t\"viewList\": [\"qzone\", \"tsina\", \"tqq\", \"renren\", \"weixin\"],\n\t\t\t\"viewText\": \"分享到：\",\n\t\t\t\"viewSize\": \"16\"\n\t\t},\n\t\t\"selectShare\": {\n\t\t\t\"bdContainerClass\": null,\n\t\t\t\"bdSelectMiniList\": [\"qzone\", \"tsina\", \"tqq\", \"renren\", \"weixin\"]\n\t\t}\n\t};\n\twith(document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];\n</script>\n```\n不难发现，其实a标签的父div：bdsharebuttonbox已经提前为a标签设置好了样式和背景图了。\n\n这里我们下载好图标，能否直接插入到`<a>` 标签中，然后 实现对应图片的替换呢？显然不行，因为百度通过class类设定好的背景图片，不会被框架内的图片所覆盖，给大家演示一下错误的示范：\n![这是错误的示范](http://img.blog.csdn.net/20171103174622391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n不仅没有变美，反而更丑了。\n\n三、功能实现\n\n3.1 将原始图标替换为图片图标\n\n\n\n怎么办呢？其实我们应该直接设定对应class类的背景图，并且加权!important，就可以完美实现背景图的替换了。\n\n```\n.bd_qzone{background:url(./img/qq.png) !important}\n.bd_tsina{background:url(./img/sina.png) !important}\n```\n这里要说明一下，百度的Share api第三方的图标，全部都是32*32的，因此如果你的图片过于清晰（分辨率太高），应该增加backgrond-size:cover !important ，来填充。\n```\n.bd_qzone{background:url(./img/qq.png) !important;backgrond-size:cover !important }\n.bd_tsina{background:url(./img/sina.png) !important;backgrond-size:cover !important }\n```\n这样，可以实现一个比较好看的图标分享小模块了：\n![这里写图片描述](http://img.blog.csdn.net/20171103175129123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这里我用的图标是128*128的，即便将网页放大10倍，也没有锯齿感。\n\n3.2字符图标完成Share 功能的实现\n   字符图标相比于图片图标，更加节省资源，而且兼容性更棒！(IE4+都支持字符图标)。\n   我们首先去阿里妈妈或者easyicon下载好对应的透明的svg文件，接着到：\n   \n  [https://icomoon.io/app/#/select](https://icomoon.io/app/#/select)\n  这个网站很牛逼，可以将图片转为各种浏览器看得懂的字符文件\n (1)我们打开网站，最上方点击import Icons，上传自己的图标图片文件\n![这里写图片描述](http://img.blog.csdn.net/20171103175717350?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n(2)上传好以后， 可以按铅笔图标对文件进行编辑，比如命名，方向结构等等\n![这里写图片描述](http://img.blog.csdn.net/20171103175823318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![这里写图片描述](http://img.blog.csdn.net/20171103175907853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n（3）上传好以后，点击下面的Generate Font,下载已经转换好的字体文件\n\n\n![这里写图片描述](http://img.blog.csdn.net/20171103175937926?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n（4）下载好以后解压，用记事本打开style.css的文件，复制到你的html页面中的```<style>```标签中\n![这里写图片描述](http://img.blog.csdn.net/20171103180119963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n```\n复制好如下：\n<style type=\"text/css\">\n\t@font-face {\n  font-family: 'icomoon';\n  src:  url('fonts/icomoon.eot?eqsiuf');\n  src:  url('fonts/icomoon.eot?eqsiuf#iefix') format('embedded-opentype'),\n    url('fonts/icomoon.ttf?eqsiuf') format('truetype'),\n    url('fonts/icomoon.woff?eqsiuf') format('woff'),\n    url('fonts/icomoon.svg?eqsiuf#icomoon') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n\n[class^=\"icon-\"], [class*=\" icon-\"] {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: 'icomoon' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon-baidu:before {\n  content: \"\\e900\";\n}\n.icon-mail:before {\n  content: \"\\e901\";\n}\n.icon-qq:before {\n  content: \"\\e902\";\n}\n.icon-qzone:before {\n  content: \"\\e903\";\n}\n.icon-renren:before {\n  content: \"\\e904\";\n}\n.icon-sina:before {\n  content: \"\\e905\";\n}\n.icon-wechat:before {\n  content: \"\\e906\";\n}\n.icon-copy:before {\n  content: \"\\e907\";\n}\n\n</style>\n```\n\n> 这段CSS代码最好不用通过`<link>`标签引入，否则会出现字符无法正常显示的问题，这个问题目前我还在找原因。\n\n现在可以看到，通过@font-face已经引入了字体文件，并且已经为你预设好了每张图片(现在他们已经变成了字符或者说字体)的类名。\n和bootstrap的glyphicon的调用方法很像，都是通过给目标对象添加类名来调用。并且通过css3的高级选择器 ，在被选择元素之前添加了content，然后是对应字符的编号，非常贴心，这个时候只需要在你想要调用的地方添加class类名即可。\n```\n<p class=\"icon-qq\"></p>\n<p class=\"icon-sina\"></p>\n最终的效果如下：\n![这里写图片描述](http://img.blog.csdn.net/20171103180831126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我通过js/jq又添加了hover效果，这个界面看上去就舒服多了。\n今天研究了一天这个问题，从最初的不明白第三方分享的原理，到现在可以改变默认样式，我觉得今天收获还是挺多的，对CSS、JS都有了更进一步的理解。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","source":"_posts/关于百度集成API-bd-share的一些窥探.md","raw":"---\ntitle:  关于百度集成API bd_share的一些窥探 \ndate: 2017-11-03 18:10:00\ntags: 百度share\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/78438174)\n\n\n  最近在做一个项目因为要用bootstrap，需要对第三方分享的图标设计两个款式，最终需求的效果如下：\n\n一、需求分析\n\n1.在PC端，要求用font字符来实现第三方分享的图标,并且鼠标经过时，设定hover效果：\n![这里写图片描述](http://img.blog.csdn.net/20171103173452202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n2.在小屏幕设备上，需要设定另外一种款式：\n![这里写图片描述](http://img.blog.csdn.net/20171103173511144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n二、思路分析\n\n理清需求以后，下面来看是如何实现的：\n\n 首先，需要点击这些第三方应用的图片或者字符，来实现相应的跳转，例如点击QQ，进入QQ的分享界面。\n\n  如果要完成这一步，需要去每个平台的官网获取分享组件，其实就是人家官方定义好的js API接口。整个页面如果只需要1个2个分享图标还好，要是十几个，20个图标，估计页面会乱七八糟自己看着都糟心。\n  于是这里安利百度share，集成了大多数的第三方share API,非常的方便，省事，复制，粘贴，一气呵成，但是效果可能就不尽人意了。\n  ![这里写图片描述](http://img.blog.csdn.net/20171103173650394?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  看到这里，我以为我打开了二零零年的一张网页，真的，这图标，这32*32的icon清晰度，真的让我很难受。\n 首先推荐一几个icon库，这些icon非常精美，并且实时更新：\n1.阿里妈妈icon库：\n[http://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.8&manage_type=myicons&icontype=histories&keyword=](http://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.8&manage_type=myicons&icontype=histories&keyword=)\n2.Easyicon\n[http://www.easyicon.net/](http://www.easyicon.net/)\n在这里可以下载相应的icon，推荐下载SVG，这个格式的图片制作字体很方便。\n \n\n看一下百度官方的代码\n  \n\n```\n<div class=\"bdsharebuttonbox\">\n\t<a href=\"#\" class=\"bds_more\" data-cmd=\"more\"></a>\n\t<a href=\"#\" class=\"bds_qzone\" data-cmd=\"qzone\"></a>\n\t<a href=\"#\" class=\"bds_tsina\" data-cmd=\"tsina\"></a>\n\t<a href=\"#\" class=\"bds_tqq\" data-cmd=\"tqq\"></a>\n\t<a href=\"#\" class=\"bds_renren\" data-cmd=\"renren\"></a>\n\t<a href=\"#\" class=\"bds_weixin\" data-cmd=\"weixin\"></a>\n</div>\n<script>\n\twindow._bd_share_config = {\n\t\t\"common\": {\n\t\t\t\"bdSnsKey\": {},\n\t\t\t\"bdText\": \"\",\n\t\t\t\"bdMini\": \"2\",\n\t\t\t\"bdPic\": \"\",\n\t\t\t\"bdStyle\": \"0\",\n\t\t\t\"bdSize\": \"16\"\n\t\t},\n\t\t\"share\": {},\n\t\t\"image\": {\n\t\t\t\"viewList\": [\"qzone\", \"tsina\", \"tqq\", \"renren\", \"weixin\"],\n\t\t\t\"viewText\": \"分享到：\",\n\t\t\t\"viewSize\": \"16\"\n\t\t},\n\t\t\"selectShare\": {\n\t\t\t\"bdContainerClass\": null,\n\t\t\t\"bdSelectMiniList\": [\"qzone\", \"tsina\", \"tqq\", \"renren\", \"weixin\"]\n\t\t}\n\t};\n\twith(document) 0[(getElementsByTagName('head')[0] || body).appendChild(createElement('script')).src = 'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=' + ~(-new Date() / 36e5)];\n</script>\n```\n不难发现，其实a标签的父div：bdsharebuttonbox已经提前为a标签设置好了样式和背景图了。\n\n这里我们下载好图标，能否直接插入到`<a>` 标签中，然后 实现对应图片的替换呢？显然不行，因为百度通过class类设定好的背景图片，不会被框架内的图片所覆盖，给大家演示一下错误的示范：\n![这是错误的示范](http://img.blog.csdn.net/20171103174622391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n不仅没有变美，反而更丑了。\n\n三、功能实现\n\n3.1 将原始图标替换为图片图标\n\n\n\n怎么办呢？其实我们应该直接设定对应class类的背景图，并且加权!important，就可以完美实现背景图的替换了。\n\n```\n.bd_qzone{background:url(./img/qq.png) !important}\n.bd_tsina{background:url(./img/sina.png) !important}\n```\n这里要说明一下，百度的Share api第三方的图标，全部都是32*32的，因此如果你的图片过于清晰（分辨率太高），应该增加backgrond-size:cover !important ，来填充。\n```\n.bd_qzone{background:url(./img/qq.png) !important;backgrond-size:cover !important }\n.bd_tsina{background:url(./img/sina.png) !important;backgrond-size:cover !important }\n```\n这样，可以实现一个比较好看的图标分享小模块了：\n![这里写图片描述](http://img.blog.csdn.net/20171103175129123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n这里我用的图标是128*128的，即便将网页放大10倍，也没有锯齿感。\n\n3.2字符图标完成Share 功能的实现\n   字符图标相比于图片图标，更加节省资源，而且兼容性更棒！(IE4+都支持字符图标)。\n   我们首先去阿里妈妈或者easyicon下载好对应的透明的svg文件，接着到：\n   \n  [https://icomoon.io/app/#/select](https://icomoon.io/app/#/select)\n  这个网站很牛逼，可以将图片转为各种浏览器看得懂的字符文件\n (1)我们打开网站，最上方点击import Icons，上传自己的图标图片文件\n![这里写图片描述](http://img.blog.csdn.net/20171103175717350?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n(2)上传好以后， 可以按铅笔图标对文件进行编辑，比如命名，方向结构等等\n![这里写图片描述](http://img.blog.csdn.net/20171103175823318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![这里写图片描述](http://img.blog.csdn.net/20171103175907853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n（3）上传好以后，点击下面的Generate Font,下载已经转换好的字体文件\n\n\n![这里写图片描述](http://img.blog.csdn.net/20171103175937926?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n（4）下载好以后解压，用记事本打开style.css的文件，复制到你的html页面中的```<style>```标签中\n![这里写图片描述](http://img.blog.csdn.net/20171103180119963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n```\n复制好如下：\n<style type=\"text/css\">\n\t@font-face {\n  font-family: 'icomoon';\n  src:  url('fonts/icomoon.eot?eqsiuf');\n  src:  url('fonts/icomoon.eot?eqsiuf#iefix') format('embedded-opentype'),\n    url('fonts/icomoon.ttf?eqsiuf') format('truetype'),\n    url('fonts/icomoon.woff?eqsiuf') format('woff'),\n    url('fonts/icomoon.svg?eqsiuf#icomoon') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n\n[class^=\"icon-\"], [class*=\" icon-\"] {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: 'icomoon' !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon-baidu:before {\n  content: \"\\e900\";\n}\n.icon-mail:before {\n  content: \"\\e901\";\n}\n.icon-qq:before {\n  content: \"\\e902\";\n}\n.icon-qzone:before {\n  content: \"\\e903\";\n}\n.icon-renren:before {\n  content: \"\\e904\";\n}\n.icon-sina:before {\n  content: \"\\e905\";\n}\n.icon-wechat:before {\n  content: \"\\e906\";\n}\n.icon-copy:before {\n  content: \"\\e907\";\n}\n\n</style>\n```\n\n> 这段CSS代码最好不用通过`<link>`标签引入，否则会出现字符无法正常显示的问题，这个问题目前我还在找原因。\n\n现在可以看到，通过@font-face已经引入了字体文件，并且已经为你预设好了每张图片(现在他们已经变成了字符或者说字体)的类名。\n和bootstrap的glyphicon的调用方法很像，都是通过给目标对象添加类名来调用。并且通过css3的高级选择器 ，在被选择元素之前添加了content，然后是对应字符的编号，非常贴心，这个时候只需要在你想要调用的地方添加class类名即可。\n```\n<p class=\"icon-qq\"></p>\n<p class=\"icon-sina\"></p>\n最终的效果如下：\n![这里写图片描述](http://img.blog.csdn.net/20171103180831126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我通过js/jq又添加了hover效果，这个界面看上去就舒服多了。\n今天研究了一天这个问题，从最初的不明白第三方分享的原理，到现在可以改变默认样式，我觉得今天收获还是挺多的，对CSS、JS都有了更进一步的理解。\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n\n","slug":"关于百度集成API-bd-share的一些窥探","published":1,"updated":"2019-05-14T14:30:28.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxr003pckuff29bncnx","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78438174\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>  最近在做一个项目因为要用bootstrap，需要对第三方分享的图标设计两个款式，最终需求的效果如下：</p>\n<p>一、需求分析</p>\n<p>1.在PC端，要求用font字符来实现第三方分享的图标,并且鼠标经过时，设定hover效果：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103173452202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>2.在小屏幕设备上，需要设定另外一种款式：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103173511144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>二、思路分析</p>\n<p>理清需求以后，下面来看是如何实现的：</p>\n<p> 首先，需要点击这些第三方应用的图片或者字符，来实现相应的跳转，例如点击QQ，进入QQ的分享界面。</p>\n<p>  如果要完成这一步，需要去每个平台的官网获取分享组件，其实就是人家官方定义好的js API接口。整个页面如果只需要1个2个分享图标还好，要是十几个，20个图标，估计页面会乱七八糟自己看着都糟心。<br>  于是这里安利百度share，集成了大多数的第三方share API,非常的方便，省事，复制，粘贴，一气呵成，但是效果可能就不尽人意了。<br>  <img src=\"http://img.blog.csdn.net/20171103173650394?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  看到这里，我以为我打开了二零零年的一张网页，真的，这图标，这32*32的icon清晰度，真的让我很难受。<br> 首先推荐一几个icon库，这些icon非常精美，并且实时更新：<br>1.阿里妈妈icon库：<br><a href=\"http://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.8&amp;manage_type=myicons&amp;icontype=histories&amp;keyword=\" target=\"_blank\" rel=\"noopener\">http://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.8&amp;manage_type=myicons&amp;icontype=histories&amp;keyword=</a><br>2.Easyicon<br><a href=\"http://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">http://www.easyicon.net/</a><br>在这里可以下载相应的icon，推荐下载SVG，这个格式的图片制作字体很方便。</p>\n<p>看一下百度官方的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;bdsharebuttonbox&quot;&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_more&quot; data-cmd=&quot;more&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_qzone&quot; data-cmd=&quot;qzone&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_tsina&quot; data-cmd=&quot;tsina&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_tqq&quot; data-cmd=&quot;tqq&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_renren&quot; data-cmd=&quot;renren&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_weixin&quot; data-cmd=&quot;weixin&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\twindow._bd_share_config = &#123;</span><br><span class=\"line\">\t\t&quot;common&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;bdSnsKey&quot;: &#123;&#125;,</span><br><span class=\"line\">\t\t\t&quot;bdText&quot;: &quot;&quot;,</span><br><span class=\"line\">\t\t\t&quot;bdMini&quot;: &quot;2&quot;,</span><br><span class=\"line\">\t\t\t&quot;bdPic&quot;: &quot;&quot;,</span><br><span class=\"line\">\t\t\t&quot;bdStyle&quot;: &quot;0&quot;,</span><br><span class=\"line\">\t\t\t&quot;bdSize&quot;: &quot;16&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&quot;share&quot;: &#123;&#125;,</span><br><span class=\"line\">\t\t&quot;image&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;viewList&quot;: [&quot;qzone&quot;, &quot;tsina&quot;, &quot;tqq&quot;, &quot;renren&quot;, &quot;weixin&quot;],</span><br><span class=\"line\">\t\t\t&quot;viewText&quot;: &quot;分享到：&quot;,</span><br><span class=\"line\">\t\t\t&quot;viewSize&quot;: &quot;16&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&quot;selectShare&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;bdContainerClass&quot;: null,</span><br><span class=\"line\">\t\t\t&quot;bdSelectMiniList&quot;: [&quot;qzone&quot;, &quot;tsina&quot;, &quot;tqq&quot;, &quot;renren&quot;, &quot;weixin&quot;]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\twith(document) 0[(getElementsByTagName(&apos;head&apos;)[0] || body).appendChild(createElement(&apos;script&apos;)).src = &apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos; + ~(-new Date() / 36e5)];</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>不难发现，其实a标签的父div：bdsharebuttonbox已经提前为a标签设置好了样式和背景图了。</p>\n<p>这里我们下载好图标，能否直接插入到<code>&lt;a&gt;</code> 标签中，然后 实现对应图片的替换呢？显然不行，因为百度通过class类设定好的背景图片，不会被框架内的图片所覆盖，给大家演示一下错误的示范：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103174622391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这是错误的示范\" title=\"\" class=\"\">\n                <p>这是错误的示范</p>\n            </figure><br>不仅没有变美，反而更丑了。</p>\n<p>三、功能实现</p>\n<p>3.1 将原始图标替换为图片图标</p>\n<p>怎么办呢？其实我们应该直接设定对应class类的背景图，并且加权!important，就可以完美实现背景图的替换了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.bd_qzone&#123;background:url(./img/qq.png) !important&#125;</span><br><span class=\"line\">.bd_tsina&#123;background:url(./img/sina.png) !important&#125;</span><br></pre></td></tr></table></figure>\n<p>这里要说明一下，百度的Share api第三方的图标，全部都是32*32的，因此如果你的图片过于清晰（分辨率太高），应该增加backgrond-size:cover !important ，来填充。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.bd_qzone&#123;background:url(./img/qq.png) !important;backgrond-size:cover !important &#125;</span><br><span class=\"line\">.bd_tsina&#123;background:url(./img/sina.png) !important;backgrond-size:cover !important &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样，可以实现一个比较好看的图标分享小模块了：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103175129123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>这里我用的图标是128*128的，即便将网页放大10倍，也没有锯齿感。</p>\n<p>3.2字符图标完成Share 功能的实现<br>   字符图标相比于图片图标，更加节省资源，而且兼容性更棒！(IE4+都支持字符图标)。<br>   我们首先去阿里妈妈或者easyicon下载好对应的透明的svg文件，接着到：</p>\n<p>  <a href=\"https://icomoon.io/app/#/select\" target=\"_blank\" rel=\"noopener\">https://icomoon.io/app/#/select</a><br>  这个网站很牛逼，可以将图片转为各种浏览器看得懂的字符文件<br> (1)我们打开网站，最上方点击import Icons，上传自己的图标图片文件<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103175717350?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>(2)上传好以后， 可以按铅笔图标对文件进行编辑，比如命名，方向结构等等<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103175907853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述](http://img.blog.csdn.net/20171103175823318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述](http://img.blog.csdn.net/20171103175823318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![这里写图片描述</p>\n            </figure><br>（3）上传好以后，点击下面的Generate Font,下载已经转换好的字体文件</p>\n<p><img src=\"http://img.blog.csdn.net/20171103175937926?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>（4）下载好以后解压，用记事本打开style.css的文件，复制到你的html页面中的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![这里写图片描述](http://img.blog.csdn.net/20171103180119963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</span><br></pre></td></tr></table></figure></p>\n<p>复制好如下：</p>\n<p><style type=\"text/css\"><br>    @font-face {<br>  font-family: ‘icomoon’;<br>  src:  url(‘fonts/icomoon.eot?eqsiuf’);<br>  src:  url(‘fonts/icomoon.eot?eqsiuf#iefix’) format(‘embedded-opentype’),<br>    url(‘fonts/icomoon.ttf?eqsiuf’) format(‘truetype’),<br>    url(‘fonts/icomoon.woff?eqsiuf’) format(‘woff’),<br>    url(‘fonts/icomoon.svg?eqsiuf#icomoon’) format(‘svg’);<br>  font-weight: normal;<br>  font-style: normal;<br>}</p>\n<p>[class^=”icon-“], [class<em>=” icon-“] {<br>  /</em> use !important to prevent issues with browser extensions that change fonts */<br>  font-family: ‘icomoon’ !important;<br>  speak: none;<br>  font-style: normal;<br>  font-weight: normal;<br>  font-variant: normal;<br>  text-transform: none;<br>  line-height: 1;</p>\n<p>  /<em> Better Font Rendering =========== </em>/<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>}</p>\n<p>.icon-baidu:before {<br>  content: “\\e900”;<br>}<br>.icon-mail:before {<br>  content: “\\e901”;<br>}<br>.icon-qq:before {<br>  content: “\\e902”;<br>}<br>.icon-qzone:before {<br>  content: “\\e903”;<br>}<br>.icon-renren:before {<br>  content: “\\e904”;<br>}<br>.icon-sina:before {<br>  content: “\\e905”;<br>}<br>.icon-wechat:before {<br>  content: “\\e906”;<br>}<br>.icon-copy:before {<br>  content: “\\e907”;<br>}</p>\n<p></style><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; 这段CSS代码最好不用通过`&lt;link&gt;`标签引入，否则会出现字符无法正常显示的问题，这个问题目前我还在找原因。</span><br><span class=\"line\"></span><br><span class=\"line\">现在可以看到，通过@font-face已经引入了字体文件，并且已经为你预设好了每张图片(现在他们已经变成了字符或者说字体)的类名。</span><br><span class=\"line\">和bootstrap的glyphicon的调用方法很像，都是通过给目标对象添加类名来调用。并且通过css3的高级选择器 ，在被选择元素之前添加了content，然后是对应字符的编号，非常贴心，这个时候只需要在你想要调用的地方添加class类名即可。</span><br></pre></td></tr></table></figure></p>\n<p></p><p class=\"icon-qq\"></p><p></p>\n<p></p><p class=\"icon-sina\"></p><br>最终的效果如下：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103180831126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>我通过js/jq又添加了hover效果，这个界面看上去就舒服多了。<br>今天研究了一天这个问题，从最初的不明白第三方分享的原理，到现在可以改变默认样式，我觉得今天收获还是挺多的，对CSS、JS都有了更进一步的理解。<p></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/78438174\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>  最近在做一个项目因为要用bootstrap，需要对第三方分享的图标设计两个款式，最终需求的效果如下：</p>\n<p>一、需求分析</p>\n<p>1.在PC端，要求用font字符来实现第三方分享的图标,并且鼠标经过时，设定hover效果：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103173452202?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>2.在小屏幕设备上，需要设定另外一种款式：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103173511144?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>二、思路分析</p>\n<p>理清需求以后，下面来看是如何实现的：</p>\n<p> 首先，需要点击这些第三方应用的图片或者字符，来实现相应的跳转，例如点击QQ，进入QQ的分享界面。</p>\n<p>  如果要完成这一步，需要去每个平台的官网获取分享组件，其实就是人家官方定义好的js API接口。整个页面如果只需要1个2个分享图标还好，要是十几个，20个图标，估计页面会乱七八糟自己看着都糟心。<br>  于是这里安利百度share，集成了大多数的第三方share API,非常的方便，省事，复制，粘贴，一气呵成，但是效果可能就不尽人意了。<br>  <img src=\"http://img.blog.csdn.net/20171103173650394?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>  看到这里，我以为我打开了二零零年的一张网页，真的，这图标，这32*32的icon清晰度，真的让我很难受。<br> 首先推荐一几个icon库，这些icon非常精美，并且实时更新：<br>1.阿里妈妈icon库：<br><a href=\"http://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.8&amp;manage_type=myicons&amp;icontype=histories&amp;keyword=\" target=\"_blank\" rel=\"noopener\">http://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.8&amp;manage_type=myicons&amp;icontype=histories&amp;keyword=</a><br>2.Easyicon<br><a href=\"http://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">http://www.easyicon.net/</a><br>在这里可以下载相应的icon，推荐下载SVG，这个格式的图片制作字体很方便。</p>\n<p>看一下百度官方的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;bdsharebuttonbox&quot;&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_more&quot; data-cmd=&quot;more&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_qzone&quot; data-cmd=&quot;qzone&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_tsina&quot; data-cmd=&quot;tsina&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_tqq&quot; data-cmd=&quot;tqq&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_renren&quot; data-cmd=&quot;renren&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=&quot;#&quot; class=&quot;bds_weixin&quot; data-cmd=&quot;weixin&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\twindow._bd_share_config = &#123;</span><br><span class=\"line\">\t\t&quot;common&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;bdSnsKey&quot;: &#123;&#125;,</span><br><span class=\"line\">\t\t\t&quot;bdText&quot;: &quot;&quot;,</span><br><span class=\"line\">\t\t\t&quot;bdMini&quot;: &quot;2&quot;,</span><br><span class=\"line\">\t\t\t&quot;bdPic&quot;: &quot;&quot;,</span><br><span class=\"line\">\t\t\t&quot;bdStyle&quot;: &quot;0&quot;,</span><br><span class=\"line\">\t\t\t&quot;bdSize&quot;: &quot;16&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&quot;share&quot;: &#123;&#125;,</span><br><span class=\"line\">\t\t&quot;image&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;viewList&quot;: [&quot;qzone&quot;, &quot;tsina&quot;, &quot;tqq&quot;, &quot;renren&quot;, &quot;weixin&quot;],</span><br><span class=\"line\">\t\t\t&quot;viewText&quot;: &quot;分享到：&quot;,</span><br><span class=\"line\">\t\t\t&quot;viewSize&quot;: &quot;16&quot;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&quot;selectShare&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;bdContainerClass&quot;: null,</span><br><span class=\"line\">\t\t\t&quot;bdSelectMiniList&quot;: [&quot;qzone&quot;, &quot;tsina&quot;, &quot;tqq&quot;, &quot;renren&quot;, &quot;weixin&quot;]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\twith(document) 0[(getElementsByTagName(&apos;head&apos;)[0] || body).appendChild(createElement(&apos;script&apos;)).src = &apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos; + ~(-new Date() / 36e5)];</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>不难发现，其实a标签的父div：bdsharebuttonbox已经提前为a标签设置好了样式和背景图了。</p>\n<p>这里我们下载好图标，能否直接插入到<code>&lt;a&gt;</code> 标签中，然后 实现对应图片的替换呢？显然不行，因为百度通过class类设定好的背景图片，不会被框架内的图片所覆盖，给大家演示一下错误的示范：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103174622391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这是错误的示范\" title=\"\" class=\"\">\n                <p>这是错误的示范</p>\n            </figure><br>不仅没有变美，反而更丑了。</p>\n<p>三、功能实现</p>\n<p>3.1 将原始图标替换为图片图标</p>\n<p>怎么办呢？其实我们应该直接设定对应class类的背景图，并且加权!important，就可以完美实现背景图的替换了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.bd_qzone&#123;background:url(./img/qq.png) !important&#125;</span><br><span class=\"line\">.bd_tsina&#123;background:url(./img/sina.png) !important&#125;</span><br></pre></td></tr></table></figure>\n<p>这里要说明一下，百度的Share api第三方的图标，全部都是32*32的，因此如果你的图片过于清晰（分辨率太高），应该增加backgrond-size:cover !important ，来填充。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.bd_qzone&#123;background:url(./img/qq.png) !important;backgrond-size:cover !important &#125;</span><br><span class=\"line\">.bd_tsina&#123;background:url(./img/sina.png) !important;backgrond-size:cover !important &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样，可以实现一个比较好看的图标分享小模块了：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103175129123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>这里我用的图标是128*128的，即便将网页放大10倍，也没有锯齿感。</p>\n<p>3.2字符图标完成Share 功能的实现<br>   字符图标相比于图片图标，更加节省资源，而且兼容性更棒！(IE4+都支持字符图标)。<br>   我们首先去阿里妈妈或者easyicon下载好对应的透明的svg文件，接着到：</p>\n<p>  <a href=\"https://icomoon.io/app/#/select\" target=\"_blank\" rel=\"noopener\">https://icomoon.io/app/#/select</a><br>  这个网站很牛逼，可以将图片转为各种浏览器看得懂的字符文件<br> (1)我们打开网站，最上方点击import Icons，上传自己的图标图片文件<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103175717350?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>(2)上传好以后， 可以按铅笔图标对文件进行编辑，比如命名，方向结构等等<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103175907853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述](http://img.blog.csdn.net/20171103175823318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述](http://img.blog.csdn.net/20171103175823318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)![这里写图片描述</p>\n            </figure><br>（3）上传好以后，点击下面的Generate Font,下载已经转换好的字体文件</p>\n<p><img src=\"http://img.blog.csdn.net/20171103175937926?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>（4）下载好以后解压，用记事本打开style.css的文件，复制到你的html页面中的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![这里写图片描述](http://img.blog.csdn.net/20171103180119963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</span><br></pre></td></tr></table></figure></p>\n<p>复制好如下：</p>\n<p><style type=\"text/css\"><br>    @font-face {<br>  font-family: ‘icomoon’;<br>  src:  url(‘fonts/icomoon.eot?eqsiuf’);<br>  src:  url(‘fonts/icomoon.eot?eqsiuf#iefix’) format(‘embedded-opentype’),<br>    url(‘fonts/icomoon.ttf?eqsiuf’) format(‘truetype’),<br>    url(‘fonts/icomoon.woff?eqsiuf’) format(‘woff’),<br>    url(‘fonts/icomoon.svg?eqsiuf#icomoon’) format(‘svg’);<br>  font-weight: normal;<br>  font-style: normal;<br>}</p>\n<p>[class^=”icon-“], [class<em>=” icon-“] {<br>  /</em> use !important to prevent issues with browser extensions that change fonts */<br>  font-family: ‘icomoon’ !important;<br>  speak: none;<br>  font-style: normal;<br>  font-weight: normal;<br>  font-variant: normal;<br>  text-transform: none;<br>  line-height: 1;</p>\n<p>  /<em> Better Font Rendering =========== </em>/<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>}</p>\n<p>.icon-baidu:before {<br>  content: “\\e900”;<br>}<br>.icon-mail:before {<br>  content: “\\e901”;<br>}<br>.icon-qq:before {<br>  content: “\\e902”;<br>}<br>.icon-qzone:before {<br>  content: “\\e903”;<br>}<br>.icon-renren:before {<br>  content: “\\e904”;<br>}<br>.icon-sina:before {<br>  content: “\\e905”;<br>}<br>.icon-wechat:before {<br>  content: “\\e906”;<br>}<br>.icon-copy:before {<br>  content: “\\e907”;<br>}</p>\n<p></style><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; 这段CSS代码最好不用通过`&lt;link&gt;`标签引入，否则会出现字符无法正常显示的问题，这个问题目前我还在找原因。</span><br><span class=\"line\"></span><br><span class=\"line\">现在可以看到，通过@font-face已经引入了字体文件，并且已经为你预设好了每张图片(现在他们已经变成了字符或者说字体)的类名。</span><br><span class=\"line\">和bootstrap的glyphicon的调用方法很像，都是通过给目标对象添加类名来调用。并且通过css3的高级选择器 ，在被选择元素之前添加了content，然后是对应字符的编号，非常贴心，这个时候只需要在你想要调用的地方添加class类名即可。</span><br></pre></td></tr></table></figure></p>\n<p></p><p class=\"icon-qq\"></p><p></p>\n<p></p><p class=\"icon-sina\"></p><br>最终的效果如下：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20171103180831126?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure><br>我通过js/jq又添加了hover效果，这个界面看上去就舒服多了。<br>今天研究了一天这个问题，从最初的不明白第三方分享的原理，到现在可以改变默认样式，我觉得今天收获还是挺多的，对CSS、JS都有了更进一步的理解。<p></p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 上","date":"2018-01-31T07:28:17.000Z","reward":true,"comment":true,"_content":"\n\n\n\n\n\n\n\n\n\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79212913)\n\n\n这篇博客同步更新于我的GitHub博客：[我的GitHub博客](https://zq-jhon.github.io/2018/01/30/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E6%AC%A1%E8%85%BE%E8%AE%AF%E8%BF%9C%E7%A8%8B%E9%9D%A2%E8%AF%95%E7%9A%84%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E7%AD%94%28%E7%B2%BE%E5%BF%83%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE%29%20%E4%B8%8A/)\n\n面试回顾：[腾讯面试回顾](http://blog.csdn.net/qq_20264891/article/details/79158495)\n\n## 1.js中ajax发送请求的步骤 ##\n    在js中，有一个用于异步请求的对象，XMLHttpRquest对象，使用该对象可以向服务端发送请求(post,get,put...)。原生的方法步骤如下:\n   \n**①创建XMLHttpRequest对象（标准浏览器）：**\n  \n\n```\nif(window.XMLHttpRequest){\n  var xhr = new XMLHttpRequest();\n}\n```\n\n IE7及以下，这个对象为：ActiveXObject：\n \n \n\n```\nif(window.ActiveXObject){\nvar xhr = new ActiveXObject('Microsoft.XMLHTTP')\n}\n```\n\n**② 初始化请求**\n \n \n\n```\nxhr.open('GET','http://www.请求地址.com',是否异步?true:false);\n```\n\n**③发送请求/传递数据**\n\n```\nxhr.send();\n```\n\n请求的文件路径，如果是GET方式，直接缀在请求地址的后面，以如下的形式：\n\n```\n//数据\nxhr.open('GET','http://www.请求地址.com/index.html',true);\n```\n\n如果是POST方法，直接写  `xhr.send('数据')` 中。\n\n**④设置异步回调callback()**\n先给个错误示范：\n```\n//xhr.readyState 本地的请求状态\n//xhr.status 服务器返回的请求状态码\nif(xhr.readystate==4 && xhr.status == 200){\n  do something...\n}\n```\n这里的本质原因是没有本地xhr对象改变的事件，因此这里的readystate会一直长等于 1\n\n这里的异步方式主要通过一个事件来完成：\n\n```\nxhr.onreadystatechange()=function(){\n\nif(xhr.readystate==4 && xhr.status == 200){\n  do something...\n}\n\n}\n```\n如果在步骤②中请求的方式是同步的，一旦服务器压力过大，没有及时响应，那么代码会一直卡在这里，一直傻傻的等到服务器响应200，才会do something。\n\n反之，如果请求方式是异步的，那么这里的响应无论是否及时，都不会阻塞后面的代码。\n\n扩展：既然 readyState==4 && status ==200 是一个回调，那么我们也可以使用其他的http状态码来设置不同的回调~\n参考文章 ，我以前的博客：[Ajax初探](https://zq-jhon.github.io/2017/11/06/Ajax%E5%88%9D%E6%8E%A2/)\n上一次的面试中，xhr.open()初始化  xhr.send()发送请求  xhr.onreadystatechange=function(){}回调函数  这三点都忘记答了，一定要注意。\n## 2.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？ ##\n\n事件捕获、事件响应、事件冒泡。\n\n如图：\n\n![事件捕获和冒泡](http://img.blog.csdn.net/20180131093105267?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n不管body上绑定事件、或者div甚至div的text节点上绑定事件，这个事件必须先从根节点开始遍历（即Window对象开始），从上往下，传递的过程中，发现有的元素绑定了事件，也先放着，等全部事件捕获完毕（遍历完毕）， 开始处理事件，处理的顺序为，从最小的根节点上的事件开始，依次向上冒泡。\n\n一句话概括这种机制：\n\n捕获：自外而内，从根到叶，从大到小 。\n\n冒泡：自内而外，从叶到根，从小到大。\n\n来做个实验，有如下的html结构 和 js代码：\n\n```\n<!--HTML结构-->\n<div id=\"div1\">\n\t\t我是DIV1\n\t\t<div id=\"div2\">\n\t\t\t我是DIV2\n\t\t\t<button id=\"btn\">\n\t\t\t\ti am a button\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\n\n//script代码\n\nvar div1 = document.getElementById('div1');\nvar div2 = document.getElementById('div2');\nvar btn = document.getElementById('btn');\n\nbtn.addEventListener('click', function() {console.log(this.id)},false);\n\n\ndiv2.addEventListener('click', function(){console.log(this.id)},false);\n\ndiv1.addEventListener('click', function(){console.log(this.id)},false);\n\t\n```\nHTML结构如图：\n\n![HTML结构](http://img.blog.csdn.net/20180131094357898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n当点击最里面的button，会依次出现这种情况：\n\n![控制台输出](http://img.blog.csdn.net/20180131094911606?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，事件是在冒泡阶段被触发的。\n\n当改变js API中最后一个Boolean值为true时，又会产生另外一种景观：\n\n![这里写图片描述](http://img.blog.csdn.net/20180131095628141?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这次是从外向内依次触发的。\n\n总结：\n1.addEventListener(事件，函数，boolean?捕获:冒泡)，这个API可以设置事件触发于捕获/冒泡阶段，而且这个事件可以复写。\n2.普通的API,例如 onclick ,onmouse 默认只能在冒泡阶段触发，而且不能复写，复写事件会覆盖。\n\n## 3.闭包是怎么回事？用在什么场景？ ##\n简而言之：**1、闭包就是可以访问局部作用域的变量。**\n并且：        **2、 可以使局部变量常驻内存**\n参考阮一峰老师的闭包博客： [阮一峰----闭包](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n\n**Q:闭包的内部函数为什么变量不会被销毁？**\nA：\n\n```\nfunction a(){\nvar a =1;\n\nfunction b(){\na+=1;\nreturn a;\n}\nreturn b();\n\n}\n```\n\n因为此时的子函数b一直对于a函数的变量“a=1”有需求，因此这个变量会常驻内存，不会被销毁。\n\n**Q 3.1：什么时候才能够销毁这个内存呢？（销毁机制和人为销毁方法）**\n\nA：浏览器中的js引擎有自己的垃圾回收机制，当一个变量或者对象引用为0的时候，会自动回收。\n人为的销毁内存的办法：1.关闭网页，结束js运行环境。2.销毁变量，为变量赋值 null；\n\n**Q3.2：如何避免内存泄漏的问题？**\nA：减少全局空间的污染，良好的变量定义习惯。减少变量的引用。\n\n## 4.CALL和Apply是干嘛的？ ##\n二者都是为了更改function 的this指针，举个例子\n\nCALL(新的this对象，原先的参数1，原先的参数2...);\nApply(新的this对象，[原先的参数1，原先的参数2...]);\n\n先传入新的this对象，再传入旧方法的传参。\n\n## 5.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？ ##\n1.jsonp跨域\n利用`<script>`标签的跨域特性，将请求的语句写在script标签的src属性上，然后定义一个方法，用于接受返回值responseText。代码如下：\n\n```\n\t\t//在js预先定义好callback()函数  \n\t\t\n\t\tfunction fun(data){\n\t\t\t\n\t\t\t//use data to do somethings.\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t//动态创建script标签，并在url中说明请求地址\n\t\tvar body = document.getElementsByTagName('body')[0];\n\t\t\n\t\tvar script = document.createElement('script');\n\t\t\n\t\tscript.type = 'text/javasctipt';\n\t\t\n\t\tscript.src = 'require.php?callback=fun';\n\t\t\n\t\tbody.appendChild(script);\n\t\t\n\t\t//Script插入完成，一旦服务端有响应，传递过来的响应文本会直接被当做js代码执行。\n\t       //假设传回的值是 fun({\"name\":\"xiaoming\"})，那么小明这个对象会被当做参数传递给早就定义好的fun()函数。\n\t\t\n```\n这样，通过script不受跨域访问的特性，实现了跨域访问。\n\n2.CORS跨域（主流浏览器及IE10+）\n    对于客户端，我们还是正常使用xhr对象发送ajax请求。\n    唯一需要注意的是，我们需要设置我们的xhr属性withCredentials为true，不然的话，cookie是带不过去的哦，设置： xhr.withCredentials = true;\n    对于服务器端，需要在 response header中设置如下两个字段:\n    Access-Control-Allow-Origin: http://www.yourhost.com\n    Access-Control-Allow-Credentials:true\n    这样，我们就可以跨域请求接口了。\n\n3.返回的json和jsonp有什么区别？\n返回的json是json格式的文件，而返回的jsonp是字符串形式的文件，形如：\n\n```\ncallback({\"name\":\"HanMeiMei\"})\n```\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 上.md","raw":"---\ntitle:  基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 上 \ndate: 2018-01-31 15:28:17\ntags: [腾讯,面试,javascript,浏览器兼容,ajax,原理]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n\n\n\n\n\n\n\n\n\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客](http://blog.csdn.net/qq_20264891/article/details/79212913)\n\n\n这篇博客同步更新于我的GitHub博客：[我的GitHub博客](https://zq-jhon.github.io/2018/01/30/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E6%AC%A1%E8%85%BE%E8%AE%AF%E8%BF%9C%E7%A8%8B%E9%9D%A2%E8%AF%95%E7%9A%84%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E7%AD%94%28%E7%B2%BE%E5%BF%83%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE%29%20%E4%B8%8A/)\n\n面试回顾：[腾讯面试回顾](http://blog.csdn.net/qq_20264891/article/details/79158495)\n\n## 1.js中ajax发送请求的步骤 ##\n    在js中，有一个用于异步请求的对象，XMLHttpRquest对象，使用该对象可以向服务端发送请求(post,get,put...)。原生的方法步骤如下:\n   \n**①创建XMLHttpRequest对象（标准浏览器）：**\n  \n\n```\nif(window.XMLHttpRequest){\n  var xhr = new XMLHttpRequest();\n}\n```\n\n IE7及以下，这个对象为：ActiveXObject：\n \n \n\n```\nif(window.ActiveXObject){\nvar xhr = new ActiveXObject('Microsoft.XMLHTTP')\n}\n```\n\n**② 初始化请求**\n \n \n\n```\nxhr.open('GET','http://www.请求地址.com',是否异步?true:false);\n```\n\n**③发送请求/传递数据**\n\n```\nxhr.send();\n```\n\n请求的文件路径，如果是GET方式，直接缀在请求地址的后面，以如下的形式：\n\n```\n//数据\nxhr.open('GET','http://www.请求地址.com/index.html',true);\n```\n\n如果是POST方法，直接写  `xhr.send('数据')` 中。\n\n**④设置异步回调callback()**\n先给个错误示范：\n```\n//xhr.readyState 本地的请求状态\n//xhr.status 服务器返回的请求状态码\nif(xhr.readystate==4 && xhr.status == 200){\n  do something...\n}\n```\n这里的本质原因是没有本地xhr对象改变的事件，因此这里的readystate会一直长等于 1\n\n这里的异步方式主要通过一个事件来完成：\n\n```\nxhr.onreadystatechange()=function(){\n\nif(xhr.readystate==4 && xhr.status == 200){\n  do something...\n}\n\n}\n```\n如果在步骤②中请求的方式是同步的，一旦服务器压力过大，没有及时响应，那么代码会一直卡在这里，一直傻傻的等到服务器响应200，才会do something。\n\n反之，如果请求方式是异步的，那么这里的响应无论是否及时，都不会阻塞后面的代码。\n\n扩展：既然 readyState==4 && status ==200 是一个回调，那么我们也可以使用其他的http状态码来设置不同的回调~\n参考文章 ，我以前的博客：[Ajax初探](https://zq-jhon.github.io/2017/11/06/Ajax%E5%88%9D%E6%8E%A2/)\n上一次的面试中，xhr.open()初始化  xhr.send()发送请求  xhr.onreadystatechange=function(){}回调函数  这三点都忘记答了，一定要注意。\n## 2.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？ ##\n\n事件捕获、事件响应、事件冒泡。\n\n如图：\n\n![事件捕获和冒泡](http://img.blog.csdn.net/20180131093105267?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n不管body上绑定事件、或者div甚至div的text节点上绑定事件，这个事件必须先从根节点开始遍历（即Window对象开始），从上往下，传递的过程中，发现有的元素绑定了事件，也先放着，等全部事件捕获完毕（遍历完毕）， 开始处理事件，处理的顺序为，从最小的根节点上的事件开始，依次向上冒泡。\n\n一句话概括这种机制：\n\n捕获：自外而内，从根到叶，从大到小 。\n\n冒泡：自内而外，从叶到根，从小到大。\n\n来做个实验，有如下的html结构 和 js代码：\n\n```\n<!--HTML结构-->\n<div id=\"div1\">\n\t\t我是DIV1\n\t\t<div id=\"div2\">\n\t\t\t我是DIV2\n\t\t\t<button id=\"btn\">\n\t\t\t\ti am a button\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\n\n//script代码\n\nvar div1 = document.getElementById('div1');\nvar div2 = document.getElementById('div2');\nvar btn = document.getElementById('btn');\n\nbtn.addEventListener('click', function() {console.log(this.id)},false);\n\n\ndiv2.addEventListener('click', function(){console.log(this.id)},false);\n\ndiv1.addEventListener('click', function(){console.log(this.id)},false);\n\t\n```\nHTML结构如图：\n\n![HTML结构](http://img.blog.csdn.net/20180131094357898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n当点击最里面的button，会依次出现这种情况：\n\n![控制台输出](http://img.blog.csdn.net/20180131094911606?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以看到，事件是在冒泡阶段被触发的。\n\n当改变js API中最后一个Boolean值为true时，又会产生另外一种景观：\n\n![这里写图片描述](http://img.blog.csdn.net/20180131095628141?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这次是从外向内依次触发的。\n\n总结：\n1.addEventListener(事件，函数，boolean?捕获:冒泡)，这个API可以设置事件触发于捕获/冒泡阶段，而且这个事件可以复写。\n2.普通的API,例如 onclick ,onmouse 默认只能在冒泡阶段触发，而且不能复写，复写事件会覆盖。\n\n## 3.闭包是怎么回事？用在什么场景？ ##\n简而言之：**1、闭包就是可以访问局部作用域的变量。**\n并且：        **2、 可以使局部变量常驻内存**\n参考阮一峰老师的闭包博客： [阮一峰----闭包](http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n\n**Q:闭包的内部函数为什么变量不会被销毁？**\nA：\n\n```\nfunction a(){\nvar a =1;\n\nfunction b(){\na+=1;\nreturn a;\n}\nreturn b();\n\n}\n```\n\n因为此时的子函数b一直对于a函数的变量“a=1”有需求，因此这个变量会常驻内存，不会被销毁。\n\n**Q 3.1：什么时候才能够销毁这个内存呢？（销毁机制和人为销毁方法）**\n\nA：浏览器中的js引擎有自己的垃圾回收机制，当一个变量或者对象引用为0的时候，会自动回收。\n人为的销毁内存的办法：1.关闭网页，结束js运行环境。2.销毁变量，为变量赋值 null；\n\n**Q3.2：如何避免内存泄漏的问题？**\nA：减少全局空间的污染，良好的变量定义习惯。减少变量的引用。\n\n## 4.CALL和Apply是干嘛的？ ##\n二者都是为了更改function 的this指针，举个例子\n\nCALL(新的this对象，原先的参数1，原先的参数2...);\nApply(新的this对象，[原先的参数1，原先的参数2...]);\n\n先传入新的this对象，再传入旧方法的传参。\n\n## 5.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？ ##\n1.jsonp跨域\n利用`<script>`标签的跨域特性，将请求的语句写在script标签的src属性上，然后定义一个方法，用于接受返回值responseText。代码如下：\n\n```\n\t\t//在js预先定义好callback()函数  \n\t\t\n\t\tfunction fun(data){\n\t\t\t\n\t\t\t//use data to do somethings.\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t//动态创建script标签，并在url中说明请求地址\n\t\tvar body = document.getElementsByTagName('body')[0];\n\t\t\n\t\tvar script = document.createElement('script');\n\t\t\n\t\tscript.type = 'text/javasctipt';\n\t\t\n\t\tscript.src = 'require.php?callback=fun';\n\t\t\n\t\tbody.appendChild(script);\n\t\t\n\t\t//Script插入完成，一旦服务端有响应，传递过来的响应文本会直接被当做js代码执行。\n\t       //假设传回的值是 fun({\"name\":\"xiaoming\"})，那么小明这个对象会被当做参数传递给早就定义好的fun()函数。\n\t\t\n```\n这样，通过script不受跨域访问的特性，实现了跨域访问。\n\n2.CORS跨域（主流浏览器及IE10+）\n    对于客户端，我们还是正常使用xhr对象发送ajax请求。\n    唯一需要注意的是，我们需要设置我们的xhr属性withCredentials为true，不然的话，cookie是带不过去的哦，设置： xhr.withCredentials = true;\n    对于服务器端，需要在 response header中设置如下两个字段:\n    Access-Control-Allow-Origin: http://www.yourhost.com\n    Access-Control-Allow-Credentials:true\n    这样，我们就可以跨域请求接口了。\n\n3.返回的json和jsonp有什么区别？\n返回的json是json格式的文件，而返回的jsonp是字符串形式的文件，形如：\n\n```\ncallback({\"name\":\"HanMeiMei\"})\n```\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 上","published":1,"updated":"2019-05-14T14:30:37.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxt003sckufwhcj8qp5","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79212913\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>这篇博客同步更新于我的GitHub博客：<a href=\"https://zq-jhon.github.io/2018/01/30/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E6%AC%A1%E8%85%BE%E8%AE%AF%E8%BF%9C%E7%A8%8B%E9%9D%A2%E8%AF%95%E7%9A%84%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E7%AD%94%28%E7%B2%BE%E5%BF%83%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE%29%20%E4%B8%8A/\" target=\"_blank\" rel=\"noopener\">我的GitHub博客</a></p>\n<p>面试回顾：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79158495\" target=\"_blank\" rel=\"noopener\">腾讯面试回顾</a></p>\n<h2 id=\"1-js中ajax发送请求的步骤\"><a href=\"#1-js中ajax发送请求的步骤\" class=\"headerlink\" title=\"1.js中ajax发送请求的步骤\"></a>1.js中ajax发送请求的步骤</h2><pre><code>在js中，有一个用于异步请求的对象，XMLHttpRquest对象，使用该对象可以向服务端发送请求(post,get,put...)。原生的方法步骤如下:\n</code></pre><p><strong>①创建XMLHttpRequest对象（标准浏览器）：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(window.XMLHttpRequest)&#123;</span><br><span class=\"line\">  var xhr = new XMLHttpRequest();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> IE7及以下，这个对象为：ActiveXObject：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(window.ActiveXObject)&#123;</span><br><span class=\"line\">var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>② 初始化请求</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(&apos;GET&apos;,&apos;http://www.请求地址.com&apos;,是否异步?true:false);</span><br></pre></td></tr></table></figure>\n<p><strong>③发送请求/传递数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>请求的文件路径，如果是GET方式，直接缀在请求地址的后面，以如下的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据</span><br><span class=\"line\">xhr.open(&apos;GET&apos;,&apos;http://www.请求地址.com/index.html&apos;,true);</span><br></pre></td></tr></table></figure>\n<p>如果是POST方法，直接写  <code>xhr.send(&#39;数据&#39;)</code> 中。</p>\n<p><strong>④设置异步回调callback()</strong><br>先给个错误示范：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//xhr.readyState 本地的请求状态</span><br><span class=\"line\">//xhr.status 服务器返回的请求状态码</span><br><span class=\"line\">if(xhr.readystate==4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class=\"line\">  do something...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里的本质原因是没有本地xhr对象改变的事件，因此这里的readystate会一直长等于 1</p>\n<p>这里的异步方式主要通过一个事件来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange()=function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">if(xhr.readystate==4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class=\"line\">  do something...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在步骤②中请求的方式是同步的，一旦服务器压力过大，没有及时响应，那么代码会一直卡在这里，一直傻傻的等到服务器响应200，才会do something。</p>\n<p>反之，如果请求方式是异步的，那么这里的响应无论是否及时，都不会阻塞后面的代码。</p>\n<p>扩展：既然 readyState==4 &amp;&amp; status ==200 是一个回调，那么我们也可以使用其他的http状态码来设置不同的回调~<br>参考文章 ，我以前的博客：<a href=\"https://zq-jhon.github.io/2017/11/06/Ajax%E5%88%9D%E6%8E%A2/\" target=\"_blank\" rel=\"noopener\">Ajax初探</a><br>上一次的面试中，xhr.open()初始化  xhr.send()发送请求  xhr.onreadystatechange=function(){}回调函数  这三点都忘记答了，一定要注意。</p>\n<h2 id=\"2-浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？\"><a href=\"#2-浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？\" class=\"headerlink\" title=\"2.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？\"></a>2.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？</h2><p>事件捕获、事件响应、事件冒泡。</p>\n<p>如图：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180131093105267?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"事件捕获和冒泡\" title=\"\" class=\"\">\n                <p>事件捕获和冒泡</p>\n            </figure>\n<p>不管body上绑定事件、或者div甚至div的text节点上绑定事件，这个事件必须先从根节点开始遍历（即Window对象开始），从上往下，传递的过程中，发现有的元素绑定了事件，也先放着，等全部事件捕获完毕（遍历完毕）， 开始处理事件，处理的顺序为，从最小的根节点上的事件开始，依次向上冒泡。</p>\n<p>一句话概括这种机制：</p>\n<p>捕获：自外而内，从根到叶，从大到小 。</p>\n<p>冒泡：自内而外，从叶到根，从小到大。</p>\n<p>来做个实验，有如下的html结构 和 js代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--HTML结构--&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">\t\t我是DIV1</span><br><span class=\"line\">\t\t&lt;div id=&quot;div2&quot;&gt;</span><br><span class=\"line\">\t\t\t我是DIV2</span><br><span class=\"line\">\t\t\t&lt;button id=&quot;btn&quot;&gt;</span><br><span class=\"line\">\t\t\t\ti am a button</span><br><span class=\"line\">\t\t\t&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//script代码</span><br><span class=\"line\"></span><br><span class=\"line\">var div1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">var div2 = document.getElementById(&apos;div2&apos;);</span><br><span class=\"line\">var btn = document.getElementById(&apos;btn&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(&apos;click&apos;, function() &#123;console.log(this.id)&#125;,false);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">div2.addEventListener(&apos;click&apos;, function()&#123;console.log(this.id)&#125;,false);</span><br><span class=\"line\"></span><br><span class=\"line\">div1.addEventListener(&apos;click&apos;, function()&#123;console.log(this.id)&#125;,false);</span><br></pre></td></tr></table></figure>\n<p>HTML结构如图：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180131094357898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"HTML结构\" title=\"\" class=\"\">\n                <p>HTML结构</p>\n            </figure>\n<p>当点击最里面的button，会依次出现这种情况：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180131094911606?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"控制台输出\" title=\"\" class=\"\">\n                <p>控制台输出</p>\n            </figure>\n<p>可以看到，事件是在冒泡阶段被触发的。</p>\n<p>当改变js API中最后一个Boolean值为true时，又会产生另外一种景观：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180131095628141?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>这次是从外向内依次触发的。</p>\n<p>总结：<br>1.addEventListener(事件，函数，boolean?捕获:冒泡)，这个API可以设置事件触发于捕获/冒泡阶段，而且这个事件可以复写。<br>2.普通的API,例如 onclick ,onmouse 默认只能在冒泡阶段触发，而且不能复写，复写事件会覆盖。</p>\n<h2 id=\"3-闭包是怎么回事？用在什么场景？\"><a href=\"#3-闭包是怎么回事？用在什么场景？\" class=\"headerlink\" title=\"3.闭包是怎么回事？用在什么场景？\"></a>3.闭包是怎么回事？用在什么场景？</h2><p>简而言之：<strong>1、闭包就是可以访问局部作用域的变量。</strong><br>并且：        <strong>2、 可以使局部变量常驻内存</strong><br>参考阮一峰老师的闭包博客： <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">阮一峰—-闭包</a></p>\n<p><strong>Q:闭包的内部函数为什么变量不会被销毁？</strong><br>A：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">var a =1;</span><br><span class=\"line\"></span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">a+=1;</span><br><span class=\"line\">return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return b();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为此时的子函数b一直对于a函数的变量“a=1”有需求，因此这个变量会常驻内存，不会被销毁。</p>\n<p><strong>Q 3.1：什么时候才能够销毁这个内存呢？（销毁机制和人为销毁方法）</strong></p>\n<p>A：浏览器中的js引擎有自己的垃圾回收机制，当一个变量或者对象引用为0的时候，会自动回收。<br>人为的销毁内存的办法：1.关闭网页，结束js运行环境。2.销毁变量，为变量赋值 null；</p>\n<p><strong>Q3.2：如何避免内存泄漏的问题？</strong><br>A：减少全局空间的污染，良好的变量定义习惯。减少变量的引用。</p>\n<h2 id=\"4-CALL和Apply是干嘛的？\"><a href=\"#4-CALL和Apply是干嘛的？\" class=\"headerlink\" title=\"4.CALL和Apply是干嘛的？\"></a>4.CALL和Apply是干嘛的？</h2><p>二者都是为了更改function 的this指针，举个例子</p>\n<p>CALL(新的this对象，原先的参数1，原先的参数2…);<br>Apply(新的this对象，[原先的参数1，原先的参数2…]);</p>\n<p>先传入新的this对象，再传入旧方法的传参。</p>\n<h2 id=\"5-在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？\"><a href=\"#5-在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？\" class=\"headerlink\" title=\"5.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？\"></a>5.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？</h2><p>1.jsonp跨域<br>利用<code>&lt;script&gt;</code>标签的跨域特性，将请求的语句写在script标签的src属性上，然后定义一个方法，用于接受返回值responseText。代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在js预先定义好callback()函数  </span><br><span class=\"line\"></span><br><span class=\"line\">function fun(data)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//use data to do somethings.</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//动态创建script标签，并在url中说明请求地址</span><br><span class=\"line\">var body = document.getElementsByTagName(&apos;body&apos;)[0];</span><br><span class=\"line\"></span><br><span class=\"line\">var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">script.type = &apos;text/javasctipt&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">script.src = &apos;require.php?callback=fun&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">body.appendChild(script);</span><br><span class=\"line\"></span><br><span class=\"line\">//Script插入完成，一旦服务端有响应，传递过来的响应文本会直接被当做js代码执行。</span><br><span class=\"line\">      //假设传回的值是 fun(&#123;&quot;name&quot;:&quot;xiaoming&quot;&#125;)，那么小明这个对象会被当做参数传递给早就定义好的fun()函数。</span><br></pre></td></tr></table></figure>\n<p>这样，通过script不受跨域访问的特性，实现了跨域访问。</p>\n<p>2.CORS跨域（主流浏览器及IE10+）<br>    对于客户端，我们还是正常使用xhr对象发送ajax请求。<br>    唯一需要注意的是，我们需要设置我们的xhr属性withCredentials为true，不然的话，cookie是带不过去的哦，设置： xhr.withCredentials = true;<br>    对于服务器端，需要在 response header中设置如下两个字段:<br>    Access-Control-Allow-Origin: <a href=\"http://www.yourhost.com\" target=\"_blank\" rel=\"noopener\">http://www.yourhost.com</a><br>    Access-Control-Allow-Credentials:true<br>    这样，我们就可以跨域请求接口了。</p>\n<p>3.返回的json和jsonp有什么区别？<br>返回的json是json格式的文件，而返回的jsonp是字符串形式的文件，形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(&#123;&quot;name&quot;:&quot;HanMeiMei&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79212913\" target=\"_blank\" rel=\"noopener\">我的CSDN博客</a></p>\n<p>这篇博客同步更新于我的GitHub博客：<a href=\"https://zq-jhon.github.io/2018/01/30/%E5%9F%BA%E4%BA%8E%E4%B8%8A%E6%AC%A1%E8%85%BE%E8%AE%AF%E8%BF%9C%E7%A8%8B%E9%9D%A2%E8%AF%95%E7%9A%84%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E7%AD%94%28%E7%B2%BE%E5%BF%83%E6%80%BB%E7%BB%93%E5%9B%9E%E9%A1%BE%29%20%E4%B8%8A/\" target=\"_blank\" rel=\"noopener\">我的GitHub博客</a></p>\n<p>面试回顾：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79158495\" target=\"_blank\" rel=\"noopener\">腾讯面试回顾</a></p>\n<h2 id=\"1-js中ajax发送请求的步骤\"><a href=\"#1-js中ajax发送请求的步骤\" class=\"headerlink\" title=\"1.js中ajax发送请求的步骤\"></a>1.js中ajax发送请求的步骤</h2><pre><code>在js中，有一个用于异步请求的对象，XMLHttpRquest对象，使用该对象可以向服务端发送请求(post,get,put...)。原生的方法步骤如下:\n</code></pre><p><strong>①创建XMLHttpRequest对象（标准浏览器）：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(window.XMLHttpRequest)&#123;</span><br><span class=\"line\">  var xhr = new XMLHttpRequest();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> IE7及以下，这个对象为：ActiveXObject：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(window.ActiveXObject)&#123;</span><br><span class=\"line\">var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>② 初始化请求</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(&apos;GET&apos;,&apos;http://www.请求地址.com&apos;,是否异步?true:false);</span><br></pre></td></tr></table></figure>\n<p><strong>③发送请求/传递数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>请求的文件路径，如果是GET方式，直接缀在请求地址的后面，以如下的形式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据</span><br><span class=\"line\">xhr.open(&apos;GET&apos;,&apos;http://www.请求地址.com/index.html&apos;,true);</span><br></pre></td></tr></table></figure>\n<p>如果是POST方法，直接写  <code>xhr.send(&#39;数据&#39;)</code> 中。</p>\n<p><strong>④设置异步回调callback()</strong><br>先给个错误示范：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//xhr.readyState 本地的请求状态</span><br><span class=\"line\">//xhr.status 服务器返回的请求状态码</span><br><span class=\"line\">if(xhr.readystate==4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class=\"line\">  do something...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里的本质原因是没有本地xhr对象改变的事件，因此这里的readystate会一直长等于 1</p>\n<p>这里的异步方式主要通过一个事件来完成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange()=function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">if(xhr.readystate==4 &amp;&amp; xhr.status == 200)&#123;</span><br><span class=\"line\">  do something...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果在步骤②中请求的方式是同步的，一旦服务器压力过大，没有及时响应，那么代码会一直卡在这里，一直傻傻的等到服务器响应200，才会do something。</p>\n<p>反之，如果请求方式是异步的，那么这里的响应无论是否及时，都不会阻塞后面的代码。</p>\n<p>扩展：既然 readyState==4 &amp;&amp; status ==200 是一个回调，那么我们也可以使用其他的http状态码来设置不同的回调~<br>参考文章 ，我以前的博客：<a href=\"https://zq-jhon.github.io/2017/11/06/Ajax%E5%88%9D%E6%8E%A2/\" target=\"_blank\" rel=\"noopener\">Ajax初探</a><br>上一次的面试中，xhr.open()初始化  xhr.send()发送请求  xhr.onreadystatechange=function(){}回调函数  这三点都忘记答了，一定要注意。</p>\n<h2 id=\"2-浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？\"><a href=\"#2-浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？\" class=\"headerlink\" title=\"2.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？\"></a>2.浏览器里面的事件都会按照一定的规则去传递，这个规则是什么？</h2><p>事件捕获、事件响应、事件冒泡。</p>\n<p>如图：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180131093105267?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"事件捕获和冒泡\" title=\"\" class=\"\">\n                <p>事件捕获和冒泡</p>\n            </figure>\n<p>不管body上绑定事件、或者div甚至div的text节点上绑定事件，这个事件必须先从根节点开始遍历（即Window对象开始），从上往下，传递的过程中，发现有的元素绑定了事件，也先放着，等全部事件捕获完毕（遍历完毕）， 开始处理事件，处理的顺序为，从最小的根节点上的事件开始，依次向上冒泡。</p>\n<p>一句话概括这种机制：</p>\n<p>捕获：自外而内，从根到叶，从大到小 。</p>\n<p>冒泡：自内而外，从叶到根，从小到大。</p>\n<p>来做个实验，有如下的html结构 和 js代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--HTML结构--&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">\t\t我是DIV1</span><br><span class=\"line\">\t\t&lt;div id=&quot;div2&quot;&gt;</span><br><span class=\"line\">\t\t\t我是DIV2</span><br><span class=\"line\">\t\t\t&lt;button id=&quot;btn&quot;&gt;</span><br><span class=\"line\">\t\t\t\ti am a button</span><br><span class=\"line\">\t\t\t&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//script代码</span><br><span class=\"line\"></span><br><span class=\"line\">var div1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">var div2 = document.getElementById(&apos;div2&apos;);</span><br><span class=\"line\">var btn = document.getElementById(&apos;btn&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">btn.addEventListener(&apos;click&apos;, function() &#123;console.log(this.id)&#125;,false);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">div2.addEventListener(&apos;click&apos;, function()&#123;console.log(this.id)&#125;,false);</span><br><span class=\"line\"></span><br><span class=\"line\">div1.addEventListener(&apos;click&apos;, function()&#123;console.log(this.id)&#125;,false);</span><br></pre></td></tr></table></figure>\n<p>HTML结构如图：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180131094357898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"HTML结构\" title=\"\" class=\"\">\n                <p>HTML结构</p>\n            </figure>\n<p>当点击最里面的button，会依次出现这种情况：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180131094911606?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"控制台输出\" title=\"\" class=\"\">\n                <p>控制台输出</p>\n            </figure>\n<p>可以看到，事件是在冒泡阶段被触发的。</p>\n<p>当改变js API中最后一个Boolean值为true时，又会产生另外一种景观：</p>\n<figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180131095628141?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\" class=\"\">\n                <p>这里写图片描述</p>\n            </figure>\n<p>这次是从外向内依次触发的。</p>\n<p>总结：<br>1.addEventListener(事件，函数，boolean?捕获:冒泡)，这个API可以设置事件触发于捕获/冒泡阶段，而且这个事件可以复写。<br>2.普通的API,例如 onclick ,onmouse 默认只能在冒泡阶段触发，而且不能复写，复写事件会覆盖。</p>\n<h2 id=\"3-闭包是怎么回事？用在什么场景？\"><a href=\"#3-闭包是怎么回事？用在什么场景？\" class=\"headerlink\" title=\"3.闭包是怎么回事？用在什么场景？\"></a>3.闭包是怎么回事？用在什么场景？</h2><p>简而言之：<strong>1、闭包就是可以访问局部作用域的变量。</strong><br>并且：        <strong>2、 可以使局部变量常驻内存</strong><br>参考阮一峰老师的闭包博客： <a href=\"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\" target=\"_blank\" rel=\"noopener\">阮一峰—-闭包</a></p>\n<p><strong>Q:闭包的内部函数为什么变量不会被销毁？</strong><br>A：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a()&#123;</span><br><span class=\"line\">var a =1;</span><br><span class=\"line\"></span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">a+=1;</span><br><span class=\"line\">return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return b();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为此时的子函数b一直对于a函数的变量“a=1”有需求，因此这个变量会常驻内存，不会被销毁。</p>\n<p><strong>Q 3.1：什么时候才能够销毁这个内存呢？（销毁机制和人为销毁方法）</strong></p>\n<p>A：浏览器中的js引擎有自己的垃圾回收机制，当一个变量或者对象引用为0的时候，会自动回收。<br>人为的销毁内存的办法：1.关闭网页，结束js运行环境。2.销毁变量，为变量赋值 null；</p>\n<p><strong>Q3.2：如何避免内存泄漏的问题？</strong><br>A：减少全局空间的污染，良好的变量定义习惯。减少变量的引用。</p>\n<h2 id=\"4-CALL和Apply是干嘛的？\"><a href=\"#4-CALL和Apply是干嘛的？\" class=\"headerlink\" title=\"4.CALL和Apply是干嘛的？\"></a>4.CALL和Apply是干嘛的？</h2><p>二者都是为了更改function 的this指针，举个例子</p>\n<p>CALL(新的this对象，原先的参数1，原先的参数2…);<br>Apply(新的this对象，[原先的参数1，原先的参数2…]);</p>\n<p>先传入新的this对象，再传入旧方法的传参。</p>\n<h2 id=\"5-在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？\"><a href=\"#5-在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？\" class=\"headerlink\" title=\"5.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？\"></a>5.在平时开发中，遇到过跨域的问题吗？如何处理跨域呢？</h2><p>1.jsonp跨域<br>利用<code>&lt;script&gt;</code>标签的跨域特性，将请求的语句写在script标签的src属性上，然后定义一个方法，用于接受返回值responseText。代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在js预先定义好callback()函数  </span><br><span class=\"line\"></span><br><span class=\"line\">function fun(data)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//use data to do somethings.</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//动态创建script标签，并在url中说明请求地址</span><br><span class=\"line\">var body = document.getElementsByTagName(&apos;body&apos;)[0];</span><br><span class=\"line\"></span><br><span class=\"line\">var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">script.type = &apos;text/javasctipt&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">script.src = &apos;require.php?callback=fun&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">body.appendChild(script);</span><br><span class=\"line\"></span><br><span class=\"line\">//Script插入完成，一旦服务端有响应，传递过来的响应文本会直接被当做js代码执行。</span><br><span class=\"line\">      //假设传回的值是 fun(&#123;&quot;name&quot;:&quot;xiaoming&quot;&#125;)，那么小明这个对象会被当做参数传递给早就定义好的fun()函数。</span><br></pre></td></tr></table></figure>\n<p>这样，通过script不受跨域访问的特性，实现了跨域访问。</p>\n<p>2.CORS跨域（主流浏览器及IE10+）<br>    对于客户端，我们还是正常使用xhr对象发送ajax请求。<br>    唯一需要注意的是，我们需要设置我们的xhr属性withCredentials为true，不然的话，cookie是带不过去的哦，设置： xhr.withCredentials = true;<br>    对于服务器端，需要在 response header中设置如下两个字段:<br>    Access-Control-Allow-Origin: <a href=\"http://www.yourhost.com\" target=\"_blank\" rel=\"noopener\">http://www.yourhost.com</a><br>    Access-Control-Allow-Credentials:true<br>    这样，我们就可以跨域请求接口了。</p>\n<p>3.返回的json和jsonp有什么区别？<br>返回的json是json格式的文件，而返回的jsonp是字符串形式的文件，形如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(&#123;&quot;name&quot;:&quot;HanMeiMei&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 下","date":"2018-02-01T07:15:28.000Z","reward":true,"comment":true,"_content":"\n\n\n\n\n\n\n\n\n\n\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客]()\n\n\n\n## 6. 简单说一说盒模型，W3C和IE怪异盒模型。##\n\nW3C标准的盒模型：width ==  content_width(不包括padding+border+margin)\n\nIE怪异盒模型： width  == content_width+padding+border\n\n参考我之前的博客：[http://blog.csdn.net/qq_20264891/article/details/79019724](http://blog.csdn.net/qq_20264891/article/details/79019724)\n\n## 7.简要阐述XSS和CSRF攻击及防范 ##\n\n**7.1 XSS攻击与防范**\n注入攻击。\n简而言之，XSS就是想方设法的在用户浏览的当前页面植入自己的script脚本，从而达到窃取用户信息，cookies等。\n\n防范的方法：对一些常用表单的输入字符前端要进行转义、过滤、判断，后端则需要对请求进行甄别，分辨是否为正常请求。\n\n例如: \n\n```\n<input type=\"text\" value=\"<script>alert(123)</script>\" name=\"input\"></input>\n```\n显然，正常的用户，不会再输入框里面输入形如`<script>alert(123)</script>`的字符串。那么前端在js层上，可以对获取到的表单值进行正则判断，或者转义，来甄别这个输入究竟是不是合法/正常的输入。\n\n**7.2 CSRF攻击与防范**\n\nCSRF就是在用户不知情的情况下，借助用户的信息，来发起伪造请求。\n\n举例：用户访问A网站，登录以后并没有关闭网页或者清空缓存信息。此时被诱导点击B网站，B网站发起恶意请求，此时A网站服务端无法甄别该请求是否是用户的本意，因为用户在A网站已经登录，有cookies，所以相当于B网站借助用户，来在A网站为所欲为。\n防范的主要措施在于后端，后端需要严格的来甄别该请求是否用户自己的本意，常见的方法措施有：验证请求头的Refer字段，加Token验证等。\n参考文章：[https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/](https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/)\n这篇文章写的很好。\n\n## 8.强类型语言有继承，在JS里面如何做到继承呢？(proto和prototype) ##\n\n在JS中，继承主要是通过函数原型链来完成的。每个函数创建的时候都有一个`_proto_`对象，构造函数则有一个`prototype`对象，该对象上挂载的是可以继承的方法、属性等等。\n\n8.1 构造函数内部有一个test()方法，prototype上也挂着一个test()方法，二者有何不同？\n\n通过实例化对象来继承，只能继承prototype上的方法，而内部的test()方法无权访问。\n## 9.页面性能优化有哪些方式？ ##\na.文件(css,js,img)压缩、合并（雪碧图）\n\nb.减少请求数量\n\nc.减少页面重排/重绘\n\nd.使用懒加载，按需加载\n\ne.CSS3动画有限保持帧率\n\nf.减少dom的访问次数，将经常的访问的节点/属性，进行定义并赋值\n\ng.减少代码冗余量，精简代码\n\nh.静态资源部署到CDN节点\n\n**9.1 重绘/重排是怎么回事？有什么区别？**\n\n网页加载的时候，会根据DOM节点构造出一颗DOM节点树，同时根据CSS树来渲染出CSS树，最后合并DOM树和CSS树 ，变成Render树，Render树将有所有的元素属性进行渲染、排布，包括使用相对单位的em/vh都通通转化成px，将隐藏的元素踢出树中等。\n\n例如：当使用js动态添加div标签，那么整个dom树的构造就会发生变化，因此会引起浏览器的*重排*。\n\n当某个DOM节点，甚至几个、几十个DOM节点的样式外观、属性发生变化，浏览器不得不把这些变化的属性重新进行渲染，在用户的浏览器view层得到体现，这就是*重绘*。\n\n重排是对dom节点的排布，预先为每个dom节点留好坑，一旦有dom节点增删、位置变动、宽高增改的情况出现，就会进行重新排布。排布是发生在整个DOM树的，一旦DOM树改变，CSS渲染树的子节点/孙子节点也要重新变化，因而会重新绘制。\n\n*也就是说，重排一定会引发重绘。*\n\n\n重绘的过程，实际上是先有确定可见的DOM树，根据DOM树，构造出一颗节点/结构相同的CSS树，来对前者进行绘制。一旦DOM树结构变化，CSS树也要跟着变化，那么就会引起浏览器的重新绘制。如果DOM树没有发生结构变化，而仅仅是给其中的某个div加了1px height，然后把border:1px solid black，改成1px solid red，虽然没有进行重排，但是这过程进行了重绘。\n\n*也就是说，重绘现象的发生，有可能是以重排作为前提。*\n\n**9.2 请举例说明重绘，什么情况下会重绘？**\n\n重排会引发重绘。样式属性（例如，颜色，字体大小，背景色）改变会引发重绘。\n\n**9.3  你认为样式是会引起重绘的吗？什么样式会引起重绘/重排？什么属性会引起重绘/重排？**\n是的。\n\ncolor,background等属性会引发重绘。\n\n浏览器窗口变化，DOM树结构变化(包括文本节点变化)引发重排。\n\n\n## 10. 浏览器如何知道一个css文件,js文件需要缓存？ ##\n\n首先浏览器访问某个站点，会检查本地是否有缓存，如果有缓存，查看缓存是否新鲜，如果不新鲜，就去询问服务器，我这个缓存协议时间到了，可能不新鲜，你那边更新了吗？如果服务器缓存也没有更新，那么仍然使用本地缓存。这时服务器会返回304，意思是我这里也没更新，你就用以前的缓存吧。\n\n在[https://www.cnblogs.com/shixiaomiao1122/p/7591556.html](https://www.cnblogs.com/shixiaomiao1122/p/7591556.html)看到一个缓存原理图，侵删，图注的很详细：\n![缓存机制原理图](http://img.blog.csdn.net/20180201144623611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 11.HTTP状态码304,502,503 ##\n304：缓存并未更新，让浏览器继续使用缓存好的静态文件，无需向服务器请求该静态资源。\n\n502：服务器作为网关或代理，从上游服务器收到无效响应。\n\n503：服务器停机维护。\n\nhttp状态码：\n1XX：临时响应。并继续等待客户端的请求\n2XX：成功。201已创建，202已接受，203未授权信息，204无返回内容，205重置内容\n3XX：重定向。300 多种选择，301 资源永久移动 ，302 资源临时移动，303 自动转到其他位置，304 未修改。\n4XX：请求错误。401 未授权，404 未找到 ，403 禁止请求，406 不接受，408 超时。\n5XX：服务器错误。500内部错误，501 尚未实施，502 错误网关，503 请求不可用。\n\n## 12.Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？ ##\n\n任何项目只有未发现 bug 和已经发现 bug 两种情况\n\n不存在没有 bug 的情况\n\n即便是测试人员也不可能覆盖 100% 的可能性\n\n但是测试表中的要求必须 100%\n\n 覆盖如果测试通过上线后产生的 bug \n \n\n如果是测试表中未覆盖的则编制测试表的人员背锅\n\n如果是不可抗力福利彩票背锅\n\n作者：王小明\n链接：https://www.zhihu.com/question/65688799/answer/233725228\n\n开个玩笑，根据我自己发布响应式页面的时候，首先就是灰度发布，单位里有test服务器，可以直接部署到test上面，模拟上线环境，通过多个使用场景来监测应用是否健壮，例如:超大UV,高并发，加载时间等等，还要看页面中是否有静态资源出现路径错误，以及代码中写错/疏忽/遗漏的地方。\n\n如果没有这个灰度发布的条件，项目上线出了问题，应该第一时间向leader反映，并寻求BUG处理的流程，如果项目访问量不大，可以在夜间偷偷填坑，如果访问量大，那么可以紧急追溯错误来源，并赶紧发布补丁/覆盖原有资源，避免造成不良影响的进一步扩大。如果BUG真的很逆天，那么可以考虑去填写离职手续。\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","source":"_posts/基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 下.md","raw":"---\ntitle:  基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 下\ndate:   2018-02-01 15:15:28\ntags: [重绘,冲排,javascript,原理,腾讯面试]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n\n\n\n\n\n\n\n\n\n\n\n本文初始编辑地址，源自我的CSDN博客：[我的CSDN博客]()\n\n\n\n## 6. 简单说一说盒模型，W3C和IE怪异盒模型。##\n\nW3C标准的盒模型：width ==  content_width(不包括padding+border+margin)\n\nIE怪异盒模型： width  == content_width+padding+border\n\n参考我之前的博客：[http://blog.csdn.net/qq_20264891/article/details/79019724](http://blog.csdn.net/qq_20264891/article/details/79019724)\n\n## 7.简要阐述XSS和CSRF攻击及防范 ##\n\n**7.1 XSS攻击与防范**\n注入攻击。\n简而言之，XSS就是想方设法的在用户浏览的当前页面植入自己的script脚本，从而达到窃取用户信息，cookies等。\n\n防范的方法：对一些常用表单的输入字符前端要进行转义、过滤、判断，后端则需要对请求进行甄别，分辨是否为正常请求。\n\n例如: \n\n```\n<input type=\"text\" value=\"<script>alert(123)</script>\" name=\"input\"></input>\n```\n显然，正常的用户，不会再输入框里面输入形如`<script>alert(123)</script>`的字符串。那么前端在js层上，可以对获取到的表单值进行正则判断，或者转义，来甄别这个输入究竟是不是合法/正常的输入。\n\n**7.2 CSRF攻击与防范**\n\nCSRF就是在用户不知情的情况下，借助用户的信息，来发起伪造请求。\n\n举例：用户访问A网站，登录以后并没有关闭网页或者清空缓存信息。此时被诱导点击B网站，B网站发起恶意请求，此时A网站服务端无法甄别该请求是否是用户的本意，因为用户在A网站已经登录，有cookies，所以相当于B网站借助用户，来在A网站为所欲为。\n防范的主要措施在于后端，后端需要严格的来甄别该请求是否用户自己的本意，常见的方法措施有：验证请求头的Refer字段，加Token验证等。\n参考文章：[https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/](https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/)\n这篇文章写的很好。\n\n## 8.强类型语言有继承，在JS里面如何做到继承呢？(proto和prototype) ##\n\n在JS中，继承主要是通过函数原型链来完成的。每个函数创建的时候都有一个`_proto_`对象，构造函数则有一个`prototype`对象，该对象上挂载的是可以继承的方法、属性等等。\n\n8.1 构造函数内部有一个test()方法，prototype上也挂着一个test()方法，二者有何不同？\n\n通过实例化对象来继承，只能继承prototype上的方法，而内部的test()方法无权访问。\n## 9.页面性能优化有哪些方式？ ##\na.文件(css,js,img)压缩、合并（雪碧图）\n\nb.减少请求数量\n\nc.减少页面重排/重绘\n\nd.使用懒加载，按需加载\n\ne.CSS3动画有限保持帧率\n\nf.减少dom的访问次数，将经常的访问的节点/属性，进行定义并赋值\n\ng.减少代码冗余量，精简代码\n\nh.静态资源部署到CDN节点\n\n**9.1 重绘/重排是怎么回事？有什么区别？**\n\n网页加载的时候，会根据DOM节点构造出一颗DOM节点树，同时根据CSS树来渲染出CSS树，最后合并DOM树和CSS树 ，变成Render树，Render树将有所有的元素属性进行渲染、排布，包括使用相对单位的em/vh都通通转化成px，将隐藏的元素踢出树中等。\n\n例如：当使用js动态添加div标签，那么整个dom树的构造就会发生变化，因此会引起浏览器的*重排*。\n\n当某个DOM节点，甚至几个、几十个DOM节点的样式外观、属性发生变化，浏览器不得不把这些变化的属性重新进行渲染，在用户的浏览器view层得到体现，这就是*重绘*。\n\n重排是对dom节点的排布，预先为每个dom节点留好坑，一旦有dom节点增删、位置变动、宽高增改的情况出现，就会进行重新排布。排布是发生在整个DOM树的，一旦DOM树改变，CSS渲染树的子节点/孙子节点也要重新变化，因而会重新绘制。\n\n*也就是说，重排一定会引发重绘。*\n\n\n重绘的过程，实际上是先有确定可见的DOM树，根据DOM树，构造出一颗节点/结构相同的CSS树，来对前者进行绘制。一旦DOM树结构变化，CSS树也要跟着变化，那么就会引起浏览器的重新绘制。如果DOM树没有发生结构变化，而仅仅是给其中的某个div加了1px height，然后把border:1px solid black，改成1px solid red，虽然没有进行重排，但是这过程进行了重绘。\n\n*也就是说，重绘现象的发生，有可能是以重排作为前提。*\n\n**9.2 请举例说明重绘，什么情况下会重绘？**\n\n重排会引发重绘。样式属性（例如，颜色，字体大小，背景色）改变会引发重绘。\n\n**9.3  你认为样式是会引起重绘的吗？什么样式会引起重绘/重排？什么属性会引起重绘/重排？**\n是的。\n\ncolor,background等属性会引发重绘。\n\n浏览器窗口变化，DOM树结构变化(包括文本节点变化)引发重排。\n\n\n## 10. 浏览器如何知道一个css文件,js文件需要缓存？ ##\n\n首先浏览器访问某个站点，会检查本地是否有缓存，如果有缓存，查看缓存是否新鲜，如果不新鲜，就去询问服务器，我这个缓存协议时间到了，可能不新鲜，你那边更新了吗？如果服务器缓存也没有更新，那么仍然使用本地缓存。这时服务器会返回304，意思是我这里也没更新，你就用以前的缓存吧。\n\n在[https://www.cnblogs.com/shixiaomiao1122/p/7591556.html](https://www.cnblogs.com/shixiaomiao1122/p/7591556.html)看到一个缓存原理图，侵删，图注的很详细：\n![缓存机制原理图](http://img.blog.csdn.net/20180201144623611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 11.HTTP状态码304,502,503 ##\n304：缓存并未更新，让浏览器继续使用缓存好的静态文件，无需向服务器请求该静态资源。\n\n502：服务器作为网关或代理，从上游服务器收到无效响应。\n\n503：服务器停机维护。\n\nhttp状态码：\n1XX：临时响应。并继续等待客户端的请求\n2XX：成功。201已创建，202已接受，203未授权信息，204无返回内容，205重置内容\n3XX：重定向。300 多种选择，301 资源永久移动 ，302 资源临时移动，303 自动转到其他位置，304 未修改。\n4XX：请求错误。401 未授权，404 未找到 ，403 禁止请求，406 不接受，408 超时。\n5XX：服务器错误。500内部错误，501 尚未实施，502 错误网关，503 请求不可用。\n\n## 12.Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？ ##\n\n任何项目只有未发现 bug 和已经发现 bug 两种情况\n\n不存在没有 bug 的情况\n\n即便是测试人员也不可能覆盖 100% 的可能性\n\n但是测试表中的要求必须 100%\n\n 覆盖如果测试通过上线后产生的 bug \n \n\n如果是测试表中未覆盖的则编制测试表的人员背锅\n\n如果是不可抗力福利彩票背锅\n\n作者：王小明\n链接：https://www.zhihu.com/question/65688799/answer/233725228\n\n开个玩笑，根据我自己发布响应式页面的时候，首先就是灰度发布，单位里有test服务器，可以直接部署到test上面，模拟上线环境，通过多个使用场景来监测应用是否健壮，例如:超大UV,高并发，加载时间等等，还要看页面中是否有静态资源出现路径错误，以及代码中写错/疏忽/遗漏的地方。\n\n如果没有这个灰度发布的条件，项目上线出了问题，应该第一时间向leader反映，并寻求BUG处理的流程，如果项目访问量不大，可以在夜间偷偷填坑，如果访问量大，那么可以紧急追溯错误来源，并赶紧发布补丁/覆盖原有资源，避免造成不良影响的进一步扩大。如果BUG真的很逆天，那么可以考虑去填写离职手续。\n\n\n\n\n\n\n\n\n\n<b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>","slug":"基于上次腾讯远程面试的题目总结与回答(精心总结回顾) 下","published":1,"updated":"2019-05-14T14:30:37.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsaxu003tckuf9geqn16n","content":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"\">我的CSDN博客</a></p>\n<h2 id=\"6-简单说一说盒模型，W3C和IE怪异盒模型。\"><a href=\"#6-简单说一说盒模型，W3C和IE怪异盒模型。\" class=\"headerlink\" title=\"6. 简单说一说盒模型，W3C和IE怪异盒模型。\"></a>6. 简单说一说盒模型，W3C和IE怪异盒模型。</h2><p>W3C标准的盒模型：width ==  content_width(不包括padding+border+margin)</p>\n<p>IE怪异盒模型： width  == content_width+padding+border</p>\n<p>参考我之前的博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79019724\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_20264891/article/details/79019724</a></p>\n<h2 id=\"7-简要阐述XSS和CSRF攻击及防范\"><a href=\"#7-简要阐述XSS和CSRF攻击及防范\" class=\"headerlink\" title=\"7.简要阐述XSS和CSRF攻击及防范\"></a>7.简要阐述XSS和CSRF攻击及防范</h2><p><strong>7.1 XSS攻击与防范</strong><br>注入攻击。<br>简而言之，XSS就是想方设法的在用户浏览的当前页面植入自己的script脚本，从而达到窃取用户信息，cookies等。</p>\n<p>防范的方法：对一些常用表单的输入字符前端要进行转义、过滤、判断，后端则需要对请求进行甄别，分辨是否为正常请求。</p>\n<p>例如: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&lt;script&gt;alert(123)&lt;/script&gt;&quot; name=&quot;input&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure>\n<p>显然，正常的用户，不会再输入框里面输入形如<code>&lt;script&gt;alert(123)&lt;/script&gt;</code>的字符串。那么前端在js层上，可以对获取到的表单值进行正则判断，或者转义，来甄别这个输入究竟是不是合法/正常的输入。</p>\n<p><strong>7.2 CSRF攻击与防范</strong></p>\n<p>CSRF就是在用户不知情的情况下，借助用户的信息，来发起伪造请求。</p>\n<p>举例：用户访问A网站，登录以后并没有关闭网页或者清空缓存信息。此时被诱导点击B网站，B网站发起恶意请求，此时A网站服务端无法甄别该请求是否是用户的本意，因为用户在A网站已经登录，有cookies，所以相当于B网站借助用户，来在A网站为所欲为。<br>防范的主要措施在于后端，后端需要严格的来甄别该请求是否用户自己的本意，常见的方法措施有：验证请求头的Refer字段，加Token验证等。<br>参考文章：<a href=\"https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/\" target=\"_blank\" rel=\"noopener\">https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/</a><br>这篇文章写的很好。</p>\n<h2 id=\"8-强类型语言有继承，在JS里面如何做到继承呢？-proto和prototype\"><a href=\"#8-强类型语言有继承，在JS里面如何做到继承呢？-proto和prototype\" class=\"headerlink\" title=\"8.强类型语言有继承，在JS里面如何做到继承呢？(proto和prototype)\"></a>8.强类型语言有继承，在JS里面如何做到继承呢？(proto和prototype)</h2><p>在JS中，继承主要是通过函数原型链来完成的。每个函数创建的时候都有一个<code>_proto_</code>对象，构造函数则有一个<code>prototype</code>对象，该对象上挂载的是可以继承的方法、属性等等。</p>\n<p>8.1 构造函数内部有一个test()方法，prototype上也挂着一个test()方法，二者有何不同？</p>\n<p>通过实例化对象来继承，只能继承prototype上的方法，而内部的test()方法无权访问。</p>\n<h2 id=\"9-页面性能优化有哪些方式？\"><a href=\"#9-页面性能优化有哪些方式？\" class=\"headerlink\" title=\"9.页面性能优化有哪些方式？\"></a>9.页面性能优化有哪些方式？</h2><p>a.文件(css,js,img)压缩、合并（雪碧图）</p>\n<p>b.减少请求数量</p>\n<p>c.减少页面重排/重绘</p>\n<p>d.使用懒加载，按需加载</p>\n<p>e.CSS3动画有限保持帧率</p>\n<p>f.减少dom的访问次数，将经常的访问的节点/属性，进行定义并赋值</p>\n<p>g.减少代码冗余量，精简代码</p>\n<p>h.静态资源部署到CDN节点</p>\n<p><strong>9.1 重绘/重排是怎么回事？有什么区别？</strong></p>\n<p>网页加载的时候，会根据DOM节点构造出一颗DOM节点树，同时根据CSS树来渲染出CSS树，最后合并DOM树和CSS树 ，变成Render树，Render树将有所有的元素属性进行渲染、排布，包括使用相对单位的em/vh都通通转化成px，将隐藏的元素踢出树中等。</p>\n<p>例如：当使用js动态添加div标签，那么整个dom树的构造就会发生变化，因此会引起浏览器的<em>重排</em>。</p>\n<p>当某个DOM节点，甚至几个、几十个DOM节点的样式外观、属性发生变化，浏览器不得不把这些变化的属性重新进行渲染，在用户的浏览器view层得到体现，这就是<em>重绘</em>。</p>\n<p>重排是对dom节点的排布，预先为每个dom节点留好坑，一旦有dom节点增删、位置变动、宽高增改的情况出现，就会进行重新排布。排布是发生在整个DOM树的，一旦DOM树改变，CSS渲染树的子节点/孙子节点也要重新变化，因而会重新绘制。</p>\n<p><em>也就是说，重排一定会引发重绘。</em></p>\n<p>重绘的过程，实际上是先有确定可见的DOM树，根据DOM树，构造出一颗节点/结构相同的CSS树，来对前者进行绘制。一旦DOM树结构变化，CSS树也要跟着变化，那么就会引起浏览器的重新绘制。如果DOM树没有发生结构变化，而仅仅是给其中的某个div加了1px height，然后把border:1px solid black，改成1px solid red，虽然没有进行重排，但是这过程进行了重绘。</p>\n<p><em>也就是说，重绘现象的发生，有可能是以重排作为前提。</em></p>\n<p><strong>9.2 请举例说明重绘，什么情况下会重绘？</strong></p>\n<p>重排会引发重绘。样式属性（例如，颜色，字体大小，背景色）改变会引发重绘。</p>\n<p><strong>9.3  你认为样式是会引起重绘的吗？什么样式会引起重绘/重排？什么属性会引起重绘/重排？</strong><br>是的。</p>\n<p>color,background等属性会引发重绘。</p>\n<p>浏览器窗口变化，DOM树结构变化(包括文本节点变化)引发重排。</p>\n<h2 id=\"10-浏览器如何知道一个css文件-js文件需要缓存？\"><a href=\"#10-浏览器如何知道一个css文件-js文件需要缓存？\" class=\"headerlink\" title=\"10. 浏览器如何知道一个css文件,js文件需要缓存？\"></a>10. 浏览器如何知道一个css文件,js文件需要缓存？</h2><p>首先浏览器访问某个站点，会检查本地是否有缓存，如果有缓存，查看缓存是否新鲜，如果不新鲜，就去询问服务器，我这个缓存协议时间到了，可能不新鲜，你那边更新了吗？如果服务器缓存也没有更新，那么仍然使用本地缓存。这时服务器会返回304，意思是我这里也没更新，你就用以前的缓存吧。</p>\n<p>在<a href=\"https://www.cnblogs.com/shixiaomiao1122/p/7591556.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/shixiaomiao1122/p/7591556.html</a>看到一个缓存原理图，侵删，图注的很详细：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180201144623611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"缓存机制原理图\" title=\"\" class=\"\">\n                <p>缓存机制原理图</p>\n            </figure></p>\n<h2 id=\"11-HTTP状态码304-502-503\"><a href=\"#11-HTTP状态码304-502-503\" class=\"headerlink\" title=\"11.HTTP状态码304,502,503\"></a>11.HTTP状态码304,502,503</h2><p>304：缓存并未更新，让浏览器继续使用缓存好的静态文件，无需向服务器请求该静态资源。</p>\n<p>502：服务器作为网关或代理，从上游服务器收到无效响应。</p>\n<p>503：服务器停机维护。</p>\n<p>http状态码：<br>1XX：临时响应。并继续等待客户端的请求<br>2XX：成功。201已创建，202已接受，203未授权信息，204无返回内容，205重置内容<br>3XX：重定向。300 多种选择，301 资源永久移动 ，302 资源临时移动，303 自动转到其他位置，304 未修改。<br>4XX：请求错误。401 未授权，404 未找到 ，403 禁止请求，406 不接受，408 超时。<br>5XX：服务器错误。500内部错误，501 尚未实施，502 错误网关，503 请求不可用。</p>\n<h2 id=\"12-Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？\"><a href=\"#12-Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？\" class=\"headerlink\" title=\"12.Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？\"></a>12.Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？</h2><p>任何项目只有未发现 bug 和已经发现 bug 两种情况</p>\n<p>不存在没有 bug 的情况</p>\n<p>即便是测试人员也不可能覆盖 100% 的可能性</p>\n<p>但是测试表中的要求必须 100%</p>\n<p> 覆盖如果测试通过上线后产生的 bug </p>\n<p>如果是测试表中未覆盖的则编制测试表的人员背锅</p>\n<p>如果是不可抗力福利彩票背锅</p>\n<p>作者：王小明<br>链接：<a href=\"https://www.zhihu.com/question/65688799/answer/233725228\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/65688799/answer/233725228</a></p>\n<p>开个玩笑，根据我自己发布响应式页面的时候，首先就是灰度发布，单位里有test服务器，可以直接部署到test上面，模拟上线环境，通过多个使用场景来监测应用是否健壮，例如:超大UV,高并发，加载时间等等，还要看页面中是否有静态资源出现路径错误，以及代码中写错/疏忽/遗漏的地方。</p>\n<p>如果没有这个灰度发布的条件，项目上线出了问题，应该第一时间向leader反映，并寻求BUG处理的流程，如果项目访问量不大，可以在夜间偷偷填坑，如果访问量大，那么可以紧急追溯错误来源，并赶紧发布补丁/覆盖原有资源，避免造成不良影响的进一步扩大。如果BUG真的很逆天，那么可以考虑去填写离职手续。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文初始编辑地址，源自我的CSDN博客：<a href=\"\">我的CSDN博客</a></p>\n<h2 id=\"6-简单说一说盒模型，W3C和IE怪异盒模型。\"><a href=\"#6-简单说一说盒模型，W3C和IE怪异盒模型。\" class=\"headerlink\" title=\"6. 简单说一说盒模型，W3C和IE怪异盒模型。\"></a>6. 简单说一说盒模型，W3C和IE怪异盒模型。</h2><p>W3C标准的盒模型：width ==  content_width(不包括padding+border+margin)</p>\n<p>IE怪异盒模型： width  == content_width+padding+border</p>\n<p>参考我之前的博客：<a href=\"http://blog.csdn.net/qq_20264891/article/details/79019724\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qq_20264891/article/details/79019724</a></p>\n<h2 id=\"7-简要阐述XSS和CSRF攻击及防范\"><a href=\"#7-简要阐述XSS和CSRF攻击及防范\" class=\"headerlink\" title=\"7.简要阐述XSS和CSRF攻击及防范\"></a>7.简要阐述XSS和CSRF攻击及防范</h2><p><strong>7.1 XSS攻击与防范</strong><br>注入攻击。<br>简而言之，XSS就是想方设法的在用户浏览的当前页面植入自己的script脚本，从而达到窃取用户信息，cookies等。</p>\n<p>防范的方法：对一些常用表单的输入字符前端要进行转义、过滤、判断，后端则需要对请求进行甄别，分辨是否为正常请求。</p>\n<p>例如: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;&lt;script&gt;alert(123)&lt;/script&gt;&quot; name=&quot;input&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure>\n<p>显然，正常的用户，不会再输入框里面输入形如<code>&lt;script&gt;alert(123)&lt;/script&gt;</code>的字符串。那么前端在js层上，可以对获取到的表单值进行正则判断，或者转义，来甄别这个输入究竟是不是合法/正常的输入。</p>\n<p><strong>7.2 CSRF攻击与防范</strong></p>\n<p>CSRF就是在用户不知情的情况下，借助用户的信息，来发起伪造请求。</p>\n<p>举例：用户访问A网站，登录以后并没有关闭网页或者清空缓存信息。此时被诱导点击B网站，B网站发起恶意请求，此时A网站服务端无法甄别该请求是否是用户的本意，因为用户在A网站已经登录，有cookies，所以相当于B网站借助用户，来在A网站为所欲为。<br>防范的主要措施在于后端，后端需要严格的来甄别该请求是否用户自己的本意，常见的方法措施有：验证请求头的Refer字段，加Token验证等。<br>参考文章：<a href=\"https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/\" target=\"_blank\" rel=\"noopener\">https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/</a><br>这篇文章写的很好。</p>\n<h2 id=\"8-强类型语言有继承，在JS里面如何做到继承呢？-proto和prototype\"><a href=\"#8-强类型语言有继承，在JS里面如何做到继承呢？-proto和prototype\" class=\"headerlink\" title=\"8.强类型语言有继承，在JS里面如何做到继承呢？(proto和prototype)\"></a>8.强类型语言有继承，在JS里面如何做到继承呢？(proto和prototype)</h2><p>在JS中，继承主要是通过函数原型链来完成的。每个函数创建的时候都有一个<code>_proto_</code>对象，构造函数则有一个<code>prototype</code>对象，该对象上挂载的是可以继承的方法、属性等等。</p>\n<p>8.1 构造函数内部有一个test()方法，prototype上也挂着一个test()方法，二者有何不同？</p>\n<p>通过实例化对象来继承，只能继承prototype上的方法，而内部的test()方法无权访问。</p>\n<h2 id=\"9-页面性能优化有哪些方式？\"><a href=\"#9-页面性能优化有哪些方式？\" class=\"headerlink\" title=\"9.页面性能优化有哪些方式？\"></a>9.页面性能优化有哪些方式？</h2><p>a.文件(css,js,img)压缩、合并（雪碧图）</p>\n<p>b.减少请求数量</p>\n<p>c.减少页面重排/重绘</p>\n<p>d.使用懒加载，按需加载</p>\n<p>e.CSS3动画有限保持帧率</p>\n<p>f.减少dom的访问次数，将经常的访问的节点/属性，进行定义并赋值</p>\n<p>g.减少代码冗余量，精简代码</p>\n<p>h.静态资源部署到CDN节点</p>\n<p><strong>9.1 重绘/重排是怎么回事？有什么区别？</strong></p>\n<p>网页加载的时候，会根据DOM节点构造出一颗DOM节点树，同时根据CSS树来渲染出CSS树，最后合并DOM树和CSS树 ，变成Render树，Render树将有所有的元素属性进行渲染、排布，包括使用相对单位的em/vh都通通转化成px，将隐藏的元素踢出树中等。</p>\n<p>例如：当使用js动态添加div标签，那么整个dom树的构造就会发生变化，因此会引起浏览器的<em>重排</em>。</p>\n<p>当某个DOM节点，甚至几个、几十个DOM节点的样式外观、属性发生变化，浏览器不得不把这些变化的属性重新进行渲染，在用户的浏览器view层得到体现，这就是<em>重绘</em>。</p>\n<p>重排是对dom节点的排布，预先为每个dom节点留好坑，一旦有dom节点增删、位置变动、宽高增改的情况出现，就会进行重新排布。排布是发生在整个DOM树的，一旦DOM树改变，CSS渲染树的子节点/孙子节点也要重新变化，因而会重新绘制。</p>\n<p><em>也就是说，重排一定会引发重绘。</em></p>\n<p>重绘的过程，实际上是先有确定可见的DOM树，根据DOM树，构造出一颗节点/结构相同的CSS树，来对前者进行绘制。一旦DOM树结构变化，CSS树也要跟着变化，那么就会引起浏览器的重新绘制。如果DOM树没有发生结构变化，而仅仅是给其中的某个div加了1px height，然后把border:1px solid black，改成1px solid red，虽然没有进行重排，但是这过程进行了重绘。</p>\n<p><em>也就是说，重绘现象的发生，有可能是以重排作为前提。</em></p>\n<p><strong>9.2 请举例说明重绘，什么情况下会重绘？</strong></p>\n<p>重排会引发重绘。样式属性（例如，颜色，字体大小，背景色）改变会引发重绘。</p>\n<p><strong>9.3  你认为样式是会引起重绘的吗？什么样式会引起重绘/重排？什么属性会引起重绘/重排？</strong><br>是的。</p>\n<p>color,background等属性会引发重绘。</p>\n<p>浏览器窗口变化，DOM树结构变化(包括文本节点变化)引发重排。</p>\n<h2 id=\"10-浏览器如何知道一个css文件-js文件需要缓存？\"><a href=\"#10-浏览器如何知道一个css文件-js文件需要缓存？\" class=\"headerlink\" title=\"10. 浏览器如何知道一个css文件,js文件需要缓存？\"></a>10. 浏览器如何知道一个css文件,js文件需要缓存？</h2><p>首先浏览器访问某个站点，会检查本地是否有缓存，如果有缓存，查看缓存是否新鲜，如果不新鲜，就去询问服务器，我这个缓存协议时间到了，可能不新鲜，你那边更新了吗？如果服务器缓存也没有更新，那么仍然使用本地缓存。这时服务器会返回304，意思是我这里也没更新，你就用以前的缓存吧。</p>\n<p>在<a href=\"https://www.cnblogs.com/shixiaomiao1122/p/7591556.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/shixiaomiao1122/p/7591556.html</a>看到一个缓存原理图，侵删，图注的很详细：<br><figure class=\"image-box\">\n                <img src=\"http://img.blog.csdn.net/20180201144623611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjAyNjQ4OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"缓存机制原理图\" title=\"\" class=\"\">\n                <p>缓存机制原理图</p>\n            </figure></p>\n<h2 id=\"11-HTTP状态码304-502-503\"><a href=\"#11-HTTP状态码304-502-503\" class=\"headerlink\" title=\"11.HTTP状态码304,502,503\"></a>11.HTTP状态码304,502,503</h2><p>304：缓存并未更新，让浏览器继续使用缓存好的静态文件，无需向服务器请求该静态资源。</p>\n<p>502：服务器作为网关或代理，从上游服务器收到无效响应。</p>\n<p>503：服务器停机维护。</p>\n<p>http状态码：<br>1XX：临时响应。并继续等待客户端的请求<br>2XX：成功。201已创建，202已接受，203未授权信息，204无返回内容，205重置内容<br>3XX：重定向。300 多种选择，301 资源永久移动 ，302 资源临时移动，303 自动转到其他位置，304 未修改。<br>4XX：请求错误。401 未授权，404 未找到 ，403 禁止请求，406 不接受，408 超时。<br>5XX：服务器错误。500内部错误，501 尚未实施，502 错误网关，503 请求不可用。</p>\n<h2 id=\"12-Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？\"><a href=\"#12-Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？\" class=\"headerlink\" title=\"12.Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？\"></a>12.Nodejs出现问题，怎么处理异常？已经上线的项目，如何处理异常？</h2><p>任何项目只有未发现 bug 和已经发现 bug 两种情况</p>\n<p>不存在没有 bug 的情况</p>\n<p>即便是测试人员也不可能覆盖 100% 的可能性</p>\n<p>但是测试表中的要求必须 100%</p>\n<p> 覆盖如果测试通过上线后产生的 bug </p>\n<p>如果是测试表中未覆盖的则编制测试表的人员背锅</p>\n<p>如果是不可抗力福利彩票背锅</p>\n<p>作者：王小明<br>链接：<a href=\"https://www.zhihu.com/question/65688799/answer/233725228\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/65688799/answer/233725228</a></p>\n<p>开个玩笑，根据我自己发布响应式页面的时候，首先就是灰度发布，单位里有test服务器，可以直接部署到test上面，模拟上线环境，通过多个使用场景来监测应用是否健壮，例如:超大UV,高并发，加载时间等等，还要看页面中是否有静态资源出现路径错误，以及代码中写错/疏忽/遗漏的地方。</p>\n<p>如果没有这个灰度发布的条件，项目上线出了问题，应该第一时间向leader反映，并寻求BUG处理的流程，如果项目访问量不大，可以在夜间偷偷填坑，如果访问量大，那么可以紧急追溯错误来源，并赶紧发布补丁/覆盖原有资源，避免造成不良影响的进一步扩大。如果BUG真的很逆天，那么可以考虑去填写离职手续。</p>\n<p><b>觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"},{"title":"FreeCodeCamp JavaScript 基础算法练习","date":"2019-04-05T16:09:11.000Z","reward":true,"comment":true,"_content":"\n## 起由 ##\n最近由于 996.icu 事件，才知道 GitHub 排行前十的 repo 中有这样一个项目。于是就刷起来了\n\n## 题 & 解 ##\n\n **1. 找出最长单词  在句子中找出最长的单词，并返回它的长度。函数的返回值应该是一个数字。**\n\t\n```javascript\n// 测试用例 (test case): \nfindLongestWord(\"The quick brown fox jumped over the lazy dog\") 应该返回一个数字\nfindLongestWord(\"The quick brown fox jumped over the lazy dog\") 应该返回 6.\nfindLongestWord(\"May the force be with you\") 应该返回 5.\nfindLongestWord(\"Google do a barrel roll\") 应该返回 6.\nfindLongestWord(\"What is the average airspeed velocity of an unladen swallow\") 应该返回 8.\nfindLongestWord(\"What if we try a super-long word such as otorhinolaryngology\") 应该返回 19.\n```\n解答： \n\n```javascript\nfunction findLongestWord(str) {\n // 直接根据空格分割, 映射成 word 的长度，再使用 Math API 选出最大的\n  const arr = str.split(' ').map(word => word.length);\n  return  Math.max(...arr);\n}\n```\n**2. 句中单词首字母大写  确保字符串的每个单词首字母都大写，其余部分小写。像'the'和'of'这样的连接符同理。**\n```javascript\n// 测试用例 (test case): \ntitleCase(\"I'm a little tea pot\") 应该返回一个字符串\ntitleCase(\"I'm a little tea pot\") 应该返回 \"I'm A Little Tea Pot\".\ntitleCase(\"sHoRt AnD sToUt\") 应该返回 \"Short And Stout\".\ntitleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\") 应该返回 \"Here Is My Handle Here Is My Spout\".\n```\n解答： \n\n```javascript\nfunction titleCase(str) {\n  // 字符串处理的步骤和顺序至关重要\n  return  str.toLowerCase().split(' ').map(word => word.replace(word[0], word[0].toUpperCase())).join(' ');\n}\n\n```\n\n**3. 找出多个数组中的最大数 右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。**\n*提示：你可以用for循环来迭代数组，并通过arr[i]的方式来访问数组的每个元素。*\n```javascript\n// 测试用例 (test case): \nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]) 应该返回一个数组\nlargestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]) 应该返回 [27,5,39,1001].\nlargestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]) 应该返回 [9, 35, 97, 1000000].\n```\n解答： \n\n```javascript\nfunction largestOfFour(arr) {\n  const result = [];\n  arr.forEach(child => result.push(Math.max.call(...child)));\n  return result;\n}\n```\n你以为对了吗？？？？\n呵呵\n\n```javascript\n// 举个例子\n\nconst array= [1000000,1001];\nMath.max.call(...array);\n// output is 1001\n\n所以，解答的结果中为： [9, 35, 97, 1001]，与预期  [9, 35, 97, 1000000] 不符\n\n// WTF! WHY?\n// 因为，在调用  `Math.max.call() ` 时，第一个参数传递 This 指针，实际上传入的却是一个数字，因此，该函数的运行时应该是这样的\n\nMath.max.call(null, 1001) 等价于 Math.max(1001) \n// 实际上，参数只进去一个，自己跟自己没啥好比的。因此，当数组只有两个参数时，实际的输出结果完全取决于第二个参数是啥。\n\n\n// 正确解法一：\nfunction largestOfFour(arr) {\n  const result = [];\n  arr.forEach(child => result.push(Math.max(...child)));\n  return result;\n}\n\n// 正确解法二\nfunction largestOfFour(arr) {\n  const result = [];\n  arr.forEach(child => {\n  if(child.length > 1) {\n     result.push(Math.max(...child))\n   }\n  if(child.length === 1) {\n    result.push(child);\n }\n  if(result.length === 0) {\n   // 入参的时候应该不会传空数组，但还是防一手\n  return ;\n }\n\n});\n  return result;\n}\n```\n**4. 检查字符串结尾  判断一个字符串(str)是否以指定的字符串(target)结尾。 如果是，返回true;如果不是，返回false。**\n```javascript\n// 测试用例 (test case): \nconfirmEnding(\"Bastian\", \"n\") 应该返回 true.\nconfirmEnding(\"Connor\", \"n\") 应该返回 false.\nconfirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\", \"specification\") 应该返回 false.\nconfirmEnding(\"He has to give me a new name\", \"name\") 应该返回 true.\nconfirmEnding(\"He has to give me a new name\", \"me\") 应该返回 true.\nconfirmEnding(\"He has to give me a new name\", \"na\") 应该返回 false.\nconfirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\") 应该返回 false.\n```\n\n解答： \n```javascript\nfunction confirmEnding(str, target) {\n  if(target.length === 1) {\n    return str[str.length-1] === target;\n  }\n  // 分割母字符串\n  const arr = str.split(' ');\n  return (arr[arr.length-1].indexOf(target) > 0) || arr[arr.length-1] === target;\n}\n```\n**5. 重复输出字符串 （重要的事情说3遍）重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。**\n```javascript\n// 测试用例 (test case): \nrepeat(\"*\", 3) 应该返回 \"***\".\nrepeat(\"abc\", 3) 应该返回 \"abcabcabc\".\nrepeat(\"abc\", 4) 应该返回 \"abcabcabcabc\".\nrepeat(\"abc\", 1) 应该返回 \"abc\".\nrepeat(\"*\", 8) 应该返回 \"********\".\nrepeat(\"abc\", -2) 应该返回 \"\".\n```\n解答：\n```javascript\n// ES6\nfunction repeat(str, num) {\n  // 请把你的代码写在这里\n  return num > 0 ? str.repeat(num) : '';\n}\n\n// ES5\nfunction repeat(str, num) {\n  if(num > 0) {\n  \tlet result = '';\n\tfor(var i = 0;i< num;i++) {\n\t  result += str;\n\t  }\n\t  return result;\n  }\n  else {return ''}\n}\n```\n**6. 截断字符串 （用瑞兹来截断对面的退路）  如果字符串的长度比指定的参数num长，则把多余的部分用...来表示。 切记，插入到字符串尾部的三个点号也会计入字符串的长度。\n*但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。***\n```javascript\n// 测试用例 (test case): \ntruncate(\"A-tisket a-tasket A green and yellow basket\", 11) 应该返回 \"A-tisket...\".\ntruncate(\"Peter Piper picked a peck of pickled peppers\", 14) 应该返回 \"Peter Piper...\".\ntruncate(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length) 应该返回 \"A-tisket a-tasket A green and yellow basket\".\ntruncate(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2) 应该返回 \"A-tisket a-tasket A green and yellow basket\".\ntruncate(\"A-\", 1) 应该返回 \"A...\".\ntruncate(\"Absolutely Longer\", 2) 应该返回 \"Ab...\".\n```\n\n解答：\n```javascript\nfunction truncate() {\n  if(str.length > num) {\n    return str.substr(0,num-3) + `...`;\n  }\n  if(num <= 3) {\n        return str.substr(0,num) + '...';\n  }\n\n}\n```\n**7. 猴子吃香蕉, 分割数组 （猴子吃香蕉可是掰成好几段来吃哦） 把一个数组arr按照指定的数组大小size分割成若干个数组块\n例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];\nchunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];**\n```javascript\n// 测试用例 (test case): \nchunk([\"a\", \"b\", \"c\", \"d\"], 2) 应该返回 [[\"a\", \"b\"], [\"c\", \"d\"]].\nchunk([0, 1, 2, 3, 4, 5], 3) 应该返回 [[0, 1, 2], [3, 4, 5]].\nchunk([0, 1, 2, 3, 4, 5], 2) 应该返回 [[0, 1], [2, 3], [4, 5]].\nchunk([0, 1, 2, 3, 4, 5], 4) 应该返回 [[0, 1, 2, 3], [4, 5]].\nchunk([0, 1, 2, 3, 4, 5, 6], 3) 应该返回 [[0, 1, 2], [3, 4, 5], [6]].\nchunk([0, 1, 2, 3, 4, 5, 6, 7, 8], 4) 应该返回 [[0, 1, 2, 3], [4, 5, 6, 7], [8]].\n```\n\n解答\n```javascript\nfunction chunk(arr, size) {\n\tif(arr.length < size) {\n\t\treturn arr;\n\t}\n  // 请把你的代码写在这里\n  const result = [];\n  for(var i=0;i< arr.length;i=i+size) {\n   result.push(arr.slice(i,i+size))\n   \n }\n  return result;\n}\n```\n这道题一时半会我也没有思路，网上搜索的答案。\n针对该类问题，大概的思路就是: **通过迭代不断简化问题的复杂度，在每次迭代中处理细化后的小 case **\ntake a case:\n\n```javascript\nconst arr = [1,2,3];\nconst size = 2;\n// 第一次迭代时: \ni = 0;  i + size = 0 + 2 = 2;\n// 因此 ( slice 操作是半闭半开区间 )\narr.slice(0,2) => [1,2]  \n\n// 第二次迭代时：\ni = 之前循环末尾语句的计算结果\ni = 2; i + size = 2 + 2 = 4;\narr.slice(2,4) => [3]\n\n// 第三次迭代时， i = 4, 已经无法通过循环条件 i < arr.length( 4 > 3 )，退出循环体\n\n// 此时， result 的结果为 [[1,2],[3]]\n*/\n```\n\n**8. 截断数组  返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。**\n```javascript\n// test case: \nslasher([1, 2, 3], 2) 应该返回 [3].\nslasher([1, 2, 3], 0) 应该返回 [1, 2, 3].\nslasher([1, 2, 3], 9) 应该返回 [].\nslasher([1, 2, 3], 4) 应该返回 [].\nslasher([\"burgers\", \"fries\", \"shake\"], 1) 应该返回 [\"fries\", \"shake\"].\nslasher([1, 2, \"chicken\", 3, \"potatoes\", \"cheese\", 4], 5) 应该返回 [\"cheese\", 4].\n```\n解答： \n\n```javascript\nfunction slasher(arr, howMany) {\n  if(arr.length < howMany) {\n    \n    return [];\n  }\n  \n  arr.splice(0, howMany);\n  return arr;\n}\n// 没啥好说的，splice 不是一个 pure function, 每次经过 splice 操作，都会改变原始数组\n// 另外，数组的非纯方法还有:\n\n - Array.prototype.push()\n - Array.prototype.unshift()\n - Array.prototype.pop()\n - Array.prototype.shift()\n - Array.prototype.sort()\n```\n**9. 比较字符串 （蛤蟆可以吃队友，也可以吃对手）如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。\n举例，[\"hello\", \"Hello\"]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。\n[\"hello\", \"hey\"]应该返回false，因为字符串\"hello\"并不包含字符\"y\"。\n[\"Alien\", \"line\"]应该返回true，因为\"line\"中所有字符都可以在\"Alien\"找到。**\n```javascript\n// test case\nmutation([\"hello\", \"hey\"]) 应该返回 false.\nmutation([\"hello\", \"Hello\"]) 应该返回 true.\nmutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"]) 应该返回 true.\nmutation([\"Mary\", \"Army\"]) 应该返回 true.\nmutation([\"Mary\", \"Aarmy\"]) 应该返回 true.\nmutation([\"Alien\", \"line\"]) 应该返回 true.\nmutation([\"floor\", \"for\"]) 应该返回 true.\nmutation([\"hello\", \"neo\"]) 应该返回 false.\n```\n**10. 比较字符串\n（蛤蟆可以吃队友，也可以吃对手）\n如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。\n举例，[\"hello\", \"Hello\"]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。\n[\"hello\", \"hey\"]应该返回false，因为字符串\"hello\"并不包含字符\"y\"。\n[\"Alien\", \"line\"]应该返回true，因为\"line\"中所有字符都可以在\"Alien\"找到。**\n\n```javascript\n// test case\nmutation([\"hello\", \"hey\"]) 应该返回 false.\nmutation([\"hello\", \"Hello\"]) 应该返回 true.\nmutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"]) 应该返回 true.\nmutation([\"Mary\", \"Army\"]) 应该返回 true.\nmutation([\"Mary\", \"Aarmy\"]) 应该返回 true.\nmutation([\"Alien\", \"line\"]) 应该返回 true.\nmutation([\"floor\", \"for\"]) 应该返回 true.\nmutation([\"hello\", \"neo\"]) 应该返回 false.\n```\n\n解答： \n```javascript\n// 啰里啰唆的写法\nfunction mutation(arr) {\n  const prev = arr[0].toLowerCase().split('').sort().join('');\n  const next = arr[1].toLowerCase().split('').sort().join('');\n  let result =  true;\n  for(var i =0;i<next.length;i++) {\n    if(!prev.includes(next[i])) {\n      result = false;\n    }\n  }\n  return result;\n}\n// 装逼写法\nfunction mutation(arr) {\n  const accumulator = (acc, prev, index, arr) => {\n    // 如果只有一个成员，或者遍历不到下一个成员\n    if (arr[index + 1]) {\n      // 相比较的两个成员都进行转为小写操作\n      prev = prev.toLowerCase();\n      const next = arr[index + 1].toLowerCase();\n      \n      for (var i = 0; i < next.length; i++) {\n        // 找不到后面字符串中的某个字符时，直接 return\n        if(!prev.includes(next[i])) {\n          return false;\n        }\n        acc = true;\n      }\n    }\n    return acc;\n  };\n\n  return arr.reduce(accumulator, true);\n}\n```\n**11. 过滤数组假值 （真假美猴王）删除数组中的所有假值。\n在JavaScript中，假值有false、null、0、\"\"、undefined 和 NaN。**\n```javascript\n// test case\nbouncer([7, \"ate\", \"\", false, 9]) 应该返回 [7, \"ate\", 9].\nbouncer([\"a\", \"b\", \"c\"]) 应该返回 [\"a\", \"b\", \"c\"].\nbouncer([false, null, 0, NaN, undefined, \"\"]) 应该返回 [].\nbouncer([1, null, NaN, 2, undefined]) 应该返回 [1, 2].\n```\n\n解答：\n```javascript\nfunction bouncer(arr) {\n  // 请把你的代码写在这里\n  return arr.filter(member => Boolean(member));\n}\n// API 背的熟练， Easy\n```\n12. 摧毁数组  金克斯的迫击炮！实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。\n```javascript\n// 垃圾 撸啊撸，还金克斯，垃圾游戏，抄袭我 Dota\n// test case\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3) 应该返回 [1, 1].\ndestroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) 应该返回 [1, 5, 1].\ndestroyer([3, 5, 1, 2, 2], 2, 3, 5) 应该返回 [1].\ndestroyer([2, 3, 2, 3], 2, 3) 应该返回 [].\ndestroyer([\"tree\", \"hamburger\", 53], \"tree\", 53) 应该返回 [\"hamburger\"].\n```\n解答：\n```javascript\nfunction destroyer(arr, ...rest) {\n  // 请把你的代码写在这里\n  const params = Array.from(rest);\n  params.map(member => {\n   arr = arr.filter(item => item !== member);\n  });\n  return arr;\n}\n// 原文中， destoryer 函数只接受一个参数，想要考察 arguments, 可改造如下：\nfunction destoryer(arr) {\n// 深拷贝一下\nconst brr = JSON.parse(JSON.stringfy(arr));\n// 把默认的数组过滤掉\nbrr.shift();\nconst params = Array.from(brr);\n  params.map(member => {\n   arr = arr.filter(item => item !== member);\n  });\n  return arr;\n}\n```\n**13. 数组排序并找出元素索引\n我身在何处？\n先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。\n举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。\n同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。**\n\n```javascript\n// test case\nwhere([10, 20, 30, 40, 50], 35) 应该返回 3.\nwhere([10, 20, 30, 40, 50], 30) 应该返回 2.\nwhere([40, 60], 50) 应该返回 1.\nwhere([3, 10, 5], 3) 应该返回 0.\nwhere([5, 3, 20, 3], 5) 应该返回 2.\nwhere([2, 20, 10], 19) 应该返回 2.\nwhere([2, 5, 10], 15) 应该返回 3.\n```\n解答\n```javascript\nfunction where(arr, num) {\n  // 为什么不适用默认的 sort 参数呢？可以测试一下 [1,100,1000,1001,10000,10001 ].sort() 的结果\n  // 进行非纯排序\n  arr.sort((a,b) => a-b); \n  \n  // let 个变量，用于缓存最终插入的下标\n  let insetIndex = 0 ;\n  // 当所有成员都小于等于给定值，那么插入的位置为最后一个\n  if(arr.every(member => member <= num)) {\n    insetIndex = arr.length;\n  } \n  // 当所有成员都大于等于给定值，那么插入位置为第一个\n  else if(arr.every(member => member >= num)) {\n    insetIndex = 0;\n  }\n  // 如果都不是，那么，找到比他大的那个数的下标，将此下标作为最终的插入下标\n  else {\n    insetIndex = arr.findIndex(member => member >= num);\n  }\n  return insetIndex;\n}\n/** PS： 在 \nelse {  \ninsetIndex = arr.findIndex(member => member >= num); \n} \n逻辑中，我本来判断的是 \nmember => member <= num \n这样是不对的，因为可能有多个数比他小，返回第一个比他小的数，位置不准确\n*/\n```\n**14. 凯撒密码 （让上帝的归上帝，凯撒的归凯撒）下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。\n移位密码也就是密码中的字母会按照指定的数量来做移位。 一个常见的案例就是ROT13密码，字母会移位13个位置。由'A' ↔ 'N', 'B' ↔ 'O'，以此类推。\n写一个ROT13函数，实现输入加密字符串，输出解密字符串。**\n \n 什么是凯撒密码？一张图说明：\n 下图搬运自：\n https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\n![图片搬运自https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n我的理解： 简单来说，凯撒密码的规则就是，加密和揭秘双方以一个数字作为密钥，来约定每个字母的位移顺序。例如，密钥为3时，A => D, B=> E ...  X => A (因为X的 charCodeAt +3 已经超过了 Z，不符合规则，因此需要 先减去一个 循环的周期 26，再按照密钥+3)\n不 BB 了， show you code\n```javascript\n`X`.charCodeAt(0) = 88;\nString.fromCharCode(88+3); // '[' 不符合凯撒加密规则，因此需要先往回撤回一个密码表周期, 即 26 ，再按照密钥位移 +3\n\nString.fromCharCode(88-26+3); // 'A' this is right!\n```\n\n\n解答：\n```javascript\nfunction rot13(str) {\n    // 将一段话，转换为可以被处理的二维数组 eg: `hello, my wolrd!` => [`hello,`,`my` ,`world`];\n    const stringArrays = str.split(' ').filter(member => !!member);\n    // 再分别处理每一个 \"单词\"\n    const parseResult = stringArrays.map(word => {\n      // 将每个单词转换为数组，对每个字符进行处理\n      return Array.from(word).map(charator => {\n            // A 对应的 ASCII => 65 , N 对应的 ASCII => 78\n            const ZCode =  'Z'.charCodeAt(0);\n            let current = charator.charCodeAt(0);\n            // 非字母的处理方法\n            if(current < 65 || current > ZCode) {\n                return charator;\n            }\n            // \n            else {\n                const dest = (charator.charCodeAt(0) + 13) > ZCode ? (charator.charCodeAt(0) -26 + 13): charator.charCodeAt(0) + 13;\n              return String.fromCharCode(dest); \n            }\n          \n        }).join(''); //单词中的每个字母拼接，不用空格\n      \n    }).join(' '); //多个单词拼接，需要空格\n    return parseResult;\n  }\n// 另外，这里的 \n if(current < 65 || current > ZCode) {\n                return charator;\n            }\n 可以使用 String.match(/\\w/g) 来命中为数组，从而过滤掉非字母的标点符号\n```\n\n## 总结 ##\n这些算法都是最最最最最基本的算法，然而在解决这些问题中，还是出现了卡壳的地方。\n算法还是得多练，人脑的逻辑思维，就得靠大量算法来优化和调教~\nkeep moving !\n\n\n<b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","source":"_posts/FreeCodeCamp JavaScript 基础算法练习.md","raw":"---\ntitle: FreeCodeCamp JavaScript 基础算法练习\ndate: 2019-04-06 00:09:11\ntags: [算法]\nreward: true #是否开启打赏功能\ncomment: true #是否开启评论功能\n---\n\n## 起由 ##\n最近由于 996.icu 事件，才知道 GitHub 排行前十的 repo 中有这样一个项目。于是就刷起来了\n\n## 题 & 解 ##\n\n **1. 找出最长单词  在句子中找出最长的单词，并返回它的长度。函数的返回值应该是一个数字。**\n\t\n```javascript\n// 测试用例 (test case): \nfindLongestWord(\"The quick brown fox jumped over the lazy dog\") 应该返回一个数字\nfindLongestWord(\"The quick brown fox jumped over the lazy dog\") 应该返回 6.\nfindLongestWord(\"May the force be with you\") 应该返回 5.\nfindLongestWord(\"Google do a barrel roll\") 应该返回 6.\nfindLongestWord(\"What is the average airspeed velocity of an unladen swallow\") 应该返回 8.\nfindLongestWord(\"What if we try a super-long word such as otorhinolaryngology\") 应该返回 19.\n```\n解答： \n\n```javascript\nfunction findLongestWord(str) {\n // 直接根据空格分割, 映射成 word 的长度，再使用 Math API 选出最大的\n  const arr = str.split(' ').map(word => word.length);\n  return  Math.max(...arr);\n}\n```\n**2. 句中单词首字母大写  确保字符串的每个单词首字母都大写，其余部分小写。像'the'和'of'这样的连接符同理。**\n```javascript\n// 测试用例 (test case): \ntitleCase(\"I'm a little tea pot\") 应该返回一个字符串\ntitleCase(\"I'm a little tea pot\") 应该返回 \"I'm A Little Tea Pot\".\ntitleCase(\"sHoRt AnD sToUt\") 应该返回 \"Short And Stout\".\ntitleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\") 应该返回 \"Here Is My Handle Here Is My Spout\".\n```\n解答： \n\n```javascript\nfunction titleCase(str) {\n  // 字符串处理的步骤和顺序至关重要\n  return  str.toLowerCase().split(' ').map(word => word.replace(word[0], word[0].toUpperCase())).join(' ');\n}\n\n```\n\n**3. 找出多个数组中的最大数 右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。**\n*提示：你可以用for循环来迭代数组，并通过arr[i]的方式来访问数组的每个元素。*\n```javascript\n// 测试用例 (test case): \nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]) 应该返回一个数组\nlargestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]) 应该返回 [27,5,39,1001].\nlargestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]) 应该返回 [9, 35, 97, 1000000].\n```\n解答： \n\n```javascript\nfunction largestOfFour(arr) {\n  const result = [];\n  arr.forEach(child => result.push(Math.max.call(...child)));\n  return result;\n}\n```\n你以为对了吗？？？？\n呵呵\n\n```javascript\n// 举个例子\n\nconst array= [1000000,1001];\nMath.max.call(...array);\n// output is 1001\n\n所以，解答的结果中为： [9, 35, 97, 1001]，与预期  [9, 35, 97, 1000000] 不符\n\n// WTF! WHY?\n// 因为，在调用  `Math.max.call() ` 时，第一个参数传递 This 指针，实际上传入的却是一个数字，因此，该函数的运行时应该是这样的\n\nMath.max.call(null, 1001) 等价于 Math.max(1001) \n// 实际上，参数只进去一个，自己跟自己没啥好比的。因此，当数组只有两个参数时，实际的输出结果完全取决于第二个参数是啥。\n\n\n// 正确解法一：\nfunction largestOfFour(arr) {\n  const result = [];\n  arr.forEach(child => result.push(Math.max(...child)));\n  return result;\n}\n\n// 正确解法二\nfunction largestOfFour(arr) {\n  const result = [];\n  arr.forEach(child => {\n  if(child.length > 1) {\n     result.push(Math.max(...child))\n   }\n  if(child.length === 1) {\n    result.push(child);\n }\n  if(result.length === 0) {\n   // 入参的时候应该不会传空数组，但还是防一手\n  return ;\n }\n\n});\n  return result;\n}\n```\n**4. 检查字符串结尾  判断一个字符串(str)是否以指定的字符串(target)结尾。 如果是，返回true;如果不是，返回false。**\n```javascript\n// 测试用例 (test case): \nconfirmEnding(\"Bastian\", \"n\") 应该返回 true.\nconfirmEnding(\"Connor\", \"n\") 应该返回 false.\nconfirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\", \"specification\") 应该返回 false.\nconfirmEnding(\"He has to give me a new name\", \"name\") 应该返回 true.\nconfirmEnding(\"He has to give me a new name\", \"me\") 应该返回 true.\nconfirmEnding(\"He has to give me a new name\", \"na\") 应该返回 false.\nconfirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\") 应该返回 false.\n```\n\n解答： \n```javascript\nfunction confirmEnding(str, target) {\n  if(target.length === 1) {\n    return str[str.length-1] === target;\n  }\n  // 分割母字符串\n  const arr = str.split(' ');\n  return (arr[arr.length-1].indexOf(target) > 0) || arr[arr.length-1] === target;\n}\n```\n**5. 重复输出字符串 （重要的事情说3遍）重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。**\n```javascript\n// 测试用例 (test case): \nrepeat(\"*\", 3) 应该返回 \"***\".\nrepeat(\"abc\", 3) 应该返回 \"abcabcabc\".\nrepeat(\"abc\", 4) 应该返回 \"abcabcabcabc\".\nrepeat(\"abc\", 1) 应该返回 \"abc\".\nrepeat(\"*\", 8) 应该返回 \"********\".\nrepeat(\"abc\", -2) 应该返回 \"\".\n```\n解答：\n```javascript\n// ES6\nfunction repeat(str, num) {\n  // 请把你的代码写在这里\n  return num > 0 ? str.repeat(num) : '';\n}\n\n// ES5\nfunction repeat(str, num) {\n  if(num > 0) {\n  \tlet result = '';\n\tfor(var i = 0;i< num;i++) {\n\t  result += str;\n\t  }\n\t  return result;\n  }\n  else {return ''}\n}\n```\n**6. 截断字符串 （用瑞兹来截断对面的退路）  如果字符串的长度比指定的参数num长，则把多余的部分用...来表示。 切记，插入到字符串尾部的三个点号也会计入字符串的长度。\n*但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。***\n```javascript\n// 测试用例 (test case): \ntruncate(\"A-tisket a-tasket A green and yellow basket\", 11) 应该返回 \"A-tisket...\".\ntruncate(\"Peter Piper picked a peck of pickled peppers\", 14) 应该返回 \"Peter Piper...\".\ntruncate(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length) 应该返回 \"A-tisket a-tasket A green and yellow basket\".\ntruncate(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2) 应该返回 \"A-tisket a-tasket A green and yellow basket\".\ntruncate(\"A-\", 1) 应该返回 \"A...\".\ntruncate(\"Absolutely Longer\", 2) 应该返回 \"Ab...\".\n```\n\n解答：\n```javascript\nfunction truncate() {\n  if(str.length > num) {\n    return str.substr(0,num-3) + `...`;\n  }\n  if(num <= 3) {\n        return str.substr(0,num) + '...';\n  }\n\n}\n```\n**7. 猴子吃香蕉, 分割数组 （猴子吃香蕉可是掰成好几段来吃哦） 把一个数组arr按照指定的数组大小size分割成若干个数组块\n例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];\nchunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];**\n```javascript\n// 测试用例 (test case): \nchunk([\"a\", \"b\", \"c\", \"d\"], 2) 应该返回 [[\"a\", \"b\"], [\"c\", \"d\"]].\nchunk([0, 1, 2, 3, 4, 5], 3) 应该返回 [[0, 1, 2], [3, 4, 5]].\nchunk([0, 1, 2, 3, 4, 5], 2) 应该返回 [[0, 1], [2, 3], [4, 5]].\nchunk([0, 1, 2, 3, 4, 5], 4) 应该返回 [[0, 1, 2, 3], [4, 5]].\nchunk([0, 1, 2, 3, 4, 5, 6], 3) 应该返回 [[0, 1, 2], [3, 4, 5], [6]].\nchunk([0, 1, 2, 3, 4, 5, 6, 7, 8], 4) 应该返回 [[0, 1, 2, 3], [4, 5, 6, 7], [8]].\n```\n\n解答\n```javascript\nfunction chunk(arr, size) {\n\tif(arr.length < size) {\n\t\treturn arr;\n\t}\n  // 请把你的代码写在这里\n  const result = [];\n  for(var i=0;i< arr.length;i=i+size) {\n   result.push(arr.slice(i,i+size))\n   \n }\n  return result;\n}\n```\n这道题一时半会我也没有思路，网上搜索的答案。\n针对该类问题，大概的思路就是: **通过迭代不断简化问题的复杂度，在每次迭代中处理细化后的小 case **\ntake a case:\n\n```javascript\nconst arr = [1,2,3];\nconst size = 2;\n// 第一次迭代时: \ni = 0;  i + size = 0 + 2 = 2;\n// 因此 ( slice 操作是半闭半开区间 )\narr.slice(0,2) => [1,2]  \n\n// 第二次迭代时：\ni = 之前循环末尾语句的计算结果\ni = 2; i + size = 2 + 2 = 4;\narr.slice(2,4) => [3]\n\n// 第三次迭代时， i = 4, 已经无法通过循环条件 i < arr.length( 4 > 3 )，退出循环体\n\n// 此时， result 的结果为 [[1,2],[3]]\n*/\n```\n\n**8. 截断数组  返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。**\n```javascript\n// test case: \nslasher([1, 2, 3], 2) 应该返回 [3].\nslasher([1, 2, 3], 0) 应该返回 [1, 2, 3].\nslasher([1, 2, 3], 9) 应该返回 [].\nslasher([1, 2, 3], 4) 应该返回 [].\nslasher([\"burgers\", \"fries\", \"shake\"], 1) 应该返回 [\"fries\", \"shake\"].\nslasher([1, 2, \"chicken\", 3, \"potatoes\", \"cheese\", 4], 5) 应该返回 [\"cheese\", 4].\n```\n解答： \n\n```javascript\nfunction slasher(arr, howMany) {\n  if(arr.length < howMany) {\n    \n    return [];\n  }\n  \n  arr.splice(0, howMany);\n  return arr;\n}\n// 没啥好说的，splice 不是一个 pure function, 每次经过 splice 操作，都会改变原始数组\n// 另外，数组的非纯方法还有:\n\n - Array.prototype.push()\n - Array.prototype.unshift()\n - Array.prototype.pop()\n - Array.prototype.shift()\n - Array.prototype.sort()\n```\n**9. 比较字符串 （蛤蟆可以吃队友，也可以吃对手）如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。\n举例，[\"hello\", \"Hello\"]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。\n[\"hello\", \"hey\"]应该返回false，因为字符串\"hello\"并不包含字符\"y\"。\n[\"Alien\", \"line\"]应该返回true，因为\"line\"中所有字符都可以在\"Alien\"找到。**\n```javascript\n// test case\nmutation([\"hello\", \"hey\"]) 应该返回 false.\nmutation([\"hello\", \"Hello\"]) 应该返回 true.\nmutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"]) 应该返回 true.\nmutation([\"Mary\", \"Army\"]) 应该返回 true.\nmutation([\"Mary\", \"Aarmy\"]) 应该返回 true.\nmutation([\"Alien\", \"line\"]) 应该返回 true.\nmutation([\"floor\", \"for\"]) 应该返回 true.\nmutation([\"hello\", \"neo\"]) 应该返回 false.\n```\n**10. 比较字符串\n（蛤蟆可以吃队友，也可以吃对手）\n如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。\n举例，[\"hello\", \"Hello\"]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。\n[\"hello\", \"hey\"]应该返回false，因为字符串\"hello\"并不包含字符\"y\"。\n[\"Alien\", \"line\"]应该返回true，因为\"line\"中所有字符都可以在\"Alien\"找到。**\n\n```javascript\n// test case\nmutation([\"hello\", \"hey\"]) 应该返回 false.\nmutation([\"hello\", \"Hello\"]) 应该返回 true.\nmutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"]) 应该返回 true.\nmutation([\"Mary\", \"Army\"]) 应该返回 true.\nmutation([\"Mary\", \"Aarmy\"]) 应该返回 true.\nmutation([\"Alien\", \"line\"]) 应该返回 true.\nmutation([\"floor\", \"for\"]) 应该返回 true.\nmutation([\"hello\", \"neo\"]) 应该返回 false.\n```\n\n解答： \n```javascript\n// 啰里啰唆的写法\nfunction mutation(arr) {\n  const prev = arr[0].toLowerCase().split('').sort().join('');\n  const next = arr[1].toLowerCase().split('').sort().join('');\n  let result =  true;\n  for(var i =0;i<next.length;i++) {\n    if(!prev.includes(next[i])) {\n      result = false;\n    }\n  }\n  return result;\n}\n// 装逼写法\nfunction mutation(arr) {\n  const accumulator = (acc, prev, index, arr) => {\n    // 如果只有一个成员，或者遍历不到下一个成员\n    if (arr[index + 1]) {\n      // 相比较的两个成员都进行转为小写操作\n      prev = prev.toLowerCase();\n      const next = arr[index + 1].toLowerCase();\n      \n      for (var i = 0; i < next.length; i++) {\n        // 找不到后面字符串中的某个字符时，直接 return\n        if(!prev.includes(next[i])) {\n          return false;\n        }\n        acc = true;\n      }\n    }\n    return acc;\n  };\n\n  return arr.reduce(accumulator, true);\n}\n```\n**11. 过滤数组假值 （真假美猴王）删除数组中的所有假值。\n在JavaScript中，假值有false、null、0、\"\"、undefined 和 NaN。**\n```javascript\n// test case\nbouncer([7, \"ate\", \"\", false, 9]) 应该返回 [7, \"ate\", 9].\nbouncer([\"a\", \"b\", \"c\"]) 应该返回 [\"a\", \"b\", \"c\"].\nbouncer([false, null, 0, NaN, undefined, \"\"]) 应该返回 [].\nbouncer([1, null, NaN, 2, undefined]) 应该返回 [1, 2].\n```\n\n解答：\n```javascript\nfunction bouncer(arr) {\n  // 请把你的代码写在这里\n  return arr.filter(member => Boolean(member));\n}\n// API 背的熟练， Easy\n```\n12. 摧毁数组  金克斯的迫击炮！实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。\n```javascript\n// 垃圾 撸啊撸，还金克斯，垃圾游戏，抄袭我 Dota\n// test case\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3) 应该返回 [1, 1].\ndestroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) 应该返回 [1, 5, 1].\ndestroyer([3, 5, 1, 2, 2], 2, 3, 5) 应该返回 [1].\ndestroyer([2, 3, 2, 3], 2, 3) 应该返回 [].\ndestroyer([\"tree\", \"hamburger\", 53], \"tree\", 53) 应该返回 [\"hamburger\"].\n```\n解答：\n```javascript\nfunction destroyer(arr, ...rest) {\n  // 请把你的代码写在这里\n  const params = Array.from(rest);\n  params.map(member => {\n   arr = arr.filter(item => item !== member);\n  });\n  return arr;\n}\n// 原文中， destoryer 函数只接受一个参数，想要考察 arguments, 可改造如下：\nfunction destoryer(arr) {\n// 深拷贝一下\nconst brr = JSON.parse(JSON.stringfy(arr));\n// 把默认的数组过滤掉\nbrr.shift();\nconst params = Array.from(brr);\n  params.map(member => {\n   arr = arr.filter(item => item !== member);\n  });\n  return arr;\n}\n```\n**13. 数组排序并找出元素索引\n我身在何处？\n先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。\n举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。\n同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。**\n\n```javascript\n// test case\nwhere([10, 20, 30, 40, 50], 35) 应该返回 3.\nwhere([10, 20, 30, 40, 50], 30) 应该返回 2.\nwhere([40, 60], 50) 应该返回 1.\nwhere([3, 10, 5], 3) 应该返回 0.\nwhere([5, 3, 20, 3], 5) 应该返回 2.\nwhere([2, 20, 10], 19) 应该返回 2.\nwhere([2, 5, 10], 15) 应该返回 3.\n```\n解答\n```javascript\nfunction where(arr, num) {\n  // 为什么不适用默认的 sort 参数呢？可以测试一下 [1,100,1000,1001,10000,10001 ].sort() 的结果\n  // 进行非纯排序\n  arr.sort((a,b) => a-b); \n  \n  // let 个变量，用于缓存最终插入的下标\n  let insetIndex = 0 ;\n  // 当所有成员都小于等于给定值，那么插入的位置为最后一个\n  if(arr.every(member => member <= num)) {\n    insetIndex = arr.length;\n  } \n  // 当所有成员都大于等于给定值，那么插入位置为第一个\n  else if(arr.every(member => member >= num)) {\n    insetIndex = 0;\n  }\n  // 如果都不是，那么，找到比他大的那个数的下标，将此下标作为最终的插入下标\n  else {\n    insetIndex = arr.findIndex(member => member >= num);\n  }\n  return insetIndex;\n}\n/** PS： 在 \nelse {  \ninsetIndex = arr.findIndex(member => member >= num); \n} \n逻辑中，我本来判断的是 \nmember => member <= num \n这样是不对的，因为可能有多个数比他小，返回第一个比他小的数，位置不准确\n*/\n```\n**14. 凯撒密码 （让上帝的归上帝，凯撒的归凯撒）下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。\n移位密码也就是密码中的字母会按照指定的数量来做移位。 一个常见的案例就是ROT13密码，字母会移位13个位置。由'A' ↔ 'N', 'B' ↔ 'O'，以此类推。\n写一个ROT13函数，实现输入加密字符串，输出解密字符串。**\n \n 什么是凯撒密码？一张图说明：\n 下图搬运自：\n https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\n![图片搬运自https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70](https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n我的理解： 简单来说，凯撒密码的规则就是，加密和揭秘双方以一个数字作为密钥，来约定每个字母的位移顺序。例如，密钥为3时，A => D, B=> E ...  X => A (因为X的 charCodeAt +3 已经超过了 Z，不符合规则，因此需要 先减去一个 循环的周期 26，再按照密钥+3)\n不 BB 了， show you code\n```javascript\n`X`.charCodeAt(0) = 88;\nString.fromCharCode(88+3); // '[' 不符合凯撒加密规则，因此需要先往回撤回一个密码表周期, 即 26 ，再按照密钥位移 +3\n\nString.fromCharCode(88-26+3); // 'A' this is right!\n```\n\n\n解答：\n```javascript\nfunction rot13(str) {\n    // 将一段话，转换为可以被处理的二维数组 eg: `hello, my wolrd!` => [`hello,`,`my` ,`world`];\n    const stringArrays = str.split(' ').filter(member => !!member);\n    // 再分别处理每一个 \"单词\"\n    const parseResult = stringArrays.map(word => {\n      // 将每个单词转换为数组，对每个字符进行处理\n      return Array.from(word).map(charator => {\n            // A 对应的 ASCII => 65 , N 对应的 ASCII => 78\n            const ZCode =  'Z'.charCodeAt(0);\n            let current = charator.charCodeAt(0);\n            // 非字母的处理方法\n            if(current < 65 || current > ZCode) {\n                return charator;\n            }\n            // \n            else {\n                const dest = (charator.charCodeAt(0) + 13) > ZCode ? (charator.charCodeAt(0) -26 + 13): charator.charCodeAt(0) + 13;\n              return String.fromCharCode(dest); \n            }\n          \n        }).join(''); //单词中的每个字母拼接，不用空格\n      \n    }).join(' '); //多个单词拼接，需要空格\n    return parseResult;\n  }\n// 另外，这里的 \n if(current < 65 || current > ZCode) {\n                return charator;\n            }\n 可以使用 String.match(/\\w/g) 来命中为数组，从而过滤掉非字母的标点符号\n```\n\n## 总结 ##\n这些算法都是最最最最最基本的算法，然而在解决这些问题中，还是出现了卡壳的地方。\n算法还是得多练，人脑的逻辑思维，就得靠大量算法来优化和调教~\nkeep moving !\n\n\n<b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b>\n","slug":"FreeCodeCamp JavaScript 基础算法练习","published":1,"updated":"2019-05-14T14:30:28.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6hpsayn0050ckufj1bza67p","content":"<h2 id=\"起由\"><a href=\"#起由\" class=\"headerlink\" title=\"起由\"></a>起由</h2><p>最近由于 996.icu 事件，才知道 GitHub 排行前十的 repo 中有这样一个项目。于是就刷起来了</p>\n<h2 id=\"题-amp-解\"><a href=\"#题-amp-解\" class=\"headerlink\" title=\"题 &amp; 解\"></a>题 &amp; 解</h2><p> <strong>1. 找出最长单词  在句子中找出最长的单词，并返回它的长度。函数的返回值应该是一个数字。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"The quick brown fox jumped over the lazy dog\"</span>) 应该返回一个数字</span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"The quick brown fox jumped over the lazy dog\"</span>) 应该返回 <span class=\"number\">6.</span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"May the force be with you\"</span>) 应该返回 <span class=\"number\">5.</span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"Google do a barrel roll\"</span>) 应该返回 <span class=\"number\">6.</span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"What is the average airspeed velocity of an unladen swallow\"</span>) 应该返回 <span class=\"number\">8.</span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"What if we try a super-long word such as otorhinolaryngology\"</span>) 应该返回 <span class=\"number\">19.</span></span><br></pre></td></tr></table></figure>\n<p>解答： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findLongestWord</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 直接根据空格分割, 映射成 word 的长度，再使用 Math API 选出最大的</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = str.split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.length);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"built_in\">Math</span>.max(...arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 句中单词首字母大写  确保字符串的每个单词首字母都大写，其余部分小写。像’the’和’of’这样的连接符同理。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>) 应该返回一个字符串</span><br><span class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>) 应该返回 <span class=\"string\">\"I'm A Little Tea Pot\"</span>.</span><br><span class=\"line\">titleCase(<span class=\"string\">\"sHoRt AnD sToUt\"</span>) 应该返回 <span class=\"string\">\"Short And Stout\"</span>.</span><br><span class=\"line\">titleCase(<span class=\"string\">\"HERE IS MY HANDLE HERE IS MY SPOUT\"</span>) 应该返回 <span class=\"string\">\"Here Is My Handle Here Is My Spout\"</span>.</span><br></pre></td></tr></table></figure></p>\n<p>解答： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 字符串处理的步骤和顺序至关重要</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>  str.toLowerCase().split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.replace(word[<span class=\"number\">0</span>], word[<span class=\"number\">0</span>].toUpperCase())).join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 找出多个数组中的最大数 右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。</strong><br><em>提示：你可以用for循环来迭代数组，并通过arr[i]的方式来访问数组的每个元素。</em><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]) 应该返回一个数组</span><br><span class=\"line\">largestOfFour([[<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]) 应该返回 [<span class=\"number\">27</span>,<span class=\"number\">5</span>,<span class=\"number\">39</span>,<span class=\"number\">1001</span>].</span><br><span class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">35</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">97</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]) 应该返回 [<span class=\"number\">9</span>, <span class=\"number\">35</span>, <span class=\"number\">97</span>, <span class=\"number\">1000000</span>].</span><br></pre></td></tr></table></figure></p>\n<p>解答： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> result.push(<span class=\"built_in\">Math</span>.max.call(...child)));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你以为对了吗？？？？<br>呵呵</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 举个例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> array= [<span class=\"number\">1000000</span>,<span class=\"number\">1001</span>];</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.call(...array);</span><br><span class=\"line\"><span class=\"comment\">// output is 1001</span></span><br><span class=\"line\"></span><br><span class=\"line\">所以，解答的结果中为： [<span class=\"number\">9</span>, <span class=\"number\">35</span>, <span class=\"number\">97</span>, <span class=\"number\">1001</span>]，与预期  [<span class=\"number\">9</span>, <span class=\"number\">35</span>, <span class=\"number\">97</span>, <span class=\"number\">1000000</span>] 不符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WTF! WHY?</span></span><br><span class=\"line\"><span class=\"comment\">// 因为，在调用  `Math.max.call() ` 时，第一个参数传递 This 指针，实际上传入的却是一个数字，因此，该函数的运行时应该是这样的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"literal\">null</span>, <span class=\"number\">1001</span>) 等价于 <span class=\"built_in\">Math</span>.max(<span class=\"number\">1001</span>) </span><br><span class=\"line\"><span class=\"comment\">// 实际上，参数只进去一个，自己跟自己没啥好比的。因此，当数组只有两个参数时，实际的输出结果完全取决于第二个参数是啥。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确解法一：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> result.push(<span class=\"built_in\">Math</span>.max(...child)));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确解法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(child.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">     result.push(<span class=\"built_in\">Math</span>.max(...child))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(child.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    result.push(child);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(result.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 入参的时候应该不会传空数组，但还是防一手</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 检查字符串结尾  判断一个字符串(str)是否以指定的字符串(target)结尾。 如果是，返回true;如果不是，返回false。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"Bastian\"</span>, <span class=\"string\">\"n\"</span>) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"Connor\"</span>, <span class=\"string\">\"n\"</span>) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"Walking on water and developing software from a specification are easy if both are frozen\"</span>, <span class=\"string\">\"specification\"</span>) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"He has to give me a new name\"</span>, <span class=\"string\">\"name\"</span>) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"He has to give me a new name\"</span>, <span class=\"string\">\"me\"</span>) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"He has to give me a new name\"</span>, <span class=\"string\">\"na\"</span>) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\"</span>, <span class=\"string\">\"mountain\"</span>) 应该返回 <span class=\"literal\">false</span>.</span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">confirmEnding</span>(<span class=\"params\">str, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(target.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str[str.length<span class=\"number\">-1</span>] === target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 分割母字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = str.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arr[arr.length<span class=\"number\">-1</span>].indexOf(target) &gt; <span class=\"number\">0</span>) || arr[arr.length<span class=\"number\">-1</span>] === target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>5. 重复输出字符串 （重要的事情说3遍）重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">repeat(<span class=\"string\">\"*\"</span>, <span class=\"number\">3</span>) 应该返回 <span class=\"string\">\"***\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"abc\"</span>, <span class=\"number\">3</span>) 应该返回 <span class=\"string\">\"abcabcabc\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"abc\"</span>, <span class=\"number\">4</span>) 应该返回 <span class=\"string\">\"abcabcabcabc\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"abc\"</span>, <span class=\"number\">1</span>) 应该返回 <span class=\"string\">\"abc\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"*\"</span>, <span class=\"number\">8</span>) 应该返回 <span class=\"string\">\"********\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"abc\"</span>, <span class=\"number\">-2</span>) 应该返回 <span class=\"string\">\"\"</span>.</span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span>(<span class=\"params\">str, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请把你的代码写在这里</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> ? str.repeat(num) : <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span>(<span class=\"params\">str, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt; num;i++) &#123;</span><br><span class=\"line\">\t  result += str;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">''</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>6. 截断字符串 （用瑞兹来截断对面的退路）  如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。 切记，插入到字符串尾部的三个点号也会计入字符串的长度。<br><em>但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">truncate(<span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>, <span class=\"number\">11</span>) 应该返回 <span class=\"string\">\"A-tisket...\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"Peter Piper picked a peck of pickled peppers\"</span>, <span class=\"number\">14</span>) 应该返回 <span class=\"string\">\"Peter Piper...\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>, <span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>.length) 应该返回 <span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>, <span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>.length + <span class=\"number\">2</span>) 应该返回 <span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"A-\"</span>, <span class=\"number\">1</span>) 应该返回 <span class=\"string\">\"A...\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"Absolutely Longer\"</span>, <span class=\"number\">2</span>) 应该返回 <span class=\"string\">\"Ab...\"</span>.</span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">truncate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.length &gt; num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.substr(<span class=\"number\">0</span>,num<span class=\"number\">-3</span>) + <span class=\"string\">`...`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.substr(<span class=\"number\">0</span>,num) + <span class=\"string\">'...'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>7. 猴子吃香蕉, 分割数组 （猴子吃香蕉可是掰成好几段来吃哦） 把一个数组arr按照指定的数组大小size分割成若干个数组块<br>例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];<br>chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">chunk([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>], <span class=\"number\">2</span>) 应该返回 [[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>], [<span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">3</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">2</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">4</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">3</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], <span class=\"number\">4</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>], [<span class=\"number\">8</span>]].</span><br></pre></td></tr></table></figure></p>\n<p>解答<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chunk</span>(<span class=\"params\">arr, size</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(arr.length &lt; size) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 请把你的代码写在这里</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt; arr.length;i=i+size) &#123;</span><br><span class=\"line\">   result.push(arr.slice(i,i+size))</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这道题一时半会我也没有思路，网上搜索的答案。<br>针对该类问题，大概的思路就是: <strong>通过迭代不断简化问题的复杂度，在每次迭代中处理细化后的小 case </strong><br>take a case:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> size = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第一次迭代时: </span></span><br><span class=\"line\">i = <span class=\"number\">0</span>;  i + size = <span class=\"number\">0</span> + <span class=\"number\">2</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 因此 ( slice 操作是半闭半开区间 )</span></span><br><span class=\"line\">arr.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>) =&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次迭代时：</span></span><br><span class=\"line\">i = 之前循环末尾语句的计算结果</span><br><span class=\"line\">i = <span class=\"number\">2</span>; i + size = <span class=\"number\">2</span> + <span class=\"number\">2</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">arr.slice(<span class=\"number\">2</span>,<span class=\"number\">4</span>) =&gt; [<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三次迭代时， i = 4, 已经无法通过循环条件 i &lt; arr.length( 4 &gt; 3 )，退出循环体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时， result 的结果为 [[1,2],[3]]</span></span><br><span class=\"line\">*<span class=\"regexp\">/</span></span><br></pre></td></tr></table></figure>\n<p><strong>8. 截断数组  返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case: </span></span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>) 应该返回 [<span class=\"number\">3</span>].</span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">0</span>) 应该返回 [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].</span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">9</span>) 应该返回 [].</span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>) 应该返回 [].</span><br><span class=\"line\">slasher([<span class=\"string\">\"burgers\"</span>, <span class=\"string\">\"fries\"</span>, <span class=\"string\">\"shake\"</span>], <span class=\"number\">1</span>) 应该返回 [<span class=\"string\">\"fries\"</span>, <span class=\"string\">\"shake\"</span>].</span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">\"chicken\"</span>, <span class=\"number\">3</span>, <span class=\"string\">\"potatoes\"</span>, <span class=\"string\">\"cheese\"</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>) 应该返回 [<span class=\"string\">\"cheese\"</span>, <span class=\"number\">4</span>].</span><br></pre></td></tr></table></figure></p>\n<p>解答： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slasher</span>(<span class=\"params\">arr, howMany</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.length &lt; howMany) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  arr.splice(<span class=\"number\">0</span>, howMany);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 没啥好说的，splice 不是一个 pure function, 每次经过 splice 操作，都会改变原始数组</span></span><br><span class=\"line\"><span class=\"comment\">// 另外，数组的非纯方法还有:</span></span><br><span class=\"line\"></span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.push()</span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.unshift()</span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.pop()</span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.shift()</span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.sort()</span><br></pre></td></tr></table></figure>\n<p><strong>9. 比较字符串 （蛤蟆可以吃队友，也可以吃对手）如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br>举例，[“hello”, “Hello”]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。<br>[“hello”, “hey”]应该返回false，因为字符串”hello”并不包含字符”y”。<br>[“Alien”, “line”]应该返回true，因为”line”中所有字符都可以在”Alien”找到。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hey\"</span>]) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"Hello\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"zyxwvutsrqponmlkjihgfedcba\"</span>, <span class=\"string\">\"qrstu\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"Army\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"Aarmy\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Alien\"</span>, <span class=\"string\">\"line\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"floor\"</span>, <span class=\"string\">\"for\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"neo\"</span>]) 应该返回 <span class=\"literal\">false</span>.</span><br></pre></td></tr></table></figure></p>\n<p><strong>10. 比较字符串<br>（蛤蟆可以吃队友，也可以吃对手）<br>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br>举例，[“hello”, “Hello”]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。<br>[“hello”, “hey”]应该返回false，因为字符串”hello”并不包含字符”y”。<br>[“Alien”, “line”]应该返回true，因为”line”中所有字符都可以在”Alien”找到。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hey\"</span>]) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"Hello\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"zyxwvutsrqponmlkjihgfedcba\"</span>, <span class=\"string\">\"qrstu\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"Army\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"Aarmy\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Alien\"</span>, <span class=\"string\">\"line\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"floor\"</span>, <span class=\"string\">\"for\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"neo\"</span>]) 应该返回 <span class=\"literal\">false</span>.</span><br></pre></td></tr></table></figure>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 啰里啰唆的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutation</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> prev = arr[<span class=\"number\">0</span>].toLowerCase().split(<span class=\"string\">''</span>).sort().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> next = arr[<span class=\"number\">1</span>].toLowerCase().split(<span class=\"string\">''</span>).sort().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result =  <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;next.length;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!prev.includes(next[i])) &#123;</span><br><span class=\"line\">      result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 装逼写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutation</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> accumulator = <span class=\"function\">(<span class=\"params\">acc, prev, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果只有一个成员，或者遍历不到下一个成员</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[index + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 相比较的两个成员都进行转为小写操作</span></span><br><span class=\"line\">      prev = prev.toLowerCase();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> next = arr[index + <span class=\"number\">1</span>].toLowerCase();</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; next.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找不到后面字符串中的某个字符时，直接 return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!prev.includes(next[i])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        acc = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(accumulator, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>11. 过滤数组假值 （真假美猴王）删除数组中的所有假值。<br>在JavaScript中，假值有false、null、0、””、undefined 和 NaN。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">bouncer([<span class=\"number\">7</span>, <span class=\"string\">\"ate\"</span>, <span class=\"string\">\"\"</span>, <span class=\"literal\">false</span>, <span class=\"number\">9</span>]) 应该返回 [<span class=\"number\">7</span>, <span class=\"string\">\"ate\"</span>, <span class=\"number\">9</span>].</span><br><span class=\"line\">bouncer([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]) 应该返回 [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>].</span><br><span class=\"line\">bouncer([<span class=\"literal\">false</span>, <span class=\"literal\">null</span>, <span class=\"number\">0</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">\"\"</span>]) 应该返回 [].</span><br><span class=\"line\">bouncer([<span class=\"number\">1</span>, <span class=\"literal\">null</span>, <span class=\"literal\">NaN</span>, <span class=\"number\">2</span>, <span class=\"literal\">undefined</span>]) 应该返回 [<span class=\"number\">1</span>, <span class=\"number\">2</span>].</span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bouncer</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请把你的代码写在这里</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.filter(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(member));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// API 背的熟练， Easy</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"12\">\n<li>摧毁数组  金克斯的迫击炮！实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 垃圾 撸啊撸，还金克斯，垃圾游戏，抄袭我 Dota</span></span><br><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">destroyer([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>) 应该返回 [<span class=\"number\">1</span>, <span class=\"number\">1</span>].</span><br><span class=\"line\">destroyer([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>) 应该返回 [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>].</span><br><span class=\"line\">destroyer([<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>) 应该返回 [<span class=\"number\">1</span>].</span><br><span class=\"line\">destroyer([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>) 应该返回 [].</span><br><span class=\"line\">destroyer([<span class=\"string\">\"tree\"</span>, <span class=\"string\">\"hamburger\"</span>, <span class=\"number\">53</span>], <span class=\"string\">\"tree\"</span>, <span class=\"number\">53</span>) 应该返回 [<span class=\"string\">\"hamburger\"</span>].</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destroyer</span>(<span class=\"params\">arr, ...rest</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请把你的代码写在这里</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.from(rest);</span><br><span class=\"line\">  params.map(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> &#123;</span><br><span class=\"line\">   arr = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== member);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原文中， destoryer 函数只接受一个参数，想要考察 arguments, 可改造如下：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destoryer</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 深拷贝一下</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> brr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringfy(arr));</span><br><span class=\"line\"><span class=\"comment\">// 把默认的数组过滤掉</span></span><br><span class=\"line\">brr.shift();</span><br><span class=\"line\"><span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.from(brr);</span><br><span class=\"line\">  params.map(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> &#123;</span><br><span class=\"line\">   arr = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== member);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>13. 数组排序并找出元素索引<br>我身在何处？<br>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。<br>举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。<br>同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">where([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>], <span class=\"number\">35</span>) 应该返回 <span class=\"number\">3.</span></span><br><span class=\"line\">where([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>], <span class=\"number\">30</span>) 应该返回 <span class=\"number\">2.</span></span><br><span class=\"line\">where([<span class=\"number\">40</span>, <span class=\"number\">60</span>], <span class=\"number\">50</span>) 应该返回 <span class=\"number\">1.</span></span><br><span class=\"line\">where([<span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>], <span class=\"number\">3</span>) 应该返回 <span class=\"number\">0.</span></span><br><span class=\"line\">where([<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>) 应该返回 <span class=\"number\">2.</span></span><br><span class=\"line\">where([<span class=\"number\">2</span>, <span class=\"number\">20</span>, <span class=\"number\">10</span>], <span class=\"number\">19</span>) 应该返回 <span class=\"number\">2.</span></span><br><span class=\"line\">where([<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>], <span class=\"number\">15</span>) 应该返回 <span class=\"number\">3.</span></span><br></pre></td></tr></table></figure>\n<p>解答<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">where</span>(<span class=\"params\">arr, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为什么不适用默认的 sort 参数呢？可以测试一下 [1,100,1000,1001,10000,10001 ].sort() 的结果</span></span><br><span class=\"line\">  <span class=\"comment\">// 进行非纯排序</span></span><br><span class=\"line\">  arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a-b); </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// let 个变量，用于缓存最终插入的下标</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> insetIndex = <span class=\"number\">0</span> ;</span><br><span class=\"line\">  <span class=\"comment\">// 当所有成员都小于等于给定值，那么插入的位置为最后一个</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.every(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> member &lt;= num)) &#123;</span><br><span class=\"line\">    insetIndex = arr.length;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">// 当所有成员都大于等于给定值，那么插入位置为第一个</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr.every(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> member &gt;= num)) &#123;</span><br><span class=\"line\">    insetIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果都不是，那么，找到比他大的那个数的下标，将此下标作为最终的插入下标</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    insetIndex = arr.findIndex(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> member &gt;= num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> insetIndex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** PS： 在 </span></span><br><span class=\"line\"><span class=\"comment\">else &#123;  </span></span><br><span class=\"line\"><span class=\"comment\">insetIndex = arr.findIndex(member =&gt; member &gt;= num); </span></span><br><span class=\"line\"><span class=\"comment\">&#125; </span></span><br><span class=\"line\"><span class=\"comment\">逻辑中，我本来判断的是 </span></span><br><span class=\"line\"><span class=\"comment\">member =&gt; member &lt;= num </span></span><br><span class=\"line\"><span class=\"comment\">这样是不对的，因为可能有多个数比他小，返回第一个比他小的数，位置不准确</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>14. 凯撒密码 （让上帝的归上帝，凯撒的归凯撒）下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。<br>移位密码也就是密码中的字母会按照指定的数量来做移位。 一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。<br>写一个ROT13函数，实现输入加密字符串，输出解密字符串。</strong></p>\n<p> 什么是凯撒密码？一张图说明：<br> 下图搬运自：<br> <a href=\"https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" target=\"_blank\" rel=\"noopener\">https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a><br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片搬运自https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" title=\"\" class=\"\">\n                <p>图片搬运自https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</p>\n            </figure><br>我的理解： 简单来说，凯撒密码的规则就是，加密和揭秘双方以一个数字作为密钥，来约定每个字母的位移顺序。例如，密钥为3时，A =&gt; D, B=&gt; E …  X =&gt; A (因为X的 charCodeAt +3 已经超过了 Z，不符合规则，因此需要 先减去一个 循环的周期 26，再按照密钥+3)<br>不 BB 了， show you code<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`X`</span>.charCodeAt(<span class=\"number\">0</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">88</span>+<span class=\"number\">3</span>); <span class=\"comment\">// '[' 不符合凯撒加密规则，因此需要先往回撤回一个密码表周期, 即 26 ，再按照密钥位移 +3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">88</span><span class=\"number\">-26</span>+<span class=\"number\">3</span>); <span class=\"comment\">// 'A' this is right!</span></span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rot13</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将一段话，转换为可以被处理的二维数组 eg: `hello, my wolrd!` =&gt; [`hello,`,`my` ,`world`];</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> stringArrays = str.split(<span class=\"string\">' '</span>).filter(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> !!member);</span><br><span class=\"line\">    <span class=\"comment\">// 再分别处理每一个 \"单词\"</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parseResult = stringArrays.map(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将每个单词转换为数组，对每个字符进行处理</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(word).map(<span class=\"function\"><span class=\"params\">charator</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// A 对应的 ASCII =&gt; 65 , N 对应的 ASCII =&gt; 78</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> ZCode =  <span class=\"string\">'Z'</span>.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> current = charator.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 非字母的处理方法</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(current &lt; <span class=\"number\">65</span> || current &gt; ZCode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> charator;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// </span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> dest = (charator.charCodeAt(<span class=\"number\">0</span>) + <span class=\"number\">13</span>) &gt; ZCode ? (charator.charCodeAt(<span class=\"number\">0</span>) <span class=\"number\">-26</span> + <span class=\"number\">13</span>): charator.charCodeAt(<span class=\"number\">0</span>) + <span class=\"number\">13</span>;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>.fromCharCode(dest); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;).join(<span class=\"string\">''</span>); <span class=\"comment\">//单词中的每个字母拼接，不用空格</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;).join(<span class=\"string\">' '</span>); <span class=\"comment\">//多个单词拼接，需要空格</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseResult;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 另外，这里的 </span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(current &lt; <span class=\"number\">65</span> || current &gt; ZCode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> charator;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> 可以使用 <span class=\"built_in\">String</span>.match(<span class=\"regexp\">/\\w/g</span>) 来命中为数组，从而过滤掉非字母的标点符号</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这些算法都是最最最最最基本的算法，然而在解决这些问题中，还是出现了卡壳的地方。<br>算法还是得多练，人脑的逻辑思维，就得靠大量算法来优化和调教~<br>keep moving !</p>\n<p><b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"起由\"><a href=\"#起由\" class=\"headerlink\" title=\"起由\"></a>起由</h2><p>最近由于 996.icu 事件，才知道 GitHub 排行前十的 repo 中有这样一个项目。于是就刷起来了</p>\n<h2 id=\"题-amp-解\"><a href=\"#题-amp-解\" class=\"headerlink\" title=\"题 &amp; 解\"></a>题 &amp; 解</h2><p> <strong>1. 找出最长单词  在句子中找出最长的单词，并返回它的长度。函数的返回值应该是一个数字。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"The quick brown fox jumped over the lazy dog\"</span>) 应该返回一个数字</span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"The quick brown fox jumped over the lazy dog\"</span>) 应该返回 <span class=\"number\">6.</span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"May the force be with you\"</span>) 应该返回 <span class=\"number\">5.</span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"Google do a barrel roll\"</span>) 应该返回 <span class=\"number\">6.</span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"What is the average airspeed velocity of an unladen swallow\"</span>) 应该返回 <span class=\"number\">8.</span></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"What if we try a super-long word such as otorhinolaryngology\"</span>) 应该返回 <span class=\"number\">19.</span></span><br></pre></td></tr></table></figure>\n<p>解答： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findLongestWord</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 直接根据空格分割, 映射成 word 的长度，再使用 Math API 选出最大的</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = str.split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.length);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"built_in\">Math</span>.max(...arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2. 句中单词首字母大写  确保字符串的每个单词首字母都大写，其余部分小写。像’the’和’of’这样的连接符同理。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>) 应该返回一个字符串</span><br><span class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>) 应该返回 <span class=\"string\">\"I'm A Little Tea Pot\"</span>.</span><br><span class=\"line\">titleCase(<span class=\"string\">\"sHoRt AnD sToUt\"</span>) 应该返回 <span class=\"string\">\"Short And Stout\"</span>.</span><br><span class=\"line\">titleCase(<span class=\"string\">\"HERE IS MY HANDLE HERE IS MY SPOUT\"</span>) 应该返回 <span class=\"string\">\"Here Is My Handle Here Is My Spout\"</span>.</span><br></pre></td></tr></table></figure></p>\n<p>解答： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 字符串处理的步骤和顺序至关重要</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>  str.toLowerCase().split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.replace(word[<span class=\"number\">0</span>], word[<span class=\"number\">0</span>].toUpperCase())).join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3. 找出多个数组中的最大数 右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。</strong><br><em>提示：你可以用for循环来迭代数组，并通过arr[i]的方式来访问数组的每个元素。</em><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]) 应该返回一个数组</span><br><span class=\"line\">largestOfFour([[<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]) 应该返回 [<span class=\"number\">27</span>,<span class=\"number\">5</span>,<span class=\"number\">39</span>,<span class=\"number\">1001</span>].</span><br><span class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">35</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">97</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]) 应该返回 [<span class=\"number\">9</span>, <span class=\"number\">35</span>, <span class=\"number\">97</span>, <span class=\"number\">1000000</span>].</span><br></pre></td></tr></table></figure></p>\n<p>解答： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> result.push(<span class=\"built_in\">Math</span>.max.call(...child)));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你以为对了吗？？？？<br>呵呵</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 举个例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> array= [<span class=\"number\">1000000</span>,<span class=\"number\">1001</span>];</span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.call(...array);</span><br><span class=\"line\"><span class=\"comment\">// output is 1001</span></span><br><span class=\"line\"></span><br><span class=\"line\">所以，解答的结果中为： [<span class=\"number\">9</span>, <span class=\"number\">35</span>, <span class=\"number\">97</span>, <span class=\"number\">1001</span>]，与预期  [<span class=\"number\">9</span>, <span class=\"number\">35</span>, <span class=\"number\">97</span>, <span class=\"number\">1000000</span>] 不符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WTF! WHY?</span></span><br><span class=\"line\"><span class=\"comment\">// 因为，在调用  `Math.max.call() ` 时，第一个参数传递 This 指针，实际上传入的却是一个数字，因此，该函数的运行时应该是这样的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max.call(<span class=\"literal\">null</span>, <span class=\"number\">1001</span>) 等价于 <span class=\"built_in\">Math</span>.max(<span class=\"number\">1001</span>) </span><br><span class=\"line\"><span class=\"comment\">// 实际上，参数只进去一个，自己跟自己没啥好比的。因此，当数组只有两个参数时，实际的输出结果完全取决于第二个参数是啥。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确解法一：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> result.push(<span class=\"built_in\">Math</span>.max(...child)));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确解法二</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(child.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">     result.push(<span class=\"built_in\">Math</span>.max(...child))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(child.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    result.push(child);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(result.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 入参的时候应该不会传空数组，但还是防一手</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4. 检查字符串结尾  判断一个字符串(str)是否以指定的字符串(target)结尾。 如果是，返回true;如果不是，返回false。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"Bastian\"</span>, <span class=\"string\">\"n\"</span>) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"Connor\"</span>, <span class=\"string\">\"n\"</span>) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"Walking on water and developing software from a specification are easy if both are frozen\"</span>, <span class=\"string\">\"specification\"</span>) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"He has to give me a new name\"</span>, <span class=\"string\">\"name\"</span>) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"He has to give me a new name\"</span>, <span class=\"string\">\"me\"</span>) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"He has to give me a new name\"</span>, <span class=\"string\">\"na\"</span>) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">confirmEnding(<span class=\"string\">\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\"</span>, <span class=\"string\">\"mountain\"</span>) 应该返回 <span class=\"literal\">false</span>.</span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">confirmEnding</span>(<span class=\"params\">str, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(target.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str[str.length<span class=\"number\">-1</span>] === target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 分割母字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = str.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arr[arr.length<span class=\"number\">-1</span>].indexOf(target) &gt; <span class=\"number\">0</span>) || arr[arr.length<span class=\"number\">-1</span>] === target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>5. 重复输出字符串 （重要的事情说3遍）重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">repeat(<span class=\"string\">\"*\"</span>, <span class=\"number\">3</span>) 应该返回 <span class=\"string\">\"***\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"abc\"</span>, <span class=\"number\">3</span>) 应该返回 <span class=\"string\">\"abcabcabc\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"abc\"</span>, <span class=\"number\">4</span>) 应该返回 <span class=\"string\">\"abcabcabcabc\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"abc\"</span>, <span class=\"number\">1</span>) 应该返回 <span class=\"string\">\"abc\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"*\"</span>, <span class=\"number\">8</span>) 应该返回 <span class=\"string\">\"********\"</span>.</span><br><span class=\"line\">repeat(<span class=\"string\">\"abc\"</span>, <span class=\"number\">-2</span>) 应该返回 <span class=\"string\">\"\"</span>.</span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span>(<span class=\"params\">str, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请把你的代码写在这里</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num &gt; <span class=\"number\">0</span> ? str.repeat(num) : <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeat</span>(<span class=\"params\">str, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt; num;i++) &#123;</span><br><span class=\"line\">\t  result += str;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;<span class=\"keyword\">return</span> <span class=\"string\">''</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>6. 截断字符串 （用瑞兹来截断对面的退路）  如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。 切记，插入到字符串尾部的三个点号也会计入字符串的长度。<br><em>但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">truncate(<span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>, <span class=\"number\">11</span>) 应该返回 <span class=\"string\">\"A-tisket...\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"Peter Piper picked a peck of pickled peppers\"</span>, <span class=\"number\">14</span>) 应该返回 <span class=\"string\">\"Peter Piper...\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>, <span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>.length) 应该返回 <span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>, <span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>.length + <span class=\"number\">2</span>) 应该返回 <span class=\"string\">\"A-tisket a-tasket A green and yellow basket\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"A-\"</span>, <span class=\"number\">1</span>) 应该返回 <span class=\"string\">\"A...\"</span>.</span><br><span class=\"line\">truncate(<span class=\"string\">\"Absolutely Longer\"</span>, <span class=\"number\">2</span>) 应该返回 <span class=\"string\">\"Ab...\"</span>.</span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">truncate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(str.length &gt; num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.substr(<span class=\"number\">0</span>,num<span class=\"number\">-3</span>) + <span class=\"string\">`...`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.substr(<span class=\"number\">0</span>,num) + <span class=\"string\">'...'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>7. 猴子吃香蕉, 分割数组 （猴子吃香蕉可是掰成好几段来吃哦） 把一个数组arr按照指定的数组大小size分割成若干个数组块<br>例如:chunk([1,2,3,4],2)=[[1,2],[3,4]];<br>chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 测试用例 (test case): </span></span><br><span class=\"line\">chunk([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>], <span class=\"number\">2</span>) 应该返回 [[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>], [<span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">3</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">2</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], <span class=\"number\">4</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], <span class=\"number\">3</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>]].</span><br><span class=\"line\">chunk([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], <span class=\"number\">4</span>) 应该返回 [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>], [<span class=\"number\">8</span>]].</span><br></pre></td></tr></table></figure></p>\n<p>解答<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chunk</span>(<span class=\"params\">arr, size</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(arr.length &lt; size) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 请把你的代码写在这里</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt; arr.length;i=i+size) &#123;</span><br><span class=\"line\">   result.push(arr.slice(i,i+size))</span><br><span class=\"line\">   </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这道题一时半会我也没有思路，网上搜索的答案。<br>针对该类问题，大概的思路就是: <strong>通过迭代不断简化问题的复杂度，在每次迭代中处理细化后的小 case </strong><br>take a case:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> size = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第一次迭代时: </span></span><br><span class=\"line\">i = <span class=\"number\">0</span>;  i + size = <span class=\"number\">0</span> + <span class=\"number\">2</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 因此 ( slice 操作是半闭半开区间 )</span></span><br><span class=\"line\">arr.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>) =&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二次迭代时：</span></span><br><span class=\"line\">i = 之前循环末尾语句的计算结果</span><br><span class=\"line\">i = <span class=\"number\">2</span>; i + size = <span class=\"number\">2</span> + <span class=\"number\">2</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">arr.slice(<span class=\"number\">2</span>,<span class=\"number\">4</span>) =&gt; [<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三次迭代时， i = 4, 已经无法通过循环条件 i &lt; arr.length( 4 &gt; 3 )，退出循环体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时， result 的结果为 [[1,2],[3]]</span></span><br><span class=\"line\">*<span class=\"regexp\">/</span></span><br></pre></td></tr></table></figure>\n<p><strong>8. 截断数组  返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case: </span></span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>) 应该返回 [<span class=\"number\">3</span>].</span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">0</span>) 应该返回 [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].</span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">9</span>) 应该返回 [].</span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>) 应该返回 [].</span><br><span class=\"line\">slasher([<span class=\"string\">\"burgers\"</span>, <span class=\"string\">\"fries\"</span>, <span class=\"string\">\"shake\"</span>], <span class=\"number\">1</span>) 应该返回 [<span class=\"string\">\"fries\"</span>, <span class=\"string\">\"shake\"</span>].</span><br><span class=\"line\">slasher([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">\"chicken\"</span>, <span class=\"number\">3</span>, <span class=\"string\">\"potatoes\"</span>, <span class=\"string\">\"cheese\"</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>) 应该返回 [<span class=\"string\">\"cheese\"</span>, <span class=\"number\">4</span>].</span><br></pre></td></tr></table></figure></p>\n<p>解答： </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slasher</span>(<span class=\"params\">arr, howMany</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.length &lt; howMany) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  arr.splice(<span class=\"number\">0</span>, howMany);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 没啥好说的，splice 不是一个 pure function, 每次经过 splice 操作，都会改变原始数组</span></span><br><span class=\"line\"><span class=\"comment\">// 另外，数组的非纯方法还有:</span></span><br><span class=\"line\"></span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.push()</span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.unshift()</span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.pop()</span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.shift()</span><br><span class=\"line\"> - <span class=\"built_in\">Array</span>.prototype.sort()</span><br></pre></td></tr></table></figure>\n<p><strong>9. 比较字符串 （蛤蟆可以吃队友，也可以吃对手）如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br>举例，[“hello”, “Hello”]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。<br>[“hello”, “hey”]应该返回false，因为字符串”hello”并不包含字符”y”。<br>[“Alien”, “line”]应该返回true，因为”line”中所有字符都可以在”Alien”找到。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hey\"</span>]) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"Hello\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"zyxwvutsrqponmlkjihgfedcba\"</span>, <span class=\"string\">\"qrstu\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"Army\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"Aarmy\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Alien\"</span>, <span class=\"string\">\"line\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"floor\"</span>, <span class=\"string\">\"for\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"neo\"</span>]) 应该返回 <span class=\"literal\">false</span>.</span><br></pre></td></tr></table></figure></p>\n<p><strong>10. 比较字符串<br>（蛤蟆可以吃队友，也可以吃对手）<br>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。<br>举例，[“hello”, “Hello”]应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。<br>[“hello”, “hey”]应该返回false，因为字符串”hello”并不包含字符”y”。<br>[“Alien”, “line”]应该返回true，因为”line”中所有字符都可以在”Alien”找到。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"hey\"</span>]) 应该返回 <span class=\"literal\">false</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"Hello\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"zyxwvutsrqponmlkjihgfedcba\"</span>, <span class=\"string\">\"qrstu\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"Army\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"Aarmy\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"Alien\"</span>, <span class=\"string\">\"line\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"floor\"</span>, <span class=\"string\">\"for\"</span>]) 应该返回 <span class=\"literal\">true</span>.</span><br><span class=\"line\">mutation([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"neo\"</span>]) 应该返回 <span class=\"literal\">false</span>.</span><br></pre></td></tr></table></figure>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 啰里啰唆的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutation</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> prev = arr[<span class=\"number\">0</span>].toLowerCase().split(<span class=\"string\">''</span>).sort().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> next = arr[<span class=\"number\">1</span>].toLowerCase().split(<span class=\"string\">''</span>).sort().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result =  <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;next.length;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!prev.includes(next[i])) &#123;</span><br><span class=\"line\">      result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 装逼写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutation</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> accumulator = <span class=\"function\">(<span class=\"params\">acc, prev, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果只有一个成员，或者遍历不到下一个成员</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[index + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 相比较的两个成员都进行转为小写操作</span></span><br><span class=\"line\">      prev = prev.toLowerCase();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> next = arr[index + <span class=\"number\">1</span>].toLowerCase();</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; next.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找不到后面字符串中的某个字符时，直接 return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!prev.includes(next[i])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        acc = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(accumulator, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>11. 过滤数组假值 （真假美猴王）删除数组中的所有假值。<br>在JavaScript中，假值有false、null、0、””、undefined 和 NaN。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">bouncer([<span class=\"number\">7</span>, <span class=\"string\">\"ate\"</span>, <span class=\"string\">\"\"</span>, <span class=\"literal\">false</span>, <span class=\"number\">9</span>]) 应该返回 [<span class=\"number\">7</span>, <span class=\"string\">\"ate\"</span>, <span class=\"number\">9</span>].</span><br><span class=\"line\">bouncer([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]) 应该返回 [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>].</span><br><span class=\"line\">bouncer([<span class=\"literal\">false</span>, <span class=\"literal\">null</span>, <span class=\"number\">0</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">\"\"</span>]) 应该返回 [].</span><br><span class=\"line\">bouncer([<span class=\"number\">1</span>, <span class=\"literal\">null</span>, <span class=\"literal\">NaN</span>, <span class=\"number\">2</span>, <span class=\"literal\">undefined</span>]) 应该返回 [<span class=\"number\">1</span>, <span class=\"number\">2</span>].</span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bouncer</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请把你的代码写在这里</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.filter(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> <span class=\"built_in\">Boolean</span>(member));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// API 背的熟练， Easy</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"12\">\n<li>摧毁数组  金克斯的迫击炮！实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 垃圾 撸啊撸，还金克斯，垃圾游戏，抄袭我 Dota</span></span><br><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">destroyer([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>) 应该返回 [<span class=\"number\">1</span>, <span class=\"number\">1</span>].</span><br><span class=\"line\">destroyer([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>) 应该返回 [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>].</span><br><span class=\"line\">destroyer([<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>) 应该返回 [<span class=\"number\">1</span>].</span><br><span class=\"line\">destroyer([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>) 应该返回 [].</span><br><span class=\"line\">destroyer([<span class=\"string\">\"tree\"</span>, <span class=\"string\">\"hamburger\"</span>, <span class=\"number\">53</span>], <span class=\"string\">\"tree\"</span>, <span class=\"number\">53</span>) 应该返回 [<span class=\"string\">\"hamburger\"</span>].</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destroyer</span>(<span class=\"params\">arr, ...rest</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请把你的代码写在这里</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.from(rest);</span><br><span class=\"line\">  params.map(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> &#123;</span><br><span class=\"line\">   arr = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== member);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原文中， destoryer 函数只接受一个参数，想要考察 arguments, 可改造如下：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destoryer</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 深拷贝一下</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> brr = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringfy(arr));</span><br><span class=\"line\"><span class=\"comment\">// 把默认的数组过滤掉</span></span><br><span class=\"line\">brr.shift();</span><br><span class=\"line\"><span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.from(brr);</span><br><span class=\"line\">  params.map(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> &#123;</span><br><span class=\"line\">   arr = arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item !== member);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>13. 数组排序并找出元素索引<br>我身在何处？<br>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。<br>举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。<br>同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19插入到数组[3,5,20]后变成[3,5,19,20]，而19对应的索引值就是2。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test case</span></span><br><span class=\"line\">where([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>], <span class=\"number\">35</span>) 应该返回 <span class=\"number\">3.</span></span><br><span class=\"line\">where([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>], <span class=\"number\">30</span>) 应该返回 <span class=\"number\">2.</span></span><br><span class=\"line\">where([<span class=\"number\">40</span>, <span class=\"number\">60</span>], <span class=\"number\">50</span>) 应该返回 <span class=\"number\">1.</span></span><br><span class=\"line\">where([<span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>], <span class=\"number\">3</span>) 应该返回 <span class=\"number\">0.</span></span><br><span class=\"line\">where([<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>, <span class=\"number\">3</span>], <span class=\"number\">5</span>) 应该返回 <span class=\"number\">2.</span></span><br><span class=\"line\">where([<span class=\"number\">2</span>, <span class=\"number\">20</span>, <span class=\"number\">10</span>], <span class=\"number\">19</span>) 应该返回 <span class=\"number\">2.</span></span><br><span class=\"line\">where([<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>], <span class=\"number\">15</span>) 应该返回 <span class=\"number\">3.</span></span><br></pre></td></tr></table></figure>\n<p>解答<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">where</span>(<span class=\"params\">arr, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为什么不适用默认的 sort 参数呢？可以测试一下 [1,100,1000,1001,10000,10001 ].sort() 的结果</span></span><br><span class=\"line\">  <span class=\"comment\">// 进行非纯排序</span></span><br><span class=\"line\">  arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a-b); </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// let 个变量，用于缓存最终插入的下标</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> insetIndex = <span class=\"number\">0</span> ;</span><br><span class=\"line\">  <span class=\"comment\">// 当所有成员都小于等于给定值，那么插入的位置为最后一个</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.every(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> member &lt;= num)) &#123;</span><br><span class=\"line\">    insetIndex = arr.length;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">// 当所有成员都大于等于给定值，那么插入位置为第一个</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr.every(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> member &gt;= num)) &#123;</span><br><span class=\"line\">    insetIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果都不是，那么，找到比他大的那个数的下标，将此下标作为最终的插入下标</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    insetIndex = arr.findIndex(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> member &gt;= num);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> insetIndex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** PS： 在 </span></span><br><span class=\"line\"><span class=\"comment\">else &#123;  </span></span><br><span class=\"line\"><span class=\"comment\">insetIndex = arr.findIndex(member =&gt; member &gt;= num); </span></span><br><span class=\"line\"><span class=\"comment\">&#125; </span></span><br><span class=\"line\"><span class=\"comment\">逻辑中，我本来判断的是 </span></span><br><span class=\"line\"><span class=\"comment\">member =&gt; member &lt;= num </span></span><br><span class=\"line\"><span class=\"comment\">这样是不对的，因为可能有多个数比他小，返回第一个比他小的数，位置不准确</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>14. 凯撒密码 （让上帝的归上帝，凯撒的归凯撒）下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。<br>移位密码也就是密码中的字母会按照指定的数量来做移位。 一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。<br>写一个ROT13函数，实现输入加密字符串，输出解密字符串。</strong></p>\n<p> 什么是凯撒密码？一张图说明：<br> 下图搬运自：<br> <a href=\"https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" target=\"_blank\" rel=\"noopener\">https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</a><br><figure class=\"image-box\">\n                <img src=\"https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"图片搬运自https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" title=\"\" class=\"\">\n                <p>图片搬运自https://img-blog.csdn.net/20180826085456567?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5ncWl1bWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70</p>\n            </figure><br>我的理解： 简单来说，凯撒密码的规则就是，加密和揭秘双方以一个数字作为密钥，来约定每个字母的位移顺序。例如，密钥为3时，A =&gt; D, B=&gt; E …  X =&gt; A (因为X的 charCodeAt +3 已经超过了 Z，不符合规则，因此需要 先减去一个 循环的周期 26，再按照密钥+3)<br>不 BB 了， show you code<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`X`</span>.charCodeAt(<span class=\"number\">0</span>) = <span class=\"number\">88</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">88</span>+<span class=\"number\">3</span>); <span class=\"comment\">// '[' 不符合凯撒加密规则，因此需要先往回撤回一个密码表周期, 即 26 ，再按照密钥位移 +3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">88</span><span class=\"number\">-26</span>+<span class=\"number\">3</span>); <span class=\"comment\">// 'A' this is right!</span></span><br></pre></td></tr></table></figure></p>\n<p>解答：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rot13</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将一段话，转换为可以被处理的二维数组 eg: `hello, my wolrd!` =&gt; [`hello,`,`my` ,`world`];</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> stringArrays = str.split(<span class=\"string\">' '</span>).filter(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> !!member);</span><br><span class=\"line\">    <span class=\"comment\">// 再分别处理每一个 \"单词\"</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parseResult = stringArrays.map(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 将每个单词转换为数组，对每个字符进行处理</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(word).map(<span class=\"function\"><span class=\"params\">charator</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// A 对应的 ASCII =&gt; 65 , N 对应的 ASCII =&gt; 78</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> ZCode =  <span class=\"string\">'Z'</span>.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> current = charator.charCodeAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 非字母的处理方法</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(current &lt; <span class=\"number\">65</span> || current &gt; ZCode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> charator;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// </span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> dest = (charator.charCodeAt(<span class=\"number\">0</span>) + <span class=\"number\">13</span>) &gt; ZCode ? (charator.charCodeAt(<span class=\"number\">0</span>) <span class=\"number\">-26</span> + <span class=\"number\">13</span>): charator.charCodeAt(<span class=\"number\">0</span>) + <span class=\"number\">13</span>;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"built_in\">String</span>.fromCharCode(dest); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          </span><br><span class=\"line\">        &#125;).join(<span class=\"string\">''</span>); <span class=\"comment\">//单词中的每个字母拼接，不用空格</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;).join(<span class=\"string\">' '</span>); <span class=\"comment\">//多个单词拼接，需要空格</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseResult;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 另外，这里的 </span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>(current &lt; <span class=\"number\">65</span> || current &gt; ZCode) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> charator;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> 可以使用 <span class=\"built_in\">String</span>.match(<span class=\"regexp\">/\\w/g</span>) 来命中为数组，从而过滤掉非字母的标点符号</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这些算法都是最最最最最基本的算法，然而在解决这些问题中，还是出现了卡壳的地方。<br>算法还是得多练，人脑的逻辑思维，就得靠大量算法来优化和调教~<br>keep moving !</p>\n<p><b>😘觉得文章有用？点击下方打赏，鼓励作者更好的写作！</b></p>\n"}],"PostAsset":[{"_id":"source/_posts/Notice/comment.png","slug":"comment.png","post":"ck6hpsavi000sckufornwky81","modified":0,"renderable":0},{"_id":"source/_posts/Notice/notice.png","slug":"notice.png","post":"ck6hpsavi000sckufornwky81","modified":0,"renderable":0},{"_id":"source/_posts/koa-2/result.png","slug":"result.png","post":"ck6hpsaw00015ckuf089l8i91","modified":0,"renderable":0},{"_id":"source/_posts/koa-2/vscode.png","slug":"vscode.png","post":"ck6hpsaw00015ckuf089l8i91","modified":0,"renderable":0},{"_id":"source/_posts/koa-1/body-parser.gif","slug":"body-parser.gif","post":"ck6hpsaw20017ckufhuqdxz2f","modified":0,"renderable":0},{"_id":"source/_posts/koa-1/context.png","slug":"context.png","post":"ck6hpsaw20017ckufhuqdxz2f","modified":0,"renderable":0},{"_id":"source/_posts/koa-1/demo.gif","slug":"demo.gif","post":"ck6hpsaw20017ckufhuqdxz2f","modified":0,"renderable":0},{"_id":"source/_posts/koa-1/named-router.png","slug":"named-router.png","post":"ck6hpsaw20017ckufhuqdxz2f","modified":0,"renderable":0},{"_id":"source/_posts/koa-1/params-object.png","slug":"params-object.png","post":"ck6hpsaw20017ckufhuqdxz2f","modified":0,"renderable":0},{"_id":"source/_posts/koa-1/post.gif","slug":"post.gif","post":"ck6hpsaw20017ckufhuqdxz2f","modified":0,"renderable":0},{"_id":"source/_posts/koa-1/query-params.png","slug":"query-params.png","post":"ck6hpsaw20017ckufhuqdxz2f","modified":0,"renderable":0},{"_id":"source/_posts/hello-sql/sql.png","slug":"sql.png","post":"ck6hpsaxo003kckuf9jfagtzn","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck6hpsaun0004ckufebzjjikf","tag_id":"ck6hpsauu0008ckuf1zv1c1fv","_id":"ck6hpsav3000eckufwng37mlz"},{"post_id":"ck6hpsaus0006ckufic6q49zd","tag_id":"ck6hpsav3000dckuffw8gn8ta","_id":"ck6hpsava000jckufvjea2l8m"},{"post_id":"ck6hpsaux0009ckufzz9rbwb8","tag_id":"ck6hpsav3000dckuffw8gn8ta","_id":"ck6hpsave000nckufavjsi9eg"},{"post_id":"ck6hpsav1000bckufmag9rv61","tag_id":"ck6hpsav3000dckuffw8gn8ta","_id":"ck6hpsavh000rckufhr6k58ch"},{"post_id":"ck6hpsav2000cckufx0cwpn2v","tag_id":"ck6hpsavg000pckufauwygvfa","_id":"ck6hpsavs000yckufiektwtf1"},{"post_id":"ck6hpsav2000cckufx0cwpn2v","tag_id":"ck6hpsavi000tckufg1xqwm9v","_id":"ck6hpsavu0010ckuf7vm6a0kz"},{"post_id":"ck6hpsav4000fckufqyzjoybx","tag_id":"ck6hpsavq000wckuf40on5mb2","_id":"ck6hpsavy0013ckuflkgbjwm8"},{"post_id":"ck6hpsav6000gckuf92w3v70v","tag_id":"ck6hpsavx0012ckuffxqq9m63","_id":"ck6hpsaw30018ckufhnuw145b"},{"post_id":"ck6hpsav9000ickuf4qczly8u","tag_id":"ck6hpsavg000pckufauwygvfa","_id":"ck6hpsaw8001cckufdzo5ikm3"},{"post_id":"ck6hpsava000kckuf3zawr2qn","tag_id":"ck6hpsavx0012ckuffxqq9m63","_id":"ck6hpsawc001gckufabs9biln"},{"post_id":"ck6hpsavd000mckuf1bjfsf3n","tag_id":"ck6hpsawa001eckuf8xrn7xrj","_id":"ck6hpsawe001kckufscqt48oy"},{"post_id":"ck6hpsave000ockufx6syq27a","tag_id":"ck6hpsawd001ickuffnp7pwer","_id":"ck6hpsawj001rckufcbszn57p"},{"post_id":"ck6hpsave000ockufx6syq27a","tag_id":"ck6hpsawg001mckufguiob31f","_id":"ck6hpsawl001tckufs6yezphr"},{"post_id":"ck6hpsavg000qckufcqs1ap85","tag_id":"ck6hpsawj001qckuf34r31elj","_id":"ck6hpsawm001wckuf6pxwkvrz"},{"post_id":"ck6hpsavi000sckufornwky81","tag_id":"ck6hpsawm001vckufri7878i5","_id":"ck6hpsawn001yckuf25vwqivm"},{"post_id":"ck6hpsavn000uckufkh8vygkv","tag_id":"ck6hpsawn001xckufjgg26vc6","_id":"ck6hpsawo0020ckuf9hhxcnf0"},{"post_id":"ck6hpsavp000vckuf3zjzrmef","tag_id":"ck6hpsawn001zckufyfvfmgl6","_id":"ck6hpsawo0022ckufj69eqhgq"},{"post_id":"ck6hpsavr000xckuf467omzia","tag_id":"ck6hpsawg001mckufguiob31f","_id":"ck6hpsawp0024ckufk2uqlzqx"},{"post_id":"ck6hpsavs000zckufycmkjc55","tag_id":"ck6hpsawp0023ckuf63k85xtr","_id":"ck6hpsawq0026ckuf0yskuga5"},{"post_id":"ck6hpsavv0011ckuf9k47fwvc","tag_id":"ck6hpsawp0023ckuf63k85xtr","_id":"ck6hpsawr0028ckufd1ho35k3"},{"post_id":"ck6hpsavy0014ckuflafirplr","tag_id":"ck6hpsawg001mckufguiob31f","_id":"ck6hpsaws002bckuf5kgzy77q"},{"post_id":"ck6hpsavy0014ckuflafirplr","tag_id":"ck6hpsawr0029ckuf5un3lonj","_id":"ck6hpsaws002cckufs7h7vaph"},{"post_id":"ck6hpsaw00015ckuf089l8i91","tag_id":"ck6hpsaws002ackufdg9d1tn0","_id":"ck6hpsawt002eckuf9k4djtc8"},{"post_id":"ck6hpsaw20017ckufhuqdxz2f","tag_id":"ck6hpsaws002ackufdg9d1tn0","_id":"ck6hpsawt002gckufgt3qo4m2"},{"post_id":"ck6hpsaw40019ckuf8mdev2ry","tag_id":"ck6hpsawt002fckufdousf206","_id":"ck6hpsawu002ickufe28s387i"},{"post_id":"ck6hpsaw7001bckufgrs9rsu6","tag_id":"ck6hpsawu002hckufidhkrker","_id":"ck6hpsawu002kckuf7ybg6iv4"},{"post_id":"ck6hpsaw9001dckuf6mmk7pz5","tag_id":"ck6hpsawu002jckufjuexv9av","_id":"ck6hpsaww002mckuf4yrct18v"},{"post_id":"ck6hpsawb001fckufuc7zvf9f","tag_id":"ck6hpsawv002lckufycaekmna","_id":"ck6hpsawx002pckufvq02ud64"},{"post_id":"ck6hpsawb001fckufuc7zvf9f","tag_id":"ck6hpsaww002nckufw38i4lmw","_id":"ck6hpsawx002qckufcxrxrjmu"},{"post_id":"ck6hpsawc001hckuf35t6q00e","tag_id":"ck6hpsaww002ockuf86pwcaoz","_id":"ck6hpsawy002sckufwiqfm7rq"},{"post_id":"ck6hpsawe001jckufclla7w1d","tag_id":"ck6hpsawx002rckufnfftluxs","_id":"ck6hpsawy002uckufyla54mip"},{"post_id":"ck6hpsawf001lckuffachibqo","tag_id":"ck6hpsawg001mckufguiob31f","_id":"ck6hpsawz002wckuf31exk6u3"},{"post_id":"ck6hpsawg001nckufjhbpayep","tag_id":"ck6hpsawy002vckuf6v4z3apv","_id":"ck6hpsawz002yckufjm3d20mi"},{"post_id":"ck6hpsawh001ockufdvn488my","tag_id":"ck6hpsawz002xckufikhff8kc","_id":"ck6hpsax10031ckufib22x0o6"},{"post_id":"ck6hpsawh001ockufdvn488my","tag_id":"ck6hpsax0002zckufdlx4fp2h","_id":"ck6hpsax10032ckufxh25o1r0"},{"post_id":"ck6hpsawi001pckufrze9b0mr","tag_id":"ck6hpsax00030ckufe10y3ry1","_id":"ck6hpsax20035ckufi4r0iw5f"},{"post_id":"ck6hpsawi001pckufrze9b0mr","tag_id":"ck6hpsax10033ckufwdi7lhzo","_id":"ck6hpsax20036ckufkx0cf991"},{"post_id":"ck6hpsawk001sckufwfnl01bg","tag_id":"ck6hpsax10034ckuf1zv37a3b","_id":"ck6hpsax30038ckuffp0v58mj"},{"post_id":"ck6hpsawl001uckufolowzb1b","tag_id":"ck6hpsax20037ckufv7eldxnl","_id":"ck6hpsax30039ckufg5sru90g"},{"post_id":"ck6hpsaxd003ackufv6bri1tq","tag_id":"ck6hpsaxg003cckufwvy79962","_id":"ck6hpsaxl003hckufopsp1g1t"},{"post_id":"ck6hpsaxj003fckufrusnfuxv","tag_id":"ck6hpsauu0008ckuf1zv1c1fv","_id":"ck6hpsaxn003jckuffyqd5v1z"},{"post_id":"ck6hpsaxm003ickuf1zxpndm0","tag_id":"ck6hpsawx002rckufnfftluxs","_id":"ck6hpsaxp003mckufqtzn3vqe"},{"post_id":"ck6hpsaxf003bckufgnxvlnaj","tag_id":"ck6hpsawg001mckufguiob31f","_id":"ck6hpsaxr003ockufrs5vagzo"},{"post_id":"ck6hpsaxf003bckufgnxvlnaj","tag_id":"ck6hpsaxk003gckuf6kgdat6d","_id":"ck6hpsaxs003rckuf5w6clr87"},{"post_id":"ck6hpsaxg003dckufbgnx84la","tag_id":"ck6hpsaxp003lckuf7bpo5vjy","_id":"ck6hpsay1003zckufuhox2exq"},{"post_id":"ck6hpsaxg003dckufbgnx84la","tag_id":"ck6hpsaxs003qckufel2aro1f","_id":"ck6hpsay10040ckufat109gm0"},{"post_id":"ck6hpsaxg003dckufbgnx84la","tag_id":"ck6hpsaxw003uckuf1xznh12u","_id":"ck6hpsay20042ckufmbb2p37w"},{"post_id":"ck6hpsaxg003dckufbgnx84la","tag_id":"ck6hpsaxx003vckufzkvl9ik9","_id":"ck6hpsay20043ckufqlimd02a"},{"post_id":"ck6hpsaxg003dckufbgnx84la","tag_id":"ck6hpsaxy003wckufd5qhbggf","_id":"ck6hpsay30045ckufn1kevoa8"},{"post_id":"ck6hpsaxg003dckufbgnx84la","tag_id":"ck6hpsaxz003xckuf7dzofo9t","_id":"ck6hpsay40046ckuf8fryhv7w"},{"post_id":"ck6hpsaxh003eckufswndi8ke","tag_id":"ck6hpsay0003yckufikp4n832","_id":"ck6hpsay50048ckufz5icn1in"},{"post_id":"ck6hpsaxo003kckuf9jfagtzn","tag_id":"ck6hpsay10041ckufh5bteyl0","_id":"ck6hpsay50049ckuf5gv8eapy"},{"post_id":"ck6hpsaxq003nckufq4mhp0y0","tag_id":"ck6hpsay20044ckufmelkgwg9","_id":"ck6hpsay8004cckufoijtpuzg"},{"post_id":"ck6hpsaxq003nckufq4mhp0y0","tag_id":"ck6hpsay50047ckufq1swrcrr","_id":"ck6hpsay8004dckufgmdzdwi4"},{"post_id":"ck6hpsaxq003nckufq4mhp0y0","tag_id":"ck6hpsawg001mckufguiob31f","_id":"ck6hpsay8004fckufm7tx7vhg"},{"post_id":"ck6hpsaxq003nckufq4mhp0y0","tag_id":"ck6hpsay6004ackufu60bwr8y","_id":"ck6hpsay9004gckufy8yigpde"},{"post_id":"ck6hpsaxr003pckuff29bncnx","tag_id":"ck6hpsay7004bckufckdheuaf","_id":"ck6hpsay9004ickufou0gol7r"},{"post_id":"ck6hpsaxt003sckufwhcj8qp5","tag_id":"ck6hpsay8004eckufklvdecea","_id":"ck6hpsaya004mckufto2jps8n"},{"post_id":"ck6hpsaxt003sckufwhcj8qp5","tag_id":"ck6hpsay9004hckufeegvzryg","_id":"ck6hpsaya004nckuf0sfke0ak"},{"post_id":"ck6hpsaxt003sckufwhcj8qp5","tag_id":"ck6hpsawg001mckufguiob31f","_id":"ck6hpsayb004pckufk7ussphk"},{"post_id":"ck6hpsaxt003sckufwhcj8qp5","tag_id":"ck6hpsay9004jckufedjlecku","_id":"ck6hpsayb004qckufnb862mp1"},{"post_id":"ck6hpsaxt003sckufwhcj8qp5","tag_id":"ck6hpsauu0008ckuf1zv1c1fv","_id":"ck6hpsayc004sckuf1eikp6ib"},{"post_id":"ck6hpsaxt003sckufwhcj8qp5","tag_id":"ck6hpsay9004kckufwhi4coqr","_id":"ck6hpsayc004tckuff6qup94g"},{"post_id":"ck6hpsaxu003tckuf9geqn16n","tag_id":"ck6hpsaya004lckuffu6n430j","_id":"ck6hpsayd004vckufw709h4vt"},{"post_id":"ck6hpsaxu003tckuf9geqn16n","tag_id":"ck6hpsaya004ockufpu853quv","_id":"ck6hpsayd004wckufwc4tagf8"},{"post_id":"ck6hpsaxu003tckuf9geqn16n","tag_id":"ck6hpsawg001mckufguiob31f","_id":"ck6hpsaye004xckufm1oc0uh5"},{"post_id":"ck6hpsaxu003tckuf9geqn16n","tag_id":"ck6hpsay9004kckufwhi4coqr","_id":"ck6hpsaye004yckufrg3rj0kh"},{"post_id":"ck6hpsaxu003tckuf9geqn16n","tag_id":"ck6hpsayd004uckufmy2ntibq","_id":"ck6hpsaye004zckufq11kp2ui"},{"post_id":"ck6hpsayn0050ckufj1bza67p","tag_id":"ck6hpsawj001qckuf34r31elj","_id":"ck6hpsayp0053ckuf536e247x"}],"Tag":[{"name":"ajax","_id":"ck6hpsauu0008ckuf1zv1c1fv"},{"name":"angularjs","_id":"ck6hpsav3000dckuffw8gn8ta"},{"name":"css","_id":"ck6hpsavg000pckufauwygvfa"},{"name":"electron","_id":"ck6hpsavi000tckufg1xqwm9v"},{"name":"Express","_id":"ck6hpsavq000wckuf40on5mb2"},{"name":"git","_id":"ck6hpsavx0012ckuffxqq9m63"},{"name":"html5","_id":"ck6hpsawa001eckuf8xrn7xrj"},{"name":"node","_id":"ck6hpsawd001ickuffnp7pwer"},{"name":"javascript","_id":"ck6hpsawg001mckufguiob31f"},{"name":"算法","_id":"ck6hpsawj001qckuf34r31elj"},{"name":"notice","_id":"ck6hpsawm001vckufri7878i5"},{"name":"nodejs","_id":"ck6hpsawn001xckufjgg26vc6"},{"name":"php","_id":"ck6hpsawn001zckufyfvfmgl6"},{"name":"http","_id":"ck6hpsawp0023ckuf63k85xtr"},{"name":"plug-in","_id":"ck6hpsawr0029ckuf5un3lonj"},{"name":"koa","_id":"ck6hpsaws002ackufdg9d1tn0"},{"name":"angular","_id":"ck6hpsawt002fckufdousf206"},{"name":"rxjs","_id":"ck6hpsawu002hckufidhkrker"},{"name":"正则","_id":"ck6hpsawu002jckufjuexv9av"},{"name":"Travis-CI","_id":"ck6hpsawv002lckufycaekmna"},{"name":"Hexo","_id":"ck6hpsaww002nckufw38i4lmw"},{"name":"jquery","_id":"ck6hpsaww002ockuf86pwcaoz"},{"name":"css3","_id":"ck6hpsawx002rckufnfftluxs"},{"name":"bootstrap","_id":"ck6hpsawy002vckuf6v4z3apv"},{"name":"HEXO","_id":"ck6hpsawz002xckufikhff8kc"},{"name":"动态部署","_id":"ck6hpsax0002zckufdlx4fp2h"},{"name":"动态简历","_id":"ck6hpsax00030ckufe10y3ry1"},{"name":"Github部署","_id":"ck6hpsax10033ckufwdi7lhzo"},{"name":"杂谈","_id":"ck6hpsax10034ckuf1zv37a3b"},{"name":"ubuntu","_id":"ck6hpsax20037ckufv7eldxnl"},{"name":"腾讯SNG-IMWeb面试","_id":"ck6hpsaxg003cckufwvy79962"},{"name":"decorator","_id":"ck6hpsaxk003gckuf6kgdat6d"},{"name":"android","_id":"ck6hpsaxp003lckuf7bpo5vjy"},{"name":"SDK","_id":"ck6hpsaxs003qckufel2aro1f"},{"name":"JDK","_id":"ck6hpsaxw003uckuf1xznh12u"},{"name":"APP","_id":"ck6hpsaxx003vckufzkvl9ik9"},{"name":"IONIC","_id":"ck6hpsaxy003wckufd5qhbggf"},{"name":"gradle","_id":"ck6hpsaxz003xckuf7dzofo9t"},{"name":"Webpack","_id":"ck6hpsay0003yckufikp4n832"},{"name":"sql","_id":"ck6hpsay10041ckufh5bteyl0"},{"name":"typescript","_id":"ck6hpsay20044ckufmelkgwg9"},{"name":"编译","_id":"ck6hpsay50047ckufq1swrcrr"},{"name":"工具","_id":"ck6hpsay6004ackufu60bwr8y"},{"name":"百度share","_id":"ck6hpsay7004bckufckdheuaf"},{"name":"腾讯","_id":"ck6hpsay8004eckufklvdecea"},{"name":"面试","_id":"ck6hpsay9004hckufeegvzryg"},{"name":"浏览器兼容","_id":"ck6hpsay9004jckufedjlecku"},{"name":"原理","_id":"ck6hpsay9004kckufwhi4coqr"},{"name":"重绘","_id":"ck6hpsaya004lckuffu6n430j"},{"name":"冲排","_id":"ck6hpsaya004ockufpu853quv"},{"name":"腾讯面试","_id":"ck6hpsayd004uckufmy2ntibq"}]}}